
Project-Interval.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800b770  0800b770  0000c770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd6c  0800bd6c  0000dd8c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd6c  0800bd6c  0000cd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd74  0800bd74  0000dd8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd74  0800bd74  0000cd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd78  0800bd78  0000cd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000d8c  20000000  0800bd7c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000d8c  0800cb08  0000dd8c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001174  0800cb08  0000e174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000dd8c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e60  00000000  00000000  0000ddbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a80  00000000  00000000  00020c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  000236a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb2  00000000  00000000  00024710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282fa  00000000  00000000  000253c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c3b  00000000  00000000  0004d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f30c0  00000000  00000000  000622f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001553b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c80  00000000  00000000  001553fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0015b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000d8c 	.word	0x20000d8c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b758 	.word	0x0800b758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000d90 	.word	0x20000d90
 80001cc:	0800b758 	.word	0x0800b758

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__io_putchar>:
    "AT+HTTPACTION=1\r",
    "AT+HTTPTERM\r",
    "AT+SAPBR=0,1\r"
};
int __io_putchar(int ch)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b0a      	cmp	r3, #10
 8000ff0:	d109      	bne.n	8001006 <__io_putchar+0x22>
    uint8_t ch2 = '\r';
 8000ff2:	230d      	movs	r3, #13
 8000ff4:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000ff6:	f107 010f 	add.w	r1, r7, #15
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	2201      	movs	r2, #1
 8001000:	4807      	ldr	r0, [pc, #28]	@ (8001020 <__io_putchar+0x3c>)
 8001002:	f003 fe13 	bl	8004c2c <HAL_UART_Transmit>
  }
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001006:	1d39      	adds	r1, r7, #4
 8001008:	f04f 33ff 	mov.w	r3, #4294967295
 800100c:	2201      	movs	r2, #1
 800100e:	4804      	ldr	r0, [pc, #16]	@ (8001020 <__io_putchar+0x3c>)
 8001010:	f003 fe0c 	bl	8004c2c <HAL_UART_Transmit>
  return 1;
 8001014:	2301      	movs	r3, #1
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000ea8 	.word	0x20000ea8

08001024 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001028:	b093      	sub	sp, #76	@ 0x4c
 800102a:	af08      	add	r7, sp, #32
 800102c:	6078      	str	r0, [r7, #4]
  //Sim800l repeats the command of the user so this line skips it
  if(read == false && Rx_bit == '\n') read = true;
 800102e:	4b9b      	ldr	r3, [pc, #620]	@ (800129c <HAL_UART_RxCpltCallback+0x278>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	f083 0301 	eor.w	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d007      	beq.n	800104c <HAL_UART_RxCpltCallback+0x28>
 800103c:	4b98      	ldr	r3, [pc, #608]	@ (80012a0 <HAL_UART_RxCpltCallback+0x27c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b0a      	cmp	r3, #10
 8001042:	d103      	bne.n	800104c <HAL_UART_RxCpltCallback+0x28>
 8001044:	4b95      	ldr	r3, [pc, #596]	@ (800129c <HAL_UART_RxCpltCallback+0x278>)
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
 800104a:	e11d      	b.n	8001288 <HAL_UART_RxCpltCallback+0x264>
  else if(read == true){
 800104c:	4b93      	ldr	r3, [pc, #588]	@ (800129c <HAL_UART_RxCpltCallback+0x278>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 8119 	beq.w	8001288 <HAL_UART_RxCpltCallback+0x264>
    Rx_data[pos++] = Rx_bit;
 8001056:	4b93      	ldr	r3, [pc, #588]	@ (80012a4 <HAL_UART_RxCpltCallback+0x280>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	4991      	ldr	r1, [pc, #580]	@ (80012a4 <HAL_UART_RxCpltCallback+0x280>)
 800105e:	600a      	str	r2, [r1, #0]
 8001060:	4a8f      	ldr	r2, [pc, #572]	@ (80012a0 <HAL_UART_RxCpltCallback+0x27c>)
 8001062:	7811      	ldrb	r1, [r2, #0]
 8001064:	4a90      	ldr	r2, [pc, #576]	@ (80012a8 <HAL_UART_RxCpltCallback+0x284>)
 8001066:	54d1      	strb	r1, [r2, r3]
    if(Rx_bit == '\n'){
 8001068:	4b8d      	ldr	r3, [pc, #564]	@ (80012a0 <HAL_UART_RxCpltCallback+0x27c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b0a      	cmp	r3, #10
 800106e:	f040 810b 	bne.w	8001288 <HAL_UART_RxCpltCallback+0x264>
      HAL_UART_Transmit(&huart2, (uint8_t *)Rx_data, pos, 1000);
 8001072:	4b8c      	ldr	r3, [pc, #560]	@ (80012a4 <HAL_UART_RxCpltCallback+0x280>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	b29a      	uxth	r2, r3
 8001078:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107c:	498a      	ldr	r1, [pc, #552]	@ (80012a8 <HAL_UART_RxCpltCallback+0x284>)
 800107e:	488b      	ldr	r0, [pc, #556]	@ (80012ac <HAL_UART_RxCpltCallback+0x288>)
 8001080:	f003 fdd4 	bl	8004c2c <HAL_UART_Transmit>
      //Read latitude and longitude
      if(msg == 4 && Rx_data[0] == '+'){
 8001084:	4b8a      	ldr	r3, [pc, #552]	@ (80012b0 <HAL_UART_RxCpltCallback+0x28c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d115      	bne.n	80010b8 <HAL_UART_RxCpltCallback+0x94>
 800108c:	4b86      	ldr	r3, [pc, #536]	@ (80012a8 <HAL_UART_RxCpltCallback+0x284>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b2b      	cmp	r3, #43	@ 0x2b
 8001092:	d111      	bne.n	80010b8 <HAL_UART_RxCpltCallback+0x94>
	HAL_UART_Receive(&huart1, (uint8_t*)Rx_placeholder, 6, 1000);
 8001094:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001098:	2206      	movs	r2, #6
 800109a:	4986      	ldr	r1, [pc, #536]	@ (80012b4 <HAL_UART_RxCpltCallback+0x290>)
 800109c:	4886      	ldr	r0, [pc, #536]	@ (80012b8 <HAL_UART_RxCpltCallback+0x294>)
 800109e:	f003 fe4e 	bl	8004d3e <HAL_UART_Receive>
	printf("Komunikacja udana - LOCS: \n");
 80010a2:	4886      	ldr	r0, [pc, #536]	@ (80012bc <HAL_UART_RxCpltCallback+0x298>)
 80010a4:	f006 faaa 	bl	80075fc <puts>
	strcpy(Locs,Rx_data);
 80010a8:	497f      	ldr	r1, [pc, #508]	@ (80012a8 <HAL_UART_RxCpltCallback+0x284>)
 80010aa:	4885      	ldr	r0, [pc, #532]	@ (80012c0 <HAL_UART_RxCpltCallback+0x29c>)
 80010ac:	f006 fc87 	bl	80079be <strcpy>
	pos = 0;
 80010b0:	4b7c      	ldr	r3, [pc, #496]	@ (80012a4 <HAL_UART_RxCpltCallback+0x280>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e018      	b.n	80010ea <HAL_UART_RxCpltCallback+0xc6>
      }
      //read number
      else if(msg == 5 && Rx_data[0] == '+'){
 80010b8:	4b7d      	ldr	r3, [pc, #500]	@ (80012b0 <HAL_UART_RxCpltCallback+0x28c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d114      	bne.n	80010ea <HAL_UART_RxCpltCallback+0xc6>
 80010c0:	4b79      	ldr	r3, [pc, #484]	@ (80012a8 <HAL_UART_RxCpltCallback+0x284>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b2b      	cmp	r3, #43	@ 0x2b
 80010c6:	d110      	bne.n	80010ea <HAL_UART_RxCpltCallback+0xc6>
	HAL_UART_Receive(&huart1, (uint8_t*)Rx_placeholder, 6, 1000);
 80010c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010cc:	2206      	movs	r2, #6
 80010ce:	4979      	ldr	r1, [pc, #484]	@ (80012b4 <HAL_UART_RxCpltCallback+0x290>)
 80010d0:	4879      	ldr	r0, [pc, #484]	@ (80012b8 <HAL_UART_RxCpltCallback+0x294>)
 80010d2:	f003 fe34 	bl	8004d3e <HAL_UART_Receive>
	printf("Komunikacja udana - tel_num\n");
 80010d6:	487b      	ldr	r0, [pc, #492]	@ (80012c4 <HAL_UART_RxCpltCallback+0x2a0>)
 80010d8:	f006 fa90 	bl	80075fc <puts>
	strcpy(Num,Rx_data);
 80010dc:	4972      	ldr	r1, [pc, #456]	@ (80012a8 <HAL_UART_RxCpltCallback+0x284>)
 80010de:	487a      	ldr	r0, [pc, #488]	@ (80012c8 <HAL_UART_RxCpltCallback+0x2a4>)
 80010e0:	f006 fc6d 	bl	80079be <strcpy>
	pos = 0;
 80010e4:	4b6f      	ldr	r3, [pc, #444]	@ (80012a4 <HAL_UART_RxCpltCallback+0x280>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
      }
      //This line makes program wait for http response
      if(msg == 10 && ((Rx_data[0] == 'O' && Rx_data[1] == 'K') || Rx_data[0] == '\r')) {
 80010ea:	4b71      	ldr	r3, [pc, #452]	@ (80012b0 <HAL_UART_RxCpltCallback+0x28c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b0a      	cmp	r3, #10
 80010f0:	d10f      	bne.n	8001112 <HAL_UART_RxCpltCallback+0xee>
 80010f2:	4b6d      	ldr	r3, [pc, #436]	@ (80012a8 <HAL_UART_RxCpltCallback+0x284>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b4f      	cmp	r3, #79	@ 0x4f
 80010f8:	d103      	bne.n	8001102 <HAL_UART_RxCpltCallback+0xde>
 80010fa:	4b6b      	ldr	r3, [pc, #428]	@ (80012a8 <HAL_UART_RxCpltCallback+0x284>)
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	2b4b      	cmp	r3, #75	@ 0x4b
 8001100:	d003      	beq.n	800110a <HAL_UART_RxCpltCallback+0xe6>
 8001102:	4b69      	ldr	r3, [pc, #420]	@ (80012a8 <HAL_UART_RxCpltCallback+0x284>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b0d      	cmp	r3, #13
 8001108:	d103      	bne.n	8001112 <HAL_UART_RxCpltCallback+0xee>
	  pos = 0;
 800110a:	4b66      	ldr	r3, [pc, #408]	@ (80012a4 <HAL_UART_RxCpltCallback+0x280>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e0ba      	b.n	8001288 <HAL_UART_RxCpltCallback+0x264>
      }
      //Here it writes next functions, and sets the post url
      else{
	printf("Komunikacja udana %d: \n",msg);
 8001112:	4b67      	ldr	r3, [pc, #412]	@ (80012b0 <HAL_UART_RxCpltCallback+0x28c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	486c      	ldr	r0, [pc, #432]	@ (80012cc <HAL_UART_RxCpltCallback+0x2a8>)
 800111a:	f006 fa07 	bl	800752c <iprintf>
	pos = 0; read = false; msg++;
 800111e:	4b61      	ldr	r3, [pc, #388]	@ (80012a4 <HAL_UART_RxCpltCallback+0x280>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	4b5d      	ldr	r3, [pc, #372]	@ (800129c <HAL_UART_RxCpltCallback+0x278>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	4b61      	ldr	r3, [pc, #388]	@ (80012b0 <HAL_UART_RxCpltCallback+0x28c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4a5f      	ldr	r2, [pc, #380]	@ (80012b0 <HAL_UART_RxCpltCallback+0x28c>)
 8001132:	6013      	str	r3, [r2, #0]
	if(msg == 9){
 8001134:	4b5e      	ldr	r3, [pc, #376]	@ (80012b0 <HAL_UART_RxCpltCallback+0x28c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b09      	cmp	r3, #9
 800113a:	f040 8085 	bne.w	8001248 <HAL_UART_RxCpltCallback+0x224>
 800113e:	466b      	mov	r3, sp
 8001140:	603b      	str	r3, [r7, #0]
	  float latitude = 0.0, longitude = 0.0;
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
	  char *numberStart = strstr(Num,"\"+");
 800114e:	4960      	ldr	r1, [pc, #384]	@ (80012d0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001150:	485d      	ldr	r0, [pc, #372]	@ (80012c8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001152:	f006 fba7 	bl	80078a4 <strstr>
 8001156:	6278      	str	r0, [r7, #36]	@ 0x24
	  char *numberEnd = strstr(numberStart + 2,"\"");
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	3302      	adds	r3, #2
 800115c:	2122      	movs	r1, #34	@ 0x22
 800115e:	4618      	mov	r0, r3
 8001160:	f006 fb80 	bl	8007864 <strchr>
 8001164:	6238      	str	r0, [r7, #32]
	  size_t len = numberEnd - numberStart;
 8001166:	6a3a      	ldr	r2, [r7, #32]
 8001168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	61fb      	str	r3, [r7, #28]
	  char num[len + 1];
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	1c59      	adds	r1, r3, #1
 8001172:	460b      	mov	r3, r1
 8001174:	3b01      	subs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	2300      	movs	r3, #0
 800117a:	4688      	mov	r8, r1
 800117c:	4699      	mov	r9, r3
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800118a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800118e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001192:	2300      	movs	r3, #0
 8001194:	460c      	mov	r4, r1
 8001196:	461d      	mov	r5, r3
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	00eb      	lsls	r3, r5, #3
 80011a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011a6:	00e2      	lsls	r2, r4, #3
 80011a8:	1dcb      	adds	r3, r1, #7
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	ebad 0d03 	sub.w	sp, sp, r3
 80011b2:	ab08      	add	r3, sp, #32
 80011b4:	3300      	adds	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
	  strncpy(num, numberStart, len);
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011bc:	6978      	ldr	r0, [r7, #20]
 80011be:	f006 fb5e 	bl	800787e <strncpy>
	  num[len] = '\0';
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	4413      	add	r3, r2
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
	  strcpy(num, &num[1]);
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4619      	mov	r1, r3
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f006 fbf3 	bl	80079be <strcpy>
	  sscanf(Locs, "+CLBS: 0,%f,%f,", &longitude, &latitude);
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	493c      	ldr	r1, [pc, #240]	@ (80012d4 <HAL_UART_RxCpltCallback+0x2b0>)
 80011e2:	4837      	ldr	r0, [pc, #220]	@ (80012c0 <HAL_UART_RxCpltCallback+0x29c>)
 80011e4:	f006 fa32 	bl	800764c <siscanf>
	  sprintf(Tx_data[msg], "AT+HTTPPARA=URL,\"http://185.201.114.232:5000/NewData?num=%s&latitude=%.6f&longitude=%.6f&temp=%.2f&humi=%.2f\"\r",num,latitude,longitude,temp,humi);
 80011e8:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <HAL_UART_RxCpltCallback+0x28c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	22c8      	movs	r2, #200	@ 0xc8
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	4a39      	ldr	r2, [pc, #228]	@ (80012d8 <HAL_UART_RxCpltCallback+0x2b4>)
 80011f4:	189e      	adds	r6, r3, r2
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f9a5 	bl	8000548 <__aeabi_f2d>
 80011fe:	4604      	mov	r4, r0
 8001200:	460d      	mov	r5, r1
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f99f 	bl	8000548 <__aeabi_f2d>
 800120a:	4680      	mov	r8, r0
 800120c:	4689      	mov	r9, r1
 800120e:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <HAL_UART_RxCpltCallback+0x2b8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f998 	bl	8000548 <__aeabi_f2d>
 8001218:	4682      	mov	sl, r0
 800121a:	468b      	mov	fp, r1
 800121c:	4b30      	ldr	r3, [pc, #192]	@ (80012e0 <HAL_UART_RxCpltCallback+0x2bc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f991 	bl	8000548 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800122e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001232:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001236:	e9cd 4500 	strd	r4, r5, [sp]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4929      	ldr	r1, [pc, #164]	@ (80012e4 <HAL_UART_RxCpltCallback+0x2c0>)
 800123e:	4630      	mov	r0, r6
 8001240:	f006 f9e4 	bl	800760c <siprintf>
 8001244:	f8d7 d000 	ldr.w	sp, [r7]
	}
	if(msg < 13)
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <HAL_UART_RxCpltCallback+0x28c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	dc18      	bgt.n	8001282 <HAL_UART_RxCpltCallback+0x25e>
	HAL_UART_Transmit_IT(&huart1, (uint8_t *)Tx_data[msg], strlen(Tx_data[msg]));
 8001250:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <HAL_UART_RxCpltCallback+0x28c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	22c8      	movs	r2, #200	@ 0xc8
 8001256:	fb02 f303 	mul.w	r3, r2, r3
 800125a:	4a1f      	ldr	r2, [pc, #124]	@ (80012d8 <HAL_UART_RxCpltCallback+0x2b4>)
 800125c:	189c      	adds	r4, r3, r2
 800125e:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <HAL_UART_RxCpltCallback+0x28c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	22c8      	movs	r2, #200	@ 0xc8
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <HAL_UART_RxCpltCallback+0x2b4>)
 800126a:	4413      	add	r3, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe ffff 	bl	8000270 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29b      	uxth	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	4621      	mov	r1, r4
 800127a:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <HAL_UART_RxCpltCallback+0x294>)
 800127c:	f003 fe28 	bl	8004ed0 <HAL_UART_Transmit_IT>
 8001280:	e002      	b.n	8001288 <HAL_UART_RxCpltCallback+0x264>
	else completed = true;
 8001282:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <HAL_UART_RxCpltCallback+0x2c4>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]

      }
    }
  }
  //keep receving data
  HAL_UART_Receive_IT(&huart1, &Rx_bit, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	4905      	ldr	r1, [pc, #20]	@ (80012a0 <HAL_UART_RxCpltCallback+0x27c>)
 800128c:	480a      	ldr	r0, [pc, #40]	@ (80012b8 <HAL_UART_RxCpltCallback+0x294>)
 800128e:	f003 fe7d 	bl	8004f8c <HAL_UART_Receive_IT>

}
 8001292:	bf00      	nop
 8001294:	372c      	adds	r7, #44	@ 0x2c
 8001296:	46bd      	mov	sp, r7
 8001298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800129c:	20001015 	.word	0x20001015
 80012a0:	20000f30 	.word	0x20000f30
 80012a4:	2000100c 	.word	0x2000100c
 80012a8:	20000f40 	.word	0x20000f40
 80012ac:	20000ea8 	.word	0x20000ea8
 80012b0:	20001010 	.word	0x20001010
 80012b4:	20000f34 	.word	0x20000f34
 80012b8:	20000e20 	.word	0x20000e20
 80012bc:	0800b770 	.word	0x0800b770
 80012c0:	20000fa4 	.word	0x20000fa4
 80012c4:	0800b78c 	.word	0x0800b78c
 80012c8:	20000fd8 	.word	0x20000fd8
 80012cc:	0800b7a8 	.word	0x0800b7a8
 80012d0:	0800b7c0 	.word	0x0800b7c0
 80012d4:	0800b7c4 	.word	0x0800b7c4
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20001018 	.word	0x20001018
 80012e0:	2000101c 	.word	0x2000101c
 80012e4:	0800b7d4 	.word	0x0800b7d4
 80012e8:	20001014 	.word	0x20001014

080012ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b08d      	sub	sp, #52	@ 0x34
 8001304:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001306:	f000 fd6c 	bl	8001de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130a:	f000 f929 	bl	8001560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130e:	f000 fa5b 	bl	80017c8 <MX_GPIO_Init>
  MX_RTC_Init();
 8001312:	f000 f9c7 	bl	80016a4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001316:	f000 fa27 	bl	8001768 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800131a:	f000 f983 	bl	8001624 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800131e:	f000 f9f3 	bl	8001708 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  const uint16_t addr = 0b0111000; //0x38
 8001322:	2338      	movs	r3, #56	@ 0x38
 8001324:	84fb      	strh	r3, [r7, #38]	@ 0x26
  const int addr_wr = addr<<1;
 8001326:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	623b      	str	r3, [r7, #32]
  const int addr_rc = addr_wr + 1;
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	3301      	adds	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
  uint32_t temp_data;
  uint8_t init[3] = {0xbe, 0x08, 0x00};
 8001332:	4a77      	ldr	r2, [pc, #476]	@ (8001510 <main+0x210>)
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	4611      	mov	r1, r2
 800133c:	8019      	strh	r1, [r3, #0]
 800133e:	3302      	adds	r3, #2
 8001340:	0c12      	lsrs	r2, r2, #16
 8001342:	701a      	strb	r2, [r3, #0]
  uint8_t measure[3] = {0xac, 0x33, 0x00};
 8001344:	4a73      	ldr	r2, [pc, #460]	@ (8001514 <main+0x214>)
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	4611      	mov	r1, r2
 800134e:	8019      	strh	r1, [r3, #0]
 8001350:	3302      	adds	r3, #2
 8001352:	0c12      	lsrs	r2, r2, #16
 8001354:	701a      	strb	r2, [r3, #0]
  uint8_t data[6];
  uint32_t time_stamp = HAL_GetTick();
 8001356:	f000 fdad 	bl	8001eb4 <HAL_GetTick>
 800135a:	61b8      	str	r0, [r7, #24]

  HAL_I2C_Master_Receive(&hi2c1, addr_rc, (uint8_t *)data, 6, 1000);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	b299      	uxth	r1, r3
 8001360:	1d3a      	adds	r2, r7, #4
 8001362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2306      	movs	r3, #6
 800136a:	486b      	ldr	r0, [pc, #428]	@ (8001518 <main+0x218>)
 800136c:	f001 fab4 	bl	80028d8 <HAL_I2C_Master_Receive>
  if((data[0] >> 3 & 1) != 1){
 8001370:	793b      	ldrb	r3, [r7, #4]
 8001372:	08db      	lsrs	r3, r3, #3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10d      	bne.n	800139a <main+0x9a>
    printf("Kalibracja\n");
 800137e:	4867      	ldr	r0, [pc, #412]	@ (800151c <main+0x21c>)
 8001380:	f006 f93c 	bl	80075fc <puts>
    HAL_I2C_Master_Transmit(&hi2c1, addr_wr, (uint8_t *)init, 3, 1000);
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	b299      	uxth	r1, r3
 8001388:	f107 0210 	add.w	r2, r7, #16
 800138c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2303      	movs	r3, #3
 8001394:	4860      	ldr	r0, [pc, #384]	@ (8001518 <main+0x218>)
 8001396:	f001 f987 	bl	80026a8 <HAL_I2C_Master_Transmit>
  }
  time_stamp = HAL_GetTick();
 800139a:	f000 fd8b 	bl	8001eb4 <HAL_GetTick>
 800139e:	61b8      	str	r0, [r7, #24]
  while(HAL_GetTick() - time_stamp < 10) ;
 80013a0:	bf00      	nop
 80013a2:	f000 fd87 	bl	8001eb4 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	d9f8      	bls.n	80013a2 <main+0xa2>
  HAL_I2C_Master_Transmit(&hi2c1, addr_wr, (uint8_t *)measure, 3, 1000);
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	b299      	uxth	r1, r3
 80013b4:	f107 020c 	add.w	r2, r7, #12
 80013b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2303      	movs	r3, #3
 80013c0:	4855      	ldr	r0, [pc, #340]	@ (8001518 <main+0x218>)
 80013c2:	f001 f971 	bl	80026a8 <HAL_I2C_Master_Transmit>
  time_stamp = HAL_GetTick();
 80013c6:	f000 fd75 	bl	8001eb4 <HAL_GetTick>
 80013ca:	61b8      	str	r0, [r7, #24]
  while(HAL_GetTick() - time_stamp < 85) ;
 80013cc:	bf00      	nop
 80013ce:	f000 fd71 	bl	8001eb4 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b54      	cmp	r3, #84	@ 0x54
 80013da:	d9f8      	bls.n	80013ce <main+0xce>
  HAL_I2C_Master_Receive(&hi2c1, addr_rc, (uint8_t *)data, 6, 1000);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	b299      	uxth	r1, r3
 80013e0:	1d3a      	adds	r2, r7, #4
 80013e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2306      	movs	r3, #6
 80013ea:	484b      	ldr	r0, [pc, #300]	@ (8001518 <main+0x218>)
 80013ec:	f001 fa74 	bl	80028d8 <HAL_I2C_Master_Receive>
  //AHT20 COMM FINISHED

  //check control byte and calculate values
  if(((data[0] >> 7) & 1) == 0) {
 80013f0:	793b      	ldrb	r3, [r7, #4]
 80013f2:	09db      	lsrs	r3, r3, #7
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d13e      	bne.n	800147c <main+0x17c>
    printf("Komunikacja udana \n");
 80013fe:	4848      	ldr	r0, [pc, #288]	@ (8001520 <main+0x220>)
 8001400:	f006 f8fc 	bl	80075fc <puts>
    temp_data = ((uint32_t)data[3] << 16) + ((uint32_t)data[4] << 8) + (uint32_t)data[5];
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	041a      	lsls	r2, r3, #16
 8001408:	7a3b      	ldrb	r3, [r7, #8]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	4413      	add	r3, r2
 800140e:	7a7a      	ldrb	r2, [r7, #9]
 8001410:	4413      	add	r3, r2
 8001412:	617b      	str	r3, [r7, #20]
    temp_data = temp_data & (~(0xFFF00000));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800141a:	617b      	str	r3, [r7, #20]
    temp = ((float)temp_data/1048576) * 200 - 50;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001426:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8001524 <main+0x224>
 800142a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142e:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001528 <main+0x228>
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800152c <main+0x22c>
 800143a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800143e:	4b3c      	ldr	r3, [pc, #240]	@ (8001530 <main+0x230>)
 8001440:	edc3 7a00 	vstr	s15, [r3]
    temp_data = ((uint32_t)data[1] << 16) + ((uint32_t)data[2] << 8) + (uint32_t)data[3];
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	041a      	lsls	r2, r3, #16
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	4413      	add	r3, r2
 800144e:	79fa      	ldrb	r2, [r7, #7]
 8001450:	4413      	add	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
    temp_data = temp_data >> 4;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	617b      	str	r3, [r7, #20]
    humi = ((float)temp_data/1048576) * 100;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001464:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001524 <main+0x224>
 8001468:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001534 <main+0x234>
 8001470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001474:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <main+0x238>)
 8001476:	edc3 7a00 	vstr	s15, [r3]
 800147a:	e002      	b.n	8001482 <main+0x182>
  }
  else
  {
    printf("Komunikacja nie udana\n");
 800147c:	482f      	ldr	r0, [pc, #188]	@ (800153c <main+0x23c>)
 800147e:	f006 f8bd 	bl	80075fc <puts>
  }
  printf("Temperatura wynosi %f *C\n", temp);
 8001482:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <main+0x230>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f85e 	bl	8000548 <__aeabi_f2d>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	482b      	ldr	r0, [pc, #172]	@ (8001540 <main+0x240>)
 8001492:	f006 f84b 	bl	800752c <iprintf>
  printf("Wilgotnosc  wynosi %f %%\n", humi);
 8001496:	4b28      	ldr	r3, [pc, #160]	@ (8001538 <main+0x238>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f854 	bl	8000548 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4827      	ldr	r0, [pc, #156]	@ (8001544 <main+0x244>)
 80014a6:	f006 f841 	bl	800752c <iprintf>


  HAL_UART_Receive_IT(&huart1, &Rx_bit, 1);
 80014aa:	2201      	movs	r2, #1
 80014ac:	4926      	ldr	r1, [pc, #152]	@ (8001548 <main+0x248>)
 80014ae:	4827      	ldr	r0, [pc, #156]	@ (800154c <main+0x24c>)
 80014b0:	f003 fd6c 	bl	8004f8c <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)Tx_data[msg], strlen(Tx_data[msg]));
 80014b4:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <main+0x250>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	22c8      	movs	r2, #200	@ 0xc8
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	4a25      	ldr	r2, [pc, #148]	@ (8001554 <main+0x254>)
 80014c0:	189c      	adds	r4, r3, r2
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <main+0x250>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	22c8      	movs	r2, #200	@ 0xc8
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <main+0x254>)
 80014ce:	4413      	add	r3, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe fecd 	bl	8000270 <strlen>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b29b      	uxth	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	4621      	mov	r1, r4
 80014de:	481b      	ldr	r0, [pc, #108]	@ (800154c <main+0x24c>)
 80014e0:	f003 fcf6 	bl	8004ed0 <HAL_UART_Transmit_IT>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2120      	movs	r1, #32
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ec:	f001 f828 	bl	8002540 <HAL_GPIO_WritePin>
  while(!completed);
 80014f0:	bf00      	nop
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <main+0x258>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	f083 0301 	eor.w	r3, r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f8      	bne.n	80014f2 <main+0x1f2>
  printf("Going to sleep\n");
 8001500:	4816      	ldr	r0, [pc, #88]	@ (800155c <main+0x25c>)
 8001502:	f006 f87b 	bl	80075fc <puts>
  HAL_PWR_EnterSTANDBYMode();
 8001506:	f001 fe17 	bl	8003138 <HAL_PWR_EnterSTANDBYMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800150a:	bf00      	nop
 800150c:	e7fd      	b.n	800150a <main+0x20a>
 800150e:	bf00      	nop
 8001510:	0800b8c4 	.word	0x0800b8c4
 8001514:	0800b8c8 	.word	0x0800b8c8
 8001518:	20000da8 	.word	0x20000da8
 800151c:	0800b844 	.word	0x0800b844
 8001520:	0800b850 	.word	0x0800b850
 8001524:	49800000 	.word	0x49800000
 8001528:	43480000 	.word	0x43480000
 800152c:	42480000 	.word	0x42480000
 8001530:	20001018 	.word	0x20001018
 8001534:	42c80000 	.word	0x42c80000
 8001538:	2000101c 	.word	0x2000101c
 800153c:	0800b864 	.word	0x0800b864
 8001540:	0800b87c 	.word	0x0800b87c
 8001544:	0800b898 	.word	0x0800b898
 8001548:	20000f30 	.word	0x20000f30
 800154c:	20000e20 	.word	0x20000e20
 8001550:	20001010 	.word	0x20001010
 8001554:	20000000 	.word	0x20000000
 8001558:	20001014 	.word	0x20001014
 800155c:	0800b8b4 	.word	0x0800b8b4

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b096      	sub	sp, #88	@ 0x58
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2244      	movs	r2, #68	@ 0x44
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f006 f970 	bl	8007854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001582:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001586:	f001 fdff 	bl	8003188 <HAL_PWREx_ControlVoltageScaling>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001590:	f000 f964 	bl	800185c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001594:	f001 fdc0 	bl	8003118 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001598:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <SystemClock_Config+0xc0>)
 800159a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800159e:	4a20      	ldr	r2, [pc, #128]	@ (8001620 <SystemClock_Config+0xc0>)
 80015a0:	f023 0318 	bic.w	r3, r3, #24
 80015a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015a8:	2314      	movs	r3, #20
 80015aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015b8:	2360      	movs	r3, #96	@ 0x60
 80015ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015bc:	2302      	movs	r3, #2
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015c0:	2301      	movs	r3, #1
 80015c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015c8:	2328      	movs	r3, #40	@ 0x28
 80015ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015cc:	2307      	movs	r3, #7
 80015ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 fe29 	bl	8003234 <HAL_RCC_OscConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015e8:	f000 f938 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ec:	230f      	movs	r3, #15
 80015ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f0:	2303      	movs	r3, #3
 80015f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	2104      	movs	r1, #4
 8001604:	4618      	mov	r0, r3
 8001606:	f002 f9f1 	bl	80039ec <HAL_RCC_ClockConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001610:	f000 f924 	bl	800185c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001614:	f002 fef8 	bl	8004408 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001618:	bf00      	nop
 800161a:	3758      	adds	r7, #88	@ 0x58
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000

08001624 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <MX_I2C1_Init+0x74>)
 800162a:	4a1c      	ldr	r2, [pc, #112]	@ (800169c <MX_I2C1_Init+0x78>)
 800162c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800162e:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <MX_I2C1_Init+0x74>)
 8001630:	4a1b      	ldr	r2, [pc, #108]	@ (80016a0 <MX_I2C1_Init+0x7c>)
 8001632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <MX_I2C1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163a:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <MX_I2C1_Init+0x74>)
 800163c:	2201      	movs	r2, #1
 800163e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <MX_I2C1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <MX_I2C1_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <MX_I2C1_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_I2C1_Init+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_I2C1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165e:	480e      	ldr	r0, [pc, #56]	@ (8001698 <MX_I2C1_Init+0x74>)
 8001660:	f000 ff86 	bl	8002570 <HAL_I2C_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800166a:	f000 f8f7 	bl	800185c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800166e:	2100      	movs	r1, #0
 8001670:	4809      	ldr	r0, [pc, #36]	@ (8001698 <MX_I2C1_Init+0x74>)
 8001672:	f001 fcb9 	bl	8002fe8 <HAL_I2CEx_ConfigAnalogFilter>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800167c:	f000 f8ee 	bl	800185c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001680:	2100      	movs	r1, #0
 8001682:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_I2C1_Init+0x74>)
 8001684:	f001 fcfb 	bl	800307e <HAL_I2CEx_ConfigDigitalFilter>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800168e:	f000 f8e5 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000da8 	.word	0x20000da8
 800169c:	40005400 	.word	0x40005400
 80016a0:	10909cec 	.word	0x10909cec

080016a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <MX_RTC_Init+0x5c>)
 80016aa:	4a16      	ldr	r2, [pc, #88]	@ (8001704 <MX_RTC_Init+0x60>)
 80016ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <MX_RTC_Init+0x5c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016b4:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <MX_RTC_Init+0x5c>)
 80016b6:	227f      	movs	r2, #127	@ 0x7f
 80016b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <MX_RTC_Init+0x5c>)
 80016bc:	22ff      	movs	r2, #255	@ 0xff
 80016be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <MX_RTC_Init+0x5c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <MX_RTC_Init+0x5c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <MX_RTC_Init+0x5c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <MX_RTC_Init+0x5c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016d8:	4809      	ldr	r0, [pc, #36]	@ (8001700 <MX_RTC_Init+0x5c>)
 80016da:	f003 f877 	bl	80047cc <HAL_RTC_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80016e4:	f000 f8ba 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 30, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80016e8:	2204      	movs	r2, #4
 80016ea:	211e      	movs	r1, #30
 80016ec:	4804      	ldr	r0, [pc, #16]	@ (8001700 <MX_RTC_Init+0x5c>)
 80016ee:	f003 f98b 	bl	8004a08 <HAL_RTCEx_SetWakeUpTimer_IT>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80016f8:	f000 f8b0 	bl	800185c <Error_Handler>
  }
  /* USER CODE END RTC_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000dfc 	.word	0x20000dfc
 8001704:	40002800 	.word	0x40002800

08001708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 800170e:	4a15      	ldr	r2, [pc, #84]	@ (8001764 <MX_USART1_UART_Init+0x5c>)
 8001710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 800174c:	f003 fa20 	bl	8004b90 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001756:	f000 f881 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000e20 	.word	0x20000e20
 8001764:	40013800 	.word	0x40013800

08001768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_USART2_UART_Init+0x58>)
 800176e:	4a15      	ldr	r2, [pc, #84]	@ (80017c4 <MX_USART2_UART_Init+0x5c>)
 8001770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <MX_USART2_UART_Init+0x58>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_USART2_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <MX_USART2_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <MX_USART2_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_USART2_UART_Init+0x58>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <MX_USART2_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_USART2_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <MX_USART2_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_USART2_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_USART2_UART_Init+0x58>)
 80017ac:	f003 f9f0 	bl	8004b90 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017b6:	f000 f851 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000ea8 	.word	0x20000ea8
 80017c4:	40004400 	.word	0x40004400

080017c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017de:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <MX_GPIO_Init+0x90>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <MX_GPIO_Init+0x90>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <MX_GPIO_Init+0x90>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <MX_GPIO_Init+0x90>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	4a17      	ldr	r2, [pc, #92]	@ (8001858 <MX_GPIO_Init+0x90>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_GPIO_Init+0x90>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <MX_GPIO_Init+0x90>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	4a11      	ldr	r2, [pc, #68]	@ (8001858 <MX_GPIO_Init+0x90>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181a:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <MX_GPIO_Init+0x90>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2120      	movs	r1, #32
 800182a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182e:	f000 fe87 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001832:	2320      	movs	r3, #32
 8001834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	4619      	mov	r1, r3
 8001848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800184c:	f000 fcce 	bl	80021ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <Error_Handler+0x8>

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <HAL_MspInit+0x44>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001872:	4a0e      	ldr	r2, [pc, #56]	@ (80018ac <HAL_MspInit+0x44>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6613      	str	r3, [r2, #96]	@ 0x60
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <HAL_MspInit+0x44>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <HAL_MspInit+0x44>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	4a08      	ldr	r2, [pc, #32]	@ (80018ac <HAL_MspInit+0x44>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001890:	6593      	str	r3, [r2, #88]	@ 0x58
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_MspInit+0x44>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b0ac      	sub	sp, #176	@ 0xb0
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2288      	movs	r2, #136	@ 0x88
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f005 ffbf 	bl	8007854 <memset>
  if(hi2c->Instance==I2C1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <HAL_I2C_MspInit+0xb0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d13b      	bne.n	8001958 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018e0:	2340      	movs	r3, #64	@ 0x40
 80018e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 faa1 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018f8:	f7ff ffb0 	bl	800185c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_I2C_MspInit+0xb4>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001900:	4a18      	ldr	r2, [pc, #96]	@ (8001964 <HAL_I2C_MspInit+0xb4>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001908:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <HAL_I2C_MspInit+0xb4>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001914:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001918:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191c:	2312      	movs	r3, #18
 800191e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800192e:	2304      	movs	r3, #4
 8001930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001938:	4619      	mov	r1, r3
 800193a:	480b      	ldr	r0, [pc, #44]	@ (8001968 <HAL_I2C_MspInit+0xb8>)
 800193c:	f000 fc56 	bl	80021ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <HAL_I2C_MspInit+0xb4>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001944:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_I2C_MspInit+0xb4>)
 8001946:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800194a:	6593      	str	r3, [r2, #88]	@ 0x58
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_I2C_MspInit+0xb4>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001958:	bf00      	nop
 800195a:	37b0      	adds	r7, #176	@ 0xb0
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40005400 	.word	0x40005400
 8001964:	40021000 	.word	0x40021000
 8001968:	48000400 	.word	0x48000400

0800196c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0a4      	sub	sp, #144	@ 0x90
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	2288      	movs	r2, #136	@ 0x88
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f005 ff69 	bl	8007854 <memset>
  if(hrtc->Instance==RTC)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <HAL_RTC_MspInit+0x6c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d120      	bne.n	80019ce <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800198c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001992:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001996:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fa48 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80019aa:	f7ff ff57 	bl	800185c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019ae:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <HAL_RTC_MspInit+0x70>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b4:	4a09      	ldr	r2, [pc, #36]	@ (80019dc <HAL_RTC_MspInit+0x70>)
 80019b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2003      	movs	r0, #3
 80019c4:	f000 fb5d 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80019c8:	2003      	movs	r0, #3
 80019ca:	f000 fb76 	bl	80020ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3790      	adds	r7, #144	@ 0x90
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40002800 	.word	0x40002800
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b0ae      	sub	sp, #184	@ 0xb8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	2288      	movs	r2, #136	@ 0x88
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f005 ff27 	bl	8007854 <memset>
  if(huart->Instance==USART1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a4b      	ldr	r2, [pc, #300]	@ (8001b38 <HAL_UART_MspInit+0x158>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d145      	bne.n	8001a9c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a14:	2300      	movs	r3, #0
 8001a16:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 fa09 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a28:	f7ff ff18 	bl	800185c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2c:	4b43      	ldr	r3, [pc, #268]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a30:	4a42      	ldr	r2, [pc, #264]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001a32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a36:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a38:	4b40      	ldr	r3, [pc, #256]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	4b3d      	ldr	r3, [pc, #244]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a48:	4a3c      	ldr	r2, [pc, #240]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a50:	4b3a      	ldr	r3, [pc, #232]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a5c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a76:	2307      	movs	r3, #7
 8001a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a80:	4619      	mov	r1, r3
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a86:	f000 fbb1 	bl	80021ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2025      	movs	r0, #37	@ 0x25
 8001a90:	f000 faf7 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a94:	2025      	movs	r0, #37	@ 0x25
 8001a96:	f000 fb10 	bl	80020ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a9a:	e048      	b.n	8001b2e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a27      	ldr	r2, [pc, #156]	@ (8001b40 <HAL_UART_MspInit+0x160>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d143      	bne.n	8001b2e <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 f9be 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001abe:	f7ff fecd 	bl	800185c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ace:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	4a17      	ldr	r2, [pc, #92]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <HAL_UART_MspInit+0x15c>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001af2:	230c      	movs	r3, #12
 8001af4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1a:	f000 fb67 	bl	80021ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2026      	movs	r0, #38	@ 0x26
 8001b24:	f000 faad 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b28:	2026      	movs	r0, #38	@ 0x26
 8001b2a:	f000 fac6 	bl	80020ba <HAL_NVIC_EnableIRQ>
}
 8001b2e:	bf00      	nop
 8001b30:	37b8      	adds	r7, #184	@ 0xb8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40013800 	.word	0x40013800
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40004400 	.word	0x40004400

08001b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <NMI_Handler+0x4>

08001b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <HardFault_Handler+0x4>

08001b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <MemManage_Handler+0x4>

08001b5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <BusFault_Handler+0x4>

08001b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <UsageFault_Handler+0x4>

08001b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b9a:	f000 f977 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <RTC_WKUP_IRQHandler+0x10>)
 8001baa:	f002 ffc1 	bl	8004b30 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000dfc 	.word	0x20000dfc

08001bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <USART1_IRQHandler+0x10>)
 8001bbe:	f003 fa31 	bl	8005024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000e20 	.word	0x20000e20

08001bcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <USART2_IRQHandler+0x10>)
 8001bd2:	f003 fa27 	bl	8005024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000ea8 	.word	0x20000ea8

08001be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return 1;
 8001be4:	2301      	movs	r3, #1
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_kill>:

int _kill(int pid, int sig)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bfa:	f005 feb3 	bl	8007964 <__errno>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2216      	movs	r2, #22
 8001c02:	601a      	str	r2, [r3, #0]
  return -1;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_exit>:

void _exit (int status)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ffe7 	bl	8001bf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c22:	bf00      	nop
 8001c24:	e7fd      	b.n	8001c22 <_exit+0x12>

08001c26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e00a      	b.n	8001c4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c38:	f3af 8000 	nop.w
 8001c3c:	4601      	mov	r1, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	60ba      	str	r2, [r7, #8]
 8001c44:	b2ca      	uxtb	r2, r1
 8001c46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	dbf0      	blt.n	8001c38 <_read+0x12>
  }

  return len;
 8001c56:	687b      	ldr	r3, [r7, #4]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	e009      	b.n	8001c86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	60ba      	str	r2, [r7, #8]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f9b2 	bl	8000fe4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dbf1      	blt.n	8001c72 <_write+0x12>
  }
  return len;
 8001c8e:	687b      	ldr	r3, [r7, #4]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_close>:

int _close(int file)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc0:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_isatty>:

int _isatty(int file)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cd8:	2301      	movs	r3, #1
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f005 fe18 	bl	8007964 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20018000 	.word	0x20018000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	20001020 	.word	0x20001020
 8001d68:	20001178 	.word	0x20001178

08001d6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <SystemInit+0x20>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d76:	4a05      	ldr	r2, [pc, #20]	@ (8001d8c <SystemInit+0x20>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d94:	f7ff ffea 	bl	8001d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001d9a:	490d      	ldr	r1, [pc, #52]	@ (8001dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <LoopForever+0xe>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ddc <LoopForever+0x16>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f005 fdd7 	bl	8007970 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dc2:	f7ff fa9d 	bl	8001300 <main>

08001dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dc6:	e7fe      	b.n	8001dc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	20000d8c 	.word	0x20000d8c
  ldr r2, =_sidata
 8001dd4:	0800bd7c 	.word	0x0800bd7c
  ldr r2, =_sbss
 8001dd8:	20000d8c 	.word	0x20000d8c
  ldr r4, =_ebss
 8001ddc:	20001174 	.word	0x20001174

08001de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC1_2_IRQHandler>

08001de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de8:	2300      	movs	r3, #0
 8001dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f000 f93d 	bl	800206c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df2:	200f      	movs	r0, #15
 8001df4:	f000 f80e 	bl	8001e14 <HAL_InitTick>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	71fb      	strb	r3, [r7, #7]
 8001e02:	e001      	b.n	8001e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e04:	f7ff fd30 	bl	8001868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e08:	79fb      	ldrb	r3, [r7, #7]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e20:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <HAL_InitTick+0x6c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d023      	beq.n	8001e70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <HAL_InitTick+0x70>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <HAL_InitTick+0x6c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f949 	bl	80020d6 <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10f      	bne.n	8001e6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d809      	bhi.n	8001e64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f000 f913 	bl	8002082 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <HAL_InitTick+0x74>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e007      	b.n	8001e74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
 8001e68:	e004      	b.n	8001e74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e001      	b.n	8001e74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000bc0 	.word	0x20000bc0
 8001e84:	20000bb8 	.word	0x20000bb8
 8001e88:	20000bbc 	.word	0x20000bbc

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000bc0 	.word	0x20000bc0
 8001eb0:	20001024 	.word	0x20001024

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20001024 	.word	0x20001024

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	@ (8001f68 <__NVIC_EnableIRQ+0x38>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002038:	d301      	bcc.n	800203e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <SysTick_Config+0x40>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002046:	210f      	movs	r1, #15
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f7ff ff8e 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <SysTick_Config+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <SysTick_Config+0x40>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff29 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002094:	f7ff ff3e 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002098:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	6978      	ldr	r0, [r7, #20]
 80020a0:	f7ff ff8e 	bl	8001fc0 <NVIC_EncodePriority>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff5d 	bl	8001f6c <__NVIC_SetPriority>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff31 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffa2 	bl	8002028 <SysTick_Config>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d008      	beq.n	8002118 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2204      	movs	r2, #4
 800210a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e022      	b.n	800215e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 020e 	bic.w	r2, r2, #14
 8002126:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213c:	f003 021c 	and.w	r2, r3, #28
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f202 	lsl.w	r2, r1, r2
 800214a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800215c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d005      	beq.n	800218e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2204      	movs	r2, #4
 8002186:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e029      	b.n	80021e2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 020e 	bic.w	r2, r2, #14
 800219c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	f003 021c 	and.w	r2, r3, #28
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f202 	lsl.w	r2, r1, r2
 80021c0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
    }
  }
  return status;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fa:	e17f      	b.n	80024fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	4013      	ands	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8171 	beq.w	80024f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d005      	beq.n	800222c <HAL_GPIO_Init+0x40>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d130      	bne.n	800228e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002262:	2201      	movs	r2, #1
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	f003 0201 	and.w	r2, r3, #1
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b03      	cmp	r3, #3
 8002298:	d118      	bne.n	80022cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80022a0:	2201      	movs	r2, #1
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	f003 0201 	and.w	r2, r3, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d017      	beq.n	8002308 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d123      	bne.n	800235c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	08da      	lsrs	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3208      	adds	r2, #8
 800231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	6939      	ldr	r1, [r7, #16]
 8002358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0203 	and.w	r2, r3, #3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80ac 	beq.w	80024f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	4b5f      	ldr	r3, [pc, #380]	@ (800251c <HAL_GPIO_Init+0x330>)
 80023a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a2:	4a5e      	ldr	r2, [pc, #376]	@ (800251c <HAL_GPIO_Init+0x330>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80023aa:	4b5c      	ldr	r3, [pc, #368]	@ (800251c <HAL_GPIO_Init+0x330>)
 80023ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002520 <HAL_GPIO_Init+0x334>)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023e0:	d025      	beq.n	800242e <HAL_GPIO_Init+0x242>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002524 <HAL_GPIO_Init+0x338>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01f      	beq.n	800242a <HAL_GPIO_Init+0x23e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002528 <HAL_GPIO_Init+0x33c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d019      	beq.n	8002426 <HAL_GPIO_Init+0x23a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4d      	ldr	r2, [pc, #308]	@ (800252c <HAL_GPIO_Init+0x340>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_GPIO_Init+0x236>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002530 <HAL_GPIO_Init+0x344>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00d      	beq.n	800241e <HAL_GPIO_Init+0x232>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4b      	ldr	r2, [pc, #300]	@ (8002534 <HAL_GPIO_Init+0x348>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <HAL_GPIO_Init+0x22e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4a      	ldr	r2, [pc, #296]	@ (8002538 <HAL_GPIO_Init+0x34c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_GPIO_Init+0x22a>
 8002412:	2306      	movs	r3, #6
 8002414:	e00c      	b.n	8002430 <HAL_GPIO_Init+0x244>
 8002416:	2307      	movs	r3, #7
 8002418:	e00a      	b.n	8002430 <HAL_GPIO_Init+0x244>
 800241a:	2305      	movs	r3, #5
 800241c:	e008      	b.n	8002430 <HAL_GPIO_Init+0x244>
 800241e:	2304      	movs	r3, #4
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x244>
 8002422:	2303      	movs	r3, #3
 8002424:	e004      	b.n	8002430 <HAL_GPIO_Init+0x244>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <HAL_GPIO_Init+0x244>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x244>
 800242e:	2300      	movs	r3, #0
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	f002 0203 	and.w	r2, r2, #3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4093      	lsls	r3, r2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002440:	4937      	ldr	r1, [pc, #220]	@ (8002520 <HAL_GPIO_Init+0x334>)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800244e:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <HAL_GPIO_Init+0x350>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002472:	4a32      	ldr	r2, [pc, #200]	@ (800253c <HAL_GPIO_Init+0x350>)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002478:	4b30      	ldr	r3, [pc, #192]	@ (800253c <HAL_GPIO_Init+0x350>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	43db      	mvns	r3, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800249c:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_GPIO_Init+0x350>)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024a2:	4b26      	ldr	r3, [pc, #152]	@ (800253c <HAL_GPIO_Init+0x350>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024c6:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <HAL_GPIO_Init+0x350>)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_GPIO_Init+0x350>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024f0:	4a12      	ldr	r2, [pc, #72]	@ (800253c <HAL_GPIO_Init+0x350>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	f47f ae78 	bne.w	80021fc <HAL_GPIO_Init+0x10>
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	40010000 	.word	0x40010000
 8002524:	48000400 	.word	0x48000400
 8002528:	48000800 	.word	0x48000800
 800252c:	48000c00 	.word	0x48000c00
 8002530:	48001000 	.word	0x48001000
 8002534:	48001400 	.word	0x48001400
 8002538:	48001800 	.word	0x48001800
 800253c:	40010400 	.word	0x40010400

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800255c:	e002      	b.n	8002564 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e08d      	b.n	800269e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff f98a 	bl	80018b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2224      	movs	r2, #36	@ 0x24
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d107      	bne.n	80025ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	e006      	b.n	80025f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80025f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d108      	bne.n	8002612 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	e007      	b.n	8002622 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002620:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002634:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002644:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69d9      	ldr	r1, [r3, #28]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1a      	ldr	r2, [r3, #32]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	461a      	mov	r2, r3
 80026b4:	460b      	mov	r3, r1
 80026b6:	817b      	strh	r3, [r7, #10]
 80026b8:	4613      	mov	r3, r2
 80026ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	f040 80fd 	bne.w	80028c4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_I2C_Master_Transmit+0x30>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e0f6      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x21e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026e0:	f7ff fbe8 	bl	8001eb4 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	2319      	movs	r3, #25
 80026ec:	2201      	movs	r2, #1
 80026ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fa0a 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0e1      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2221      	movs	r2, #33	@ 0x21
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2210      	movs	r2, #16
 800270e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	893a      	ldrh	r2, [r7, #8]
 8002722:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	2bff      	cmp	r3, #255	@ 0xff
 8002732:	d906      	bls.n	8002742 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	22ff      	movs	r2, #255	@ 0xff
 8002738:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800273a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	e007      	b.n	8002752 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800274c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002750:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	d024      	beq.n	80027a4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3301      	adds	r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	8979      	ldrh	r1, [r7, #10]
 8002796:	4b4e      	ldr	r3, [pc, #312]	@ (80028d0 <HAL_I2C_Master_Transmit+0x228>)
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fbf1 	bl	8002f84 <I2C_TransferConfig>
 80027a2:	e066      	b.n	8002872 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	8979      	ldrh	r1, [r7, #10]
 80027ac:	4b48      	ldr	r3, [pc, #288]	@ (80028d0 <HAL_I2C_Master_Transmit+0x228>)
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fbe6 	bl	8002f84 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80027b8:	e05b      	b.n	8002872 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	6a39      	ldr	r1, [r7, #32]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f9f3 	bl	8002baa <I2C_WaitOnTXISFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07b      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d034      	beq.n	8002872 <HAL_I2C_Master_Transmit+0x1ca>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280c:	2b00      	cmp	r3, #0
 800280e:	d130      	bne.n	8002872 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	2200      	movs	r2, #0
 8002818:	2180      	movs	r1, #128	@ 0x80
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f976 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e04d      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	2bff      	cmp	r3, #255	@ 0xff
 8002832:	d90e      	bls.n	8002852 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	22ff      	movs	r2, #255	@ 0xff
 8002838:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283e:	b2da      	uxtb	r2, r3
 8002840:	8979      	ldrh	r1, [r7, #10]
 8002842:	2300      	movs	r3, #0
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fb9a 	bl	8002f84 <I2C_TransferConfig>
 8002850:	e00f      	b.n	8002872 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002860:	b2da      	uxtb	r2, r3
 8002862:	8979      	ldrh	r1, [r7, #10]
 8002864:	2300      	movs	r3, #0
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fb89 	bl	8002f84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d19e      	bne.n	80027ba <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	6a39      	ldr	r1, [r7, #32]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f9d9 	bl	8002c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e01a      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2220      	movs	r2, #32
 8002896:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <HAL_I2C_Master_Transmit+0x22c>)
 80028a4:	400b      	ands	r3, r1
 80028a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e000      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
  }
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	80002000 	.word	0x80002000
 80028d4:	fe00e800 	.word	0xfe00e800

080028d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	817b      	strh	r3, [r7, #10]
 80028e8:	4613      	mov	r3, r2
 80028ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	f040 80db 	bne.w	8002ab0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_I2C_Master_Receive+0x30>
 8002904:	2302      	movs	r3, #2
 8002906:	e0d4      	b.n	8002ab2 <HAL_I2C_Master_Receive+0x1da>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002910:	f7ff fad0 	bl	8001eb4 <HAL_GetTick>
 8002914:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2319      	movs	r3, #25
 800291c:	2201      	movs	r2, #1
 800291e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f8f2 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0bf      	b.n	8002ab2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2222      	movs	r2, #34	@ 0x22
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2210      	movs	r2, #16
 800293e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	893a      	ldrh	r2, [r7, #8]
 8002952:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	2bff      	cmp	r3, #255	@ 0xff
 8002962:	d90e      	bls.n	8002982 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	22ff      	movs	r2, #255	@ 0xff
 8002968:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296e:	b2da      	uxtb	r2, r3
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	4b52      	ldr	r3, [pc, #328]	@ (8002abc <HAL_I2C_Master_Receive+0x1e4>)
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fb02 	bl	8002f84 <I2C_TransferConfig>
 8002980:	e06d      	b.n	8002a5e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002990:	b2da      	uxtb	r2, r3
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	4b49      	ldr	r3, [pc, #292]	@ (8002abc <HAL_I2C_Master_Receive+0x1e4>)
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 faf1 	bl	8002f84 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80029a2:	e05c      	b.n	8002a5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	6a39      	ldr	r1, [r7, #32]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f989 	bl	8002cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e07c      	b.n	8002ab2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d034      	beq.n	8002a5e <HAL_I2C_Master_Receive+0x186>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d130      	bne.n	8002a5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2180      	movs	r1, #128	@ 0x80
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f880 	bl	8002b0c <I2C_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e04d      	b.n	8002ab2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2bff      	cmp	r3, #255	@ 0xff
 8002a1e:	d90e      	bls.n	8002a3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	22ff      	movs	r2, #255	@ 0xff
 8002a24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	8979      	ldrh	r1, [r7, #10]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 faa4 	bl	8002f84 <I2C_TransferConfig>
 8002a3c:	e00f      	b.n	8002a5e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	8979      	ldrh	r1, [r7, #10]
 8002a50:	2300      	movs	r3, #0
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fa93 	bl	8002f84 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d19d      	bne.n	80029a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	6a39      	ldr	r1, [r7, #32]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f8e3 	bl	8002c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e01a      	b.n	8002ab2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2220      	movs	r2, #32
 8002a82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <HAL_I2C_Master_Receive+0x1e8>)
 8002a90:	400b      	ands	r3, r1
 8002a92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	80002400 	.word	0x80002400
 8002ac0:	fe00e800 	.word	0xfe00e800

08002ac4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d103      	bne.n	8002ae2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d007      	beq.n	8002b00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699a      	ldr	r2, [r3, #24]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	619a      	str	r2, [r3, #24]
  }
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b1c:	e031      	b.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d02d      	beq.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7ff f9c5 	bl	8001eb4 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d122      	bne.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d113      	bne.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f043 0220 	orr.w	r2, r3, #32
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00f      	b.n	8002ba2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	bf0c      	ite	eq
 8002b92:	2301      	moveq	r3, #1
 8002b94:	2300      	movne	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d0be      	beq.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bb6:	e033      	b.n	8002c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f901 	bl	8002dc4 <I2C_IsErrorOccurred>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e031      	b.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd2:	d025      	beq.n	8002c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd4:	f7ff f96e 	bl	8001eb4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d302      	bcc.n	8002bea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11a      	bne.n	8002c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d013      	beq.n	8002c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e007      	b.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d1c4      	bne.n	8002bb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c44:	e02f      	b.n	8002ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f8ba 	bl	8002dc4 <I2C_IsErrorOccurred>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e02d      	b.n	8002cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7ff f92b 	bl	8001eb4 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d11a      	bne.n	8002ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d013      	beq.n	8002ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e007      	b.n	8002cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d1c8      	bne.n	8002c46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ccc:	e06b      	b.n	8002da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f876 	bl	8002dc4 <I2C_IsErrorOccurred>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e069      	b.n	8002db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d138      	bne.n	8002d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d105      	bne.n	8002d0a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e055      	b.n	8002db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d107      	bne.n	8002d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2204      	movs	r2, #4
 8002d24:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d26:	e002      	b.n	8002d2e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2220      	movs	r2, #32
 8002d34:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002d42:	400b      	ands	r3, r1
 8002d44:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e029      	b.n	8002db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7ff f8a7 	bl	8001eb4 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d116      	bne.n	8002da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d00f      	beq.n	8002da6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f043 0220 	orr.w	r2, r3, #32
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e007      	b.n	8002db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d18c      	bne.n	8002cce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	fe00e800 	.word	0xfe00e800

08002dc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	@ 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d068      	beq.n	8002ec2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2210      	movs	r2, #16
 8002df6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002df8:	e049      	b.n	8002e8e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d045      	beq.n	8002e8e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e02:	f7ff f857 	bl	8001eb4 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d302      	bcc.n	8002e18 <I2C_IsErrorOccurred+0x54>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d13a      	bne.n	8002e8e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e3a:	d121      	bne.n	8002e80 <I2C_IsErrorOccurred+0xbc>
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e42:	d01d      	beq.n	8002e80 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	d01a      	beq.n	8002e80 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e5a:	f7ff f82b 	bl	8001eb4 <HAL_GetTick>
 8002e5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e60:	e00e      	b.n	8002e80 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e62:	f7ff f827 	bl	8001eb4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b19      	cmp	r3, #25
 8002e6e:	d907      	bls.n	8002e80 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	f043 0320 	orr.w	r3, r3, #32
 8002e76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e7e:	e006      	b.n	8002e8e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d1e9      	bne.n	8002e62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d003      	beq.n	8002ea4 <I2C_IsErrorOccurred+0xe0>
 8002e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0aa      	beq.n	8002dfa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ee4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	f043 0308 	orr.w	r3, r3, #8
 8002efc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00b      	beq.n	8002f30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002f30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01c      	beq.n	8002f72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff fdc3 	bl	8002ac4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <I2C_IsErrorOccurred+0x1bc>)
 8002f4a:	400b      	ands	r3, r1
 8002f4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002f72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3728      	adds	r7, #40	@ 0x28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	fe00e800 	.word	0xfe00e800

08002f84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	817b      	strh	r3, [r7, #10]
 8002f92:	4613      	mov	r3, r2
 8002f94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f96:	897b      	ldrh	r3, [r7, #10]
 8002f98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f9c:	7a7b      	ldrb	r3, [r7, #9]
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fa4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fb2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	0d5b      	lsrs	r3, r3, #21
 8002fbe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002fc2:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <I2C_TransferConfig+0x60>)
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	ea02 0103 	and.w	r1, r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	03ff63ff 	.word	0x03ff63ff

08002fe8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d138      	bne.n	8003070 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003008:	2302      	movs	r3, #2
 800300a:	e032      	b.n	8003072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	@ 0x24
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800303a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6819      	ldr	r1, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800307e:	b480      	push	{r7}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b20      	cmp	r3, #32
 8003092:	d139      	bne.n	8003108 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800309e:	2302      	movs	r3, #2
 80030a0:	e033      	b.n	800310a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2224      	movs	r2, #36	@ 0x24
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0201 	bic.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	e000      	b.n	800310a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
  }
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311c:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a04      	ldr	r2, [pc, #16]	@ (8003134 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003126:	6013      	str	r3, [r2, #0]
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40007000 	.word	0x40007000

08003138 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 800313c:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f023 0307 	bic.w	r3, r3, #7
 8003144:	4a07      	ldr	r2, [pc, #28]	@ (8003164 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003146:	f043 0303 	orr.w	r3, r3, #3
 800314a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	4a05      	ldr	r2, [pc, #20]	@ (8003168 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003152:	f043 0304 	orr.w	r3, r3, #4
 8003156:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003158:	bf30      	wfi
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	40007000 	.word	0x40007000
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003170:	4b04      	ldr	r3, [pc, #16]	@ (8003184 <HAL_PWREx_GetVoltageRange+0x18>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40007000 	.word	0x40007000

08003188 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003196:	d130      	bne.n	80031fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003198:	4b23      	ldr	r3, [pc, #140]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031a4:	d038      	beq.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031a6:	4b20      	ldr	r3, [pc, #128]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031b6:	4b1d      	ldr	r3, [pc, #116]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2232      	movs	r2, #50	@ 0x32
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0c9b      	lsrs	r3, r3, #18
 80031c8:	3301      	adds	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031cc:	e002      	b.n	80031d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d4:	4b14      	ldr	r3, [pc, #80]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e0:	d102      	bne.n	80031e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f2      	bne.n	80031ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f4:	d110      	bne.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e00f      	b.n	800321a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003206:	d007      	beq.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003208:	4b07      	ldr	r3, [pc, #28]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003210:	4a05      	ldr	r2, [pc, #20]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003216:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40007000 	.word	0x40007000
 800322c:	20000bb8 	.word	0x20000bb8
 8003230:	431bde83 	.word	0x431bde83

08003234 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e3ca      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003246:	4b97      	ldr	r3, [pc, #604]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003250:	4b94      	ldr	r3, [pc, #592]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80e4 	beq.w	8003430 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_RCC_OscConfig+0x4a>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	f040 808b 	bne.w	800338c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b01      	cmp	r3, #1
 800327a:	f040 8087 	bne.w	800338c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800327e:	4b89      	ldr	r3, [pc, #548]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x62>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e3a2      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1a      	ldr	r2, [r3, #32]
 800329a:	4b82      	ldr	r3, [pc, #520]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <HAL_RCC_OscConfig+0x7c>
 80032a6:	4b7f      	ldr	r3, [pc, #508]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032ae:	e005      	b.n	80032bc <HAL_RCC_OscConfig+0x88>
 80032b0:	4b7c      	ldr	r3, [pc, #496]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032bc:	4293      	cmp	r3, r2
 80032be:	d223      	bcs.n	8003308 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fd55 	bl	8003d74 <RCC_SetFlashLatencyFromMSIRange>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e383      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d4:	4b73      	ldr	r3, [pc, #460]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a72      	ldr	r2, [pc, #456]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032da:	f043 0308 	orr.w	r3, r3, #8
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b70      	ldr	r3, [pc, #448]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	496d      	ldr	r1, [pc, #436]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f2:	4b6c      	ldr	r3, [pc, #432]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	4968      	ldr	r1, [pc, #416]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003302:	4313      	orrs	r3, r2
 8003304:	604b      	str	r3, [r1, #4]
 8003306:	e025      	b.n	8003354 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003308:	4b66      	ldr	r3, [pc, #408]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a65      	ldr	r2, [pc, #404]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800330e:	f043 0308 	orr.w	r3, r3, #8
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b63      	ldr	r3, [pc, #396]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4960      	ldr	r1, [pc, #384]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003326:	4b5f      	ldr	r3, [pc, #380]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	495b      	ldr	r1, [pc, #364]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fd15 	bl	8003d74 <RCC_SetFlashLatencyFromMSIRange>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e343      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003354:	f000 fc4a 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b52      	ldr	r3, [pc, #328]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	4950      	ldr	r1, [pc, #320]	@ (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
 8003370:	4a4e      	ldr	r2, [pc, #312]	@ (80034ac <HAL_RCC_OscConfig+0x278>)
 8003372:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003374:	4b4e      	ldr	r3, [pc, #312]	@ (80034b0 <HAL_RCC_OscConfig+0x27c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe fd4b 	bl	8001e14 <HAL_InitTick>
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d052      	beq.n	800342e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	e327      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d032      	beq.n	80033fa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003394:	4b43      	ldr	r3, [pc, #268]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a42      	ldr	r2, [pc, #264]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fd88 	bl	8001eb4 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033a8:	f7fe fd84 	bl	8001eb4 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e310      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ba:	4b3a      	ldr	r3, [pc, #232]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c6:	4b37      	ldr	r3, [pc, #220]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a36      	ldr	r2, [pc, #216]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033cc:	f043 0308 	orr.w	r3, r3, #8
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b34      	ldr	r3, [pc, #208]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4931      	ldr	r1, [pc, #196]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e4:	4b2f      	ldr	r3, [pc, #188]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	492c      	ldr	r1, [pc, #176]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
 80033f8:	e01a      	b.n	8003430 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033fa:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a29      	ldr	r2, [pc, #164]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003406:	f7fe fd55 	bl	8001eb4 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800340e:	f7fe fd51 	bl	8001eb4 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e2dd      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003420:	4b20      	ldr	r3, [pc, #128]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x1da>
 800342c:	e000      	b.n	8003430 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800342e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d074      	beq.n	8003526 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b08      	cmp	r3, #8
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x21a>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d10e      	bne.n	8003466 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d10b      	bne.n	8003466 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d064      	beq.n	8003524 <HAL_RCC_OscConfig+0x2f0>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d160      	bne.n	8003524 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e2ba      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x24a>
 8003470:	4b0c      	ldr	r3, [pc, #48]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a0b      	ldr	r2, [pc, #44]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e026      	b.n	80034cc <HAL_RCC_OscConfig+0x298>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003486:	d115      	bne.n	80034b4 <HAL_RCC_OscConfig+0x280>
 8003488:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a05      	ldr	r2, [pc, #20]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800348e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a02      	ldr	r2, [pc, #8]	@ (80034a4 <HAL_RCC_OscConfig+0x270>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	e014      	b.n	80034cc <HAL_RCC_OscConfig+0x298>
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	0800b8d8 	.word	0x0800b8d8
 80034ac:	20000bb8 	.word	0x20000bb8
 80034b0:	20000bbc 	.word	0x20000bbc
 80034b4:	4ba0      	ldr	r3, [pc, #640]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a9f      	ldr	r2, [pc, #636]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b9d      	ldr	r3, [pc, #628]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a9c      	ldr	r2, [pc, #624]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80034c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d013      	beq.n	80034fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe fcee 	bl	8001eb4 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe fcea 	bl	8001eb4 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e276      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ee:	4b92      	ldr	r3, [pc, #584]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x2a8>
 80034fa:	e014      	b.n	8003526 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe fcda 	bl	8001eb4 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003504:	f7fe fcd6 	bl	8001eb4 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b64      	cmp	r3, #100	@ 0x64
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e262      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003516:	4b88      	ldr	r3, [pc, #544]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x2d0>
 8003522:	e000      	b.n	8003526 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d060      	beq.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d005      	beq.n	8003544 <HAL_RCC_OscConfig+0x310>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d119      	bne.n	8003572 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d116      	bne.n	8003572 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003544:	4b7c      	ldr	r3, [pc, #496]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_OscConfig+0x328>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e23f      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355c:	4b76      	ldr	r3, [pc, #472]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	061b      	lsls	r3, r3, #24
 800356a:	4973      	ldr	r1, [pc, #460]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003570:	e040      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d023      	beq.n	80035c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800357a:	4b6f      	ldr	r3, [pc, #444]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6e      	ldr	r2, [pc, #440]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fe fc95 	bl	8001eb4 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358e:	f7fe fc91 	bl	8001eb4 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e21d      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a0:	4b65      	ldr	r3, [pc, #404]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	4b62      	ldr	r3, [pc, #392]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	495f      	ldr	r1, [pc, #380]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
 80035c0:	e018      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fe fc71 	bl	8001eb4 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d6:	f7fe fc6d 	bl	8001eb4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e1f9      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035e8:	4b53      	ldr	r3, [pc, #332]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d03c      	beq.n	800367a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01c      	beq.n	8003642 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003608:	4b4b      	ldr	r3, [pc, #300]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800360a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800360e:	4a4a      	ldr	r2, [pc, #296]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fe fc4c 	bl	8001eb4 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003620:	f7fe fc48 	bl	8001eb4 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1d4      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003632:	4b41      	ldr	r3, [pc, #260]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ef      	beq.n	8003620 <HAL_RCC_OscConfig+0x3ec>
 8003640:	e01b      	b.n	800367a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003642:	4b3d      	ldr	r3, [pc, #244]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003648:	4a3b      	ldr	r2, [pc, #236]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe fc2f 	bl	8001eb4 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365a:	f7fe fc2b 	bl	8001eb4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1b7      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800366c:	4b32      	ldr	r3, [pc, #200]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ef      	bne.n	800365a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80a6 	beq.w	80037d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800368c:	4b2a      	ldr	r3, [pc, #168]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10d      	bne.n	80036b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003698:	4b27      	ldr	r3, [pc, #156]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369c:	4a26      	ldr	r2, [pc, #152]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800369e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80036a4:	4b24      	ldr	r3, [pc, #144]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b0:	2301      	movs	r3, #1
 80036b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b4:	4b21      	ldr	r3, [pc, #132]	@ (800373c <HAL_RCC_OscConfig+0x508>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d118      	bne.n	80036f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c0:	4b1e      	ldr	r3, [pc, #120]	@ (800373c <HAL_RCC_OscConfig+0x508>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1d      	ldr	r2, [pc, #116]	@ (800373c <HAL_RCC_OscConfig+0x508>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036cc:	f7fe fbf2 	bl	8001eb4 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fe fbee 	bl	8001eb4 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e17a      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e6:	4b15      	ldr	r3, [pc, #84]	@ (800373c <HAL_RCC_OscConfig+0x508>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d108      	bne.n	800370c <HAL_RCC_OscConfig+0x4d8>
 80036fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003700:	4a0d      	ldr	r2, [pc, #52]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800370a:	e029      	b.n	8003760 <HAL_RCC_OscConfig+0x52c>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b05      	cmp	r3, #5
 8003712:	d115      	bne.n	8003740 <HAL_RCC_OscConfig+0x50c>
 8003714:	4b08      	ldr	r3, [pc, #32]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	4a07      	ldr	r2, [pc, #28]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003724:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372a:	4a03      	ldr	r2, [pc, #12]	@ (8003738 <HAL_RCC_OscConfig+0x504>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003734:	e014      	b.n	8003760 <HAL_RCC_OscConfig+0x52c>
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	40007000 	.word	0x40007000
 8003740:	4b9c      	ldr	r3, [pc, #624]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003746:	4a9b      	ldr	r2, [pc, #620]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003750:	4b98      	ldr	r3, [pc, #608]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003756:	4a97      	ldr	r2, [pc, #604]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d016      	beq.n	8003796 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fe fba4 	bl	8001eb4 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376e:	e00a      	b.n	8003786 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003770:	f7fe fba0 	bl	8001eb4 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e12a      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003786:	4b8b      	ldr	r3, [pc, #556]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ed      	beq.n	8003770 <HAL_RCC_OscConfig+0x53c>
 8003794:	e015      	b.n	80037c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003796:	f7fe fb8d 	bl	8001eb4 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800379c:	e00a      	b.n	80037b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379e:	f7fe fb89 	bl	8001eb4 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e113      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b4:	4b7f      	ldr	r3, [pc, #508]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ed      	bne.n	800379e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b7a      	ldr	r3, [pc, #488]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037cc:	4a79      	ldr	r2, [pc, #484]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80fe 	beq.w	80039da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	f040 80d0 	bne.w	8003988 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037e8:	4b72      	ldr	r3, [pc, #456]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d130      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	3b01      	subs	r3, #1
 8003808:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d127      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003818:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d11f      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003828:	2a07      	cmp	r2, #7
 800382a:	bf14      	ite	ne
 800382c:	2201      	movne	r2, #1
 800382e:	2200      	moveq	r2, #0
 8003830:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003832:	4293      	cmp	r3, r2
 8003834:	d113      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	3b01      	subs	r3, #1
 8003844:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d109      	bne.n	800385e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	085b      	lsrs	r3, r3, #1
 8003856:	3b01      	subs	r3, #1
 8003858:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d06e      	beq.n	800393c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d069      	beq.n	8003938 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003864:	4b53      	ldr	r3, [pc, #332]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d105      	bne.n	800387c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003870:	4b50      	ldr	r3, [pc, #320]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0ad      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003880:	4b4c      	ldr	r3, [pc, #304]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a4b      	ldr	r2, [pc, #300]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800388a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800388c:	f7fe fb12 	bl	8001eb4 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe fb0e 	bl	8001eb4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e09a      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a6:	4b43      	ldr	r3, [pc, #268]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b2:	4b40      	ldr	r3, [pc, #256]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	4b40      	ldr	r3, [pc, #256]	@ (80039b8 <HAL_RCC_OscConfig+0x784>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038c2:	3a01      	subs	r2, #1
 80038c4:	0112      	lsls	r2, r2, #4
 80038c6:	4311      	orrs	r1, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038cc:	0212      	lsls	r2, r2, #8
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038d4:	0852      	lsrs	r2, r2, #1
 80038d6:	3a01      	subs	r2, #1
 80038d8:	0552      	lsls	r2, r2, #21
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038e0:	0852      	lsrs	r2, r2, #1
 80038e2:	3a01      	subs	r2, #1
 80038e4:	0652      	lsls	r2, r2, #25
 80038e6:	4311      	orrs	r1, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038ec:	0912      	lsrs	r2, r2, #4
 80038ee:	0452      	lsls	r2, r2, #17
 80038f0:	430a      	orrs	r2, r1
 80038f2:	4930      	ldr	r1, [pc, #192]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038f8:	4b2e      	ldr	r3, [pc, #184]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a2d      	ldr	r2, [pc, #180]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 80038fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003902:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003904:	4b2b      	ldr	r3, [pc, #172]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a2a      	ldr	r2, [pc, #168]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800390a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800390e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003910:	f7fe fad0 	bl	8001eb4 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7fe facc 	bl	8001eb4 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e058      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	4b22      	ldr	r3, [pc, #136]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003936:	e050      	b.n	80039da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e04f      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393c:	4b1d      	ldr	r3, [pc, #116]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d148      	bne.n	80039da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003948:	4b1a      	ldr	r3, [pc, #104]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a19      	ldr	r2, [pc, #100]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003952:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003954:	4b17      	ldr	r3, [pc, #92]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a16      	ldr	r2, [pc, #88]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800395e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003960:	f7fe faa8 	bl	8001eb4 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe faa4 	bl	8001eb4 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e030      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	4b0e      	ldr	r3, [pc, #56]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x734>
 8003986:	e028      	b.n	80039da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d023      	beq.n	80039d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398e:	4b09      	ldr	r3, [pc, #36]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a08      	ldr	r2, [pc, #32]	@ (80039b4 <HAL_RCC_OscConfig+0x780>)
 8003994:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fe fa8b 	bl	8001eb4 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a0:	e00c      	b.n	80039bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fe fa87 	bl	8001eb4 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d905      	bls.n	80039bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e013      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
 80039b4:	40021000 	.word	0x40021000
 80039b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039bc:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <HAL_RCC_OscConfig+0x7b0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ec      	bne.n	80039a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <HAL_RCC_OscConfig+0x7b0>)
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4905      	ldr	r1, [pc, #20]	@ (80039e4 <HAL_RCC_OscConfig+0x7b0>)
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_RCC_OscConfig+0x7b4>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	60cb      	str	r3, [r1, #12]
 80039d4:	e001      	b.n	80039da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40021000 	.word	0x40021000
 80039e8:	feeefffc 	.word	0xfeeefffc

080039ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0e7      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a00:	4b75      	ldr	r3, [pc, #468]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d910      	bls.n	8003a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b72      	ldr	r3, [pc, #456]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 0207 	bic.w	r2, r3, #7
 8003a16:	4970      	ldr	r1, [pc, #448]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b6e      	ldr	r3, [pc, #440]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0cf      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d010      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	4b66      	ldr	r3, [pc, #408]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d908      	bls.n	8003a5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b63      	ldr	r3, [pc, #396]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4960      	ldr	r1, [pc, #384]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d04c      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a72:	4b5a      	ldr	r3, [pc, #360]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d121      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0a6      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8a:	4b54      	ldr	r3, [pc, #336]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d115      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e09a      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa2:	4b4e      	ldr	r3, [pc, #312]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e08e      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e086      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ac2:	4b46      	ldr	r3, [pc, #280]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4943      	ldr	r1, [pc, #268]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad4:	f7fe f9ee 	bl	8001eb4 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003adc:	f7fe f9ea 	bl	8001eb4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e06e      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	4b3a      	ldr	r3, [pc, #232]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 020c 	and.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1eb      	bne.n	8003adc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d010      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d208      	bcs.n	8003b32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b2e      	ldr	r3, [pc, #184]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	492b      	ldr	r1, [pc, #172]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b32:	4b29      	ldr	r3, [pc, #164]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d210      	bcs.n	8003b62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b40:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 0207 	bic.w	r2, r3, #7
 8003b48:	4923      	ldr	r1, [pc, #140]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b50:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1ec>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e036      	b.n	8003bd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	4918      	ldr	r1, [pc, #96]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d009      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8c:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4910      	ldr	r1, [pc, #64]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba0:	f000 f824 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f0>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	490b      	ldr	r1, [pc, #44]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f4>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	f003 031f 	and.w	r3, r3, #31
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbc:	4a09      	ldr	r2, [pc, #36]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bc0:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <HAL_RCC_ClockConfig+0x1fc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe f925 	bl	8001e14 <HAL_InitTick>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bce:	7afb      	ldrb	r3, [r7, #11]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	0800b8d8 	.word	0x0800b8d8
 8003be4:	20000bb8 	.word	0x20000bb8
 8003be8:	20000bbc 	.word	0x20000bbc

08003bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	@ 0x24
 8003bf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c04:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x34>
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d121      	bne.n	8003c5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d11e      	bne.n	8003c5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c20:	4b34      	ldr	r3, [pc, #208]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d107      	bne.n	8003c3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c2c:	4b31      	ldr	r3, [pc, #196]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	e005      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c48:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10d      	bne.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d102      	bne.n	8003c6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c64:	4b25      	ldr	r3, [pc, #148]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	e004      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c70:	4b23      	ldr	r3, [pc, #140]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b0c      	cmp	r3, #12
 8003c78:	d134      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0xac>
 8003c90:	e005      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c92:	4b1a      	ldr	r3, [pc, #104]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x110>)
 8003c94:	617b      	str	r3, [r7, #20]
      break;
 8003c96:	e005      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c98:	4b19      	ldr	r3, [pc, #100]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c9a:	617b      	str	r3, [r7, #20]
      break;
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	617b      	str	r3, [r7, #20]
      break;
 8003ca2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca4:	4b13      	ldr	r3, [pc, #76]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	3301      	adds	r3, #1
 8003cb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cb2:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	fb03 f202 	mul.w	r2, r3, r2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cca:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	0e5b      	lsrs	r3, r3, #25
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ce4:	69bb      	ldr	r3, [r7, #24]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	@ 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	0800b8f0 	.word	0x0800b8f0
 8003cfc:	00f42400 	.word	0x00f42400
 8003d00:	007a1200 	.word	0x007a1200

08003d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d08:	4b03      	ldr	r3, [pc, #12]	@ (8003d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20000bb8 	.word	0x20000bb8

08003d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d20:	f7ff fff0 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4904      	ldr	r1, [pc, #16]	@ (8003d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	0800b8e8 	.word	0x0800b8e8

08003d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d4c:	f7ff ffda 	bl	8003d04 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b06      	ldr	r3, [pc, #24]	@ (8003d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0adb      	lsrs	r3, r3, #11
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4904      	ldr	r1, [pc, #16]	@ (8003d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	0800b8e8 	.word	0x0800b8e8

08003d74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d80:	4b2a      	ldr	r3, [pc, #168]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d8c:	f7ff f9ee 	bl	800316c <HAL_PWREx_GetVoltageRange>
 8003d90:	6178      	str	r0, [r7, #20]
 8003d92:	e014      	b.n	8003dbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d94:	4b25      	ldr	r3, [pc, #148]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	4a24      	ldr	r2, [pc, #144]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da0:	4b22      	ldr	r3, [pc, #136]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003dac:	f7ff f9de 	bl	800316c <HAL_PWREx_GetVoltageRange>
 8003db0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003db2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dc4:	d10b      	bne.n	8003dde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b80      	cmp	r3, #128	@ 0x80
 8003dca:	d919      	bls.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2ba0      	cmp	r3, #160	@ 0xa0
 8003dd0:	d902      	bls.n	8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	e013      	b.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dd8:	2301      	movs	r3, #1
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	e010      	b.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b80      	cmp	r3, #128	@ 0x80
 8003de2:	d902      	bls.n	8003dea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003de4:	2303      	movs	r3, #3
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	e00a      	b.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b80      	cmp	r3, #128	@ 0x80
 8003dee:	d102      	bne.n	8003df6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003df0:	2302      	movs	r3, #2
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	e004      	b.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b70      	cmp	r3, #112	@ 0x70
 8003dfa:	d101      	bne.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 0207 	bic.w	r2, r3, #7
 8003e08:	4909      	ldr	r1, [pc, #36]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e10:	4b07      	ldr	r3, [pc, #28]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d001      	beq.n	8003e22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40022000 	.word	0x40022000

08003e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e40:	2300      	movs	r3, #0
 8003e42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d041      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e58:	d02a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e5e:	d824      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e64:	d008      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e6a:	d81e      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e74:	d010      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e76:	e018      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e78:	4b86      	ldr	r3, [pc, #536]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4a85      	ldr	r2, [pc, #532]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e84:	e015      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 facb 	bl	8004428 <RCCEx_PLLSAI1_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e96:	e00c      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3320      	adds	r3, #32
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fbb6 	bl	8004610 <RCCEx_PLLSAI2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ea8:	e003      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	74fb      	strb	r3, [r7, #19]
      break;
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb2:	7cfb      	ldrb	r3, [r7, #19]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb8:	4b76      	ldr	r3, [pc, #472]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ec6:	4973      	ldr	r1, [pc, #460]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ece:	e001      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d041      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ee4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ee8:	d02a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003eea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003eee:	d824      	bhi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ef0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ef4:	d008      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003efa:	d81e      	bhi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f04:	d010      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f06:	e018      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f08:	4b62      	ldr	r3, [pc, #392]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a61      	ldr	r2, [pc, #388]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f14:	e015      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fa83 	bl	8004428 <RCCEx_PLLSAI1_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f26:	e00c      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3320      	adds	r3, #32
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fb6e 	bl	8004610 <RCCEx_PLLSAI2_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f38:	e003      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f3e:	e000      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f48:	4b52      	ldr	r3, [pc, #328]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f56:	494f      	ldr	r1, [pc, #316]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f5e:	e001      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80a0 	beq.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f76:	4b47      	ldr	r3, [pc, #284]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f86:	2300      	movs	r3, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b41      	ldr	r3, [pc, #260]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f90:	4a40      	ldr	r2, [pc, #256]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f98:	4b3e      	ldr	r3, [pc, #248]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a3a      	ldr	r2, [pc, #232]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb4:	f7fd ff7e 	bl	8001eb4 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fba:	e009      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbc:	f7fd ff7a 	bl	8001eb4 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d902      	bls.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	74fb      	strb	r3, [r7, #19]
        break;
 8003fce:	e005      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fd0:	4b31      	ldr	r3, [pc, #196]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0ef      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d15c      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01f      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d019      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004000:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800400c:	4b21      	ldr	r3, [pc, #132]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004012:	4a20      	ldr	r2, [pc, #128]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800401c:	4b1d      	ldr	r3, [pc, #116]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004022:	4a1c      	ldr	r2, [pc, #112]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800402c:	4a19      	ldr	r2, [pc, #100]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fd ff39 	bl	8001eb4 <HAL_GetTick>
 8004042:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004044:	e00b      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fd ff35 	bl	8001eb4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d902      	bls.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	74fb      	strb	r3, [r7, #19]
            break;
 800405c:	e006      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405e:	4b0d      	ldr	r3, [pc, #52]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ec      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800406c:	7cfb      	ldrb	r3, [r7, #19]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004072:	4b08      	ldr	r3, [pc, #32]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004078:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004082:	4904      	ldr	r1, [pc, #16]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800408a:	e009      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a0:	7c7b      	ldrb	r3, [r7, #17]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d105      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a6:	4b9e      	ldr	r3, [pc, #632]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	4a9d      	ldr	r2, [pc, #628]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040be:	4b98      	ldr	r3, [pc, #608]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c4:	f023 0203 	bic.w	r2, r3, #3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040cc:	4994      	ldr	r1, [pc, #592]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e6:	f023 020c 	bic.w	r2, r3, #12
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ee:	498c      	ldr	r1, [pc, #560]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004102:	4b87      	ldr	r3, [pc, #540]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	4983      	ldr	r1, [pc, #524]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004124:	4b7e      	ldr	r3, [pc, #504]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	497b      	ldr	r1, [pc, #492]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004146:	4b76      	ldr	r3, [pc, #472]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004154:	4972      	ldr	r1, [pc, #456]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004168:	4b6d      	ldr	r3, [pc, #436]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004176:	496a      	ldr	r1, [pc, #424]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418a:	4b65      	ldr	r3, [pc, #404]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004190:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004198:	4961      	ldr	r1, [pc, #388]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041ac:	4b5c      	ldr	r3, [pc, #368]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ba:	4959      	ldr	r1, [pc, #356]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ce:	4b54      	ldr	r3, [pc, #336]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041dc:	4950      	ldr	r1, [pc, #320]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fe:	4948      	ldr	r1, [pc, #288]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004212:	4b43      	ldr	r3, [pc, #268]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004218:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004220:	493f      	ldr	r1, [pc, #252]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d028      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004234:	4b3a      	ldr	r3, [pc, #232]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004242:	4937      	ldr	r1, [pc, #220]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800424e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004252:	d106      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004254:	4b32      	ldr	r3, [pc, #200]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a31      	ldr	r2, [pc, #196]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800425e:	60d3      	str	r3, [r2, #12]
 8004260:	e011      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004266:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800426a:	d10c      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f8d8 	bl	8004428 <RCCEx_PLLSAI1_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d028      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004292:	4b23      	ldr	r3, [pc, #140]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004298:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a0:	491f      	ldr	r1, [pc, #124]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042b0:	d106      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042bc:	60d3      	str	r3, [r2, #12]
 80042be:	e011      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2101      	movs	r1, #1
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 f8a9 	bl	8004428 <RCCEx_PLLSAI1_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02b      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fe:	4908      	ldr	r1, [pc, #32]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800430e:	d109      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004310:	4b03      	ldr	r3, [pc, #12]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4a02      	ldr	r2, [pc, #8]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800431a:	60d3      	str	r3, [r2, #12]
 800431c:	e014      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004328:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	2101      	movs	r1, #1
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f877 	bl	8004428 <RCCEx_PLLSAI1_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02f      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004354:	4b2b      	ldr	r3, [pc, #172]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004362:	4928      	ldr	r1, [pc, #160]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800436e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004372:	d10d      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	2102      	movs	r1, #2
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f854 	bl	8004428 <RCCEx_PLLSAI1_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004384:	7cfb      	ldrb	r3, [r7, #19]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d014      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800438a:	7cfb      	ldrb	r3, [r7, #19]
 800438c:	74bb      	strb	r3, [r7, #18]
 800438e:	e011      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004398:	d10c      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3320      	adds	r3, #32
 800439e:	2102      	movs	r1, #2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f935 	bl	8004610 <RCCEx_PLLSAI2_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043c0:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043ce:	490d      	ldr	r1, [pc, #52]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043e2:	4b08      	ldr	r3, [pc, #32]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f2:	4904      	ldr	r1, [pc, #16]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40021000 	.word	0x40021000

08004408 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a04      	ldr	r2, [pc, #16]	@ (8004424 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004412:	f043 0304 	orr.w	r3, r3, #4
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000

08004428 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004436:	4b75      	ldr	r3, [pc, #468]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d018      	beq.n	8004474 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004442:	4b72      	ldr	r3, [pc, #456]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0203 	and.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d10d      	bne.n	800446e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
       ||
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800445a:	4b6c      	ldr	r3, [pc, #432]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
       ||
 800446a:	429a      	cmp	r2, r3
 800446c:	d047      	beq.n	80044fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	e044      	b.n	80044fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d018      	beq.n	80044ae <RCCEx_PLLSAI1_Config+0x86>
 800447c:	2b03      	cmp	r3, #3
 800447e:	d825      	bhi.n	80044cc <RCCEx_PLLSAI1_Config+0xa4>
 8004480:	2b01      	cmp	r3, #1
 8004482:	d002      	beq.n	800448a <RCCEx_PLLSAI1_Config+0x62>
 8004484:	2b02      	cmp	r3, #2
 8004486:	d009      	beq.n	800449c <RCCEx_PLLSAI1_Config+0x74>
 8004488:	e020      	b.n	80044cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800448a:	4b60      	ldr	r3, [pc, #384]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11d      	bne.n	80044d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449a:	e01a      	b.n	80044d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800449c:	4b5b      	ldr	r3, [pc, #364]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d116      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ac:	e013      	b.n	80044d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ae:	4b57      	ldr	r3, [pc, #348]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10f      	bne.n	80044da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ba:	4b54      	ldr	r3, [pc, #336]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ca:	e006      	b.n	80044da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
      break;
 80044d0:	e004      	b.n	80044dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044d2:	bf00      	nop
 80044d4:	e002      	b.n	80044dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044d6:	bf00      	nop
 80044d8:	e000      	b.n	80044dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044da:	bf00      	nop
    }

    if(status == HAL_OK)
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10d      	bne.n	80044fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044e2:	4b4a      	ldr	r3, [pc, #296]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6819      	ldr	r1, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	430b      	orrs	r3, r1
 80044f8:	4944      	ldr	r1, [pc, #272]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d17d      	bne.n	8004600 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004504:	4b41      	ldr	r3, [pc, #260]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a40      	ldr	r2, [pc, #256]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 800450a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800450e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004510:	f7fd fcd0 	bl	8001eb4 <HAL_GetTick>
 8004514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004516:	e009      	b.n	800452c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004518:	f7fd fccc 	bl	8001eb4 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d902      	bls.n	800452c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	73fb      	strb	r3, [r7, #15]
        break;
 800452a:	e005      	b.n	8004538 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800452c:	4b37      	ldr	r3, [pc, #220]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1ef      	bne.n	8004518 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d160      	bne.n	8004600 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d111      	bne.n	8004568 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004544:	4b31      	ldr	r3, [pc, #196]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800454c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6892      	ldr	r2, [r2, #8]
 8004554:	0211      	lsls	r1, r2, #8
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	68d2      	ldr	r2, [r2, #12]
 800455a:	0912      	lsrs	r2, r2, #4
 800455c:	0452      	lsls	r2, r2, #17
 800455e:	430a      	orrs	r2, r1
 8004560:	492a      	ldr	r1, [pc, #168]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004562:	4313      	orrs	r3, r2
 8004564:	610b      	str	r3, [r1, #16]
 8004566:	e027      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d112      	bne.n	8004594 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800456e:	4b27      	ldr	r3, [pc, #156]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004576:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6892      	ldr	r2, [r2, #8]
 800457e:	0211      	lsls	r1, r2, #8
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6912      	ldr	r2, [r2, #16]
 8004584:	0852      	lsrs	r2, r2, #1
 8004586:	3a01      	subs	r2, #1
 8004588:	0552      	lsls	r2, r2, #21
 800458a:	430a      	orrs	r2, r1
 800458c:	491f      	ldr	r1, [pc, #124]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 800458e:	4313      	orrs	r3, r2
 8004590:	610b      	str	r3, [r1, #16]
 8004592:	e011      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004594:	4b1d      	ldr	r3, [pc, #116]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800459c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6892      	ldr	r2, [r2, #8]
 80045a4:	0211      	lsls	r1, r2, #8
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6952      	ldr	r2, [r2, #20]
 80045aa:	0852      	lsrs	r2, r2, #1
 80045ac:	3a01      	subs	r2, #1
 80045ae:	0652      	lsls	r2, r2, #25
 80045b0:	430a      	orrs	r2, r1
 80045b2:	4916      	ldr	r1, [pc, #88]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045b8:	4b14      	ldr	r3, [pc, #80]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a13      	ldr	r2, [pc, #76]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7fd fc76 	bl	8001eb4 <HAL_GetTick>
 80045c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ca:	e009      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045cc:	f7fd fc72 	bl	8001eb4 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d902      	bls.n	80045e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	73fb      	strb	r3, [r7, #15]
          break;
 80045de:	e005      	b.n	80045ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045e0:	4b0a      	ldr	r3, [pc, #40]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ef      	beq.n	80045cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045f2:	4b06      	ldr	r3, [pc, #24]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	4904      	ldr	r1, [pc, #16]	@ (800460c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004600:	7bfb      	ldrb	r3, [r7, #15]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000

08004610 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800461e:	4b6a      	ldr	r3, [pc, #424]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d018      	beq.n	800465c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800462a:	4b67      	ldr	r3, [pc, #412]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0203 	and.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d10d      	bne.n	8004656 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
       ||
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004642:	4b61      	ldr	r3, [pc, #388]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	091b      	lsrs	r3, r3, #4
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
       ||
 8004652:	429a      	cmp	r2, r3
 8004654:	d047      	beq.n	80046e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
 800465a:	e044      	b.n	80046e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d018      	beq.n	8004696 <RCCEx_PLLSAI2_Config+0x86>
 8004664:	2b03      	cmp	r3, #3
 8004666:	d825      	bhi.n	80046b4 <RCCEx_PLLSAI2_Config+0xa4>
 8004668:	2b01      	cmp	r3, #1
 800466a:	d002      	beq.n	8004672 <RCCEx_PLLSAI2_Config+0x62>
 800466c:	2b02      	cmp	r3, #2
 800466e:	d009      	beq.n	8004684 <RCCEx_PLLSAI2_Config+0x74>
 8004670:	e020      	b.n	80046b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004672:	4b55      	ldr	r3, [pc, #340]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11d      	bne.n	80046ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004682:	e01a      	b.n	80046ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004684:	4b50      	ldr	r3, [pc, #320]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468c:	2b00      	cmp	r3, #0
 800468e:	d116      	bne.n	80046be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004694:	e013      	b.n	80046be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004696:	4b4c      	ldr	r3, [pc, #304]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046a2:	4b49      	ldr	r3, [pc, #292]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046b2:	e006      	b.n	80046c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
      break;
 80046b8:	e004      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10d      	bne.n	80046e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ca:	4b3f      	ldr	r3, [pc, #252]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6819      	ldr	r1, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	3b01      	subs	r3, #1
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	430b      	orrs	r3, r1
 80046e0:	4939      	ldr	r1, [pc, #228]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d167      	bne.n	80047bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046ec:	4b36      	ldr	r3, [pc, #216]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a35      	ldr	r2, [pc, #212]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f8:	f7fd fbdc 	bl	8001eb4 <HAL_GetTick>
 80046fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046fe:	e009      	b.n	8004714 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004700:	f7fd fbd8 	bl	8001eb4 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d902      	bls.n	8004714 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	73fb      	strb	r3, [r7, #15]
        break;
 8004712:	e005      	b.n	8004720 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004714:	4b2c      	ldr	r3, [pc, #176]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ef      	bne.n	8004700 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d14a      	bne.n	80047bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d111      	bne.n	8004750 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800472c:	4b26      	ldr	r3, [pc, #152]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6892      	ldr	r2, [r2, #8]
 800473c:	0211      	lsls	r1, r2, #8
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68d2      	ldr	r2, [r2, #12]
 8004742:	0912      	lsrs	r2, r2, #4
 8004744:	0452      	lsls	r2, r2, #17
 8004746:	430a      	orrs	r2, r1
 8004748:	491f      	ldr	r1, [pc, #124]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474a:	4313      	orrs	r3, r2
 800474c:	614b      	str	r3, [r1, #20]
 800474e:	e011      	b.n	8004774 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004750:	4b1d      	ldr	r3, [pc, #116]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004758:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6892      	ldr	r2, [r2, #8]
 8004760:	0211      	lsls	r1, r2, #8
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6912      	ldr	r2, [r2, #16]
 8004766:	0852      	lsrs	r2, r2, #1
 8004768:	3a01      	subs	r2, #1
 800476a:	0652      	lsls	r2, r2, #25
 800476c:	430a      	orrs	r2, r1
 800476e:	4916      	ldr	r1, [pc, #88]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004774:	4b14      	ldr	r3, [pc, #80]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a13      	ldr	r2, [pc, #76]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004780:	f7fd fb98 	bl	8001eb4 <HAL_GetTick>
 8004784:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004786:	e009      	b.n	800479c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004788:	f7fd fb94 	bl	8001eb4 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d902      	bls.n	800479c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	73fb      	strb	r3, [r7, #15]
          break;
 800479a:	e005      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800479c:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ef      	beq.n	8004788 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047ae:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	4904      	ldr	r1, [pc, #16]	@ (80047c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000

080047cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d079      	beq.n	80048d2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fd f8ba 	bl	800196c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b10      	cmp	r3, #16
 800480c:	d058      	beq.n	80048c0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	22ca      	movs	r2, #202	@ 0xca
 8004814:	625a      	str	r2, [r3, #36]	@ 0x24
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2253      	movs	r2, #83	@ 0x53
 800481c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f880 	bl	8004924 <RTC_EnterInitMode>
 8004824:	4603      	mov	r3, r0
 8004826:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d127      	bne.n	800487e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800483c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004840:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6899      	ldr	r1, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	68d2      	ldr	r2, [r2, #12]
 8004868:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6919      	ldr	r1, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	041a      	lsls	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f884 	bl	800498c <RTC_ExitInitMode>
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d113      	bne.n	80048b6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0203 	bic.w	r2, r2, #3
 800489c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	22ff      	movs	r2, #255	@ 0xff
 80048bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80048be:	e001      	b.n	80048c4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d103      	bne.n	80048d2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004920 <HAL_RTC_WaitForSynchro+0x44>)
 80048ea:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80048ec:	f7fd fae2 	bl	8001eb4 <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048f2:	e009      	b.n	8004908 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048f4:	f7fd fade 	bl	8001eb4 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004902:	d901      	bls.n	8004908 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e007      	b.n	8004918 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0ee      	beq.n	80048f4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	0003ff5f 	.word	0x0003ff5f

08004924 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d120      	bne.n	8004980 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f04f 32ff 	mov.w	r2, #4294967295
 8004946:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004948:	f7fd fab4 	bl	8001eb4 <HAL_GetTick>
 800494c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800494e:	e00d      	b.n	800496c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004950:	f7fd fab0 	bl	8001eb4 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800495e:	d905      	bls.n	800496c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2203      	movs	r2, #3
 8004968:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d102      	bne.n	8004980 <RTC_EnterInitMode+0x5c>
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d1e7      	bne.n	8004950 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004998:	4b1a      	ldr	r3, [pc, #104]	@ (8004a04 <RTC_ExitInitMode+0x78>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a19      	ldr	r2, [pc, #100]	@ (8004a04 <RTC_ExitInitMode+0x78>)
 800499e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049a2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80049a4:	4b17      	ldr	r3, [pc, #92]	@ (8004a04 <RTC_ExitInitMode+0x78>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10c      	bne.n	80049ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff93 	bl	80048dc <HAL_RTC_WaitForSynchro>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01e      	beq.n	80049fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2203      	movs	r2, #3
 80049c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	73fb      	strb	r3, [r7, #15]
 80049c8:	e017      	b.n	80049fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004a04 <RTC_ExitInitMode+0x78>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004a04 <RTC_ExitInitMode+0x78>)
 80049d0:	f023 0320 	bic.w	r3, r3, #32
 80049d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff ff80 	bl	80048dc <HAL_RTC_WaitForSynchro>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2203      	movs	r2, #3
 80049e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80049ee:	4b05      	ldr	r3, [pc, #20]	@ (8004a04 <RTC_ExitInitMode+0x78>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4a04      	ldr	r2, [pc, #16]	@ (8004a04 <RTC_ExitInitMode+0x78>)
 80049f4:	f043 0320 	orr.w	r3, r3, #32
 80049f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40002800 	.word	0x40002800

08004a08 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e07f      	b.n	8004b22 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	22ca      	movs	r2, #202	@ 0xca
 8004a38:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2253      	movs	r2, #83	@ 0x53
 8004a40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a50:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004a62:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d120      	bne.n	8004ab4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8004a72:	f7fd fa1f 	bl	8001eb4 <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8004a78:	e015      	b.n	8004aa6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a7a:	f7fd fa1b 	bl	8001eb4 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a88:	d90d      	bls.n	8004aa6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	22ff      	movs	r2, #255	@ 0xff
 8004a90:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2203      	movs	r2, #3
 8004a96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e03d      	b.n	8004b22 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0e2      	beq.n	8004a7a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f023 0107 	bic.w	r1, r3, #7
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004ad0:	4b16      	ldr	r3, [pc, #88]	@ (8004b2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a15      	ldr	r2, [pc, #84]	@ (8004b2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ada:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004adc:	4b13      	ldr	r3, [pc, #76]	@ (8004b2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4a12      	ldr	r2, [pc, #72]	@ (8004b2c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8004ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ae6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004af6:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b06:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	22ff      	movs	r2, #255	@ 0xff
 8004b0e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40010400 	.word	0x40010400

08004b30 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004b38:	4b0f      	ldr	r3, [pc, #60]	@ (8004b78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004b3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004b3e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00b      	beq.n	8004b66 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004b5e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f80b 	bl	8004b7c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40010400 	.word	0x40010400

08004b7c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e040      	b.n	8004c24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc ff14 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2224      	movs	r2, #36	@ 0x24
 8004bbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 ffdc 	bl	8005b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fd21 	bl	8005624 <UART_SetConfig>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e01b      	b.n	8004c24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f001 f85b 	bl	8005cd8 <UART_CheckIdleState>
 8004c22:	4603      	mov	r3, r0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	@ 0x28
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d177      	bne.n	8004d34 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_UART_Transmit+0x24>
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e070      	b.n	8004d36 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2221      	movs	r2, #33	@ 0x21
 8004c60:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c62:	f7fd f927 	bl	8001eb4 <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	88fa      	ldrh	r2, [r7, #6]
 8004c74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c80:	d108      	bne.n	8004c94 <HAL_UART_Transmit+0x68>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d104      	bne.n	8004c94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	e003      	b.n	8004c9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c9c:	e02f      	b.n	8004cfe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2180      	movs	r1, #128	@ 0x80
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f001 f8bd 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d004      	beq.n	8004cbe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e03b      	b.n	8004d36 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10b      	bne.n	8004cdc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	881a      	ldrh	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	e007      	b.n	8004cec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	781a      	ldrb	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1c9      	bne.n	8004c9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2140      	movs	r1, #64	@ 0x40
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f001 f887 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e005      	b.n	8004d36 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	e000      	b.n	8004d36 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
  }
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b08a      	sub	sp, #40	@ 0x28
 8004d42:	af02      	add	r7, sp, #8
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	f040 80b6 	bne.w	8004ec6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_UART_Receive+0x28>
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e0ae      	b.n	8004ec8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2222      	movs	r2, #34	@ 0x22
 8004d76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d80:	f7fd f898 	bl	8001eb4 <HAL_GetTick>
 8004d84:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	88fa      	ldrh	r2, [r7, #6]
 8004d92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9e:	d10e      	bne.n	8004dbe <HAL_UART_Receive+0x80>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d105      	bne.n	8004db4 <HAL_UART_Receive+0x76>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004dae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004db2:	e02d      	b.n	8004e10 <HAL_UART_Receive+0xd2>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	22ff      	movs	r2, #255	@ 0xff
 8004db8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dbc:	e028      	b.n	8004e10 <HAL_UART_Receive+0xd2>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10d      	bne.n	8004de2 <HAL_UART_Receive+0xa4>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <HAL_UART_Receive+0x9a>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	22ff      	movs	r2, #255	@ 0xff
 8004dd2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dd6:	e01b      	b.n	8004e10 <HAL_UART_Receive+0xd2>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	227f      	movs	r2, #127	@ 0x7f
 8004ddc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004de0:	e016      	b.n	8004e10 <HAL_UART_Receive+0xd2>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dea:	d10d      	bne.n	8004e08 <HAL_UART_Receive+0xca>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <HAL_UART_Receive+0xc0>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	227f      	movs	r2, #127	@ 0x7f
 8004df8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dfc:	e008      	b.n	8004e10 <HAL_UART_Receive+0xd2>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	223f      	movs	r2, #63	@ 0x3f
 8004e02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e06:	e003      	b.n	8004e10 <HAL_UART_Receive+0xd2>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e16:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e20:	d108      	bne.n	8004e34 <HAL_UART_Receive+0xf6>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d104      	bne.n	8004e34 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e003      	b.n	8004e3c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e3c:	e037      	b.n	8004eae <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2200      	movs	r2, #0
 8004e46:	2120      	movs	r1, #32
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 ffed 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e033      	b.n	8004ec8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10c      	bne.n	8004e80 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	8a7b      	ldrh	r3, [r7, #18]
 8004e70:	4013      	ands	r3, r2
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	e00d      	b.n	8004e9c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	8a7b      	ldrh	r3, [r7, #18]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	4013      	ands	r3, r2
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1c1      	bne.n	8004e3e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e000      	b.n	8004ec8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004ec6:	2302      	movs	r3, #2
  }
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3720      	adds	r7, #32
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b08b      	sub	sp, #44	@ 0x2c
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d147      	bne.n	8004f76 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <HAL_UART_Transmit_IT+0x22>
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e040      	b.n	8004f78 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	88fa      	ldrh	r2, [r7, #6]
 8004f00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2221      	movs	r2, #33	@ 0x21
 8004f1e:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f28:	d107      	bne.n	8004f3a <HAL_UART_Transmit_IT+0x6a>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d103      	bne.n	8004f3a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a13      	ldr	r2, [pc, #76]	@ (8004f84 <HAL_UART_Transmit_IT+0xb4>)
 8004f36:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004f38:	e002      	b.n	8004f40 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a12      	ldr	r2, [pc, #72]	@ (8004f88 <HAL_UART_Transmit_IT+0xb8>)
 8004f3e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5e:	623b      	str	r3, [r7, #32]
 8004f60:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	69f9      	ldr	r1, [r7, #28]
 8004f64:	6a3a      	ldr	r2, [r7, #32]
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e6      	bne.n	8004f40 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e000      	b.n	8004f78 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004f76:	2302      	movs	r3, #2
  }
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	372c      	adds	r7, #44	@ 0x2c
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	0800622f 	.word	0x0800622f
 8004f88:	08006179 	.word	0x08006179

08004f8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	@ 0x28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	4613      	mov	r3, r2
 8004f98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d137      	bne.n	8005014 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_UART_Receive_IT+0x24>
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e030      	b.n	8005016 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a18      	ldr	r2, [pc, #96]	@ (8005020 <HAL_UART_Receive_IT+0x94>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d01f      	beq.n	8005004 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d018      	beq.n	8005004 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	69f9      	ldr	r1, [r7, #28]
 8004ff6:	6a3a      	ldr	r2, [r7, #32]
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e6      	bne.n	8004fd2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	461a      	mov	r2, r3
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 ff74 	bl	8005ef8 <UART_Start_Receive_IT>
 8005010:	4603      	mov	r3, r0
 8005012:	e000      	b.n	8005016 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	3728      	adds	r7, #40	@ 0x28
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40008000 	.word	0x40008000

08005024 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b0ba      	sub	sp, #232	@ 0xe8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800504a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800504e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005052:	4013      	ands	r3, r2
 8005054:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005058:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d115      	bne.n	800508c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00f      	beq.n	800508c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800506c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d009      	beq.n	800508c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 82ae 	beq.w	80055de <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	4798      	blx	r3
      }
      return;
 800508a:	e2a8      	b.n	80055de <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800508c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8117 	beq.w	80052c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80050a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80050a6:	4b85      	ldr	r3, [pc, #532]	@ (80052bc <HAL_UART_IRQHandler+0x298>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 810a 	beq.w	80052c4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d011      	beq.n	80050e0 <HAL_UART_IRQHandler+0xbc>
 80050bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2201      	movs	r2, #1
 80050ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d6:	f043 0201 	orr.w	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d011      	beq.n	8005110 <HAL_UART_IRQHandler+0xec>
 80050ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2202      	movs	r2, #2
 80050fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005106:	f043 0204 	orr.w	r2, r3, #4
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d011      	beq.n	8005140 <HAL_UART_IRQHandler+0x11c>
 800511c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00b      	beq.n	8005140 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2204      	movs	r2, #4
 800512e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005136:	f043 0202 	orr.w	r2, r3, #2
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d017      	beq.n	800517c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800514c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d105      	bne.n	8005164 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800515c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00b      	beq.n	800517c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2208      	movs	r2, #8
 800516a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005172:	f043 0208 	orr.w	r2, r3, #8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800517c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005180:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005184:	2b00      	cmp	r3, #0
 8005186:	d012      	beq.n	80051ae <HAL_UART_IRQHandler+0x18a>
 8005188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800518c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00c      	beq.n	80051ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800519c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8214 	beq.w	80055e2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80051ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00d      	beq.n	80051e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d007      	beq.n	80051e2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f6:	2b40      	cmp	r3, #64	@ 0x40
 80051f8:	d005      	beq.n	8005206 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005202:	2b00      	cmp	r3, #0
 8005204:	d04f      	beq.n	80052a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 ff3c 	bl	8006084 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005216:	2b40      	cmp	r3, #64	@ 0x40
 8005218:	d141      	bne.n	800529e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3308      	adds	r3, #8
 8005220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005246:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800524a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800525e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1d9      	bne.n	800521a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526a:	2b00      	cmp	r3, #0
 800526c:	d013      	beq.n	8005296 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005272:	4a13      	ldr	r2, [pc, #76]	@ (80052c0 <HAL_UART_IRQHandler+0x29c>)
 8005274:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800527a:	4618      	mov	r0, r3
 800527c:	f7fc ff75 	bl	800216a <HAL_DMA_Abort_IT>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d017      	beq.n	80052b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800528a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005290:	4610      	mov	r0, r2
 8005292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005294:	e00f      	b.n	80052b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f9ae 	bl	80055f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800529c:	e00b      	b.n	80052b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f9aa 	bl	80055f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a4:	e007      	b.n	80052b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f9a6 	bl	80055f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80052b4:	e195      	b.n	80055e2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b6:	bf00      	nop
    return;
 80052b8:	e193      	b.n	80055e2 <HAL_UART_IRQHandler+0x5be>
 80052ba:	bf00      	nop
 80052bc:	04000120 	.word	0x04000120
 80052c0:	0800614d 	.word	0x0800614d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f040 814e 	bne.w	800556a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 8147 	beq.w	800556a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8140 	beq.w	800556a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2210      	movs	r2, #16
 80052f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fc:	2b40      	cmp	r3, #64	@ 0x40
 80052fe:	f040 80b8 	bne.w	8005472 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800530e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 8167 	beq.w	80055e6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800531e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005322:	429a      	cmp	r2, r3
 8005324:	f080 815f 	bcs.w	80055e6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800532e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	f040 8086 	bne.w	8005450 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005358:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800535c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800536e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005372:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800537a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1da      	bne.n	8005344 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800539e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053a0:	f023 0301 	bic.w	r3, r3, #1
 80053a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e1      	bne.n	800538e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3308      	adds	r3, #8
 80053ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e3      	bne.n	80053ca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800541e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005420:	f023 0310 	bic.w	r3, r3, #16
 8005424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005434:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e4      	bne.n	8005410 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800544a:	4618      	mov	r0, r3
 800544c:	f7fc fe4f 	bl	80020ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005462:	b29b      	uxth	r3, r3
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	b29b      	uxth	r3, r3
 8005468:	4619      	mov	r1, r3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f8ce 	bl	800560c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005470:	e0b9      	b.n	80055e6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800547e:	b29b      	uxth	r3, r3
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80ab 	beq.w	80055ea <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 80a6 	beq.w	80055ea <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e4      	bne.n	800549e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3308      	adds	r3, #8
 80054da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	623b      	str	r3, [r7, #32]
   return(result);
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3308      	adds	r3, #8
 80054f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80054fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e3      	bne.n	80054d4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	60fb      	str	r3, [r7, #12]
   return(result);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f023 0310 	bic.w	r3, r3, #16
 8005534:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005542:	61fb      	str	r3, [r7, #28]
 8005544:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	69b9      	ldr	r1, [r7, #24]
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	617b      	str	r3, [r7, #20]
   return(result);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e4      	bne.n	8005520 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800555c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f852 	bl	800560c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005568:	e03f      	b.n	80055ea <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800556a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800556e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <HAL_UART_IRQHandler+0x570>
 8005576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800557a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800558a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f001 f895 	bl	80066bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005592:	e02d      	b.n	80055f0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00e      	beq.n	80055be <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80055a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01c      	beq.n	80055ee <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4798      	blx	r3
    }
    return;
 80055bc:	e017      	b.n	80055ee <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d012      	beq.n	80055f0 <HAL_UART_IRQHandler+0x5cc>
 80055ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00c      	beq.n	80055f0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fe89 	bl	80062ee <UART_EndTransmit_IT>
    return;
 80055dc:	e008      	b.n	80055f0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80055de:	bf00      	nop
 80055e0:	e006      	b.n	80055f0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80055e2:	bf00      	nop
 80055e4:	e004      	b.n	80055f0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80055e6:	bf00      	nop
 80055e8:	e002      	b.n	80055f0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80055ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80055f0:	37e8      	adds	r7, #232	@ 0xe8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop

080055f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005628:	b08a      	sub	sp, #40	@ 0x28
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	431a      	orrs	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	431a      	orrs	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	4313      	orrs	r3, r2
 800564a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4ba4      	ldr	r3, [pc, #656]	@ (80058e4 <UART_SetConfig+0x2c0>)
 8005654:	4013      	ands	r3, r2
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800565c:	430b      	orrs	r3, r1
 800565e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a99      	ldr	r2, [pc, #612]	@ (80058e8 <UART_SetConfig+0x2c4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800568c:	4313      	orrs	r3, r2
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a0:	430a      	orrs	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a90      	ldr	r2, [pc, #576]	@ (80058ec <UART_SetConfig+0x2c8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d126      	bne.n	80056fc <UART_SetConfig+0xd8>
 80056ae:	4b90      	ldr	r3, [pc, #576]	@ (80058f0 <UART_SetConfig+0x2cc>)
 80056b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b4:	f003 0303 	and.w	r3, r3, #3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d81b      	bhi.n	80056f4 <UART_SetConfig+0xd0>
 80056bc:	a201      	add	r2, pc, #4	@ (adr r2, 80056c4 <UART_SetConfig+0xa0>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	080056d5 	.word	0x080056d5
 80056c8:	080056e5 	.word	0x080056e5
 80056cc:	080056dd 	.word	0x080056dd
 80056d0:	080056ed 	.word	0x080056ed
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056da:	e116      	b.n	800590a <UART_SetConfig+0x2e6>
 80056dc:	2302      	movs	r3, #2
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056e2:	e112      	b.n	800590a <UART_SetConfig+0x2e6>
 80056e4:	2304      	movs	r3, #4
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ea:	e10e      	b.n	800590a <UART_SetConfig+0x2e6>
 80056ec:	2308      	movs	r3, #8
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f2:	e10a      	b.n	800590a <UART_SetConfig+0x2e6>
 80056f4:	2310      	movs	r3, #16
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fa:	e106      	b.n	800590a <UART_SetConfig+0x2e6>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a7c      	ldr	r2, [pc, #496]	@ (80058f4 <UART_SetConfig+0x2d0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d138      	bne.n	8005778 <UART_SetConfig+0x154>
 8005706:	4b7a      	ldr	r3, [pc, #488]	@ (80058f0 <UART_SetConfig+0x2cc>)
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570c:	f003 030c 	and.w	r3, r3, #12
 8005710:	2b0c      	cmp	r3, #12
 8005712:	d82d      	bhi.n	8005770 <UART_SetConfig+0x14c>
 8005714:	a201      	add	r2, pc, #4	@ (adr r2, 800571c <UART_SetConfig+0xf8>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005751 	.word	0x08005751
 8005720:	08005771 	.word	0x08005771
 8005724:	08005771 	.word	0x08005771
 8005728:	08005771 	.word	0x08005771
 800572c:	08005761 	.word	0x08005761
 8005730:	08005771 	.word	0x08005771
 8005734:	08005771 	.word	0x08005771
 8005738:	08005771 	.word	0x08005771
 800573c:	08005759 	.word	0x08005759
 8005740:	08005771 	.word	0x08005771
 8005744:	08005771 	.word	0x08005771
 8005748:	08005771 	.word	0x08005771
 800574c:	08005769 	.word	0x08005769
 8005750:	2300      	movs	r3, #0
 8005752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005756:	e0d8      	b.n	800590a <UART_SetConfig+0x2e6>
 8005758:	2302      	movs	r3, #2
 800575a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575e:	e0d4      	b.n	800590a <UART_SetConfig+0x2e6>
 8005760:	2304      	movs	r3, #4
 8005762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005766:	e0d0      	b.n	800590a <UART_SetConfig+0x2e6>
 8005768:	2308      	movs	r3, #8
 800576a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800576e:	e0cc      	b.n	800590a <UART_SetConfig+0x2e6>
 8005770:	2310      	movs	r3, #16
 8005772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005776:	e0c8      	b.n	800590a <UART_SetConfig+0x2e6>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a5e      	ldr	r2, [pc, #376]	@ (80058f8 <UART_SetConfig+0x2d4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d125      	bne.n	80057ce <UART_SetConfig+0x1aa>
 8005782:	4b5b      	ldr	r3, [pc, #364]	@ (80058f0 <UART_SetConfig+0x2cc>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005788:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800578c:	2b30      	cmp	r3, #48	@ 0x30
 800578e:	d016      	beq.n	80057be <UART_SetConfig+0x19a>
 8005790:	2b30      	cmp	r3, #48	@ 0x30
 8005792:	d818      	bhi.n	80057c6 <UART_SetConfig+0x1a2>
 8005794:	2b20      	cmp	r3, #32
 8005796:	d00a      	beq.n	80057ae <UART_SetConfig+0x18a>
 8005798:	2b20      	cmp	r3, #32
 800579a:	d814      	bhi.n	80057c6 <UART_SetConfig+0x1a2>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <UART_SetConfig+0x182>
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d008      	beq.n	80057b6 <UART_SetConfig+0x192>
 80057a4:	e00f      	b.n	80057c6 <UART_SetConfig+0x1a2>
 80057a6:	2300      	movs	r3, #0
 80057a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ac:	e0ad      	b.n	800590a <UART_SetConfig+0x2e6>
 80057ae:	2302      	movs	r3, #2
 80057b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b4:	e0a9      	b.n	800590a <UART_SetConfig+0x2e6>
 80057b6:	2304      	movs	r3, #4
 80057b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057bc:	e0a5      	b.n	800590a <UART_SetConfig+0x2e6>
 80057be:	2308      	movs	r3, #8
 80057c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c4:	e0a1      	b.n	800590a <UART_SetConfig+0x2e6>
 80057c6:	2310      	movs	r3, #16
 80057c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057cc:	e09d      	b.n	800590a <UART_SetConfig+0x2e6>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a4a      	ldr	r2, [pc, #296]	@ (80058fc <UART_SetConfig+0x2d8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d125      	bne.n	8005824 <UART_SetConfig+0x200>
 80057d8:	4b45      	ldr	r3, [pc, #276]	@ (80058f0 <UART_SetConfig+0x2cc>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e4:	d016      	beq.n	8005814 <UART_SetConfig+0x1f0>
 80057e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e8:	d818      	bhi.n	800581c <UART_SetConfig+0x1f8>
 80057ea:	2b80      	cmp	r3, #128	@ 0x80
 80057ec:	d00a      	beq.n	8005804 <UART_SetConfig+0x1e0>
 80057ee:	2b80      	cmp	r3, #128	@ 0x80
 80057f0:	d814      	bhi.n	800581c <UART_SetConfig+0x1f8>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <UART_SetConfig+0x1d8>
 80057f6:	2b40      	cmp	r3, #64	@ 0x40
 80057f8:	d008      	beq.n	800580c <UART_SetConfig+0x1e8>
 80057fa:	e00f      	b.n	800581c <UART_SetConfig+0x1f8>
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005802:	e082      	b.n	800590a <UART_SetConfig+0x2e6>
 8005804:	2302      	movs	r3, #2
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580a:	e07e      	b.n	800590a <UART_SetConfig+0x2e6>
 800580c:	2304      	movs	r3, #4
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005812:	e07a      	b.n	800590a <UART_SetConfig+0x2e6>
 8005814:	2308      	movs	r3, #8
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800581a:	e076      	b.n	800590a <UART_SetConfig+0x2e6>
 800581c:	2310      	movs	r3, #16
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005822:	e072      	b.n	800590a <UART_SetConfig+0x2e6>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a35      	ldr	r2, [pc, #212]	@ (8005900 <UART_SetConfig+0x2dc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d12a      	bne.n	8005884 <UART_SetConfig+0x260>
 800582e:	4b30      	ldr	r3, [pc, #192]	@ (80058f0 <UART_SetConfig+0x2cc>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005834:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800583c:	d01a      	beq.n	8005874 <UART_SetConfig+0x250>
 800583e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005842:	d81b      	bhi.n	800587c <UART_SetConfig+0x258>
 8005844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005848:	d00c      	beq.n	8005864 <UART_SetConfig+0x240>
 800584a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800584e:	d815      	bhi.n	800587c <UART_SetConfig+0x258>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <UART_SetConfig+0x238>
 8005854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005858:	d008      	beq.n	800586c <UART_SetConfig+0x248>
 800585a:	e00f      	b.n	800587c <UART_SetConfig+0x258>
 800585c:	2300      	movs	r3, #0
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005862:	e052      	b.n	800590a <UART_SetConfig+0x2e6>
 8005864:	2302      	movs	r3, #2
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800586a:	e04e      	b.n	800590a <UART_SetConfig+0x2e6>
 800586c:	2304      	movs	r3, #4
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005872:	e04a      	b.n	800590a <UART_SetConfig+0x2e6>
 8005874:	2308      	movs	r3, #8
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587a:	e046      	b.n	800590a <UART_SetConfig+0x2e6>
 800587c:	2310      	movs	r3, #16
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005882:	e042      	b.n	800590a <UART_SetConfig+0x2e6>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <UART_SetConfig+0x2c4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d13a      	bne.n	8005904 <UART_SetConfig+0x2e0>
 800588e:	4b18      	ldr	r3, [pc, #96]	@ (80058f0 <UART_SetConfig+0x2cc>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005894:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005898:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800589c:	d01a      	beq.n	80058d4 <UART_SetConfig+0x2b0>
 800589e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058a2:	d81b      	bhi.n	80058dc <UART_SetConfig+0x2b8>
 80058a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a8:	d00c      	beq.n	80058c4 <UART_SetConfig+0x2a0>
 80058aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058ae:	d815      	bhi.n	80058dc <UART_SetConfig+0x2b8>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <UART_SetConfig+0x298>
 80058b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b8:	d008      	beq.n	80058cc <UART_SetConfig+0x2a8>
 80058ba:	e00f      	b.n	80058dc <UART_SetConfig+0x2b8>
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c2:	e022      	b.n	800590a <UART_SetConfig+0x2e6>
 80058c4:	2302      	movs	r3, #2
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ca:	e01e      	b.n	800590a <UART_SetConfig+0x2e6>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d2:	e01a      	b.n	800590a <UART_SetConfig+0x2e6>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058da:	e016      	b.n	800590a <UART_SetConfig+0x2e6>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e2:	e012      	b.n	800590a <UART_SetConfig+0x2e6>
 80058e4:	efff69f3 	.word	0xefff69f3
 80058e8:	40008000 	.word	0x40008000
 80058ec:	40013800 	.word	0x40013800
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40004400 	.word	0x40004400
 80058f8:	40004800 	.word	0x40004800
 80058fc:	40004c00 	.word	0x40004c00
 8005900:	40005000 	.word	0x40005000
 8005904:	2310      	movs	r3, #16
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a9f      	ldr	r2, [pc, #636]	@ (8005b8c <UART_SetConfig+0x568>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d17a      	bne.n	8005a0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005914:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005918:	2b08      	cmp	r3, #8
 800591a:	d824      	bhi.n	8005966 <UART_SetConfig+0x342>
 800591c:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <UART_SetConfig+0x300>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005949 	.word	0x08005949
 8005928:	08005967 	.word	0x08005967
 800592c:	08005951 	.word	0x08005951
 8005930:	08005967 	.word	0x08005967
 8005934:	08005957 	.word	0x08005957
 8005938:	08005967 	.word	0x08005967
 800593c:	08005967 	.word	0x08005967
 8005940:	08005967 	.word	0x08005967
 8005944:	0800595f 	.word	0x0800595f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7fe f9e8 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 800594c:	61f8      	str	r0, [r7, #28]
        break;
 800594e:	e010      	b.n	8005972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005950:	4b8f      	ldr	r3, [pc, #572]	@ (8005b90 <UART_SetConfig+0x56c>)
 8005952:	61fb      	str	r3, [r7, #28]
        break;
 8005954:	e00d      	b.n	8005972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005956:	f7fe f949 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 800595a:	61f8      	str	r0, [r7, #28]
        break;
 800595c:	e009      	b.n	8005972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800595e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005962:	61fb      	str	r3, [r7, #28]
        break;
 8005964:	e005      	b.n	8005972 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005970:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80fb 	beq.w	8005b70 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4413      	add	r3, r2
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	429a      	cmp	r2, r3
 8005988:	d305      	bcc.n	8005996 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	429a      	cmp	r2, r3
 8005994:	d903      	bls.n	800599e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800599c:	e0e8      	b.n	8005b70 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	2200      	movs	r2, #0
 80059a2:	461c      	mov	r4, r3
 80059a4:	4615      	mov	r5, r2
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	022b      	lsls	r3, r5, #8
 80059b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80059b4:	0222      	lsls	r2, r4, #8
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	6849      	ldr	r1, [r1, #4]
 80059ba:	0849      	lsrs	r1, r1, #1
 80059bc:	2000      	movs	r0, #0
 80059be:	4688      	mov	r8, r1
 80059c0:	4681      	mov	r9, r0
 80059c2:	eb12 0a08 	adds.w	sl, r2, r8
 80059c6:	eb43 0b09 	adc.w	fp, r3, r9
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	603b      	str	r3, [r7, #0]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d8:	4650      	mov	r0, sl
 80059da:	4659      	mov	r1, fp
 80059dc:	f7fb f954 	bl	8000c88 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4613      	mov	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ee:	d308      	bcc.n	8005a02 <UART_SetConfig+0x3de>
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059f6:	d204      	bcs.n	8005a02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	60da      	str	r2, [r3, #12]
 8005a00:	e0b6      	b.n	8005b70 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a08:	e0b2      	b.n	8005b70 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a12:	d15e      	bne.n	8005ad2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005a14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d828      	bhi.n	8005a6e <UART_SetConfig+0x44a>
 8005a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a24 <UART_SetConfig+0x400>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a49 	.word	0x08005a49
 8005a28:	08005a51 	.word	0x08005a51
 8005a2c:	08005a59 	.word	0x08005a59
 8005a30:	08005a6f 	.word	0x08005a6f
 8005a34:	08005a5f 	.word	0x08005a5f
 8005a38:	08005a6f 	.word	0x08005a6f
 8005a3c:	08005a6f 	.word	0x08005a6f
 8005a40:	08005a6f 	.word	0x08005a6f
 8005a44:	08005a67 	.word	0x08005a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fe f968 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8005a4c:	61f8      	str	r0, [r7, #28]
        break;
 8005a4e:	e014      	b.n	8005a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a50:	f7fe f97a 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 8005a54:	61f8      	str	r0, [r7, #28]
        break;
 8005a56:	e010      	b.n	8005a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a58:	4b4d      	ldr	r3, [pc, #308]	@ (8005b90 <UART_SetConfig+0x56c>)
 8005a5a:	61fb      	str	r3, [r7, #28]
        break;
 8005a5c:	e00d      	b.n	8005a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a5e:	f7fe f8c5 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8005a62:	61f8      	str	r0, [r7, #28]
        break;
 8005a64:	e009      	b.n	8005a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a6a:	61fb      	str	r3, [r7, #28]
        break;
 8005a6c:	e005      	b.n	8005a7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d077      	beq.n	8005b70 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	005a      	lsls	r2, r3, #1
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	085b      	lsrs	r3, r3, #1
 8005a8a:	441a      	add	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	2b0f      	cmp	r3, #15
 8005a9a:	d916      	bls.n	8005aca <UART_SetConfig+0x4a6>
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa2:	d212      	bcs.n	8005aca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f023 030f 	bic.w	r3, r3, #15
 8005aac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	8afb      	ldrh	r3, [r7, #22]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	8afa      	ldrh	r2, [r7, #22]
 8005ac6:	60da      	str	r2, [r3, #12]
 8005ac8:	e052      	b.n	8005b70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ad0:	e04e      	b.n	8005b70 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d827      	bhi.n	8005b2a <UART_SetConfig+0x506>
 8005ada:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <UART_SetConfig+0x4bc>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005b05 	.word	0x08005b05
 8005ae4:	08005b0d 	.word	0x08005b0d
 8005ae8:	08005b15 	.word	0x08005b15
 8005aec:	08005b2b 	.word	0x08005b2b
 8005af0:	08005b1b 	.word	0x08005b1b
 8005af4:	08005b2b 	.word	0x08005b2b
 8005af8:	08005b2b 	.word	0x08005b2b
 8005afc:	08005b2b 	.word	0x08005b2b
 8005b00:	08005b23 	.word	0x08005b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b04:	f7fe f90a 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8005b08:	61f8      	str	r0, [r7, #28]
        break;
 8005b0a:	e014      	b.n	8005b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b0c:	f7fe f91c 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 8005b10:	61f8      	str	r0, [r7, #28]
        break;
 8005b12:	e010      	b.n	8005b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b14:	4b1e      	ldr	r3, [pc, #120]	@ (8005b90 <UART_SetConfig+0x56c>)
 8005b16:	61fb      	str	r3, [r7, #28]
        break;
 8005b18:	e00d      	b.n	8005b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b1a:	f7fe f867 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8005b1e:	61f8      	str	r0, [r7, #28]
        break;
 8005b20:	e009      	b.n	8005b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b26:	61fb      	str	r3, [r7, #28]
        break;
 8005b28:	e005      	b.n	8005b36 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b34:	bf00      	nop
    }

    if (pclk != 0U)
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d019      	beq.n	8005b70 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	085a      	lsrs	r2, r3, #1
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	441a      	add	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	2b0f      	cmp	r3, #15
 8005b54:	d909      	bls.n	8005b6a <UART_SetConfig+0x546>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b5c:	d205      	bcs.n	8005b6a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60da      	str	r2, [r3, #12]
 8005b68:	e002      	b.n	8005b70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3728      	adds	r7, #40	@ 0x28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40008000 	.word	0x40008000
 8005b90:	00f42400 	.word	0x00f42400

08005b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01a      	beq.n	8005caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c92:	d10a      	bne.n	8005caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
  }
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b098      	sub	sp, #96	@ 0x60
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ce8:	f7fc f8e4 	bl	8001eb4 <HAL_GetTick>
 8005cec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d12e      	bne.n	8005d5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d04:	2200      	movs	r2, #0
 8005d06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f88c 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d021      	beq.n	8005d5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e062      	b.n	8005e20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b04      	cmp	r3, #4
 8005d66:	d149      	bne.n	8005dfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d70:	2200      	movs	r2, #0
 8005d72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f856 	bl	8005e28 <UART_WaitOnFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d03c      	beq.n	8005dfc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e6      	bne.n	8005d82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3308      	adds	r3, #8
 8005dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0301 	bic.w	r3, r3, #1
 8005dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dd4:	61fa      	str	r2, [r7, #28]
 8005dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	69b9      	ldr	r1, [r7, #24]
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	617b      	str	r3, [r7, #20]
   return(result);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e5      	bne.n	8005db4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e011      	b.n	8005e20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3758      	adds	r7, #88	@ 0x58
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e38:	e049      	b.n	8005ece <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	d045      	beq.n	8005ece <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e42:	f7fc f837 	bl	8001eb4 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e048      	b.n	8005eee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d031      	beq.n	8005ece <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d110      	bne.n	8005e9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f8ff 	bl	8006084 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2208      	movs	r2, #8
 8005e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e029      	b.n	8005eee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea8:	d111      	bne.n	8005ece <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005eb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f8e5 	bl	8006084 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e00f      	b.n	8005eee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69da      	ldr	r2, [r3, #28]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	bf0c      	ite	eq
 8005ede:	2301      	moveq	r3, #1
 8005ee0:	2300      	movne	r3, #0
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d0a6      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b097      	sub	sp, #92	@ 0x5c
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	4613      	mov	r3, r2
 8005f04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	88fa      	ldrh	r2, [r7, #6]
 8005f10:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	88fa      	ldrh	r2, [r7, #6]
 8005f18:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f2a:	d10e      	bne.n	8005f4a <UART_Start_Receive_IT+0x52>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <UART_Start_Receive_IT+0x48>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005f3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f3e:	e02d      	b.n	8005f9c <UART_Start_Receive_IT+0xa4>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	22ff      	movs	r2, #255	@ 0xff
 8005f44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f48:	e028      	b.n	8005f9c <UART_Start_Receive_IT+0xa4>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10d      	bne.n	8005f6e <UART_Start_Receive_IT+0x76>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d104      	bne.n	8005f64 <UART_Start_Receive_IT+0x6c>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	22ff      	movs	r2, #255	@ 0xff
 8005f5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f62:	e01b      	b.n	8005f9c <UART_Start_Receive_IT+0xa4>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	227f      	movs	r2, #127	@ 0x7f
 8005f68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f6c:	e016      	b.n	8005f9c <UART_Start_Receive_IT+0xa4>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f76:	d10d      	bne.n	8005f94 <UART_Start_Receive_IT+0x9c>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d104      	bne.n	8005f8a <UART_Start_Receive_IT+0x92>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	227f      	movs	r2, #127	@ 0x7f
 8005f84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f88:	e008      	b.n	8005f9c <UART_Start_Receive_IT+0xa4>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	223f      	movs	r2, #63	@ 0x3f
 8005f8e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f92:	e003      	b.n	8005f9c <UART_Start_Receive_IT+0xa4>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2222      	movs	r2, #34	@ 0x22
 8005fa8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fcc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005fce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e5      	bne.n	8005fac <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe8:	d107      	bne.n	8005ffa <UART_Start_Receive_IT+0x102>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4a21      	ldr	r2, [pc, #132]	@ (800607c <UART_Start_Receive_IT+0x184>)
 8005ff6:	669a      	str	r2, [r3, #104]	@ 0x68
 8005ff8:	e002      	b.n	8006000 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4a20      	ldr	r2, [pc, #128]	@ (8006080 <UART_Start_Receive_IT+0x188>)
 8005ffe:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d019      	beq.n	800603c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800601c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006026:	637b      	str	r3, [r7, #52]	@ 0x34
 8006028:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800602c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e6      	bne.n	8006008 <UART_Start_Receive_IT+0x110>
 800603a:	e018      	b.n	800606e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	613b      	str	r3, [r7, #16]
   return(result);
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f043 0320 	orr.w	r3, r3, #32
 8006050:	653b      	str	r3, [r7, #80]	@ 0x50
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800605a:	623b      	str	r3, [r7, #32]
 800605c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605e:	69f9      	ldr	r1, [r7, #28]
 8006060:	6a3a      	ldr	r2, [r7, #32]
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	61bb      	str	r3, [r7, #24]
   return(result);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e6      	bne.n	800603c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	375c      	adds	r7, #92	@ 0x5c
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	08006501 	.word	0x08006501
 8006080:	08006345 	.word	0x08006345

08006084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b095      	sub	sp, #84	@ 0x54
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80060ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e6      	bne.n	800608c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3308      	adds	r3, #8
 80060c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3308      	adds	r3, #8
 80060dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e5      	bne.n	80060be <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d118      	bne.n	800612c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	60bb      	str	r3, [r7, #8]
   return(result);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f023 0310 	bic.w	r3, r3, #16
 800610e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6979      	ldr	r1, [r7, #20]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	613b      	str	r3, [r7, #16]
   return(result);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e6      	bne.n	80060fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006140:	bf00      	nop
 8006142:	3754      	adds	r7, #84	@ 0x54
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006158:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff fa44 	bl	80055f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006170:	bf00      	nop
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b08f      	sub	sp, #60	@ 0x3c
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006184:	2b21      	cmp	r3, #33	@ 0x21
 8006186:	d14c      	bne.n	8006222 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d132      	bne.n	80061fa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061b4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e6      	bne.n	8006194 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061da:	633b      	str	r3, [r7, #48]	@ 0x30
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	6979      	ldr	r1, [r7, #20]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	613b      	str	r3, [r7, #16]
   return(result);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e6      	bne.n	80061c6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80061f8:	e013      	b.n	8006222 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061fe:	781a      	ldrb	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006222:	bf00      	nop
 8006224:	373c      	adds	r7, #60	@ 0x3c
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800622e:	b480      	push	{r7}
 8006230:	b091      	sub	sp, #68	@ 0x44
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800623a:	2b21      	cmp	r3, #33	@ 0x21
 800623c:	d151      	bne.n	80062e2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d132      	bne.n	80062b0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	623b      	str	r3, [r7, #32]
   return(result);
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800625e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006268:	633b      	str	r3, [r7, #48]	@ 0x30
 800626a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800626e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e6      	bne.n	800624a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	60fb      	str	r3, [r7, #12]
   return(result);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006290:	637b      	str	r3, [r7, #52]	@ 0x34
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629a:	61fb      	str	r3, [r7, #28]
 800629c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	69b9      	ldr	r1, [r7, #24]
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	617b      	str	r3, [r7, #20]
   return(result);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e6      	bne.n	800627c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80062ae:	e018      	b.n	80062e2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80062b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b8:	881a      	ldrh	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c2:	b292      	uxth	r2, r2
 80062c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ca:	1c9a      	adds	r2, r3, #2
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80062e2:	bf00      	nop
 80062e4:	3744      	adds	r7, #68	@ 0x44
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b088      	sub	sp, #32
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	60bb      	str	r3, [r7, #8]
   return(result);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6979      	ldr	r1, [r7, #20]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	613b      	str	r3, [r7, #16]
   return(result);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e6      	bne.n	80062f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7fa ffd9 	bl	80012ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800633a:	bf00      	nop
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b09c      	sub	sp, #112	@ 0x70
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006352:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800635c:	2b22      	cmp	r3, #34	@ 0x22
 800635e:	f040 80be 	bne.w	80064de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006368:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800636c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006370:	b2d9      	uxtb	r1, r3
 8006372:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006376:	b2da      	uxtb	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637c:	400a      	ands	r2, r1
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f040 80a3 	bne.w	80064f2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e6      	bne.n	80063ac <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f0:	f023 0301 	bic.w	r3, r3, #1
 80063f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3308      	adds	r3, #8
 80063fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80063fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006400:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006404:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800640c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e5      	bne.n	80063de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2220      	movs	r2, #32
 8006416:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a34      	ldr	r2, [pc, #208]	@ (80064fc <UART_RxISR_8BIT+0x1b8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d01f      	beq.n	8006470 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d018      	beq.n	8006470 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	623b      	str	r3, [r7, #32]
   return(result);
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006452:	663b      	str	r3, [r7, #96]	@ 0x60
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800645c:	633b      	str	r3, [r7, #48]	@ 0x30
 800645e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800646a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e6      	bne.n	800643e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006474:	2b01      	cmp	r3, #1
 8006476:	d12e      	bne.n	80064d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	e853 3f00 	ldrex	r3, [r3]
 800648a:	60fb      	str	r3, [r7, #12]
   return(result);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0310 	bic.w	r3, r3, #16
 8006492:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800649c:	61fb      	str	r3, [r7, #28]
 800649e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	69b9      	ldr	r1, [r7, #24]
 80064a2:	69fa      	ldr	r2, [r7, #28]
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	617b      	str	r3, [r7, #20]
   return(result);
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e6      	bne.n	800647e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	f003 0310 	and.w	r3, r3, #16
 80064ba:	2b10      	cmp	r3, #16
 80064bc:	d103      	bne.n	80064c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2210      	movs	r2, #16
 80064c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff f89c 	bl	800560c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064d4:	e00d      	b.n	80064f2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fa fda4 	bl	8001024 <HAL_UART_RxCpltCallback>
}
 80064dc:	e009      	b.n	80064f2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	8b1b      	ldrh	r3, [r3, #24]
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0208 	orr.w	r2, r2, #8
 80064ee:	b292      	uxth	r2, r2
 80064f0:	831a      	strh	r2, [r3, #24]
}
 80064f2:	bf00      	nop
 80064f4:	3770      	adds	r7, #112	@ 0x70
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40008000 	.word	0x40008000

08006500 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b09c      	sub	sp, #112	@ 0x70
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800650e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006518:	2b22      	cmp	r3, #34	@ 0x22
 800651a:	f040 80be 	bne.w	800669a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006524:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800652e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006532:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006536:	4013      	ands	r3, r2
 8006538:	b29a      	uxth	r2, r3
 800653a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800653c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006542:	1c9a      	adds	r2, r3, #2
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006560:	b29b      	uxth	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 80a3 	bne.w	80066ae <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800657c:	667b      	str	r3, [r7, #100]	@ 0x64
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006586:	657b      	str	r3, [r7, #84]	@ 0x54
 8006588:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800658c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e6      	bne.n	8006568 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80065ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80065bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e5      	bne.n	800659a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a34      	ldr	r2, [pc, #208]	@ (80066b8 <UART_RxISR_16BIT+0x1b8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d01f      	beq.n	800662c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d018      	beq.n	800662c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	61fb      	str	r3, [r7, #28]
   return(result);
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800660e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800661a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800661e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e6      	bne.n	80065fa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006630:	2b01      	cmp	r3, #1
 8006632:	d12e      	bne.n	8006692 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	60bb      	str	r3, [r7, #8]
   return(result);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f023 0310 	bic.w	r3, r3, #16
 800664e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	461a      	mov	r2, r3
 8006656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6979      	ldr	r1, [r7, #20]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	613b      	str	r3, [r7, #16]
   return(result);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e6      	bne.n	800663a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b10      	cmp	r3, #16
 8006678:	d103      	bne.n	8006682 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2210      	movs	r2, #16
 8006680:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fe ffbe 	bl	800560c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006690:	e00d      	b.n	80066ae <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fa fcc6 	bl	8001024 <HAL_UART_RxCpltCallback>
}
 8006698:	e009      	b.n	80066ae <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	8b1b      	ldrh	r3, [r3, #24]
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0208 	orr.w	r2, r2, #8
 80066aa:	b292      	uxth	r2, r2
 80066ac:	831a      	strh	r2, [r3, #24]
}
 80066ae:	bf00      	nop
 80066b0:	3770      	adds	r7, #112	@ 0x70
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40008000 	.word	0x40008000

080066bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <__cvt>:
 80066d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066d4:	ec57 6b10 	vmov	r6, r7, d0
 80066d8:	2f00      	cmp	r7, #0
 80066da:	460c      	mov	r4, r1
 80066dc:	4619      	mov	r1, r3
 80066de:	463b      	mov	r3, r7
 80066e0:	bfbb      	ittet	lt
 80066e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066e6:	461f      	movlt	r7, r3
 80066e8:	2300      	movge	r3, #0
 80066ea:	232d      	movlt	r3, #45	@ 0x2d
 80066ec:	700b      	strb	r3, [r1, #0]
 80066ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80066f4:	4691      	mov	r9, r2
 80066f6:	f023 0820 	bic.w	r8, r3, #32
 80066fa:	bfbc      	itt	lt
 80066fc:	4632      	movlt	r2, r6
 80066fe:	4616      	movlt	r6, r2
 8006700:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006704:	d005      	beq.n	8006712 <__cvt+0x42>
 8006706:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800670a:	d100      	bne.n	800670e <__cvt+0x3e>
 800670c:	3401      	adds	r4, #1
 800670e:	2102      	movs	r1, #2
 8006710:	e000      	b.n	8006714 <__cvt+0x44>
 8006712:	2103      	movs	r1, #3
 8006714:	ab03      	add	r3, sp, #12
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	ab02      	add	r3, sp, #8
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	ec47 6b10 	vmov	d0, r6, r7
 8006720:	4653      	mov	r3, sl
 8006722:	4622      	mov	r2, r4
 8006724:	f001 f9e4 	bl	8007af0 <_dtoa_r>
 8006728:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800672c:	4605      	mov	r5, r0
 800672e:	d119      	bne.n	8006764 <__cvt+0x94>
 8006730:	f019 0f01 	tst.w	r9, #1
 8006734:	d00e      	beq.n	8006754 <__cvt+0x84>
 8006736:	eb00 0904 	add.w	r9, r0, r4
 800673a:	2200      	movs	r2, #0
 800673c:	2300      	movs	r3, #0
 800673e:	4630      	mov	r0, r6
 8006740:	4639      	mov	r1, r7
 8006742:	f7fa f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006746:	b108      	cbz	r0, 800674c <__cvt+0x7c>
 8006748:	f8cd 900c 	str.w	r9, [sp, #12]
 800674c:	2230      	movs	r2, #48	@ 0x30
 800674e:	9b03      	ldr	r3, [sp, #12]
 8006750:	454b      	cmp	r3, r9
 8006752:	d31e      	bcc.n	8006792 <__cvt+0xc2>
 8006754:	9b03      	ldr	r3, [sp, #12]
 8006756:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006758:	1b5b      	subs	r3, r3, r5
 800675a:	4628      	mov	r0, r5
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	b004      	add	sp, #16
 8006760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006764:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006768:	eb00 0904 	add.w	r9, r0, r4
 800676c:	d1e5      	bne.n	800673a <__cvt+0x6a>
 800676e:	7803      	ldrb	r3, [r0, #0]
 8006770:	2b30      	cmp	r3, #48	@ 0x30
 8006772:	d10a      	bne.n	800678a <__cvt+0xba>
 8006774:	2200      	movs	r2, #0
 8006776:	2300      	movs	r3, #0
 8006778:	4630      	mov	r0, r6
 800677a:	4639      	mov	r1, r7
 800677c:	f7fa f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006780:	b918      	cbnz	r0, 800678a <__cvt+0xba>
 8006782:	f1c4 0401 	rsb	r4, r4, #1
 8006786:	f8ca 4000 	str.w	r4, [sl]
 800678a:	f8da 3000 	ldr.w	r3, [sl]
 800678e:	4499      	add	r9, r3
 8006790:	e7d3      	b.n	800673a <__cvt+0x6a>
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	9103      	str	r1, [sp, #12]
 8006796:	701a      	strb	r2, [r3, #0]
 8006798:	e7d9      	b.n	800674e <__cvt+0x7e>

0800679a <__exponent>:
 800679a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800679c:	2900      	cmp	r1, #0
 800679e:	bfba      	itte	lt
 80067a0:	4249      	neglt	r1, r1
 80067a2:	232d      	movlt	r3, #45	@ 0x2d
 80067a4:	232b      	movge	r3, #43	@ 0x2b
 80067a6:	2909      	cmp	r1, #9
 80067a8:	7002      	strb	r2, [r0, #0]
 80067aa:	7043      	strb	r3, [r0, #1]
 80067ac:	dd29      	ble.n	8006802 <__exponent+0x68>
 80067ae:	f10d 0307 	add.w	r3, sp, #7
 80067b2:	461d      	mov	r5, r3
 80067b4:	270a      	movs	r7, #10
 80067b6:	461a      	mov	r2, r3
 80067b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80067bc:	fb07 1416 	mls	r4, r7, r6, r1
 80067c0:	3430      	adds	r4, #48	@ 0x30
 80067c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80067c6:	460c      	mov	r4, r1
 80067c8:	2c63      	cmp	r4, #99	@ 0x63
 80067ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80067ce:	4631      	mov	r1, r6
 80067d0:	dcf1      	bgt.n	80067b6 <__exponent+0x1c>
 80067d2:	3130      	adds	r1, #48	@ 0x30
 80067d4:	1e94      	subs	r4, r2, #2
 80067d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067da:	1c41      	adds	r1, r0, #1
 80067dc:	4623      	mov	r3, r4
 80067de:	42ab      	cmp	r3, r5
 80067e0:	d30a      	bcc.n	80067f8 <__exponent+0x5e>
 80067e2:	f10d 0309 	add.w	r3, sp, #9
 80067e6:	1a9b      	subs	r3, r3, r2
 80067e8:	42ac      	cmp	r4, r5
 80067ea:	bf88      	it	hi
 80067ec:	2300      	movhi	r3, #0
 80067ee:	3302      	adds	r3, #2
 80067f0:	4403      	add	r3, r0
 80067f2:	1a18      	subs	r0, r3, r0
 80067f4:	b003      	add	sp, #12
 80067f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006800:	e7ed      	b.n	80067de <__exponent+0x44>
 8006802:	2330      	movs	r3, #48	@ 0x30
 8006804:	3130      	adds	r1, #48	@ 0x30
 8006806:	7083      	strb	r3, [r0, #2]
 8006808:	70c1      	strb	r1, [r0, #3]
 800680a:	1d03      	adds	r3, r0, #4
 800680c:	e7f1      	b.n	80067f2 <__exponent+0x58>
	...

08006810 <_printf_float>:
 8006810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	b08d      	sub	sp, #52	@ 0x34
 8006816:	460c      	mov	r4, r1
 8006818:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800681c:	4616      	mov	r6, r2
 800681e:	461f      	mov	r7, r3
 8006820:	4605      	mov	r5, r0
 8006822:	f001 f855 	bl	80078d0 <_localeconv_r>
 8006826:	6803      	ldr	r3, [r0, #0]
 8006828:	9304      	str	r3, [sp, #16]
 800682a:	4618      	mov	r0, r3
 800682c:	f7f9 fd20 	bl	8000270 <strlen>
 8006830:	2300      	movs	r3, #0
 8006832:	930a      	str	r3, [sp, #40]	@ 0x28
 8006834:	f8d8 3000 	ldr.w	r3, [r8]
 8006838:	9005      	str	r0, [sp, #20]
 800683a:	3307      	adds	r3, #7
 800683c:	f023 0307 	bic.w	r3, r3, #7
 8006840:	f103 0208 	add.w	r2, r3, #8
 8006844:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006848:	f8d4 b000 	ldr.w	fp, [r4]
 800684c:	f8c8 2000 	str.w	r2, [r8]
 8006850:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006854:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006858:	9307      	str	r3, [sp, #28]
 800685a:	f8cd 8018 	str.w	r8, [sp, #24]
 800685e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006866:	4b9c      	ldr	r3, [pc, #624]	@ (8006ad8 <_printf_float+0x2c8>)
 8006868:	f04f 32ff 	mov.w	r2, #4294967295
 800686c:	f7fa f95e 	bl	8000b2c <__aeabi_dcmpun>
 8006870:	bb70      	cbnz	r0, 80068d0 <_printf_float+0xc0>
 8006872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006876:	4b98      	ldr	r3, [pc, #608]	@ (8006ad8 <_printf_float+0x2c8>)
 8006878:	f04f 32ff 	mov.w	r2, #4294967295
 800687c:	f7fa f938 	bl	8000af0 <__aeabi_dcmple>
 8006880:	bb30      	cbnz	r0, 80068d0 <_printf_float+0xc0>
 8006882:	2200      	movs	r2, #0
 8006884:	2300      	movs	r3, #0
 8006886:	4640      	mov	r0, r8
 8006888:	4649      	mov	r1, r9
 800688a:	f7fa f927 	bl	8000adc <__aeabi_dcmplt>
 800688e:	b110      	cbz	r0, 8006896 <_printf_float+0x86>
 8006890:	232d      	movs	r3, #45	@ 0x2d
 8006892:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006896:	4a91      	ldr	r2, [pc, #580]	@ (8006adc <_printf_float+0x2cc>)
 8006898:	4b91      	ldr	r3, [pc, #580]	@ (8006ae0 <_printf_float+0x2d0>)
 800689a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800689e:	bf94      	ite	ls
 80068a0:	4690      	movls	r8, r2
 80068a2:	4698      	movhi	r8, r3
 80068a4:	2303      	movs	r3, #3
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	f02b 0304 	bic.w	r3, fp, #4
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	f04f 0900 	mov.w	r9, #0
 80068b2:	9700      	str	r7, [sp, #0]
 80068b4:	4633      	mov	r3, r6
 80068b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80068b8:	4621      	mov	r1, r4
 80068ba:	4628      	mov	r0, r5
 80068bc:	f000 f9d2 	bl	8006c64 <_printf_common>
 80068c0:	3001      	adds	r0, #1
 80068c2:	f040 808d 	bne.w	80069e0 <_printf_float+0x1d0>
 80068c6:	f04f 30ff 	mov.w	r0, #4294967295
 80068ca:	b00d      	add	sp, #52	@ 0x34
 80068cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d0:	4642      	mov	r2, r8
 80068d2:	464b      	mov	r3, r9
 80068d4:	4640      	mov	r0, r8
 80068d6:	4649      	mov	r1, r9
 80068d8:	f7fa f928 	bl	8000b2c <__aeabi_dcmpun>
 80068dc:	b140      	cbz	r0, 80068f0 <_printf_float+0xe0>
 80068de:	464b      	mov	r3, r9
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	bfbc      	itt	lt
 80068e4:	232d      	movlt	r3, #45	@ 0x2d
 80068e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068ea:	4a7e      	ldr	r2, [pc, #504]	@ (8006ae4 <_printf_float+0x2d4>)
 80068ec:	4b7e      	ldr	r3, [pc, #504]	@ (8006ae8 <_printf_float+0x2d8>)
 80068ee:	e7d4      	b.n	800689a <_printf_float+0x8a>
 80068f0:	6863      	ldr	r3, [r4, #4]
 80068f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80068f6:	9206      	str	r2, [sp, #24]
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	d13b      	bne.n	8006974 <_printf_float+0x164>
 80068fc:	2306      	movs	r3, #6
 80068fe:	6063      	str	r3, [r4, #4]
 8006900:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006904:	2300      	movs	r3, #0
 8006906:	6022      	str	r2, [r4, #0]
 8006908:	9303      	str	r3, [sp, #12]
 800690a:	ab0a      	add	r3, sp, #40	@ 0x28
 800690c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006910:	ab09      	add	r3, sp, #36	@ 0x24
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	6861      	ldr	r1, [r4, #4]
 8006916:	ec49 8b10 	vmov	d0, r8, r9
 800691a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800691e:	4628      	mov	r0, r5
 8006920:	f7ff fed6 	bl	80066d0 <__cvt>
 8006924:	9b06      	ldr	r3, [sp, #24]
 8006926:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006928:	2b47      	cmp	r3, #71	@ 0x47
 800692a:	4680      	mov	r8, r0
 800692c:	d129      	bne.n	8006982 <_printf_float+0x172>
 800692e:	1cc8      	adds	r0, r1, #3
 8006930:	db02      	blt.n	8006938 <_printf_float+0x128>
 8006932:	6863      	ldr	r3, [r4, #4]
 8006934:	4299      	cmp	r1, r3
 8006936:	dd41      	ble.n	80069bc <_printf_float+0x1ac>
 8006938:	f1aa 0a02 	sub.w	sl, sl, #2
 800693c:	fa5f fa8a 	uxtb.w	sl, sl
 8006940:	3901      	subs	r1, #1
 8006942:	4652      	mov	r2, sl
 8006944:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006948:	9109      	str	r1, [sp, #36]	@ 0x24
 800694a:	f7ff ff26 	bl	800679a <__exponent>
 800694e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006950:	1813      	adds	r3, r2, r0
 8006952:	2a01      	cmp	r2, #1
 8006954:	4681      	mov	r9, r0
 8006956:	6123      	str	r3, [r4, #16]
 8006958:	dc02      	bgt.n	8006960 <_printf_float+0x150>
 800695a:	6822      	ldr	r2, [r4, #0]
 800695c:	07d2      	lsls	r2, r2, #31
 800695e:	d501      	bpl.n	8006964 <_printf_float+0x154>
 8006960:	3301      	adds	r3, #1
 8006962:	6123      	str	r3, [r4, #16]
 8006964:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0a2      	beq.n	80068b2 <_printf_float+0xa2>
 800696c:	232d      	movs	r3, #45	@ 0x2d
 800696e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006972:	e79e      	b.n	80068b2 <_printf_float+0xa2>
 8006974:	9a06      	ldr	r2, [sp, #24]
 8006976:	2a47      	cmp	r2, #71	@ 0x47
 8006978:	d1c2      	bne.n	8006900 <_printf_float+0xf0>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1c0      	bne.n	8006900 <_printf_float+0xf0>
 800697e:	2301      	movs	r3, #1
 8006980:	e7bd      	b.n	80068fe <_printf_float+0xee>
 8006982:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006986:	d9db      	bls.n	8006940 <_printf_float+0x130>
 8006988:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800698c:	d118      	bne.n	80069c0 <_printf_float+0x1b0>
 800698e:	2900      	cmp	r1, #0
 8006990:	6863      	ldr	r3, [r4, #4]
 8006992:	dd0b      	ble.n	80069ac <_printf_float+0x19c>
 8006994:	6121      	str	r1, [r4, #16]
 8006996:	b913      	cbnz	r3, 800699e <_printf_float+0x18e>
 8006998:	6822      	ldr	r2, [r4, #0]
 800699a:	07d0      	lsls	r0, r2, #31
 800699c:	d502      	bpl.n	80069a4 <_printf_float+0x194>
 800699e:	3301      	adds	r3, #1
 80069a0:	440b      	add	r3, r1
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80069a6:	f04f 0900 	mov.w	r9, #0
 80069aa:	e7db      	b.n	8006964 <_printf_float+0x154>
 80069ac:	b913      	cbnz	r3, 80069b4 <_printf_float+0x1a4>
 80069ae:	6822      	ldr	r2, [r4, #0]
 80069b0:	07d2      	lsls	r2, r2, #31
 80069b2:	d501      	bpl.n	80069b8 <_printf_float+0x1a8>
 80069b4:	3302      	adds	r3, #2
 80069b6:	e7f4      	b.n	80069a2 <_printf_float+0x192>
 80069b8:	2301      	movs	r3, #1
 80069ba:	e7f2      	b.n	80069a2 <_printf_float+0x192>
 80069bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80069c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069c2:	4299      	cmp	r1, r3
 80069c4:	db05      	blt.n	80069d2 <_printf_float+0x1c2>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	6121      	str	r1, [r4, #16]
 80069ca:	07d8      	lsls	r0, r3, #31
 80069cc:	d5ea      	bpl.n	80069a4 <_printf_float+0x194>
 80069ce:	1c4b      	adds	r3, r1, #1
 80069d0:	e7e7      	b.n	80069a2 <_printf_float+0x192>
 80069d2:	2900      	cmp	r1, #0
 80069d4:	bfd4      	ite	le
 80069d6:	f1c1 0202 	rsble	r2, r1, #2
 80069da:	2201      	movgt	r2, #1
 80069dc:	4413      	add	r3, r2
 80069de:	e7e0      	b.n	80069a2 <_printf_float+0x192>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	055a      	lsls	r2, r3, #21
 80069e4:	d407      	bmi.n	80069f6 <_printf_float+0x1e6>
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	4642      	mov	r2, r8
 80069ea:	4631      	mov	r1, r6
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	d12b      	bne.n	8006a4c <_printf_float+0x23c>
 80069f4:	e767      	b.n	80068c6 <_printf_float+0xb6>
 80069f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069fa:	f240 80dd 	bls.w	8006bb8 <_printf_float+0x3a8>
 80069fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a02:	2200      	movs	r2, #0
 8006a04:	2300      	movs	r3, #0
 8006a06:	f7fa f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d033      	beq.n	8006a76 <_printf_float+0x266>
 8006a0e:	4a37      	ldr	r2, [pc, #220]	@ (8006aec <_printf_float+0x2dc>)
 8006a10:	2301      	movs	r3, #1
 8006a12:	4631      	mov	r1, r6
 8006a14:	4628      	mov	r0, r5
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f43f af54 	beq.w	80068c6 <_printf_float+0xb6>
 8006a1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a22:	4543      	cmp	r3, r8
 8006a24:	db02      	blt.n	8006a2c <_printf_float+0x21c>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	07d8      	lsls	r0, r3, #31
 8006a2a:	d50f      	bpl.n	8006a4c <_printf_float+0x23c>
 8006a2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a30:	4631      	mov	r1, r6
 8006a32:	4628      	mov	r0, r5
 8006a34:	47b8      	blx	r7
 8006a36:	3001      	adds	r0, #1
 8006a38:	f43f af45 	beq.w	80068c6 <_printf_float+0xb6>
 8006a3c:	f04f 0900 	mov.w	r9, #0
 8006a40:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a44:	f104 0a1a 	add.w	sl, r4, #26
 8006a48:	45c8      	cmp	r8, r9
 8006a4a:	dc09      	bgt.n	8006a60 <_printf_float+0x250>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	079b      	lsls	r3, r3, #30
 8006a50:	f100 8103 	bmi.w	8006c5a <_printf_float+0x44a>
 8006a54:	68e0      	ldr	r0, [r4, #12]
 8006a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a58:	4298      	cmp	r0, r3
 8006a5a:	bfb8      	it	lt
 8006a5c:	4618      	movlt	r0, r3
 8006a5e:	e734      	b.n	80068ca <_printf_float+0xba>
 8006a60:	2301      	movs	r3, #1
 8006a62:	4652      	mov	r2, sl
 8006a64:	4631      	mov	r1, r6
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b8      	blx	r7
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	f43f af2b 	beq.w	80068c6 <_printf_float+0xb6>
 8006a70:	f109 0901 	add.w	r9, r9, #1
 8006a74:	e7e8      	b.n	8006a48 <_printf_float+0x238>
 8006a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dc39      	bgt.n	8006af0 <_printf_float+0x2e0>
 8006a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006aec <_printf_float+0x2dc>)
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	f43f af1d 	beq.w	80068c6 <_printf_float+0xb6>
 8006a8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a90:	ea59 0303 	orrs.w	r3, r9, r3
 8006a94:	d102      	bne.n	8006a9c <_printf_float+0x28c>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	07d9      	lsls	r1, r3, #31
 8006a9a:	d5d7      	bpl.n	8006a4c <_printf_float+0x23c>
 8006a9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b8      	blx	r7
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	f43f af0d 	beq.w	80068c6 <_printf_float+0xb6>
 8006aac:	f04f 0a00 	mov.w	sl, #0
 8006ab0:	f104 0b1a 	add.w	fp, r4, #26
 8006ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab6:	425b      	negs	r3, r3
 8006ab8:	4553      	cmp	r3, sl
 8006aba:	dc01      	bgt.n	8006ac0 <_printf_float+0x2b0>
 8006abc:	464b      	mov	r3, r9
 8006abe:	e793      	b.n	80069e8 <_printf_float+0x1d8>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	465a      	mov	r2, fp
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	f43f aefb 	beq.w	80068c6 <_printf_float+0xb6>
 8006ad0:	f10a 0a01 	add.w	sl, sl, #1
 8006ad4:	e7ee      	b.n	8006ab4 <_printf_float+0x2a4>
 8006ad6:	bf00      	nop
 8006ad8:	7fefffff 	.word	0x7fefffff
 8006adc:	0800b920 	.word	0x0800b920
 8006ae0:	0800b924 	.word	0x0800b924
 8006ae4:	0800b928 	.word	0x0800b928
 8006ae8:	0800b92c 	.word	0x0800b92c
 8006aec:	0800bcc0 	.word	0x0800bcc0
 8006af0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006af2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006af6:	4553      	cmp	r3, sl
 8006af8:	bfa8      	it	ge
 8006afa:	4653      	movge	r3, sl
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	4699      	mov	r9, r3
 8006b00:	dc36      	bgt.n	8006b70 <_printf_float+0x360>
 8006b02:	f04f 0b00 	mov.w	fp, #0
 8006b06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b0a:	f104 021a 	add.w	r2, r4, #26
 8006b0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b10:	9306      	str	r3, [sp, #24]
 8006b12:	eba3 0309 	sub.w	r3, r3, r9
 8006b16:	455b      	cmp	r3, fp
 8006b18:	dc31      	bgt.n	8006b7e <_printf_float+0x36e>
 8006b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b1c:	459a      	cmp	sl, r3
 8006b1e:	dc3a      	bgt.n	8006b96 <_printf_float+0x386>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	07da      	lsls	r2, r3, #31
 8006b24:	d437      	bmi.n	8006b96 <_printf_float+0x386>
 8006b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b28:	ebaa 0903 	sub.w	r9, sl, r3
 8006b2c:	9b06      	ldr	r3, [sp, #24]
 8006b2e:	ebaa 0303 	sub.w	r3, sl, r3
 8006b32:	4599      	cmp	r9, r3
 8006b34:	bfa8      	it	ge
 8006b36:	4699      	movge	r9, r3
 8006b38:	f1b9 0f00 	cmp.w	r9, #0
 8006b3c:	dc33      	bgt.n	8006ba6 <_printf_float+0x396>
 8006b3e:	f04f 0800 	mov.w	r8, #0
 8006b42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b46:	f104 0b1a 	add.w	fp, r4, #26
 8006b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b4c:	ebaa 0303 	sub.w	r3, sl, r3
 8006b50:	eba3 0309 	sub.w	r3, r3, r9
 8006b54:	4543      	cmp	r3, r8
 8006b56:	f77f af79 	ble.w	8006a4c <_printf_float+0x23c>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	465a      	mov	r2, fp
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4628      	mov	r0, r5
 8006b62:	47b8      	blx	r7
 8006b64:	3001      	adds	r0, #1
 8006b66:	f43f aeae 	beq.w	80068c6 <_printf_float+0xb6>
 8006b6a:	f108 0801 	add.w	r8, r8, #1
 8006b6e:	e7ec      	b.n	8006b4a <_printf_float+0x33a>
 8006b70:	4642      	mov	r2, r8
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b8      	blx	r7
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d1c2      	bne.n	8006b02 <_printf_float+0x2f2>
 8006b7c:	e6a3      	b.n	80068c6 <_printf_float+0xb6>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	4631      	mov	r1, r6
 8006b82:	4628      	mov	r0, r5
 8006b84:	9206      	str	r2, [sp, #24]
 8006b86:	47b8      	blx	r7
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f43f ae9c 	beq.w	80068c6 <_printf_float+0xb6>
 8006b8e:	9a06      	ldr	r2, [sp, #24]
 8006b90:	f10b 0b01 	add.w	fp, fp, #1
 8006b94:	e7bb      	b.n	8006b0e <_printf_float+0x2fe>
 8006b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	47b8      	blx	r7
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d1c0      	bne.n	8006b26 <_printf_float+0x316>
 8006ba4:	e68f      	b.n	80068c6 <_printf_float+0xb6>
 8006ba6:	9a06      	ldr	r2, [sp, #24]
 8006ba8:	464b      	mov	r3, r9
 8006baa:	4442      	add	r2, r8
 8006bac:	4631      	mov	r1, r6
 8006bae:	4628      	mov	r0, r5
 8006bb0:	47b8      	blx	r7
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	d1c3      	bne.n	8006b3e <_printf_float+0x32e>
 8006bb6:	e686      	b.n	80068c6 <_printf_float+0xb6>
 8006bb8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bbc:	f1ba 0f01 	cmp.w	sl, #1
 8006bc0:	dc01      	bgt.n	8006bc6 <_printf_float+0x3b6>
 8006bc2:	07db      	lsls	r3, r3, #31
 8006bc4:	d536      	bpl.n	8006c34 <_printf_float+0x424>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	4642      	mov	r2, r8
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4628      	mov	r0, r5
 8006bce:	47b8      	blx	r7
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	f43f ae78 	beq.w	80068c6 <_printf_float+0xb6>
 8006bd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4628      	mov	r0, r5
 8006bde:	47b8      	blx	r7
 8006be0:	3001      	adds	r0, #1
 8006be2:	f43f ae70 	beq.w	80068c6 <_printf_float+0xb6>
 8006be6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bea:	2200      	movs	r2, #0
 8006bec:	2300      	movs	r3, #0
 8006bee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bf2:	f7f9 ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bf6:	b9c0      	cbnz	r0, 8006c2a <_printf_float+0x41a>
 8006bf8:	4653      	mov	r3, sl
 8006bfa:	f108 0201 	add.w	r2, r8, #1
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	d10c      	bne.n	8006c22 <_printf_float+0x412>
 8006c08:	e65d      	b.n	80068c6 <_printf_float+0xb6>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	465a      	mov	r2, fp
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	f43f ae56 	beq.w	80068c6 <_printf_float+0xb6>
 8006c1a:	f108 0801 	add.w	r8, r8, #1
 8006c1e:	45d0      	cmp	r8, sl
 8006c20:	dbf3      	blt.n	8006c0a <_printf_float+0x3fa>
 8006c22:	464b      	mov	r3, r9
 8006c24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c28:	e6df      	b.n	80069ea <_printf_float+0x1da>
 8006c2a:	f04f 0800 	mov.w	r8, #0
 8006c2e:	f104 0b1a 	add.w	fp, r4, #26
 8006c32:	e7f4      	b.n	8006c1e <_printf_float+0x40e>
 8006c34:	2301      	movs	r3, #1
 8006c36:	4642      	mov	r2, r8
 8006c38:	e7e1      	b.n	8006bfe <_printf_float+0x3ee>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	464a      	mov	r2, r9
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4628      	mov	r0, r5
 8006c42:	47b8      	blx	r7
 8006c44:	3001      	adds	r0, #1
 8006c46:	f43f ae3e 	beq.w	80068c6 <_printf_float+0xb6>
 8006c4a:	f108 0801 	add.w	r8, r8, #1
 8006c4e:	68e3      	ldr	r3, [r4, #12]
 8006c50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c52:	1a5b      	subs	r3, r3, r1
 8006c54:	4543      	cmp	r3, r8
 8006c56:	dcf0      	bgt.n	8006c3a <_printf_float+0x42a>
 8006c58:	e6fc      	b.n	8006a54 <_printf_float+0x244>
 8006c5a:	f04f 0800 	mov.w	r8, #0
 8006c5e:	f104 0919 	add.w	r9, r4, #25
 8006c62:	e7f4      	b.n	8006c4e <_printf_float+0x43e>

08006c64 <_printf_common>:
 8006c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c68:	4616      	mov	r6, r2
 8006c6a:	4698      	mov	r8, r3
 8006c6c:	688a      	ldr	r2, [r1, #8]
 8006c6e:	690b      	ldr	r3, [r1, #16]
 8006c70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c74:	4293      	cmp	r3, r2
 8006c76:	bfb8      	it	lt
 8006c78:	4613      	movlt	r3, r2
 8006c7a:	6033      	str	r3, [r6, #0]
 8006c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c80:	4607      	mov	r7, r0
 8006c82:	460c      	mov	r4, r1
 8006c84:	b10a      	cbz	r2, 8006c8a <_printf_common+0x26>
 8006c86:	3301      	adds	r3, #1
 8006c88:	6033      	str	r3, [r6, #0]
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	0699      	lsls	r1, r3, #26
 8006c8e:	bf42      	ittt	mi
 8006c90:	6833      	ldrmi	r3, [r6, #0]
 8006c92:	3302      	addmi	r3, #2
 8006c94:	6033      	strmi	r3, [r6, #0]
 8006c96:	6825      	ldr	r5, [r4, #0]
 8006c98:	f015 0506 	ands.w	r5, r5, #6
 8006c9c:	d106      	bne.n	8006cac <_printf_common+0x48>
 8006c9e:	f104 0a19 	add.w	sl, r4, #25
 8006ca2:	68e3      	ldr	r3, [r4, #12]
 8006ca4:	6832      	ldr	r2, [r6, #0]
 8006ca6:	1a9b      	subs	r3, r3, r2
 8006ca8:	42ab      	cmp	r3, r5
 8006caa:	dc26      	bgt.n	8006cfa <_printf_common+0x96>
 8006cac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006cb0:	6822      	ldr	r2, [r4, #0]
 8006cb2:	3b00      	subs	r3, #0
 8006cb4:	bf18      	it	ne
 8006cb6:	2301      	movne	r3, #1
 8006cb8:	0692      	lsls	r2, r2, #26
 8006cba:	d42b      	bmi.n	8006d14 <_printf_common+0xb0>
 8006cbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	47c8      	blx	r9
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	d01e      	beq.n	8006d08 <_printf_common+0xa4>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	6922      	ldr	r2, [r4, #16]
 8006cce:	f003 0306 	and.w	r3, r3, #6
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	bf02      	ittt	eq
 8006cd6:	68e5      	ldreq	r5, [r4, #12]
 8006cd8:	6833      	ldreq	r3, [r6, #0]
 8006cda:	1aed      	subeq	r5, r5, r3
 8006cdc:	68a3      	ldr	r3, [r4, #8]
 8006cde:	bf0c      	ite	eq
 8006ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ce4:	2500      	movne	r5, #0
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	bfc4      	itt	gt
 8006cea:	1a9b      	subgt	r3, r3, r2
 8006cec:	18ed      	addgt	r5, r5, r3
 8006cee:	2600      	movs	r6, #0
 8006cf0:	341a      	adds	r4, #26
 8006cf2:	42b5      	cmp	r5, r6
 8006cf4:	d11a      	bne.n	8006d2c <_printf_common+0xc8>
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	e008      	b.n	8006d0c <_printf_common+0xa8>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	4652      	mov	r2, sl
 8006cfe:	4641      	mov	r1, r8
 8006d00:	4638      	mov	r0, r7
 8006d02:	47c8      	blx	r9
 8006d04:	3001      	adds	r0, #1
 8006d06:	d103      	bne.n	8006d10 <_printf_common+0xac>
 8006d08:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d10:	3501      	adds	r5, #1
 8006d12:	e7c6      	b.n	8006ca2 <_printf_common+0x3e>
 8006d14:	18e1      	adds	r1, r4, r3
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	2030      	movs	r0, #48	@ 0x30
 8006d1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d1e:	4422      	add	r2, r4
 8006d20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d28:	3302      	adds	r3, #2
 8006d2a:	e7c7      	b.n	8006cbc <_printf_common+0x58>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	4622      	mov	r2, r4
 8006d30:	4641      	mov	r1, r8
 8006d32:	4638      	mov	r0, r7
 8006d34:	47c8      	blx	r9
 8006d36:	3001      	adds	r0, #1
 8006d38:	d0e6      	beq.n	8006d08 <_printf_common+0xa4>
 8006d3a:	3601      	adds	r6, #1
 8006d3c:	e7d9      	b.n	8006cf2 <_printf_common+0x8e>
	...

08006d40 <_printf_i>:
 8006d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d44:	7e0f      	ldrb	r7, [r1, #24]
 8006d46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d48:	2f78      	cmp	r7, #120	@ 0x78
 8006d4a:	4691      	mov	r9, r2
 8006d4c:	4680      	mov	r8, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	469a      	mov	sl, r3
 8006d52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d56:	d807      	bhi.n	8006d68 <_printf_i+0x28>
 8006d58:	2f62      	cmp	r7, #98	@ 0x62
 8006d5a:	d80a      	bhi.n	8006d72 <_printf_i+0x32>
 8006d5c:	2f00      	cmp	r7, #0
 8006d5e:	f000 80d2 	beq.w	8006f06 <_printf_i+0x1c6>
 8006d62:	2f58      	cmp	r7, #88	@ 0x58
 8006d64:	f000 80b9 	beq.w	8006eda <_printf_i+0x19a>
 8006d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d70:	e03a      	b.n	8006de8 <_printf_i+0xa8>
 8006d72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d76:	2b15      	cmp	r3, #21
 8006d78:	d8f6      	bhi.n	8006d68 <_printf_i+0x28>
 8006d7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006d80 <_printf_i+0x40>)
 8006d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d80:	08006dd9 	.word	0x08006dd9
 8006d84:	08006ded 	.word	0x08006ded
 8006d88:	08006d69 	.word	0x08006d69
 8006d8c:	08006d69 	.word	0x08006d69
 8006d90:	08006d69 	.word	0x08006d69
 8006d94:	08006d69 	.word	0x08006d69
 8006d98:	08006ded 	.word	0x08006ded
 8006d9c:	08006d69 	.word	0x08006d69
 8006da0:	08006d69 	.word	0x08006d69
 8006da4:	08006d69 	.word	0x08006d69
 8006da8:	08006d69 	.word	0x08006d69
 8006dac:	08006eed 	.word	0x08006eed
 8006db0:	08006e17 	.word	0x08006e17
 8006db4:	08006ea7 	.word	0x08006ea7
 8006db8:	08006d69 	.word	0x08006d69
 8006dbc:	08006d69 	.word	0x08006d69
 8006dc0:	08006f0f 	.word	0x08006f0f
 8006dc4:	08006d69 	.word	0x08006d69
 8006dc8:	08006e17 	.word	0x08006e17
 8006dcc:	08006d69 	.word	0x08006d69
 8006dd0:	08006d69 	.word	0x08006d69
 8006dd4:	08006eaf 	.word	0x08006eaf
 8006dd8:	6833      	ldr	r3, [r6, #0]
 8006dda:	1d1a      	adds	r2, r3, #4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6032      	str	r2, [r6, #0]
 8006de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006de4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006de8:	2301      	movs	r3, #1
 8006dea:	e09d      	b.n	8006f28 <_printf_i+0x1e8>
 8006dec:	6833      	ldr	r3, [r6, #0]
 8006dee:	6820      	ldr	r0, [r4, #0]
 8006df0:	1d19      	adds	r1, r3, #4
 8006df2:	6031      	str	r1, [r6, #0]
 8006df4:	0606      	lsls	r6, r0, #24
 8006df6:	d501      	bpl.n	8006dfc <_printf_i+0xbc>
 8006df8:	681d      	ldr	r5, [r3, #0]
 8006dfa:	e003      	b.n	8006e04 <_printf_i+0xc4>
 8006dfc:	0645      	lsls	r5, r0, #25
 8006dfe:	d5fb      	bpl.n	8006df8 <_printf_i+0xb8>
 8006e00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e04:	2d00      	cmp	r5, #0
 8006e06:	da03      	bge.n	8006e10 <_printf_i+0xd0>
 8006e08:	232d      	movs	r3, #45	@ 0x2d
 8006e0a:	426d      	negs	r5, r5
 8006e0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e10:	4859      	ldr	r0, [pc, #356]	@ (8006f78 <_printf_i+0x238>)
 8006e12:	230a      	movs	r3, #10
 8006e14:	e011      	b.n	8006e3a <_printf_i+0xfa>
 8006e16:	6821      	ldr	r1, [r4, #0]
 8006e18:	6833      	ldr	r3, [r6, #0]
 8006e1a:	0608      	lsls	r0, r1, #24
 8006e1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e20:	d402      	bmi.n	8006e28 <_printf_i+0xe8>
 8006e22:	0649      	lsls	r1, r1, #25
 8006e24:	bf48      	it	mi
 8006e26:	b2ad      	uxthmi	r5, r5
 8006e28:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e2a:	4853      	ldr	r0, [pc, #332]	@ (8006f78 <_printf_i+0x238>)
 8006e2c:	6033      	str	r3, [r6, #0]
 8006e2e:	bf14      	ite	ne
 8006e30:	230a      	movne	r3, #10
 8006e32:	2308      	moveq	r3, #8
 8006e34:	2100      	movs	r1, #0
 8006e36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e3a:	6866      	ldr	r6, [r4, #4]
 8006e3c:	60a6      	str	r6, [r4, #8]
 8006e3e:	2e00      	cmp	r6, #0
 8006e40:	bfa2      	ittt	ge
 8006e42:	6821      	ldrge	r1, [r4, #0]
 8006e44:	f021 0104 	bicge.w	r1, r1, #4
 8006e48:	6021      	strge	r1, [r4, #0]
 8006e4a:	b90d      	cbnz	r5, 8006e50 <_printf_i+0x110>
 8006e4c:	2e00      	cmp	r6, #0
 8006e4e:	d04b      	beq.n	8006ee8 <_printf_i+0x1a8>
 8006e50:	4616      	mov	r6, r2
 8006e52:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e56:	fb03 5711 	mls	r7, r3, r1, r5
 8006e5a:	5dc7      	ldrb	r7, [r0, r7]
 8006e5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e60:	462f      	mov	r7, r5
 8006e62:	42bb      	cmp	r3, r7
 8006e64:	460d      	mov	r5, r1
 8006e66:	d9f4      	bls.n	8006e52 <_printf_i+0x112>
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d10b      	bne.n	8006e84 <_printf_i+0x144>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	07df      	lsls	r7, r3, #31
 8006e70:	d508      	bpl.n	8006e84 <_printf_i+0x144>
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	6861      	ldr	r1, [r4, #4]
 8006e76:	4299      	cmp	r1, r3
 8006e78:	bfde      	ittt	le
 8006e7a:	2330      	movle	r3, #48	@ 0x30
 8006e7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e84:	1b92      	subs	r2, r2, r6
 8006e86:	6122      	str	r2, [r4, #16]
 8006e88:	f8cd a000 	str.w	sl, [sp]
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	aa03      	add	r2, sp, #12
 8006e90:	4621      	mov	r1, r4
 8006e92:	4640      	mov	r0, r8
 8006e94:	f7ff fee6 	bl	8006c64 <_printf_common>
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d14a      	bne.n	8006f32 <_printf_i+0x1f2>
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea0:	b004      	add	sp, #16
 8006ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	f043 0320 	orr.w	r3, r3, #32
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	4833      	ldr	r0, [pc, #204]	@ (8006f7c <_printf_i+0x23c>)
 8006eb0:	2778      	movs	r7, #120	@ 0x78
 8006eb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	6831      	ldr	r1, [r6, #0]
 8006eba:	061f      	lsls	r7, r3, #24
 8006ebc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ec0:	d402      	bmi.n	8006ec8 <_printf_i+0x188>
 8006ec2:	065f      	lsls	r7, r3, #25
 8006ec4:	bf48      	it	mi
 8006ec6:	b2ad      	uxthmi	r5, r5
 8006ec8:	6031      	str	r1, [r6, #0]
 8006eca:	07d9      	lsls	r1, r3, #31
 8006ecc:	bf44      	itt	mi
 8006ece:	f043 0320 	orrmi.w	r3, r3, #32
 8006ed2:	6023      	strmi	r3, [r4, #0]
 8006ed4:	b11d      	cbz	r5, 8006ede <_printf_i+0x19e>
 8006ed6:	2310      	movs	r3, #16
 8006ed8:	e7ac      	b.n	8006e34 <_printf_i+0xf4>
 8006eda:	4827      	ldr	r0, [pc, #156]	@ (8006f78 <_printf_i+0x238>)
 8006edc:	e7e9      	b.n	8006eb2 <_printf_i+0x172>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	f023 0320 	bic.w	r3, r3, #32
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	e7f6      	b.n	8006ed6 <_printf_i+0x196>
 8006ee8:	4616      	mov	r6, r2
 8006eea:	e7bd      	b.n	8006e68 <_printf_i+0x128>
 8006eec:	6833      	ldr	r3, [r6, #0]
 8006eee:	6825      	ldr	r5, [r4, #0]
 8006ef0:	6961      	ldr	r1, [r4, #20]
 8006ef2:	1d18      	adds	r0, r3, #4
 8006ef4:	6030      	str	r0, [r6, #0]
 8006ef6:	062e      	lsls	r6, r5, #24
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	d501      	bpl.n	8006f00 <_printf_i+0x1c0>
 8006efc:	6019      	str	r1, [r3, #0]
 8006efe:	e002      	b.n	8006f06 <_printf_i+0x1c6>
 8006f00:	0668      	lsls	r0, r5, #25
 8006f02:	d5fb      	bpl.n	8006efc <_printf_i+0x1bc>
 8006f04:	8019      	strh	r1, [r3, #0]
 8006f06:	2300      	movs	r3, #0
 8006f08:	6123      	str	r3, [r4, #16]
 8006f0a:	4616      	mov	r6, r2
 8006f0c:	e7bc      	b.n	8006e88 <_printf_i+0x148>
 8006f0e:	6833      	ldr	r3, [r6, #0]
 8006f10:	1d1a      	adds	r2, r3, #4
 8006f12:	6032      	str	r2, [r6, #0]
 8006f14:	681e      	ldr	r6, [r3, #0]
 8006f16:	6862      	ldr	r2, [r4, #4]
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7f9 f958 	bl	80001d0 <memchr>
 8006f20:	b108      	cbz	r0, 8006f26 <_printf_i+0x1e6>
 8006f22:	1b80      	subs	r0, r0, r6
 8006f24:	6060      	str	r0, [r4, #4]
 8006f26:	6863      	ldr	r3, [r4, #4]
 8006f28:	6123      	str	r3, [r4, #16]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f30:	e7aa      	b.n	8006e88 <_printf_i+0x148>
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	4632      	mov	r2, r6
 8006f36:	4649      	mov	r1, r9
 8006f38:	4640      	mov	r0, r8
 8006f3a:	47d0      	blx	sl
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d0ad      	beq.n	8006e9c <_printf_i+0x15c>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	079b      	lsls	r3, r3, #30
 8006f44:	d413      	bmi.n	8006f6e <_printf_i+0x22e>
 8006f46:	68e0      	ldr	r0, [r4, #12]
 8006f48:	9b03      	ldr	r3, [sp, #12]
 8006f4a:	4298      	cmp	r0, r3
 8006f4c:	bfb8      	it	lt
 8006f4e:	4618      	movlt	r0, r3
 8006f50:	e7a6      	b.n	8006ea0 <_printf_i+0x160>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4632      	mov	r2, r6
 8006f56:	4649      	mov	r1, r9
 8006f58:	4640      	mov	r0, r8
 8006f5a:	47d0      	blx	sl
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d09d      	beq.n	8006e9c <_printf_i+0x15c>
 8006f60:	3501      	adds	r5, #1
 8006f62:	68e3      	ldr	r3, [r4, #12]
 8006f64:	9903      	ldr	r1, [sp, #12]
 8006f66:	1a5b      	subs	r3, r3, r1
 8006f68:	42ab      	cmp	r3, r5
 8006f6a:	dcf2      	bgt.n	8006f52 <_printf_i+0x212>
 8006f6c:	e7eb      	b.n	8006f46 <_printf_i+0x206>
 8006f6e:	2500      	movs	r5, #0
 8006f70:	f104 0619 	add.w	r6, r4, #25
 8006f74:	e7f5      	b.n	8006f62 <_printf_i+0x222>
 8006f76:	bf00      	nop
 8006f78:	0800b930 	.word	0x0800b930
 8006f7c:	0800b941 	.word	0x0800b941

08006f80 <_scanf_float>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	b087      	sub	sp, #28
 8006f86:	4617      	mov	r7, r2
 8006f88:	9303      	str	r3, [sp, #12]
 8006f8a:	688b      	ldr	r3, [r1, #8]
 8006f8c:	1e5a      	subs	r2, r3, #1
 8006f8e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006f92:	bf81      	itttt	hi
 8006f94:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006f98:	eb03 0b05 	addhi.w	fp, r3, r5
 8006f9c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006fa0:	608b      	strhi	r3, [r1, #8]
 8006fa2:	680b      	ldr	r3, [r1, #0]
 8006fa4:	460a      	mov	r2, r1
 8006fa6:	f04f 0500 	mov.w	r5, #0
 8006faa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006fae:	f842 3b1c 	str.w	r3, [r2], #28
 8006fb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006fb6:	4680      	mov	r8, r0
 8006fb8:	460c      	mov	r4, r1
 8006fba:	bf98      	it	ls
 8006fbc:	f04f 0b00 	movls.w	fp, #0
 8006fc0:	9201      	str	r2, [sp, #4]
 8006fc2:	4616      	mov	r6, r2
 8006fc4:	46aa      	mov	sl, r5
 8006fc6:	46a9      	mov	r9, r5
 8006fc8:	9502      	str	r5, [sp, #8]
 8006fca:	68a2      	ldr	r2, [r4, #8]
 8006fcc:	b152      	cbz	r2, 8006fe4 <_scanf_float+0x64>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b4e      	cmp	r3, #78	@ 0x4e
 8006fd4:	d864      	bhi.n	80070a0 <_scanf_float+0x120>
 8006fd6:	2b40      	cmp	r3, #64	@ 0x40
 8006fd8:	d83c      	bhi.n	8007054 <_scanf_float+0xd4>
 8006fda:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006fde:	b2c8      	uxtb	r0, r1
 8006fe0:	280e      	cmp	r0, #14
 8006fe2:	d93a      	bls.n	800705a <_scanf_float+0xda>
 8006fe4:	f1b9 0f00 	cmp.w	r9, #0
 8006fe8:	d003      	beq.n	8006ff2 <_scanf_float+0x72>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ff6:	f1ba 0f01 	cmp.w	sl, #1
 8006ffa:	f200 8117 	bhi.w	800722c <_scanf_float+0x2ac>
 8006ffe:	9b01      	ldr	r3, [sp, #4]
 8007000:	429e      	cmp	r6, r3
 8007002:	f200 8108 	bhi.w	8007216 <_scanf_float+0x296>
 8007006:	2001      	movs	r0, #1
 8007008:	b007      	add	sp, #28
 800700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007012:	2a0d      	cmp	r2, #13
 8007014:	d8e6      	bhi.n	8006fe4 <_scanf_float+0x64>
 8007016:	a101      	add	r1, pc, #4	@ (adr r1, 800701c <_scanf_float+0x9c>)
 8007018:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800701c:	08007163 	.word	0x08007163
 8007020:	08006fe5 	.word	0x08006fe5
 8007024:	08006fe5 	.word	0x08006fe5
 8007028:	08006fe5 	.word	0x08006fe5
 800702c:	080071c3 	.word	0x080071c3
 8007030:	0800719b 	.word	0x0800719b
 8007034:	08006fe5 	.word	0x08006fe5
 8007038:	08006fe5 	.word	0x08006fe5
 800703c:	08007171 	.word	0x08007171
 8007040:	08006fe5 	.word	0x08006fe5
 8007044:	08006fe5 	.word	0x08006fe5
 8007048:	08006fe5 	.word	0x08006fe5
 800704c:	08006fe5 	.word	0x08006fe5
 8007050:	08007129 	.word	0x08007129
 8007054:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007058:	e7db      	b.n	8007012 <_scanf_float+0x92>
 800705a:	290e      	cmp	r1, #14
 800705c:	d8c2      	bhi.n	8006fe4 <_scanf_float+0x64>
 800705e:	a001      	add	r0, pc, #4	@ (adr r0, 8007064 <_scanf_float+0xe4>)
 8007060:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007064:	08007119 	.word	0x08007119
 8007068:	08006fe5 	.word	0x08006fe5
 800706c:	08007119 	.word	0x08007119
 8007070:	080071af 	.word	0x080071af
 8007074:	08006fe5 	.word	0x08006fe5
 8007078:	080070c1 	.word	0x080070c1
 800707c:	080070ff 	.word	0x080070ff
 8007080:	080070ff 	.word	0x080070ff
 8007084:	080070ff 	.word	0x080070ff
 8007088:	080070ff 	.word	0x080070ff
 800708c:	080070ff 	.word	0x080070ff
 8007090:	080070ff 	.word	0x080070ff
 8007094:	080070ff 	.word	0x080070ff
 8007098:	080070ff 	.word	0x080070ff
 800709c:	080070ff 	.word	0x080070ff
 80070a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80070a2:	d809      	bhi.n	80070b8 <_scanf_float+0x138>
 80070a4:	2b60      	cmp	r3, #96	@ 0x60
 80070a6:	d8b2      	bhi.n	800700e <_scanf_float+0x8e>
 80070a8:	2b54      	cmp	r3, #84	@ 0x54
 80070aa:	d07b      	beq.n	80071a4 <_scanf_float+0x224>
 80070ac:	2b59      	cmp	r3, #89	@ 0x59
 80070ae:	d199      	bne.n	8006fe4 <_scanf_float+0x64>
 80070b0:	2d07      	cmp	r5, #7
 80070b2:	d197      	bne.n	8006fe4 <_scanf_float+0x64>
 80070b4:	2508      	movs	r5, #8
 80070b6:	e02c      	b.n	8007112 <_scanf_float+0x192>
 80070b8:	2b74      	cmp	r3, #116	@ 0x74
 80070ba:	d073      	beq.n	80071a4 <_scanf_float+0x224>
 80070bc:	2b79      	cmp	r3, #121	@ 0x79
 80070be:	e7f6      	b.n	80070ae <_scanf_float+0x12e>
 80070c0:	6821      	ldr	r1, [r4, #0]
 80070c2:	05c8      	lsls	r0, r1, #23
 80070c4:	d51b      	bpl.n	80070fe <_scanf_float+0x17e>
 80070c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80070ca:	6021      	str	r1, [r4, #0]
 80070cc:	f109 0901 	add.w	r9, r9, #1
 80070d0:	f1bb 0f00 	cmp.w	fp, #0
 80070d4:	d003      	beq.n	80070de <_scanf_float+0x15e>
 80070d6:	3201      	adds	r2, #1
 80070d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80070dc:	60a2      	str	r2, [r4, #8]
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	60a3      	str	r3, [r4, #8]
 80070e4:	6923      	ldr	r3, [r4, #16]
 80070e6:	3301      	adds	r3, #1
 80070e8:	6123      	str	r3, [r4, #16]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	607b      	str	r3, [r7, #4]
 80070f2:	f340 8087 	ble.w	8007204 <_scanf_float+0x284>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	3301      	adds	r3, #1
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	e765      	b.n	8006fca <_scanf_float+0x4a>
 80070fe:	eb1a 0105 	adds.w	r1, sl, r5
 8007102:	f47f af6f 	bne.w	8006fe4 <_scanf_float+0x64>
 8007106:	6822      	ldr	r2, [r4, #0]
 8007108:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800710c:	6022      	str	r2, [r4, #0]
 800710e:	460d      	mov	r5, r1
 8007110:	468a      	mov	sl, r1
 8007112:	f806 3b01 	strb.w	r3, [r6], #1
 8007116:	e7e2      	b.n	80070de <_scanf_float+0x15e>
 8007118:	6822      	ldr	r2, [r4, #0]
 800711a:	0610      	lsls	r0, r2, #24
 800711c:	f57f af62 	bpl.w	8006fe4 <_scanf_float+0x64>
 8007120:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007124:	6022      	str	r2, [r4, #0]
 8007126:	e7f4      	b.n	8007112 <_scanf_float+0x192>
 8007128:	f1ba 0f00 	cmp.w	sl, #0
 800712c:	d10e      	bne.n	800714c <_scanf_float+0x1cc>
 800712e:	f1b9 0f00 	cmp.w	r9, #0
 8007132:	d10e      	bne.n	8007152 <_scanf_float+0x1d2>
 8007134:	6822      	ldr	r2, [r4, #0]
 8007136:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800713a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800713e:	d108      	bne.n	8007152 <_scanf_float+0x1d2>
 8007140:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007144:	6022      	str	r2, [r4, #0]
 8007146:	f04f 0a01 	mov.w	sl, #1
 800714a:	e7e2      	b.n	8007112 <_scanf_float+0x192>
 800714c:	f1ba 0f02 	cmp.w	sl, #2
 8007150:	d055      	beq.n	80071fe <_scanf_float+0x27e>
 8007152:	2d01      	cmp	r5, #1
 8007154:	d002      	beq.n	800715c <_scanf_float+0x1dc>
 8007156:	2d04      	cmp	r5, #4
 8007158:	f47f af44 	bne.w	8006fe4 <_scanf_float+0x64>
 800715c:	3501      	adds	r5, #1
 800715e:	b2ed      	uxtb	r5, r5
 8007160:	e7d7      	b.n	8007112 <_scanf_float+0x192>
 8007162:	f1ba 0f01 	cmp.w	sl, #1
 8007166:	f47f af3d 	bne.w	8006fe4 <_scanf_float+0x64>
 800716a:	f04f 0a02 	mov.w	sl, #2
 800716e:	e7d0      	b.n	8007112 <_scanf_float+0x192>
 8007170:	b97d      	cbnz	r5, 8007192 <_scanf_float+0x212>
 8007172:	f1b9 0f00 	cmp.w	r9, #0
 8007176:	f47f af38 	bne.w	8006fea <_scanf_float+0x6a>
 800717a:	6822      	ldr	r2, [r4, #0]
 800717c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007180:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007184:	f040 8108 	bne.w	8007398 <_scanf_float+0x418>
 8007188:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800718c:	6022      	str	r2, [r4, #0]
 800718e:	2501      	movs	r5, #1
 8007190:	e7bf      	b.n	8007112 <_scanf_float+0x192>
 8007192:	2d03      	cmp	r5, #3
 8007194:	d0e2      	beq.n	800715c <_scanf_float+0x1dc>
 8007196:	2d05      	cmp	r5, #5
 8007198:	e7de      	b.n	8007158 <_scanf_float+0x1d8>
 800719a:	2d02      	cmp	r5, #2
 800719c:	f47f af22 	bne.w	8006fe4 <_scanf_float+0x64>
 80071a0:	2503      	movs	r5, #3
 80071a2:	e7b6      	b.n	8007112 <_scanf_float+0x192>
 80071a4:	2d06      	cmp	r5, #6
 80071a6:	f47f af1d 	bne.w	8006fe4 <_scanf_float+0x64>
 80071aa:	2507      	movs	r5, #7
 80071ac:	e7b1      	b.n	8007112 <_scanf_float+0x192>
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	0591      	lsls	r1, r2, #22
 80071b2:	f57f af17 	bpl.w	8006fe4 <_scanf_float+0x64>
 80071b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80071ba:	6022      	str	r2, [r4, #0]
 80071bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80071c0:	e7a7      	b.n	8007112 <_scanf_float+0x192>
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80071c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80071cc:	d006      	beq.n	80071dc <_scanf_float+0x25c>
 80071ce:	0550      	lsls	r0, r2, #21
 80071d0:	f57f af08 	bpl.w	8006fe4 <_scanf_float+0x64>
 80071d4:	f1b9 0f00 	cmp.w	r9, #0
 80071d8:	f000 80de 	beq.w	8007398 <_scanf_float+0x418>
 80071dc:	0591      	lsls	r1, r2, #22
 80071de:	bf58      	it	pl
 80071e0:	9902      	ldrpl	r1, [sp, #8]
 80071e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071e6:	bf58      	it	pl
 80071e8:	eba9 0101 	subpl.w	r1, r9, r1
 80071ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80071f0:	bf58      	it	pl
 80071f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80071f6:	6022      	str	r2, [r4, #0]
 80071f8:	f04f 0900 	mov.w	r9, #0
 80071fc:	e789      	b.n	8007112 <_scanf_float+0x192>
 80071fe:	f04f 0a03 	mov.w	sl, #3
 8007202:	e786      	b.n	8007112 <_scanf_float+0x192>
 8007204:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007208:	4639      	mov	r1, r7
 800720a:	4640      	mov	r0, r8
 800720c:	4798      	blx	r3
 800720e:	2800      	cmp	r0, #0
 8007210:	f43f aedb 	beq.w	8006fca <_scanf_float+0x4a>
 8007214:	e6e6      	b.n	8006fe4 <_scanf_float+0x64>
 8007216:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800721a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800721e:	463a      	mov	r2, r7
 8007220:	4640      	mov	r0, r8
 8007222:	4798      	blx	r3
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	3b01      	subs	r3, #1
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	e6e8      	b.n	8006ffe <_scanf_float+0x7e>
 800722c:	1e6b      	subs	r3, r5, #1
 800722e:	2b06      	cmp	r3, #6
 8007230:	d824      	bhi.n	800727c <_scanf_float+0x2fc>
 8007232:	2d02      	cmp	r5, #2
 8007234:	d836      	bhi.n	80072a4 <_scanf_float+0x324>
 8007236:	9b01      	ldr	r3, [sp, #4]
 8007238:	429e      	cmp	r6, r3
 800723a:	f67f aee4 	bls.w	8007006 <_scanf_float+0x86>
 800723e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007242:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007246:	463a      	mov	r2, r7
 8007248:	4640      	mov	r0, r8
 800724a:	4798      	blx	r3
 800724c:	6923      	ldr	r3, [r4, #16]
 800724e:	3b01      	subs	r3, #1
 8007250:	6123      	str	r3, [r4, #16]
 8007252:	e7f0      	b.n	8007236 <_scanf_float+0x2b6>
 8007254:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007258:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800725c:	463a      	mov	r2, r7
 800725e:	4640      	mov	r0, r8
 8007260:	4798      	blx	r3
 8007262:	6923      	ldr	r3, [r4, #16]
 8007264:	3b01      	subs	r3, #1
 8007266:	6123      	str	r3, [r4, #16]
 8007268:	f10a 3aff 	add.w	sl, sl, #4294967295
 800726c:	fa5f fa8a 	uxtb.w	sl, sl
 8007270:	f1ba 0f02 	cmp.w	sl, #2
 8007274:	d1ee      	bne.n	8007254 <_scanf_float+0x2d4>
 8007276:	3d03      	subs	r5, #3
 8007278:	b2ed      	uxtb	r5, r5
 800727a:	1b76      	subs	r6, r6, r5
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	05da      	lsls	r2, r3, #23
 8007280:	d530      	bpl.n	80072e4 <_scanf_float+0x364>
 8007282:	055b      	lsls	r3, r3, #21
 8007284:	d511      	bpl.n	80072aa <_scanf_float+0x32a>
 8007286:	9b01      	ldr	r3, [sp, #4]
 8007288:	429e      	cmp	r6, r3
 800728a:	f67f aebc 	bls.w	8007006 <_scanf_float+0x86>
 800728e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007296:	463a      	mov	r2, r7
 8007298:	4640      	mov	r0, r8
 800729a:	4798      	blx	r3
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	3b01      	subs	r3, #1
 80072a0:	6123      	str	r3, [r4, #16]
 80072a2:	e7f0      	b.n	8007286 <_scanf_float+0x306>
 80072a4:	46aa      	mov	sl, r5
 80072a6:	46b3      	mov	fp, r6
 80072a8:	e7de      	b.n	8007268 <_scanf_float+0x2e8>
 80072aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80072ae:	6923      	ldr	r3, [r4, #16]
 80072b0:	2965      	cmp	r1, #101	@ 0x65
 80072b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80072b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80072ba:	6123      	str	r3, [r4, #16]
 80072bc:	d00c      	beq.n	80072d8 <_scanf_float+0x358>
 80072be:	2945      	cmp	r1, #69	@ 0x45
 80072c0:	d00a      	beq.n	80072d8 <_scanf_float+0x358>
 80072c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072c6:	463a      	mov	r2, r7
 80072c8:	4640      	mov	r0, r8
 80072ca:	4798      	blx	r3
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80072d2:	3b01      	subs	r3, #1
 80072d4:	1eb5      	subs	r5, r6, #2
 80072d6:	6123      	str	r3, [r4, #16]
 80072d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072dc:	463a      	mov	r2, r7
 80072de:	4640      	mov	r0, r8
 80072e0:	4798      	blx	r3
 80072e2:	462e      	mov	r6, r5
 80072e4:	6822      	ldr	r2, [r4, #0]
 80072e6:	f012 0210 	ands.w	r2, r2, #16
 80072ea:	d001      	beq.n	80072f0 <_scanf_float+0x370>
 80072ec:	2000      	movs	r0, #0
 80072ee:	e68b      	b.n	8007008 <_scanf_float+0x88>
 80072f0:	7032      	strb	r2, [r6, #0]
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072fc:	d11c      	bne.n	8007338 <_scanf_float+0x3b8>
 80072fe:	9b02      	ldr	r3, [sp, #8]
 8007300:	454b      	cmp	r3, r9
 8007302:	eba3 0209 	sub.w	r2, r3, r9
 8007306:	d123      	bne.n	8007350 <_scanf_float+0x3d0>
 8007308:	9901      	ldr	r1, [sp, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	4640      	mov	r0, r8
 800730e:	f002 fd67 	bl	8009de0 <_strtod_r>
 8007312:	9b03      	ldr	r3, [sp, #12]
 8007314:	6821      	ldr	r1, [r4, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f011 0f02 	tst.w	r1, #2
 800731c:	ec57 6b10 	vmov	r6, r7, d0
 8007320:	f103 0204 	add.w	r2, r3, #4
 8007324:	d01f      	beq.n	8007366 <_scanf_float+0x3e6>
 8007326:	9903      	ldr	r1, [sp, #12]
 8007328:	600a      	str	r2, [r1, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	e9c3 6700 	strd	r6, r7, [r3]
 8007330:	68e3      	ldr	r3, [r4, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	60e3      	str	r3, [r4, #12]
 8007336:	e7d9      	b.n	80072ec <_scanf_float+0x36c>
 8007338:	9b04      	ldr	r3, [sp, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0e4      	beq.n	8007308 <_scanf_float+0x388>
 800733e:	9905      	ldr	r1, [sp, #20]
 8007340:	230a      	movs	r3, #10
 8007342:	3101      	adds	r1, #1
 8007344:	4640      	mov	r0, r8
 8007346:	f002 fdcb 	bl	8009ee0 <_strtol_r>
 800734a:	9b04      	ldr	r3, [sp, #16]
 800734c:	9e05      	ldr	r6, [sp, #20]
 800734e:	1ac2      	subs	r2, r0, r3
 8007350:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007354:	429e      	cmp	r6, r3
 8007356:	bf28      	it	cs
 8007358:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800735c:	4910      	ldr	r1, [pc, #64]	@ (80073a0 <_scanf_float+0x420>)
 800735e:	4630      	mov	r0, r6
 8007360:	f000 f954 	bl	800760c <siprintf>
 8007364:	e7d0      	b.n	8007308 <_scanf_float+0x388>
 8007366:	f011 0f04 	tst.w	r1, #4
 800736a:	9903      	ldr	r1, [sp, #12]
 800736c:	600a      	str	r2, [r1, #0]
 800736e:	d1dc      	bne.n	800732a <_scanf_float+0x3aa>
 8007370:	681d      	ldr	r5, [r3, #0]
 8007372:	4632      	mov	r2, r6
 8007374:	463b      	mov	r3, r7
 8007376:	4630      	mov	r0, r6
 8007378:	4639      	mov	r1, r7
 800737a:	f7f9 fbd7 	bl	8000b2c <__aeabi_dcmpun>
 800737e:	b128      	cbz	r0, 800738c <_scanf_float+0x40c>
 8007380:	4808      	ldr	r0, [pc, #32]	@ (80073a4 <_scanf_float+0x424>)
 8007382:	f000 fb25 	bl	80079d0 <nanf>
 8007386:	ed85 0a00 	vstr	s0, [r5]
 800738a:	e7d1      	b.n	8007330 <_scanf_float+0x3b0>
 800738c:	4630      	mov	r0, r6
 800738e:	4639      	mov	r1, r7
 8007390:	f7f9 fc2a 	bl	8000be8 <__aeabi_d2f>
 8007394:	6028      	str	r0, [r5, #0]
 8007396:	e7cb      	b.n	8007330 <_scanf_float+0x3b0>
 8007398:	f04f 0900 	mov.w	r9, #0
 800739c:	e629      	b.n	8006ff2 <_scanf_float+0x72>
 800739e:	bf00      	nop
 80073a0:	0800b952 	.word	0x0800b952
 80073a4:	0800bd08 	.word	0x0800bd08

080073a8 <std>:
 80073a8:	2300      	movs	r3, #0
 80073aa:	b510      	push	{r4, lr}
 80073ac:	4604      	mov	r4, r0
 80073ae:	e9c0 3300 	strd	r3, r3, [r0]
 80073b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073b6:	6083      	str	r3, [r0, #8]
 80073b8:	8181      	strh	r1, [r0, #12]
 80073ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80073bc:	81c2      	strh	r2, [r0, #14]
 80073be:	6183      	str	r3, [r0, #24]
 80073c0:	4619      	mov	r1, r3
 80073c2:	2208      	movs	r2, #8
 80073c4:	305c      	adds	r0, #92	@ 0x5c
 80073c6:	f000 fa45 	bl	8007854 <memset>
 80073ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007400 <std+0x58>)
 80073cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80073ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007404 <std+0x5c>)
 80073d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80073d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007408 <std+0x60>)
 80073d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80073d6:	4b0d      	ldr	r3, [pc, #52]	@ (800740c <std+0x64>)
 80073d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80073da:	4b0d      	ldr	r3, [pc, #52]	@ (8007410 <std+0x68>)
 80073dc:	6224      	str	r4, [r4, #32]
 80073de:	429c      	cmp	r4, r3
 80073e0:	d006      	beq.n	80073f0 <std+0x48>
 80073e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073e6:	4294      	cmp	r4, r2
 80073e8:	d002      	beq.n	80073f0 <std+0x48>
 80073ea:	33d0      	adds	r3, #208	@ 0xd0
 80073ec:	429c      	cmp	r4, r3
 80073ee:	d105      	bne.n	80073fc <std+0x54>
 80073f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f8:	f000 bade 	b.w	80079b8 <__retarget_lock_init_recursive>
 80073fc:	bd10      	pop	{r4, pc}
 80073fe:	bf00      	nop
 8007400:	080076a1 	.word	0x080076a1
 8007404:	080076c7 	.word	0x080076c7
 8007408:	080076ff 	.word	0x080076ff
 800740c:	08007723 	.word	0x08007723
 8007410:	20001028 	.word	0x20001028

08007414 <stdio_exit_handler>:
 8007414:	4a02      	ldr	r2, [pc, #8]	@ (8007420 <stdio_exit_handler+0xc>)
 8007416:	4903      	ldr	r1, [pc, #12]	@ (8007424 <stdio_exit_handler+0x10>)
 8007418:	4803      	ldr	r0, [pc, #12]	@ (8007428 <stdio_exit_handler+0x14>)
 800741a:	f000 b869 	b.w	80074f0 <_fwalk_sglue>
 800741e:	bf00      	nop
 8007420:	20000bc4 	.word	0x20000bc4
 8007424:	0800ab55 	.word	0x0800ab55
 8007428:	20000bd4 	.word	0x20000bd4

0800742c <cleanup_stdio>:
 800742c:	6841      	ldr	r1, [r0, #4]
 800742e:	4b0c      	ldr	r3, [pc, #48]	@ (8007460 <cleanup_stdio+0x34>)
 8007430:	4299      	cmp	r1, r3
 8007432:	b510      	push	{r4, lr}
 8007434:	4604      	mov	r4, r0
 8007436:	d001      	beq.n	800743c <cleanup_stdio+0x10>
 8007438:	f003 fb8c 	bl	800ab54 <_fflush_r>
 800743c:	68a1      	ldr	r1, [r4, #8]
 800743e:	4b09      	ldr	r3, [pc, #36]	@ (8007464 <cleanup_stdio+0x38>)
 8007440:	4299      	cmp	r1, r3
 8007442:	d002      	beq.n	800744a <cleanup_stdio+0x1e>
 8007444:	4620      	mov	r0, r4
 8007446:	f003 fb85 	bl	800ab54 <_fflush_r>
 800744a:	68e1      	ldr	r1, [r4, #12]
 800744c:	4b06      	ldr	r3, [pc, #24]	@ (8007468 <cleanup_stdio+0x3c>)
 800744e:	4299      	cmp	r1, r3
 8007450:	d004      	beq.n	800745c <cleanup_stdio+0x30>
 8007452:	4620      	mov	r0, r4
 8007454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007458:	f003 bb7c 	b.w	800ab54 <_fflush_r>
 800745c:	bd10      	pop	{r4, pc}
 800745e:	bf00      	nop
 8007460:	20001028 	.word	0x20001028
 8007464:	20001090 	.word	0x20001090
 8007468:	200010f8 	.word	0x200010f8

0800746c <global_stdio_init.part.0>:
 800746c:	b510      	push	{r4, lr}
 800746e:	4b0b      	ldr	r3, [pc, #44]	@ (800749c <global_stdio_init.part.0+0x30>)
 8007470:	4c0b      	ldr	r4, [pc, #44]	@ (80074a0 <global_stdio_init.part.0+0x34>)
 8007472:	4a0c      	ldr	r2, [pc, #48]	@ (80074a4 <global_stdio_init.part.0+0x38>)
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	4620      	mov	r0, r4
 8007478:	2200      	movs	r2, #0
 800747a:	2104      	movs	r1, #4
 800747c:	f7ff ff94 	bl	80073a8 <std>
 8007480:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007484:	2201      	movs	r2, #1
 8007486:	2109      	movs	r1, #9
 8007488:	f7ff ff8e 	bl	80073a8 <std>
 800748c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007490:	2202      	movs	r2, #2
 8007492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007496:	2112      	movs	r1, #18
 8007498:	f7ff bf86 	b.w	80073a8 <std>
 800749c:	20001160 	.word	0x20001160
 80074a0:	20001028 	.word	0x20001028
 80074a4:	08007415 	.word	0x08007415

080074a8 <__sfp_lock_acquire>:
 80074a8:	4801      	ldr	r0, [pc, #4]	@ (80074b0 <__sfp_lock_acquire+0x8>)
 80074aa:	f000 ba86 	b.w	80079ba <__retarget_lock_acquire_recursive>
 80074ae:	bf00      	nop
 80074b0:	20001169 	.word	0x20001169

080074b4 <__sfp_lock_release>:
 80074b4:	4801      	ldr	r0, [pc, #4]	@ (80074bc <__sfp_lock_release+0x8>)
 80074b6:	f000 ba81 	b.w	80079bc <__retarget_lock_release_recursive>
 80074ba:	bf00      	nop
 80074bc:	20001169 	.word	0x20001169

080074c0 <__sinit>:
 80074c0:	b510      	push	{r4, lr}
 80074c2:	4604      	mov	r4, r0
 80074c4:	f7ff fff0 	bl	80074a8 <__sfp_lock_acquire>
 80074c8:	6a23      	ldr	r3, [r4, #32]
 80074ca:	b11b      	cbz	r3, 80074d4 <__sinit+0x14>
 80074cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d0:	f7ff bff0 	b.w	80074b4 <__sfp_lock_release>
 80074d4:	4b04      	ldr	r3, [pc, #16]	@ (80074e8 <__sinit+0x28>)
 80074d6:	6223      	str	r3, [r4, #32]
 80074d8:	4b04      	ldr	r3, [pc, #16]	@ (80074ec <__sinit+0x2c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f5      	bne.n	80074cc <__sinit+0xc>
 80074e0:	f7ff ffc4 	bl	800746c <global_stdio_init.part.0>
 80074e4:	e7f2      	b.n	80074cc <__sinit+0xc>
 80074e6:	bf00      	nop
 80074e8:	0800742d 	.word	0x0800742d
 80074ec:	20001160 	.word	0x20001160

080074f0 <_fwalk_sglue>:
 80074f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f4:	4607      	mov	r7, r0
 80074f6:	4688      	mov	r8, r1
 80074f8:	4614      	mov	r4, r2
 80074fa:	2600      	movs	r6, #0
 80074fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007500:	f1b9 0901 	subs.w	r9, r9, #1
 8007504:	d505      	bpl.n	8007512 <_fwalk_sglue+0x22>
 8007506:	6824      	ldr	r4, [r4, #0]
 8007508:	2c00      	cmp	r4, #0
 800750a:	d1f7      	bne.n	80074fc <_fwalk_sglue+0xc>
 800750c:	4630      	mov	r0, r6
 800750e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007512:	89ab      	ldrh	r3, [r5, #12]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d907      	bls.n	8007528 <_fwalk_sglue+0x38>
 8007518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800751c:	3301      	adds	r3, #1
 800751e:	d003      	beq.n	8007528 <_fwalk_sglue+0x38>
 8007520:	4629      	mov	r1, r5
 8007522:	4638      	mov	r0, r7
 8007524:	47c0      	blx	r8
 8007526:	4306      	orrs	r6, r0
 8007528:	3568      	adds	r5, #104	@ 0x68
 800752a:	e7e9      	b.n	8007500 <_fwalk_sglue+0x10>

0800752c <iprintf>:
 800752c:	b40f      	push	{r0, r1, r2, r3}
 800752e:	b507      	push	{r0, r1, r2, lr}
 8007530:	4906      	ldr	r1, [pc, #24]	@ (800754c <iprintf+0x20>)
 8007532:	ab04      	add	r3, sp, #16
 8007534:	6808      	ldr	r0, [r1, #0]
 8007536:	f853 2b04 	ldr.w	r2, [r3], #4
 800753a:	6881      	ldr	r1, [r0, #8]
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	f003 f81f 	bl	800a580 <_vfiprintf_r>
 8007542:	b003      	add	sp, #12
 8007544:	f85d eb04 	ldr.w	lr, [sp], #4
 8007548:	b004      	add	sp, #16
 800754a:	4770      	bx	lr
 800754c:	20000bd0 	.word	0x20000bd0

08007550 <_puts_r>:
 8007550:	6a03      	ldr	r3, [r0, #32]
 8007552:	b570      	push	{r4, r5, r6, lr}
 8007554:	6884      	ldr	r4, [r0, #8]
 8007556:	4605      	mov	r5, r0
 8007558:	460e      	mov	r6, r1
 800755a:	b90b      	cbnz	r3, 8007560 <_puts_r+0x10>
 800755c:	f7ff ffb0 	bl	80074c0 <__sinit>
 8007560:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007562:	07db      	lsls	r3, r3, #31
 8007564:	d405      	bmi.n	8007572 <_puts_r+0x22>
 8007566:	89a3      	ldrh	r3, [r4, #12]
 8007568:	0598      	lsls	r0, r3, #22
 800756a:	d402      	bmi.n	8007572 <_puts_r+0x22>
 800756c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800756e:	f000 fa24 	bl	80079ba <__retarget_lock_acquire_recursive>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	0719      	lsls	r1, r3, #28
 8007576:	d502      	bpl.n	800757e <_puts_r+0x2e>
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d135      	bne.n	80075ea <_puts_r+0x9a>
 800757e:	4621      	mov	r1, r4
 8007580:	4628      	mov	r0, r5
 8007582:	f000 f911 	bl	80077a8 <__swsetup_r>
 8007586:	b380      	cbz	r0, 80075ea <_puts_r+0x9a>
 8007588:	f04f 35ff 	mov.w	r5, #4294967295
 800758c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800758e:	07da      	lsls	r2, r3, #31
 8007590:	d405      	bmi.n	800759e <_puts_r+0x4e>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	059b      	lsls	r3, r3, #22
 8007596:	d402      	bmi.n	800759e <_puts_r+0x4e>
 8007598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800759a:	f000 fa0f 	bl	80079bc <__retarget_lock_release_recursive>
 800759e:	4628      	mov	r0, r5
 80075a0:	bd70      	pop	{r4, r5, r6, pc}
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	da04      	bge.n	80075b0 <_puts_r+0x60>
 80075a6:	69a2      	ldr	r2, [r4, #24]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	dc17      	bgt.n	80075dc <_puts_r+0x8c>
 80075ac:	290a      	cmp	r1, #10
 80075ae:	d015      	beq.n	80075dc <_puts_r+0x8c>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	6022      	str	r2, [r4, #0]
 80075b6:	7019      	strb	r1, [r3, #0]
 80075b8:	68a3      	ldr	r3, [r4, #8]
 80075ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075be:	3b01      	subs	r3, #1
 80075c0:	60a3      	str	r3, [r4, #8]
 80075c2:	2900      	cmp	r1, #0
 80075c4:	d1ed      	bne.n	80075a2 <_puts_r+0x52>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da11      	bge.n	80075ee <_puts_r+0x9e>
 80075ca:	4622      	mov	r2, r4
 80075cc:	210a      	movs	r1, #10
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 f8ab 	bl	800772a <__swbuf_r>
 80075d4:	3001      	adds	r0, #1
 80075d6:	d0d7      	beq.n	8007588 <_puts_r+0x38>
 80075d8:	250a      	movs	r5, #10
 80075da:	e7d7      	b.n	800758c <_puts_r+0x3c>
 80075dc:	4622      	mov	r2, r4
 80075de:	4628      	mov	r0, r5
 80075e0:	f000 f8a3 	bl	800772a <__swbuf_r>
 80075e4:	3001      	adds	r0, #1
 80075e6:	d1e7      	bne.n	80075b8 <_puts_r+0x68>
 80075e8:	e7ce      	b.n	8007588 <_puts_r+0x38>
 80075ea:	3e01      	subs	r6, #1
 80075ec:	e7e4      	b.n	80075b8 <_puts_r+0x68>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	6022      	str	r2, [r4, #0]
 80075f4:	220a      	movs	r2, #10
 80075f6:	701a      	strb	r2, [r3, #0]
 80075f8:	e7ee      	b.n	80075d8 <_puts_r+0x88>
	...

080075fc <puts>:
 80075fc:	4b02      	ldr	r3, [pc, #8]	@ (8007608 <puts+0xc>)
 80075fe:	4601      	mov	r1, r0
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	f7ff bfa5 	b.w	8007550 <_puts_r>
 8007606:	bf00      	nop
 8007608:	20000bd0 	.word	0x20000bd0

0800760c <siprintf>:
 800760c:	b40e      	push	{r1, r2, r3}
 800760e:	b500      	push	{lr}
 8007610:	b09c      	sub	sp, #112	@ 0x70
 8007612:	ab1d      	add	r3, sp, #116	@ 0x74
 8007614:	9002      	str	r0, [sp, #8]
 8007616:	9006      	str	r0, [sp, #24]
 8007618:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800761c:	4809      	ldr	r0, [pc, #36]	@ (8007644 <siprintf+0x38>)
 800761e:	9107      	str	r1, [sp, #28]
 8007620:	9104      	str	r1, [sp, #16]
 8007622:	4909      	ldr	r1, [pc, #36]	@ (8007648 <siprintf+0x3c>)
 8007624:	f853 2b04 	ldr.w	r2, [r3], #4
 8007628:	9105      	str	r1, [sp, #20]
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	a902      	add	r1, sp, #8
 8007630:	f002 fcb4 	bl	8009f9c <_svfiprintf_r>
 8007634:	9b02      	ldr	r3, [sp, #8]
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	b01c      	add	sp, #112	@ 0x70
 800763c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007640:	b003      	add	sp, #12
 8007642:	4770      	bx	lr
 8007644:	20000bd0 	.word	0x20000bd0
 8007648:	ffff0208 	.word	0xffff0208

0800764c <siscanf>:
 800764c:	b40e      	push	{r1, r2, r3}
 800764e:	b530      	push	{r4, r5, lr}
 8007650:	b09c      	sub	sp, #112	@ 0x70
 8007652:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007654:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007658:	f854 5b04 	ldr.w	r5, [r4], #4
 800765c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007660:	9002      	str	r0, [sp, #8]
 8007662:	9006      	str	r0, [sp, #24]
 8007664:	f7f8 fe04 	bl	8000270 <strlen>
 8007668:	4b0b      	ldr	r3, [pc, #44]	@ (8007698 <siscanf+0x4c>)
 800766a:	9003      	str	r0, [sp, #12]
 800766c:	9007      	str	r0, [sp, #28]
 800766e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007670:	480a      	ldr	r0, [pc, #40]	@ (800769c <siscanf+0x50>)
 8007672:	9401      	str	r4, [sp, #4]
 8007674:	2300      	movs	r3, #0
 8007676:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007678:	9314      	str	r3, [sp, #80]	@ 0x50
 800767a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800767e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007682:	462a      	mov	r2, r5
 8007684:	4623      	mov	r3, r4
 8007686:	a902      	add	r1, sp, #8
 8007688:	6800      	ldr	r0, [r0, #0]
 800768a:	f002 fddb 	bl	800a244 <__ssvfiscanf_r>
 800768e:	b01c      	add	sp, #112	@ 0x70
 8007690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007694:	b003      	add	sp, #12
 8007696:	4770      	bx	lr
 8007698:	080076c3 	.word	0x080076c3
 800769c:	20000bd0 	.word	0x20000bd0

080076a0 <__sread>:
 80076a0:	b510      	push	{r4, lr}
 80076a2:	460c      	mov	r4, r1
 80076a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a8:	f000 f938 	bl	800791c <_read_r>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	bfab      	itete	ge
 80076b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076b2:	89a3      	ldrhlt	r3, [r4, #12]
 80076b4:	181b      	addge	r3, r3, r0
 80076b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076ba:	bfac      	ite	ge
 80076bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076be:	81a3      	strhlt	r3, [r4, #12]
 80076c0:	bd10      	pop	{r4, pc}

080076c2 <__seofread>:
 80076c2:	2000      	movs	r0, #0
 80076c4:	4770      	bx	lr

080076c6 <__swrite>:
 80076c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ca:	461f      	mov	r7, r3
 80076cc:	898b      	ldrh	r3, [r1, #12]
 80076ce:	05db      	lsls	r3, r3, #23
 80076d0:	4605      	mov	r5, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	4616      	mov	r6, r2
 80076d6:	d505      	bpl.n	80076e4 <__swrite+0x1e>
 80076d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076dc:	2302      	movs	r3, #2
 80076de:	2200      	movs	r2, #0
 80076e0:	f000 f90a 	bl	80078f8 <_lseek_r>
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	4632      	mov	r2, r6
 80076f2:	463b      	mov	r3, r7
 80076f4:	4628      	mov	r0, r5
 80076f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076fa:	f000 b921 	b.w	8007940 <_write_r>

080076fe <__sseek>:
 80076fe:	b510      	push	{r4, lr}
 8007700:	460c      	mov	r4, r1
 8007702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007706:	f000 f8f7 	bl	80078f8 <_lseek_r>
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	bf15      	itete	ne
 8007710:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007712:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007716:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800771a:	81a3      	strheq	r3, [r4, #12]
 800771c:	bf18      	it	ne
 800771e:	81a3      	strhne	r3, [r4, #12]
 8007720:	bd10      	pop	{r4, pc}

08007722 <__sclose>:
 8007722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007726:	f000 b8d7 	b.w	80078d8 <_close_r>

0800772a <__swbuf_r>:
 800772a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772c:	460e      	mov	r6, r1
 800772e:	4614      	mov	r4, r2
 8007730:	4605      	mov	r5, r0
 8007732:	b118      	cbz	r0, 800773c <__swbuf_r+0x12>
 8007734:	6a03      	ldr	r3, [r0, #32]
 8007736:	b90b      	cbnz	r3, 800773c <__swbuf_r+0x12>
 8007738:	f7ff fec2 	bl	80074c0 <__sinit>
 800773c:	69a3      	ldr	r3, [r4, #24]
 800773e:	60a3      	str	r3, [r4, #8]
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	071a      	lsls	r2, r3, #28
 8007744:	d501      	bpl.n	800774a <__swbuf_r+0x20>
 8007746:	6923      	ldr	r3, [r4, #16]
 8007748:	b943      	cbnz	r3, 800775c <__swbuf_r+0x32>
 800774a:	4621      	mov	r1, r4
 800774c:	4628      	mov	r0, r5
 800774e:	f000 f82b 	bl	80077a8 <__swsetup_r>
 8007752:	b118      	cbz	r0, 800775c <__swbuf_r+0x32>
 8007754:	f04f 37ff 	mov.w	r7, #4294967295
 8007758:	4638      	mov	r0, r7
 800775a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	6922      	ldr	r2, [r4, #16]
 8007760:	1a98      	subs	r0, r3, r2
 8007762:	6963      	ldr	r3, [r4, #20]
 8007764:	b2f6      	uxtb	r6, r6
 8007766:	4283      	cmp	r3, r0
 8007768:	4637      	mov	r7, r6
 800776a:	dc05      	bgt.n	8007778 <__swbuf_r+0x4e>
 800776c:	4621      	mov	r1, r4
 800776e:	4628      	mov	r0, r5
 8007770:	f003 f9f0 	bl	800ab54 <_fflush_r>
 8007774:	2800      	cmp	r0, #0
 8007776:	d1ed      	bne.n	8007754 <__swbuf_r+0x2a>
 8007778:	68a3      	ldr	r3, [r4, #8]
 800777a:	3b01      	subs	r3, #1
 800777c:	60a3      	str	r3, [r4, #8]
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	6022      	str	r2, [r4, #0]
 8007784:	701e      	strb	r6, [r3, #0]
 8007786:	6962      	ldr	r2, [r4, #20]
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	429a      	cmp	r2, r3
 800778c:	d004      	beq.n	8007798 <__swbuf_r+0x6e>
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	07db      	lsls	r3, r3, #31
 8007792:	d5e1      	bpl.n	8007758 <__swbuf_r+0x2e>
 8007794:	2e0a      	cmp	r6, #10
 8007796:	d1df      	bne.n	8007758 <__swbuf_r+0x2e>
 8007798:	4621      	mov	r1, r4
 800779a:	4628      	mov	r0, r5
 800779c:	f003 f9da 	bl	800ab54 <_fflush_r>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d0d9      	beq.n	8007758 <__swbuf_r+0x2e>
 80077a4:	e7d6      	b.n	8007754 <__swbuf_r+0x2a>
	...

080077a8 <__swsetup_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4b29      	ldr	r3, [pc, #164]	@ (8007850 <__swsetup_r+0xa8>)
 80077ac:	4605      	mov	r5, r0
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	460c      	mov	r4, r1
 80077b2:	b118      	cbz	r0, 80077bc <__swsetup_r+0x14>
 80077b4:	6a03      	ldr	r3, [r0, #32]
 80077b6:	b90b      	cbnz	r3, 80077bc <__swsetup_r+0x14>
 80077b8:	f7ff fe82 	bl	80074c0 <__sinit>
 80077bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c0:	0719      	lsls	r1, r3, #28
 80077c2:	d422      	bmi.n	800780a <__swsetup_r+0x62>
 80077c4:	06da      	lsls	r2, r3, #27
 80077c6:	d407      	bmi.n	80077d8 <__swsetup_r+0x30>
 80077c8:	2209      	movs	r2, #9
 80077ca:	602a      	str	r2, [r5, #0]
 80077cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077d0:	81a3      	strh	r3, [r4, #12]
 80077d2:	f04f 30ff 	mov.w	r0, #4294967295
 80077d6:	e033      	b.n	8007840 <__swsetup_r+0x98>
 80077d8:	0758      	lsls	r0, r3, #29
 80077da:	d512      	bpl.n	8007802 <__swsetup_r+0x5a>
 80077dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077de:	b141      	cbz	r1, 80077f2 <__swsetup_r+0x4a>
 80077e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077e4:	4299      	cmp	r1, r3
 80077e6:	d002      	beq.n	80077ee <__swsetup_r+0x46>
 80077e8:	4628      	mov	r0, r5
 80077ea:	f000 ff45 	bl	8008678 <_free_r>
 80077ee:	2300      	movs	r3, #0
 80077f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077f8:	81a3      	strh	r3, [r4, #12]
 80077fa:	2300      	movs	r3, #0
 80077fc:	6063      	str	r3, [r4, #4]
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	f043 0308 	orr.w	r3, r3, #8
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	6923      	ldr	r3, [r4, #16]
 800780c:	b94b      	cbnz	r3, 8007822 <__swsetup_r+0x7a>
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007818:	d003      	beq.n	8007822 <__swsetup_r+0x7a>
 800781a:	4621      	mov	r1, r4
 800781c:	4628      	mov	r0, r5
 800781e:	f003 f9e7 	bl	800abf0 <__smakebuf_r>
 8007822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007826:	f013 0201 	ands.w	r2, r3, #1
 800782a:	d00a      	beq.n	8007842 <__swsetup_r+0x9a>
 800782c:	2200      	movs	r2, #0
 800782e:	60a2      	str	r2, [r4, #8]
 8007830:	6962      	ldr	r2, [r4, #20]
 8007832:	4252      	negs	r2, r2
 8007834:	61a2      	str	r2, [r4, #24]
 8007836:	6922      	ldr	r2, [r4, #16]
 8007838:	b942      	cbnz	r2, 800784c <__swsetup_r+0xa4>
 800783a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800783e:	d1c5      	bne.n	80077cc <__swsetup_r+0x24>
 8007840:	bd38      	pop	{r3, r4, r5, pc}
 8007842:	0799      	lsls	r1, r3, #30
 8007844:	bf58      	it	pl
 8007846:	6962      	ldrpl	r2, [r4, #20]
 8007848:	60a2      	str	r2, [r4, #8]
 800784a:	e7f4      	b.n	8007836 <__swsetup_r+0x8e>
 800784c:	2000      	movs	r0, #0
 800784e:	e7f7      	b.n	8007840 <__swsetup_r+0x98>
 8007850:	20000bd0 	.word	0x20000bd0

08007854 <memset>:
 8007854:	4402      	add	r2, r0
 8007856:	4603      	mov	r3, r0
 8007858:	4293      	cmp	r3, r2
 800785a:	d100      	bne.n	800785e <memset+0xa>
 800785c:	4770      	bx	lr
 800785e:	f803 1b01 	strb.w	r1, [r3], #1
 8007862:	e7f9      	b.n	8007858 <memset+0x4>

08007864 <strchr>:
 8007864:	b2c9      	uxtb	r1, r1
 8007866:	4603      	mov	r3, r0
 8007868:	4618      	mov	r0, r3
 800786a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800786e:	b112      	cbz	r2, 8007876 <strchr+0x12>
 8007870:	428a      	cmp	r2, r1
 8007872:	d1f9      	bne.n	8007868 <strchr+0x4>
 8007874:	4770      	bx	lr
 8007876:	2900      	cmp	r1, #0
 8007878:	bf18      	it	ne
 800787a:	2000      	movne	r0, #0
 800787c:	4770      	bx	lr

0800787e <strncpy>:
 800787e:	b510      	push	{r4, lr}
 8007880:	3901      	subs	r1, #1
 8007882:	4603      	mov	r3, r0
 8007884:	b132      	cbz	r2, 8007894 <strncpy+0x16>
 8007886:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800788a:	f803 4b01 	strb.w	r4, [r3], #1
 800788e:	3a01      	subs	r2, #1
 8007890:	2c00      	cmp	r4, #0
 8007892:	d1f7      	bne.n	8007884 <strncpy+0x6>
 8007894:	441a      	add	r2, r3
 8007896:	2100      	movs	r1, #0
 8007898:	4293      	cmp	r3, r2
 800789a:	d100      	bne.n	800789e <strncpy+0x20>
 800789c:	bd10      	pop	{r4, pc}
 800789e:	f803 1b01 	strb.w	r1, [r3], #1
 80078a2:	e7f9      	b.n	8007898 <strncpy+0x1a>

080078a4 <strstr>:
 80078a4:	780a      	ldrb	r2, [r1, #0]
 80078a6:	b570      	push	{r4, r5, r6, lr}
 80078a8:	b96a      	cbnz	r2, 80078c6 <strstr+0x22>
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d109      	bne.n	80078c4 <strstr+0x20>
 80078b0:	460c      	mov	r4, r1
 80078b2:	4605      	mov	r5, r0
 80078b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0f6      	beq.n	80078aa <strstr+0x6>
 80078bc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80078c0:	429e      	cmp	r6, r3
 80078c2:	d0f7      	beq.n	80078b4 <strstr+0x10>
 80078c4:	3001      	adds	r0, #1
 80078c6:	7803      	ldrb	r3, [r0, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1ef      	bne.n	80078ac <strstr+0x8>
 80078cc:	4618      	mov	r0, r3
 80078ce:	e7ec      	b.n	80078aa <strstr+0x6>

080078d0 <_localeconv_r>:
 80078d0:	4800      	ldr	r0, [pc, #0]	@ (80078d4 <_localeconv_r+0x4>)
 80078d2:	4770      	bx	lr
 80078d4:	20000d10 	.word	0x20000d10

080078d8 <_close_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4d06      	ldr	r5, [pc, #24]	@ (80078f4 <_close_r+0x1c>)
 80078dc:	2300      	movs	r3, #0
 80078de:	4604      	mov	r4, r0
 80078e0:	4608      	mov	r0, r1
 80078e2:	602b      	str	r3, [r5, #0]
 80078e4:	f7fa f9d8 	bl	8001c98 <_close>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d102      	bne.n	80078f2 <_close_r+0x1a>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	b103      	cbz	r3, 80078f2 <_close_r+0x1a>
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	bd38      	pop	{r3, r4, r5, pc}
 80078f4:	20001164 	.word	0x20001164

080078f8 <_lseek_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4d07      	ldr	r5, [pc, #28]	@ (8007918 <_lseek_r+0x20>)
 80078fc:	4604      	mov	r4, r0
 80078fe:	4608      	mov	r0, r1
 8007900:	4611      	mov	r1, r2
 8007902:	2200      	movs	r2, #0
 8007904:	602a      	str	r2, [r5, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	f7fa f9ed 	bl	8001ce6 <_lseek>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_lseek_r+0x1e>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_lseek_r+0x1e>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	20001164 	.word	0x20001164

0800791c <_read_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d07      	ldr	r5, [pc, #28]	@ (800793c <_read_r+0x20>)
 8007920:	4604      	mov	r4, r0
 8007922:	4608      	mov	r0, r1
 8007924:	4611      	mov	r1, r2
 8007926:	2200      	movs	r2, #0
 8007928:	602a      	str	r2, [r5, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	f7fa f97b 	bl	8001c26 <_read>
 8007930:	1c43      	adds	r3, r0, #1
 8007932:	d102      	bne.n	800793a <_read_r+0x1e>
 8007934:	682b      	ldr	r3, [r5, #0]
 8007936:	b103      	cbz	r3, 800793a <_read_r+0x1e>
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	20001164 	.word	0x20001164

08007940 <_write_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4d07      	ldr	r5, [pc, #28]	@ (8007960 <_write_r+0x20>)
 8007944:	4604      	mov	r4, r0
 8007946:	4608      	mov	r0, r1
 8007948:	4611      	mov	r1, r2
 800794a:	2200      	movs	r2, #0
 800794c:	602a      	str	r2, [r5, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	f7fa f986 	bl	8001c60 <_write>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_write_r+0x1e>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_write_r+0x1e>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	20001164 	.word	0x20001164

08007964 <__errno>:
 8007964:	4b01      	ldr	r3, [pc, #4]	@ (800796c <__errno+0x8>)
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	20000bd0 	.word	0x20000bd0

08007970 <__libc_init_array>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	4d0d      	ldr	r5, [pc, #52]	@ (80079a8 <__libc_init_array+0x38>)
 8007974:	4c0d      	ldr	r4, [pc, #52]	@ (80079ac <__libc_init_array+0x3c>)
 8007976:	1b64      	subs	r4, r4, r5
 8007978:	10a4      	asrs	r4, r4, #2
 800797a:	2600      	movs	r6, #0
 800797c:	42a6      	cmp	r6, r4
 800797e:	d109      	bne.n	8007994 <__libc_init_array+0x24>
 8007980:	4d0b      	ldr	r5, [pc, #44]	@ (80079b0 <__libc_init_array+0x40>)
 8007982:	4c0c      	ldr	r4, [pc, #48]	@ (80079b4 <__libc_init_array+0x44>)
 8007984:	f003 fee8 	bl	800b758 <_init>
 8007988:	1b64      	subs	r4, r4, r5
 800798a:	10a4      	asrs	r4, r4, #2
 800798c:	2600      	movs	r6, #0
 800798e:	42a6      	cmp	r6, r4
 8007990:	d105      	bne.n	800799e <__libc_init_array+0x2e>
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	f855 3b04 	ldr.w	r3, [r5], #4
 8007998:	4798      	blx	r3
 800799a:	3601      	adds	r6, #1
 800799c:	e7ee      	b.n	800797c <__libc_init_array+0xc>
 800799e:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a2:	4798      	blx	r3
 80079a4:	3601      	adds	r6, #1
 80079a6:	e7f2      	b.n	800798e <__libc_init_array+0x1e>
 80079a8:	0800bd74 	.word	0x0800bd74
 80079ac:	0800bd74 	.word	0x0800bd74
 80079b0:	0800bd74 	.word	0x0800bd74
 80079b4:	0800bd78 	.word	0x0800bd78

080079b8 <__retarget_lock_init_recursive>:
 80079b8:	4770      	bx	lr

080079ba <__retarget_lock_acquire_recursive>:
 80079ba:	4770      	bx	lr

080079bc <__retarget_lock_release_recursive>:
 80079bc:	4770      	bx	lr

080079be <strcpy>:
 80079be:	4603      	mov	r3, r0
 80079c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079c4:	f803 2b01 	strb.w	r2, [r3], #1
 80079c8:	2a00      	cmp	r2, #0
 80079ca:	d1f9      	bne.n	80079c0 <strcpy+0x2>
 80079cc:	4770      	bx	lr
	...

080079d0 <nanf>:
 80079d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80079d8 <nanf+0x8>
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	7fc00000 	.word	0x7fc00000

080079dc <quorem>:
 80079dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	6903      	ldr	r3, [r0, #16]
 80079e2:	690c      	ldr	r4, [r1, #16]
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	4607      	mov	r7, r0
 80079e8:	db7e      	blt.n	8007ae8 <quorem+0x10c>
 80079ea:	3c01      	subs	r4, #1
 80079ec:	f101 0814 	add.w	r8, r1, #20
 80079f0:	00a3      	lsls	r3, r4, #2
 80079f2:	f100 0514 	add.w	r5, r0, #20
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a06:	3301      	adds	r3, #1
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a12:	d32e      	bcc.n	8007a72 <quorem+0x96>
 8007a14:	f04f 0a00 	mov.w	sl, #0
 8007a18:	46c4      	mov	ip, r8
 8007a1a:	46ae      	mov	lr, r5
 8007a1c:	46d3      	mov	fp, sl
 8007a1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a22:	b298      	uxth	r0, r3
 8007a24:	fb06 a000 	mla	r0, r6, r0, sl
 8007a28:	0c02      	lsrs	r2, r0, #16
 8007a2a:	0c1b      	lsrs	r3, r3, #16
 8007a2c:	fb06 2303 	mla	r3, r6, r3, r2
 8007a30:	f8de 2000 	ldr.w	r2, [lr]
 8007a34:	b280      	uxth	r0, r0
 8007a36:	b292      	uxth	r2, r2
 8007a38:	1a12      	subs	r2, r2, r0
 8007a3a:	445a      	add	r2, fp
 8007a3c:	f8de 0000 	ldr.w	r0, [lr]
 8007a40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a4e:	b292      	uxth	r2, r2
 8007a50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a54:	45e1      	cmp	r9, ip
 8007a56:	f84e 2b04 	str.w	r2, [lr], #4
 8007a5a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a5e:	d2de      	bcs.n	8007a1e <quorem+0x42>
 8007a60:	9b00      	ldr	r3, [sp, #0]
 8007a62:	58eb      	ldr	r3, [r5, r3]
 8007a64:	b92b      	cbnz	r3, 8007a72 <quorem+0x96>
 8007a66:	9b01      	ldr	r3, [sp, #4]
 8007a68:	3b04      	subs	r3, #4
 8007a6a:	429d      	cmp	r5, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	d32f      	bcc.n	8007ad0 <quorem+0xf4>
 8007a70:	613c      	str	r4, [r7, #16]
 8007a72:	4638      	mov	r0, r7
 8007a74:	f001 f9c4 	bl	8008e00 <__mcmp>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	db25      	blt.n	8007ac8 <quorem+0xec>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	2000      	movs	r0, #0
 8007a80:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a84:	f8d1 c000 	ldr.w	ip, [r1]
 8007a88:	fa1f fe82 	uxth.w	lr, r2
 8007a8c:	fa1f f38c 	uxth.w	r3, ip
 8007a90:	eba3 030e 	sub.w	r3, r3, lr
 8007a94:	4403      	add	r3, r0
 8007a96:	0c12      	lsrs	r2, r2, #16
 8007a98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aa6:	45c1      	cmp	r9, r8
 8007aa8:	f841 3b04 	str.w	r3, [r1], #4
 8007aac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ab0:	d2e6      	bcs.n	8007a80 <quorem+0xa4>
 8007ab2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aba:	b922      	cbnz	r2, 8007ac6 <quorem+0xea>
 8007abc:	3b04      	subs	r3, #4
 8007abe:	429d      	cmp	r5, r3
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	d30b      	bcc.n	8007adc <quorem+0x100>
 8007ac4:	613c      	str	r4, [r7, #16]
 8007ac6:	3601      	adds	r6, #1
 8007ac8:	4630      	mov	r0, r6
 8007aca:	b003      	add	sp, #12
 8007acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	3b04      	subs	r3, #4
 8007ad4:	2a00      	cmp	r2, #0
 8007ad6:	d1cb      	bne.n	8007a70 <quorem+0x94>
 8007ad8:	3c01      	subs	r4, #1
 8007ada:	e7c6      	b.n	8007a6a <quorem+0x8e>
 8007adc:	6812      	ldr	r2, [r2, #0]
 8007ade:	3b04      	subs	r3, #4
 8007ae0:	2a00      	cmp	r2, #0
 8007ae2:	d1ef      	bne.n	8007ac4 <quorem+0xe8>
 8007ae4:	3c01      	subs	r4, #1
 8007ae6:	e7ea      	b.n	8007abe <quorem+0xe2>
 8007ae8:	2000      	movs	r0, #0
 8007aea:	e7ee      	b.n	8007aca <quorem+0xee>
 8007aec:	0000      	movs	r0, r0
	...

08007af0 <_dtoa_r>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	69c7      	ldr	r7, [r0, #28]
 8007af6:	b099      	sub	sp, #100	@ 0x64
 8007af8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007afc:	ec55 4b10 	vmov	r4, r5, d0
 8007b00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007b02:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b04:	4683      	mov	fp, r0
 8007b06:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b0a:	b97f      	cbnz	r7, 8007b2c <_dtoa_r+0x3c>
 8007b0c:	2010      	movs	r0, #16
 8007b0e:	f000 fdfd 	bl	800870c <malloc>
 8007b12:	4602      	mov	r2, r0
 8007b14:	f8cb 001c 	str.w	r0, [fp, #28]
 8007b18:	b920      	cbnz	r0, 8007b24 <_dtoa_r+0x34>
 8007b1a:	4ba7      	ldr	r3, [pc, #668]	@ (8007db8 <_dtoa_r+0x2c8>)
 8007b1c:	21ef      	movs	r1, #239	@ 0xef
 8007b1e:	48a7      	ldr	r0, [pc, #668]	@ (8007dbc <_dtoa_r+0x2cc>)
 8007b20:	f003 f98a 	bl	800ae38 <__assert_func>
 8007b24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b28:	6007      	str	r7, [r0, #0]
 8007b2a:	60c7      	str	r7, [r0, #12]
 8007b2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b30:	6819      	ldr	r1, [r3, #0]
 8007b32:	b159      	cbz	r1, 8007b4c <_dtoa_r+0x5c>
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	604a      	str	r2, [r1, #4]
 8007b38:	2301      	movs	r3, #1
 8007b3a:	4093      	lsls	r3, r2
 8007b3c:	608b      	str	r3, [r1, #8]
 8007b3e:	4658      	mov	r0, fp
 8007b40:	f000 feda 	bl	80088f8 <_Bfree>
 8007b44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	1e2b      	subs	r3, r5, #0
 8007b4e:	bfb9      	ittee	lt
 8007b50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b54:	9303      	strlt	r3, [sp, #12]
 8007b56:	2300      	movge	r3, #0
 8007b58:	6033      	strge	r3, [r6, #0]
 8007b5a:	9f03      	ldr	r7, [sp, #12]
 8007b5c:	4b98      	ldr	r3, [pc, #608]	@ (8007dc0 <_dtoa_r+0x2d0>)
 8007b5e:	bfbc      	itt	lt
 8007b60:	2201      	movlt	r2, #1
 8007b62:	6032      	strlt	r2, [r6, #0]
 8007b64:	43bb      	bics	r3, r7
 8007b66:	d112      	bne.n	8007b8e <_dtoa_r+0x9e>
 8007b68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b74:	4323      	orrs	r3, r4
 8007b76:	f000 854d 	beq.w	8008614 <_dtoa_r+0xb24>
 8007b7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007dd4 <_dtoa_r+0x2e4>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 854f 	beq.w	8008624 <_dtoa_r+0xb34>
 8007b86:	f10a 0303 	add.w	r3, sl, #3
 8007b8a:	f000 bd49 	b.w	8008620 <_dtoa_r+0xb30>
 8007b8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	ec51 0b17 	vmov	r0, r1, d7
 8007b98:	2300      	movs	r3, #0
 8007b9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007b9e:	f7f8 ff93 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ba2:	4680      	mov	r8, r0
 8007ba4:	b158      	cbz	r0, 8007bbe <_dtoa_r+0xce>
 8007ba6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ba8:	2301      	movs	r3, #1
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007bae:	b113      	cbz	r3, 8007bb6 <_dtoa_r+0xc6>
 8007bb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007bb2:	4b84      	ldr	r3, [pc, #528]	@ (8007dc4 <_dtoa_r+0x2d4>)
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007dd8 <_dtoa_r+0x2e8>
 8007bba:	f000 bd33 	b.w	8008624 <_dtoa_r+0xb34>
 8007bbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007bc2:	aa16      	add	r2, sp, #88	@ 0x58
 8007bc4:	a917      	add	r1, sp, #92	@ 0x5c
 8007bc6:	4658      	mov	r0, fp
 8007bc8:	f001 fa3a 	bl	8009040 <__d2b>
 8007bcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007bd0:	4681      	mov	r9, r0
 8007bd2:	2e00      	cmp	r6, #0
 8007bd4:	d077      	beq.n	8007cc6 <_dtoa_r+0x1d6>
 8007bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007be4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007be8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007bec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4b74      	ldr	r3, [pc, #464]	@ (8007dc8 <_dtoa_r+0x2d8>)
 8007bf6:	f7f8 fb47 	bl	8000288 <__aeabi_dsub>
 8007bfa:	a369      	add	r3, pc, #420	@ (adr r3, 8007da0 <_dtoa_r+0x2b0>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f7f8 fcfa 	bl	80005f8 <__aeabi_dmul>
 8007c04:	a368      	add	r3, pc, #416	@ (adr r3, 8007da8 <_dtoa_r+0x2b8>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f7f8 fb3f 	bl	800028c <__adddf3>
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4630      	mov	r0, r6
 8007c12:	460d      	mov	r5, r1
 8007c14:	f7f8 fc86 	bl	8000524 <__aeabi_i2d>
 8007c18:	a365      	add	r3, pc, #404	@ (adr r3, 8007db0 <_dtoa_r+0x2c0>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fceb 	bl	80005f8 <__aeabi_dmul>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4620      	mov	r0, r4
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f7f8 fb2f 	bl	800028c <__adddf3>
 8007c2e:	4604      	mov	r4, r0
 8007c30:	460d      	mov	r5, r1
 8007c32:	f7f8 ff91 	bl	8000b58 <__aeabi_d2iz>
 8007c36:	2200      	movs	r2, #0
 8007c38:	4607      	mov	r7, r0
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	4629      	mov	r1, r5
 8007c40:	f7f8 ff4c 	bl	8000adc <__aeabi_dcmplt>
 8007c44:	b140      	cbz	r0, 8007c58 <_dtoa_r+0x168>
 8007c46:	4638      	mov	r0, r7
 8007c48:	f7f8 fc6c 	bl	8000524 <__aeabi_i2d>
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	462b      	mov	r3, r5
 8007c50:	f7f8 ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c54:	b900      	cbnz	r0, 8007c58 <_dtoa_r+0x168>
 8007c56:	3f01      	subs	r7, #1
 8007c58:	2f16      	cmp	r7, #22
 8007c5a:	d851      	bhi.n	8007d00 <_dtoa_r+0x210>
 8007c5c:	4b5b      	ldr	r3, [pc, #364]	@ (8007dcc <_dtoa_r+0x2dc>)
 8007c5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c6a:	f7f8 ff37 	bl	8000adc <__aeabi_dcmplt>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d048      	beq.n	8007d04 <_dtoa_r+0x214>
 8007c72:	3f01      	subs	r7, #1
 8007c74:	2300      	movs	r3, #0
 8007c76:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c7a:	1b9b      	subs	r3, r3, r6
 8007c7c:	1e5a      	subs	r2, r3, #1
 8007c7e:	bf44      	itt	mi
 8007c80:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c84:	2300      	movmi	r3, #0
 8007c86:	9208      	str	r2, [sp, #32]
 8007c88:	bf54      	ite	pl
 8007c8a:	f04f 0800 	movpl.w	r8, #0
 8007c8e:	9308      	strmi	r3, [sp, #32]
 8007c90:	2f00      	cmp	r7, #0
 8007c92:	db39      	blt.n	8007d08 <_dtoa_r+0x218>
 8007c94:	9b08      	ldr	r3, [sp, #32]
 8007c96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007c98:	443b      	add	r3, r7
 8007c9a:	9308      	str	r3, [sp, #32]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca2:	2b09      	cmp	r3, #9
 8007ca4:	d864      	bhi.n	8007d70 <_dtoa_r+0x280>
 8007ca6:	2b05      	cmp	r3, #5
 8007ca8:	bfc4      	itt	gt
 8007caa:	3b04      	subgt	r3, #4
 8007cac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb0:	f1a3 0302 	sub.w	r3, r3, #2
 8007cb4:	bfcc      	ite	gt
 8007cb6:	2400      	movgt	r4, #0
 8007cb8:	2401      	movle	r4, #1
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d863      	bhi.n	8007d86 <_dtoa_r+0x296>
 8007cbe:	e8df f003 	tbb	[pc, r3]
 8007cc2:	372a      	.short	0x372a
 8007cc4:	5535      	.short	0x5535
 8007cc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007cca:	441e      	add	r6, r3
 8007ccc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007cd0:	2b20      	cmp	r3, #32
 8007cd2:	bfc1      	itttt	gt
 8007cd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007cd8:	409f      	lslgt	r7, r3
 8007cda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007cde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ce2:	bfd6      	itet	le
 8007ce4:	f1c3 0320 	rsble	r3, r3, #32
 8007ce8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007cec:	fa04 f003 	lslle.w	r0, r4, r3
 8007cf0:	f7f8 fc08 	bl	8000504 <__aeabi_ui2d>
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007cfa:	3e01      	subs	r6, #1
 8007cfc:	9214      	str	r2, [sp, #80]	@ 0x50
 8007cfe:	e777      	b.n	8007bf0 <_dtoa_r+0x100>
 8007d00:	2301      	movs	r3, #1
 8007d02:	e7b8      	b.n	8007c76 <_dtoa_r+0x186>
 8007d04:	9012      	str	r0, [sp, #72]	@ 0x48
 8007d06:	e7b7      	b.n	8007c78 <_dtoa_r+0x188>
 8007d08:	427b      	negs	r3, r7
 8007d0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	eba8 0807 	sub.w	r8, r8, r7
 8007d12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d14:	e7c4      	b.n	8007ca0 <_dtoa_r+0x1b0>
 8007d16:	2300      	movs	r3, #0
 8007d18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dc35      	bgt.n	8007d8c <_dtoa_r+0x29c>
 8007d20:	2301      	movs	r3, #1
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	9307      	str	r3, [sp, #28]
 8007d26:	461a      	mov	r2, r3
 8007d28:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d2a:	e00b      	b.n	8007d44 <_dtoa_r+0x254>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e7f3      	b.n	8007d18 <_dtoa_r+0x228>
 8007d30:	2300      	movs	r3, #0
 8007d32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d36:	18fb      	adds	r3, r7, r3
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	9307      	str	r3, [sp, #28]
 8007d40:	bfb8      	it	lt
 8007d42:	2301      	movlt	r3, #1
 8007d44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d48:	2100      	movs	r1, #0
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	f102 0514 	add.w	r5, r2, #20
 8007d50:	429d      	cmp	r5, r3
 8007d52:	d91f      	bls.n	8007d94 <_dtoa_r+0x2a4>
 8007d54:	6041      	str	r1, [r0, #4]
 8007d56:	4658      	mov	r0, fp
 8007d58:	f000 fd8e 	bl	8008878 <_Balloc>
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d13c      	bne.n	8007ddc <_dtoa_r+0x2ec>
 8007d62:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd0 <_dtoa_r+0x2e0>)
 8007d64:	4602      	mov	r2, r0
 8007d66:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d6a:	e6d8      	b.n	8007b1e <_dtoa_r+0x2e>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e7e0      	b.n	8007d32 <_dtoa_r+0x242>
 8007d70:	2401      	movs	r4, #1
 8007d72:	2300      	movs	r3, #0
 8007d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d78:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	9307      	str	r3, [sp, #28]
 8007d80:	2200      	movs	r2, #0
 8007d82:	2312      	movs	r3, #18
 8007d84:	e7d0      	b.n	8007d28 <_dtoa_r+0x238>
 8007d86:	2301      	movs	r3, #1
 8007d88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d8a:	e7f5      	b.n	8007d78 <_dtoa_r+0x288>
 8007d8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	9307      	str	r3, [sp, #28]
 8007d92:	e7d7      	b.n	8007d44 <_dtoa_r+0x254>
 8007d94:	3101      	adds	r1, #1
 8007d96:	0052      	lsls	r2, r2, #1
 8007d98:	e7d8      	b.n	8007d4c <_dtoa_r+0x25c>
 8007d9a:	bf00      	nop
 8007d9c:	f3af 8000 	nop.w
 8007da0:	636f4361 	.word	0x636f4361
 8007da4:	3fd287a7 	.word	0x3fd287a7
 8007da8:	8b60c8b3 	.word	0x8b60c8b3
 8007dac:	3fc68a28 	.word	0x3fc68a28
 8007db0:	509f79fb 	.word	0x509f79fb
 8007db4:	3fd34413 	.word	0x3fd34413
 8007db8:	0800b964 	.word	0x0800b964
 8007dbc:	0800b97b 	.word	0x0800b97b
 8007dc0:	7ff00000 	.word	0x7ff00000
 8007dc4:	0800bcc1 	.word	0x0800bcc1
 8007dc8:	3ff80000 	.word	0x3ff80000
 8007dcc:	0800ba78 	.word	0x0800ba78
 8007dd0:	0800b9d3 	.word	0x0800b9d3
 8007dd4:	0800b960 	.word	0x0800b960
 8007dd8:	0800bcc0 	.word	0x0800bcc0
 8007ddc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007de0:	6018      	str	r0, [r3, #0]
 8007de2:	9b07      	ldr	r3, [sp, #28]
 8007de4:	2b0e      	cmp	r3, #14
 8007de6:	f200 80a4 	bhi.w	8007f32 <_dtoa_r+0x442>
 8007dea:	2c00      	cmp	r4, #0
 8007dec:	f000 80a1 	beq.w	8007f32 <_dtoa_r+0x442>
 8007df0:	2f00      	cmp	r7, #0
 8007df2:	dd33      	ble.n	8007e5c <_dtoa_r+0x36c>
 8007df4:	4bad      	ldr	r3, [pc, #692]	@ (80080ac <_dtoa_r+0x5bc>)
 8007df6:	f007 020f 	and.w	r2, r7, #15
 8007dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dfe:	ed93 7b00 	vldr	d7, [r3]
 8007e02:	05f8      	lsls	r0, r7, #23
 8007e04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007e08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e0c:	d516      	bpl.n	8007e3c <_dtoa_r+0x34c>
 8007e0e:	4ba8      	ldr	r3, [pc, #672]	@ (80080b0 <_dtoa_r+0x5c0>)
 8007e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e18:	f7f8 fd18 	bl	800084c <__aeabi_ddiv>
 8007e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e20:	f004 040f 	and.w	r4, r4, #15
 8007e24:	2603      	movs	r6, #3
 8007e26:	4da2      	ldr	r5, [pc, #648]	@ (80080b0 <_dtoa_r+0x5c0>)
 8007e28:	b954      	cbnz	r4, 8007e40 <_dtoa_r+0x350>
 8007e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e32:	f7f8 fd0b 	bl	800084c <__aeabi_ddiv>
 8007e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e3a:	e028      	b.n	8007e8e <_dtoa_r+0x39e>
 8007e3c:	2602      	movs	r6, #2
 8007e3e:	e7f2      	b.n	8007e26 <_dtoa_r+0x336>
 8007e40:	07e1      	lsls	r1, r4, #31
 8007e42:	d508      	bpl.n	8007e56 <_dtoa_r+0x366>
 8007e44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e4c:	f7f8 fbd4 	bl	80005f8 <__aeabi_dmul>
 8007e50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e54:	3601      	adds	r6, #1
 8007e56:	1064      	asrs	r4, r4, #1
 8007e58:	3508      	adds	r5, #8
 8007e5a:	e7e5      	b.n	8007e28 <_dtoa_r+0x338>
 8007e5c:	f000 80d2 	beq.w	8008004 <_dtoa_r+0x514>
 8007e60:	427c      	negs	r4, r7
 8007e62:	4b92      	ldr	r3, [pc, #584]	@ (80080ac <_dtoa_r+0x5bc>)
 8007e64:	4d92      	ldr	r5, [pc, #584]	@ (80080b0 <_dtoa_r+0x5c0>)
 8007e66:	f004 020f 	and.w	r2, r4, #15
 8007e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e76:	f7f8 fbbf 	bl	80005f8 <__aeabi_dmul>
 8007e7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e7e:	1124      	asrs	r4, r4, #4
 8007e80:	2300      	movs	r3, #0
 8007e82:	2602      	movs	r6, #2
 8007e84:	2c00      	cmp	r4, #0
 8007e86:	f040 80b2 	bne.w	8007fee <_dtoa_r+0x4fe>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1d3      	bne.n	8007e36 <_dtoa_r+0x346>
 8007e8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 80b7 	beq.w	8008008 <_dtoa_r+0x518>
 8007e9a:	4b86      	ldr	r3, [pc, #536]	@ (80080b4 <_dtoa_r+0x5c4>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	f7f8 fe1b 	bl	8000adc <__aeabi_dcmplt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f000 80ae 	beq.w	8008008 <_dtoa_r+0x518>
 8007eac:	9b07      	ldr	r3, [sp, #28]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 80aa 	beq.w	8008008 <_dtoa_r+0x518>
 8007eb4:	9b00      	ldr	r3, [sp, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dd37      	ble.n	8007f2a <_dtoa_r+0x43a>
 8007eba:	1e7b      	subs	r3, r7, #1
 8007ebc:	9304      	str	r3, [sp, #16]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4b7d      	ldr	r3, [pc, #500]	@ (80080b8 <_dtoa_r+0x5c8>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	f7f8 fb97 	bl	80005f8 <__aeabi_dmul>
 8007eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ece:	9c00      	ldr	r4, [sp, #0]
 8007ed0:	3601      	adds	r6, #1
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7f8 fb26 	bl	8000524 <__aeabi_i2d>
 8007ed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007edc:	f7f8 fb8c 	bl	80005f8 <__aeabi_dmul>
 8007ee0:	4b76      	ldr	r3, [pc, #472]	@ (80080bc <_dtoa_r+0x5cc>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f7f8 f9d2 	bl	800028c <__adddf3>
 8007ee8:	4605      	mov	r5, r0
 8007eea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007eee:	2c00      	cmp	r4, #0
 8007ef0:	f040 808d 	bne.w	800800e <_dtoa_r+0x51e>
 8007ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef8:	4b71      	ldr	r3, [pc, #452]	@ (80080c0 <_dtoa_r+0x5d0>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	f7f8 f9c4 	bl	8000288 <__aeabi_dsub>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f08:	462a      	mov	r2, r5
 8007f0a:	4633      	mov	r3, r6
 8007f0c:	f7f8 fe04 	bl	8000b18 <__aeabi_dcmpgt>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	f040 828b 	bne.w	800842c <_dtoa_r+0x93c>
 8007f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f1a:	462a      	mov	r2, r5
 8007f1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f20:	f7f8 fddc 	bl	8000adc <__aeabi_dcmplt>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	f040 8128 	bne.w	800817a <_dtoa_r+0x68a>
 8007f2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f2c0 815a 	blt.w	80081ee <_dtoa_r+0x6fe>
 8007f3a:	2f0e      	cmp	r7, #14
 8007f3c:	f300 8157 	bgt.w	80081ee <_dtoa_r+0x6fe>
 8007f40:	4b5a      	ldr	r3, [pc, #360]	@ (80080ac <_dtoa_r+0x5bc>)
 8007f42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f46:	ed93 7b00 	vldr	d7, [r3]
 8007f4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	ed8d 7b00 	vstr	d7, [sp]
 8007f52:	da03      	bge.n	8007f5c <_dtoa_r+0x46c>
 8007f54:	9b07      	ldr	r3, [sp, #28]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f340 8101 	ble.w	800815e <_dtoa_r+0x66e>
 8007f5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f60:	4656      	mov	r6, sl
 8007f62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 fc6f 	bl	800084c <__aeabi_ddiv>
 8007f6e:	f7f8 fdf3 	bl	8000b58 <__aeabi_d2iz>
 8007f72:	4680      	mov	r8, r0
 8007f74:	f7f8 fad6 	bl	8000524 <__aeabi_i2d>
 8007f78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f7c:	f7f8 fb3c 	bl	80005f8 <__aeabi_dmul>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4620      	mov	r0, r4
 8007f86:	4629      	mov	r1, r5
 8007f88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f8c:	f7f8 f97c 	bl	8000288 <__aeabi_dsub>
 8007f90:	f806 4b01 	strb.w	r4, [r6], #1
 8007f94:	9d07      	ldr	r5, [sp, #28]
 8007f96:	eba6 040a 	sub.w	r4, r6, sl
 8007f9a:	42a5      	cmp	r5, r4
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	f040 8117 	bne.w	80081d2 <_dtoa_r+0x6e2>
 8007fa4:	f7f8 f972 	bl	800028c <__adddf3>
 8007fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fac:	4604      	mov	r4, r0
 8007fae:	460d      	mov	r5, r1
 8007fb0:	f7f8 fdb2 	bl	8000b18 <__aeabi_dcmpgt>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	f040 80f9 	bne.w	80081ac <_dtoa_r+0x6bc>
 8007fba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	f7f8 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fc6:	b118      	cbz	r0, 8007fd0 <_dtoa_r+0x4e0>
 8007fc8:	f018 0f01 	tst.w	r8, #1
 8007fcc:	f040 80ee 	bne.w	80081ac <_dtoa_r+0x6bc>
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	4658      	mov	r0, fp
 8007fd4:	f000 fc90 	bl	80088f8 <_Bfree>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	7033      	strb	r3, [r6, #0]
 8007fdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007fde:	3701      	adds	r7, #1
 8007fe0:	601f      	str	r7, [r3, #0]
 8007fe2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 831d 	beq.w	8008624 <_dtoa_r+0xb34>
 8007fea:	601e      	str	r6, [r3, #0]
 8007fec:	e31a      	b.n	8008624 <_dtoa_r+0xb34>
 8007fee:	07e2      	lsls	r2, r4, #31
 8007ff0:	d505      	bpl.n	8007ffe <_dtoa_r+0x50e>
 8007ff2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ff6:	f7f8 faff 	bl	80005f8 <__aeabi_dmul>
 8007ffa:	3601      	adds	r6, #1
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	1064      	asrs	r4, r4, #1
 8008000:	3508      	adds	r5, #8
 8008002:	e73f      	b.n	8007e84 <_dtoa_r+0x394>
 8008004:	2602      	movs	r6, #2
 8008006:	e742      	b.n	8007e8e <_dtoa_r+0x39e>
 8008008:	9c07      	ldr	r4, [sp, #28]
 800800a:	9704      	str	r7, [sp, #16]
 800800c:	e761      	b.n	8007ed2 <_dtoa_r+0x3e2>
 800800e:	4b27      	ldr	r3, [pc, #156]	@ (80080ac <_dtoa_r+0x5bc>)
 8008010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008012:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008016:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800801a:	4454      	add	r4, sl
 800801c:	2900      	cmp	r1, #0
 800801e:	d053      	beq.n	80080c8 <_dtoa_r+0x5d8>
 8008020:	4928      	ldr	r1, [pc, #160]	@ (80080c4 <_dtoa_r+0x5d4>)
 8008022:	2000      	movs	r0, #0
 8008024:	f7f8 fc12 	bl	800084c <__aeabi_ddiv>
 8008028:	4633      	mov	r3, r6
 800802a:	462a      	mov	r2, r5
 800802c:	f7f8 f92c 	bl	8000288 <__aeabi_dsub>
 8008030:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008034:	4656      	mov	r6, sl
 8008036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800803a:	f7f8 fd8d 	bl	8000b58 <__aeabi_d2iz>
 800803e:	4605      	mov	r5, r0
 8008040:	f7f8 fa70 	bl	8000524 <__aeabi_i2d>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800804c:	f7f8 f91c 	bl	8000288 <__aeabi_dsub>
 8008050:	3530      	adds	r5, #48	@ 0x30
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800805a:	f806 5b01 	strb.w	r5, [r6], #1
 800805e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008062:	f7f8 fd3b 	bl	8000adc <__aeabi_dcmplt>
 8008066:	2800      	cmp	r0, #0
 8008068:	d171      	bne.n	800814e <_dtoa_r+0x65e>
 800806a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800806e:	4911      	ldr	r1, [pc, #68]	@ (80080b4 <_dtoa_r+0x5c4>)
 8008070:	2000      	movs	r0, #0
 8008072:	f7f8 f909 	bl	8000288 <__aeabi_dsub>
 8008076:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800807a:	f7f8 fd2f 	bl	8000adc <__aeabi_dcmplt>
 800807e:	2800      	cmp	r0, #0
 8008080:	f040 8095 	bne.w	80081ae <_dtoa_r+0x6be>
 8008084:	42a6      	cmp	r6, r4
 8008086:	f43f af50 	beq.w	8007f2a <_dtoa_r+0x43a>
 800808a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800808e:	4b0a      	ldr	r3, [pc, #40]	@ (80080b8 <_dtoa_r+0x5c8>)
 8008090:	2200      	movs	r2, #0
 8008092:	f7f8 fab1 	bl	80005f8 <__aeabi_dmul>
 8008096:	4b08      	ldr	r3, [pc, #32]	@ (80080b8 <_dtoa_r+0x5c8>)
 8008098:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800809c:	2200      	movs	r2, #0
 800809e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a2:	f7f8 faa9 	bl	80005f8 <__aeabi_dmul>
 80080a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080aa:	e7c4      	b.n	8008036 <_dtoa_r+0x546>
 80080ac:	0800ba78 	.word	0x0800ba78
 80080b0:	0800ba50 	.word	0x0800ba50
 80080b4:	3ff00000 	.word	0x3ff00000
 80080b8:	40240000 	.word	0x40240000
 80080bc:	401c0000 	.word	0x401c0000
 80080c0:	40140000 	.word	0x40140000
 80080c4:	3fe00000 	.word	0x3fe00000
 80080c8:	4631      	mov	r1, r6
 80080ca:	4628      	mov	r0, r5
 80080cc:	f7f8 fa94 	bl	80005f8 <__aeabi_dmul>
 80080d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80080d6:	4656      	mov	r6, sl
 80080d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080dc:	f7f8 fd3c 	bl	8000b58 <__aeabi_d2iz>
 80080e0:	4605      	mov	r5, r0
 80080e2:	f7f8 fa1f 	bl	8000524 <__aeabi_i2d>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ee:	f7f8 f8cb 	bl	8000288 <__aeabi_dsub>
 80080f2:	3530      	adds	r5, #48	@ 0x30
 80080f4:	f806 5b01 	strb.w	r5, [r6], #1
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	42a6      	cmp	r6, r4
 80080fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008102:	f04f 0200 	mov.w	r2, #0
 8008106:	d124      	bne.n	8008152 <_dtoa_r+0x662>
 8008108:	4bac      	ldr	r3, [pc, #688]	@ (80083bc <_dtoa_r+0x8cc>)
 800810a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800810e:	f7f8 f8bd 	bl	800028c <__adddf3>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800811a:	f7f8 fcfd 	bl	8000b18 <__aeabi_dcmpgt>
 800811e:	2800      	cmp	r0, #0
 8008120:	d145      	bne.n	80081ae <_dtoa_r+0x6be>
 8008122:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008126:	49a5      	ldr	r1, [pc, #660]	@ (80083bc <_dtoa_r+0x8cc>)
 8008128:	2000      	movs	r0, #0
 800812a:	f7f8 f8ad 	bl	8000288 <__aeabi_dsub>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008136:	f7f8 fcd1 	bl	8000adc <__aeabi_dcmplt>
 800813a:	2800      	cmp	r0, #0
 800813c:	f43f aef5 	beq.w	8007f2a <_dtoa_r+0x43a>
 8008140:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008142:	1e73      	subs	r3, r6, #1
 8008144:	9315      	str	r3, [sp, #84]	@ 0x54
 8008146:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800814a:	2b30      	cmp	r3, #48	@ 0x30
 800814c:	d0f8      	beq.n	8008140 <_dtoa_r+0x650>
 800814e:	9f04      	ldr	r7, [sp, #16]
 8008150:	e73e      	b.n	8007fd0 <_dtoa_r+0x4e0>
 8008152:	4b9b      	ldr	r3, [pc, #620]	@ (80083c0 <_dtoa_r+0x8d0>)
 8008154:	f7f8 fa50 	bl	80005f8 <__aeabi_dmul>
 8008158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800815c:	e7bc      	b.n	80080d8 <_dtoa_r+0x5e8>
 800815e:	d10c      	bne.n	800817a <_dtoa_r+0x68a>
 8008160:	4b98      	ldr	r3, [pc, #608]	@ (80083c4 <_dtoa_r+0x8d4>)
 8008162:	2200      	movs	r2, #0
 8008164:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008168:	f7f8 fa46 	bl	80005f8 <__aeabi_dmul>
 800816c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008170:	f7f8 fcc8 	bl	8000b04 <__aeabi_dcmpge>
 8008174:	2800      	cmp	r0, #0
 8008176:	f000 8157 	beq.w	8008428 <_dtoa_r+0x938>
 800817a:	2400      	movs	r4, #0
 800817c:	4625      	mov	r5, r4
 800817e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008180:	43db      	mvns	r3, r3
 8008182:	9304      	str	r3, [sp, #16]
 8008184:	4656      	mov	r6, sl
 8008186:	2700      	movs	r7, #0
 8008188:	4621      	mov	r1, r4
 800818a:	4658      	mov	r0, fp
 800818c:	f000 fbb4 	bl	80088f8 <_Bfree>
 8008190:	2d00      	cmp	r5, #0
 8008192:	d0dc      	beq.n	800814e <_dtoa_r+0x65e>
 8008194:	b12f      	cbz	r7, 80081a2 <_dtoa_r+0x6b2>
 8008196:	42af      	cmp	r7, r5
 8008198:	d003      	beq.n	80081a2 <_dtoa_r+0x6b2>
 800819a:	4639      	mov	r1, r7
 800819c:	4658      	mov	r0, fp
 800819e:	f000 fbab 	bl	80088f8 <_Bfree>
 80081a2:	4629      	mov	r1, r5
 80081a4:	4658      	mov	r0, fp
 80081a6:	f000 fba7 	bl	80088f8 <_Bfree>
 80081aa:	e7d0      	b.n	800814e <_dtoa_r+0x65e>
 80081ac:	9704      	str	r7, [sp, #16]
 80081ae:	4633      	mov	r3, r6
 80081b0:	461e      	mov	r6, r3
 80081b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081b6:	2a39      	cmp	r2, #57	@ 0x39
 80081b8:	d107      	bne.n	80081ca <_dtoa_r+0x6da>
 80081ba:	459a      	cmp	sl, r3
 80081bc:	d1f8      	bne.n	80081b0 <_dtoa_r+0x6c0>
 80081be:	9a04      	ldr	r2, [sp, #16]
 80081c0:	3201      	adds	r2, #1
 80081c2:	9204      	str	r2, [sp, #16]
 80081c4:	2230      	movs	r2, #48	@ 0x30
 80081c6:	f88a 2000 	strb.w	r2, [sl]
 80081ca:	781a      	ldrb	r2, [r3, #0]
 80081cc:	3201      	adds	r2, #1
 80081ce:	701a      	strb	r2, [r3, #0]
 80081d0:	e7bd      	b.n	800814e <_dtoa_r+0x65e>
 80081d2:	4b7b      	ldr	r3, [pc, #492]	@ (80083c0 <_dtoa_r+0x8d0>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	f7f8 fa0f 	bl	80005f8 <__aeabi_dmul>
 80081da:	2200      	movs	r2, #0
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	460d      	mov	r5, r1
 80081e2:	f7f8 fc71 	bl	8000ac8 <__aeabi_dcmpeq>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f43f aebb 	beq.w	8007f62 <_dtoa_r+0x472>
 80081ec:	e6f0      	b.n	8007fd0 <_dtoa_r+0x4e0>
 80081ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	f000 80db 	beq.w	80083ac <_dtoa_r+0x8bc>
 80081f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081f8:	2a01      	cmp	r2, #1
 80081fa:	f300 80bf 	bgt.w	800837c <_dtoa_r+0x88c>
 80081fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008200:	2a00      	cmp	r2, #0
 8008202:	f000 80b7 	beq.w	8008374 <_dtoa_r+0x884>
 8008206:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800820a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800820c:	4646      	mov	r6, r8
 800820e:	9a08      	ldr	r2, [sp, #32]
 8008210:	2101      	movs	r1, #1
 8008212:	441a      	add	r2, r3
 8008214:	4658      	mov	r0, fp
 8008216:	4498      	add	r8, r3
 8008218:	9208      	str	r2, [sp, #32]
 800821a:	f000 fc6b 	bl	8008af4 <__i2b>
 800821e:	4605      	mov	r5, r0
 8008220:	b15e      	cbz	r6, 800823a <_dtoa_r+0x74a>
 8008222:	9b08      	ldr	r3, [sp, #32]
 8008224:	2b00      	cmp	r3, #0
 8008226:	dd08      	ble.n	800823a <_dtoa_r+0x74a>
 8008228:	42b3      	cmp	r3, r6
 800822a:	9a08      	ldr	r2, [sp, #32]
 800822c:	bfa8      	it	ge
 800822e:	4633      	movge	r3, r6
 8008230:	eba8 0803 	sub.w	r8, r8, r3
 8008234:	1af6      	subs	r6, r6, r3
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	9308      	str	r3, [sp, #32]
 800823a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800823c:	b1f3      	cbz	r3, 800827c <_dtoa_r+0x78c>
 800823e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80b7 	beq.w	80083b4 <_dtoa_r+0x8c4>
 8008246:	b18c      	cbz	r4, 800826c <_dtoa_r+0x77c>
 8008248:	4629      	mov	r1, r5
 800824a:	4622      	mov	r2, r4
 800824c:	4658      	mov	r0, fp
 800824e:	f000 fd11 	bl	8008c74 <__pow5mult>
 8008252:	464a      	mov	r2, r9
 8008254:	4601      	mov	r1, r0
 8008256:	4605      	mov	r5, r0
 8008258:	4658      	mov	r0, fp
 800825a:	f000 fc61 	bl	8008b20 <__multiply>
 800825e:	4649      	mov	r1, r9
 8008260:	9004      	str	r0, [sp, #16]
 8008262:	4658      	mov	r0, fp
 8008264:	f000 fb48 	bl	80088f8 <_Bfree>
 8008268:	9b04      	ldr	r3, [sp, #16]
 800826a:	4699      	mov	r9, r3
 800826c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800826e:	1b1a      	subs	r2, r3, r4
 8008270:	d004      	beq.n	800827c <_dtoa_r+0x78c>
 8008272:	4649      	mov	r1, r9
 8008274:	4658      	mov	r0, fp
 8008276:	f000 fcfd 	bl	8008c74 <__pow5mult>
 800827a:	4681      	mov	r9, r0
 800827c:	2101      	movs	r1, #1
 800827e:	4658      	mov	r0, fp
 8008280:	f000 fc38 	bl	8008af4 <__i2b>
 8008284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008286:	4604      	mov	r4, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 81cf 	beq.w	800862c <_dtoa_r+0xb3c>
 800828e:	461a      	mov	r2, r3
 8008290:	4601      	mov	r1, r0
 8008292:	4658      	mov	r0, fp
 8008294:	f000 fcee 	bl	8008c74 <__pow5mult>
 8008298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800829a:	2b01      	cmp	r3, #1
 800829c:	4604      	mov	r4, r0
 800829e:	f300 8095 	bgt.w	80083cc <_dtoa_r+0x8dc>
 80082a2:	9b02      	ldr	r3, [sp, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f040 8087 	bne.w	80083b8 <_dtoa_r+0x8c8>
 80082aa:	9b03      	ldr	r3, [sp, #12]
 80082ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f040 8089 	bne.w	80083c8 <_dtoa_r+0x8d8>
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082bc:	0d1b      	lsrs	r3, r3, #20
 80082be:	051b      	lsls	r3, r3, #20
 80082c0:	b12b      	cbz	r3, 80082ce <_dtoa_r+0x7de>
 80082c2:	9b08      	ldr	r3, [sp, #32]
 80082c4:	3301      	adds	r3, #1
 80082c6:	9308      	str	r3, [sp, #32]
 80082c8:	f108 0801 	add.w	r8, r8, #1
 80082cc:	2301      	movs	r3, #1
 80082ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80082d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 81b0 	beq.w	8008638 <_dtoa_r+0xb48>
 80082d8:	6923      	ldr	r3, [r4, #16]
 80082da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082de:	6918      	ldr	r0, [r3, #16]
 80082e0:	f000 fbbc 	bl	8008a5c <__hi0bits>
 80082e4:	f1c0 0020 	rsb	r0, r0, #32
 80082e8:	9b08      	ldr	r3, [sp, #32]
 80082ea:	4418      	add	r0, r3
 80082ec:	f010 001f 	ands.w	r0, r0, #31
 80082f0:	d077      	beq.n	80083e2 <_dtoa_r+0x8f2>
 80082f2:	f1c0 0320 	rsb	r3, r0, #32
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	dd6b      	ble.n	80083d2 <_dtoa_r+0x8e2>
 80082fa:	9b08      	ldr	r3, [sp, #32]
 80082fc:	f1c0 001c 	rsb	r0, r0, #28
 8008300:	4403      	add	r3, r0
 8008302:	4480      	add	r8, r0
 8008304:	4406      	add	r6, r0
 8008306:	9308      	str	r3, [sp, #32]
 8008308:	f1b8 0f00 	cmp.w	r8, #0
 800830c:	dd05      	ble.n	800831a <_dtoa_r+0x82a>
 800830e:	4649      	mov	r1, r9
 8008310:	4642      	mov	r2, r8
 8008312:	4658      	mov	r0, fp
 8008314:	f000 fd08 	bl	8008d28 <__lshift>
 8008318:	4681      	mov	r9, r0
 800831a:	9b08      	ldr	r3, [sp, #32]
 800831c:	2b00      	cmp	r3, #0
 800831e:	dd05      	ble.n	800832c <_dtoa_r+0x83c>
 8008320:	4621      	mov	r1, r4
 8008322:	461a      	mov	r2, r3
 8008324:	4658      	mov	r0, fp
 8008326:	f000 fcff 	bl	8008d28 <__lshift>
 800832a:	4604      	mov	r4, r0
 800832c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800832e:	2b00      	cmp	r3, #0
 8008330:	d059      	beq.n	80083e6 <_dtoa_r+0x8f6>
 8008332:	4621      	mov	r1, r4
 8008334:	4648      	mov	r0, r9
 8008336:	f000 fd63 	bl	8008e00 <__mcmp>
 800833a:	2800      	cmp	r0, #0
 800833c:	da53      	bge.n	80083e6 <_dtoa_r+0x8f6>
 800833e:	1e7b      	subs	r3, r7, #1
 8008340:	9304      	str	r3, [sp, #16]
 8008342:	4649      	mov	r1, r9
 8008344:	2300      	movs	r3, #0
 8008346:	220a      	movs	r2, #10
 8008348:	4658      	mov	r0, fp
 800834a:	f000 faf7 	bl	800893c <__multadd>
 800834e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008350:	4681      	mov	r9, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 8172 	beq.w	800863c <_dtoa_r+0xb4c>
 8008358:	2300      	movs	r3, #0
 800835a:	4629      	mov	r1, r5
 800835c:	220a      	movs	r2, #10
 800835e:	4658      	mov	r0, fp
 8008360:	f000 faec 	bl	800893c <__multadd>
 8008364:	9b00      	ldr	r3, [sp, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	4605      	mov	r5, r0
 800836a:	dc67      	bgt.n	800843c <_dtoa_r+0x94c>
 800836c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800836e:	2b02      	cmp	r3, #2
 8008370:	dc41      	bgt.n	80083f6 <_dtoa_r+0x906>
 8008372:	e063      	b.n	800843c <_dtoa_r+0x94c>
 8008374:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008376:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800837a:	e746      	b.n	800820a <_dtoa_r+0x71a>
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	1e5c      	subs	r4, r3, #1
 8008380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008382:	42a3      	cmp	r3, r4
 8008384:	bfbf      	itttt	lt
 8008386:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008388:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800838a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800838c:	1ae3      	sublt	r3, r4, r3
 800838e:	bfb4      	ite	lt
 8008390:	18d2      	addlt	r2, r2, r3
 8008392:	1b1c      	subge	r4, r3, r4
 8008394:	9b07      	ldr	r3, [sp, #28]
 8008396:	bfbc      	itt	lt
 8008398:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800839a:	2400      	movlt	r4, #0
 800839c:	2b00      	cmp	r3, #0
 800839e:	bfb5      	itete	lt
 80083a0:	eba8 0603 	sublt.w	r6, r8, r3
 80083a4:	9b07      	ldrge	r3, [sp, #28]
 80083a6:	2300      	movlt	r3, #0
 80083a8:	4646      	movge	r6, r8
 80083aa:	e730      	b.n	800820e <_dtoa_r+0x71e>
 80083ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80083b0:	4646      	mov	r6, r8
 80083b2:	e735      	b.n	8008220 <_dtoa_r+0x730>
 80083b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083b6:	e75c      	b.n	8008272 <_dtoa_r+0x782>
 80083b8:	2300      	movs	r3, #0
 80083ba:	e788      	b.n	80082ce <_dtoa_r+0x7de>
 80083bc:	3fe00000 	.word	0x3fe00000
 80083c0:	40240000 	.word	0x40240000
 80083c4:	40140000 	.word	0x40140000
 80083c8:	9b02      	ldr	r3, [sp, #8]
 80083ca:	e780      	b.n	80082ce <_dtoa_r+0x7de>
 80083cc:	2300      	movs	r3, #0
 80083ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80083d0:	e782      	b.n	80082d8 <_dtoa_r+0x7e8>
 80083d2:	d099      	beq.n	8008308 <_dtoa_r+0x818>
 80083d4:	9a08      	ldr	r2, [sp, #32]
 80083d6:	331c      	adds	r3, #28
 80083d8:	441a      	add	r2, r3
 80083da:	4498      	add	r8, r3
 80083dc:	441e      	add	r6, r3
 80083de:	9208      	str	r2, [sp, #32]
 80083e0:	e792      	b.n	8008308 <_dtoa_r+0x818>
 80083e2:	4603      	mov	r3, r0
 80083e4:	e7f6      	b.n	80083d4 <_dtoa_r+0x8e4>
 80083e6:	9b07      	ldr	r3, [sp, #28]
 80083e8:	9704      	str	r7, [sp, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	dc20      	bgt.n	8008430 <_dtoa_r+0x940>
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	dd1e      	ble.n	8008434 <_dtoa_r+0x944>
 80083f6:	9b00      	ldr	r3, [sp, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f47f aec0 	bne.w	800817e <_dtoa_r+0x68e>
 80083fe:	4621      	mov	r1, r4
 8008400:	2205      	movs	r2, #5
 8008402:	4658      	mov	r0, fp
 8008404:	f000 fa9a 	bl	800893c <__multadd>
 8008408:	4601      	mov	r1, r0
 800840a:	4604      	mov	r4, r0
 800840c:	4648      	mov	r0, r9
 800840e:	f000 fcf7 	bl	8008e00 <__mcmp>
 8008412:	2800      	cmp	r0, #0
 8008414:	f77f aeb3 	ble.w	800817e <_dtoa_r+0x68e>
 8008418:	4656      	mov	r6, sl
 800841a:	2331      	movs	r3, #49	@ 0x31
 800841c:	f806 3b01 	strb.w	r3, [r6], #1
 8008420:	9b04      	ldr	r3, [sp, #16]
 8008422:	3301      	adds	r3, #1
 8008424:	9304      	str	r3, [sp, #16]
 8008426:	e6ae      	b.n	8008186 <_dtoa_r+0x696>
 8008428:	9c07      	ldr	r4, [sp, #28]
 800842a:	9704      	str	r7, [sp, #16]
 800842c:	4625      	mov	r5, r4
 800842e:	e7f3      	b.n	8008418 <_dtoa_r+0x928>
 8008430:	9b07      	ldr	r3, [sp, #28]
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 8104 	beq.w	8008644 <_dtoa_r+0xb54>
 800843c:	2e00      	cmp	r6, #0
 800843e:	dd05      	ble.n	800844c <_dtoa_r+0x95c>
 8008440:	4629      	mov	r1, r5
 8008442:	4632      	mov	r2, r6
 8008444:	4658      	mov	r0, fp
 8008446:	f000 fc6f 	bl	8008d28 <__lshift>
 800844a:	4605      	mov	r5, r0
 800844c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800844e:	2b00      	cmp	r3, #0
 8008450:	d05a      	beq.n	8008508 <_dtoa_r+0xa18>
 8008452:	6869      	ldr	r1, [r5, #4]
 8008454:	4658      	mov	r0, fp
 8008456:	f000 fa0f 	bl	8008878 <_Balloc>
 800845a:	4606      	mov	r6, r0
 800845c:	b928      	cbnz	r0, 800846a <_dtoa_r+0x97a>
 800845e:	4b84      	ldr	r3, [pc, #528]	@ (8008670 <_dtoa_r+0xb80>)
 8008460:	4602      	mov	r2, r0
 8008462:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008466:	f7ff bb5a 	b.w	8007b1e <_dtoa_r+0x2e>
 800846a:	692a      	ldr	r2, [r5, #16]
 800846c:	3202      	adds	r2, #2
 800846e:	0092      	lsls	r2, r2, #2
 8008470:	f105 010c 	add.w	r1, r5, #12
 8008474:	300c      	adds	r0, #12
 8008476:	f002 fcc9 	bl	800ae0c <memcpy>
 800847a:	2201      	movs	r2, #1
 800847c:	4631      	mov	r1, r6
 800847e:	4658      	mov	r0, fp
 8008480:	f000 fc52 	bl	8008d28 <__lshift>
 8008484:	f10a 0301 	add.w	r3, sl, #1
 8008488:	9307      	str	r3, [sp, #28]
 800848a:	9b00      	ldr	r3, [sp, #0]
 800848c:	4453      	add	r3, sl
 800848e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	462f      	mov	r7, r5
 8008498:	930a      	str	r3, [sp, #40]	@ 0x28
 800849a:	4605      	mov	r5, r0
 800849c:	9b07      	ldr	r3, [sp, #28]
 800849e:	4621      	mov	r1, r4
 80084a0:	3b01      	subs	r3, #1
 80084a2:	4648      	mov	r0, r9
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	f7ff fa99 	bl	80079dc <quorem>
 80084aa:	4639      	mov	r1, r7
 80084ac:	9002      	str	r0, [sp, #8]
 80084ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084b2:	4648      	mov	r0, r9
 80084b4:	f000 fca4 	bl	8008e00 <__mcmp>
 80084b8:	462a      	mov	r2, r5
 80084ba:	9008      	str	r0, [sp, #32]
 80084bc:	4621      	mov	r1, r4
 80084be:	4658      	mov	r0, fp
 80084c0:	f000 fcba 	bl	8008e38 <__mdiff>
 80084c4:	68c2      	ldr	r2, [r0, #12]
 80084c6:	4606      	mov	r6, r0
 80084c8:	bb02      	cbnz	r2, 800850c <_dtoa_r+0xa1c>
 80084ca:	4601      	mov	r1, r0
 80084cc:	4648      	mov	r0, r9
 80084ce:	f000 fc97 	bl	8008e00 <__mcmp>
 80084d2:	4602      	mov	r2, r0
 80084d4:	4631      	mov	r1, r6
 80084d6:	4658      	mov	r0, fp
 80084d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80084da:	f000 fa0d 	bl	80088f8 <_Bfree>
 80084de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084e2:	9e07      	ldr	r6, [sp, #28]
 80084e4:	ea43 0102 	orr.w	r1, r3, r2
 80084e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ea:	4319      	orrs	r1, r3
 80084ec:	d110      	bne.n	8008510 <_dtoa_r+0xa20>
 80084ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084f2:	d029      	beq.n	8008548 <_dtoa_r+0xa58>
 80084f4:	9b08      	ldr	r3, [sp, #32]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dd02      	ble.n	8008500 <_dtoa_r+0xa10>
 80084fa:	9b02      	ldr	r3, [sp, #8]
 80084fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008500:	9b00      	ldr	r3, [sp, #0]
 8008502:	f883 8000 	strb.w	r8, [r3]
 8008506:	e63f      	b.n	8008188 <_dtoa_r+0x698>
 8008508:	4628      	mov	r0, r5
 800850a:	e7bb      	b.n	8008484 <_dtoa_r+0x994>
 800850c:	2201      	movs	r2, #1
 800850e:	e7e1      	b.n	80084d4 <_dtoa_r+0x9e4>
 8008510:	9b08      	ldr	r3, [sp, #32]
 8008512:	2b00      	cmp	r3, #0
 8008514:	db04      	blt.n	8008520 <_dtoa_r+0xa30>
 8008516:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008518:	430b      	orrs	r3, r1
 800851a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800851c:	430b      	orrs	r3, r1
 800851e:	d120      	bne.n	8008562 <_dtoa_r+0xa72>
 8008520:	2a00      	cmp	r2, #0
 8008522:	dded      	ble.n	8008500 <_dtoa_r+0xa10>
 8008524:	4649      	mov	r1, r9
 8008526:	2201      	movs	r2, #1
 8008528:	4658      	mov	r0, fp
 800852a:	f000 fbfd 	bl	8008d28 <__lshift>
 800852e:	4621      	mov	r1, r4
 8008530:	4681      	mov	r9, r0
 8008532:	f000 fc65 	bl	8008e00 <__mcmp>
 8008536:	2800      	cmp	r0, #0
 8008538:	dc03      	bgt.n	8008542 <_dtoa_r+0xa52>
 800853a:	d1e1      	bne.n	8008500 <_dtoa_r+0xa10>
 800853c:	f018 0f01 	tst.w	r8, #1
 8008540:	d0de      	beq.n	8008500 <_dtoa_r+0xa10>
 8008542:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008546:	d1d8      	bne.n	80084fa <_dtoa_r+0xa0a>
 8008548:	9a00      	ldr	r2, [sp, #0]
 800854a:	2339      	movs	r3, #57	@ 0x39
 800854c:	7013      	strb	r3, [r2, #0]
 800854e:	4633      	mov	r3, r6
 8008550:	461e      	mov	r6, r3
 8008552:	3b01      	subs	r3, #1
 8008554:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008558:	2a39      	cmp	r2, #57	@ 0x39
 800855a:	d052      	beq.n	8008602 <_dtoa_r+0xb12>
 800855c:	3201      	adds	r2, #1
 800855e:	701a      	strb	r2, [r3, #0]
 8008560:	e612      	b.n	8008188 <_dtoa_r+0x698>
 8008562:	2a00      	cmp	r2, #0
 8008564:	dd07      	ble.n	8008576 <_dtoa_r+0xa86>
 8008566:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800856a:	d0ed      	beq.n	8008548 <_dtoa_r+0xa58>
 800856c:	9a00      	ldr	r2, [sp, #0]
 800856e:	f108 0301 	add.w	r3, r8, #1
 8008572:	7013      	strb	r3, [r2, #0]
 8008574:	e608      	b.n	8008188 <_dtoa_r+0x698>
 8008576:	9b07      	ldr	r3, [sp, #28]
 8008578:	9a07      	ldr	r2, [sp, #28]
 800857a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800857e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008580:	4293      	cmp	r3, r2
 8008582:	d028      	beq.n	80085d6 <_dtoa_r+0xae6>
 8008584:	4649      	mov	r1, r9
 8008586:	2300      	movs	r3, #0
 8008588:	220a      	movs	r2, #10
 800858a:	4658      	mov	r0, fp
 800858c:	f000 f9d6 	bl	800893c <__multadd>
 8008590:	42af      	cmp	r7, r5
 8008592:	4681      	mov	r9, r0
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	f04f 020a 	mov.w	r2, #10
 800859c:	4639      	mov	r1, r7
 800859e:	4658      	mov	r0, fp
 80085a0:	d107      	bne.n	80085b2 <_dtoa_r+0xac2>
 80085a2:	f000 f9cb 	bl	800893c <__multadd>
 80085a6:	4607      	mov	r7, r0
 80085a8:	4605      	mov	r5, r0
 80085aa:	9b07      	ldr	r3, [sp, #28]
 80085ac:	3301      	adds	r3, #1
 80085ae:	9307      	str	r3, [sp, #28]
 80085b0:	e774      	b.n	800849c <_dtoa_r+0x9ac>
 80085b2:	f000 f9c3 	bl	800893c <__multadd>
 80085b6:	4629      	mov	r1, r5
 80085b8:	4607      	mov	r7, r0
 80085ba:	2300      	movs	r3, #0
 80085bc:	220a      	movs	r2, #10
 80085be:	4658      	mov	r0, fp
 80085c0:	f000 f9bc 	bl	800893c <__multadd>
 80085c4:	4605      	mov	r5, r0
 80085c6:	e7f0      	b.n	80085aa <_dtoa_r+0xaba>
 80085c8:	9b00      	ldr	r3, [sp, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bfcc      	ite	gt
 80085ce:	461e      	movgt	r6, r3
 80085d0:	2601      	movle	r6, #1
 80085d2:	4456      	add	r6, sl
 80085d4:	2700      	movs	r7, #0
 80085d6:	4649      	mov	r1, r9
 80085d8:	2201      	movs	r2, #1
 80085da:	4658      	mov	r0, fp
 80085dc:	f000 fba4 	bl	8008d28 <__lshift>
 80085e0:	4621      	mov	r1, r4
 80085e2:	4681      	mov	r9, r0
 80085e4:	f000 fc0c 	bl	8008e00 <__mcmp>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	dcb0      	bgt.n	800854e <_dtoa_r+0xa5e>
 80085ec:	d102      	bne.n	80085f4 <_dtoa_r+0xb04>
 80085ee:	f018 0f01 	tst.w	r8, #1
 80085f2:	d1ac      	bne.n	800854e <_dtoa_r+0xa5e>
 80085f4:	4633      	mov	r3, r6
 80085f6:	461e      	mov	r6, r3
 80085f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085fc:	2a30      	cmp	r2, #48	@ 0x30
 80085fe:	d0fa      	beq.n	80085f6 <_dtoa_r+0xb06>
 8008600:	e5c2      	b.n	8008188 <_dtoa_r+0x698>
 8008602:	459a      	cmp	sl, r3
 8008604:	d1a4      	bne.n	8008550 <_dtoa_r+0xa60>
 8008606:	9b04      	ldr	r3, [sp, #16]
 8008608:	3301      	adds	r3, #1
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	2331      	movs	r3, #49	@ 0x31
 800860e:	f88a 3000 	strb.w	r3, [sl]
 8008612:	e5b9      	b.n	8008188 <_dtoa_r+0x698>
 8008614:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008616:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008674 <_dtoa_r+0xb84>
 800861a:	b11b      	cbz	r3, 8008624 <_dtoa_r+0xb34>
 800861c:	f10a 0308 	add.w	r3, sl, #8
 8008620:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	4650      	mov	r0, sl
 8008626:	b019      	add	sp, #100	@ 0x64
 8008628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800862e:	2b01      	cmp	r3, #1
 8008630:	f77f ae37 	ble.w	80082a2 <_dtoa_r+0x7b2>
 8008634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008636:	930a      	str	r3, [sp, #40]	@ 0x28
 8008638:	2001      	movs	r0, #1
 800863a:	e655      	b.n	80082e8 <_dtoa_r+0x7f8>
 800863c:	9b00      	ldr	r3, [sp, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f77f aed6 	ble.w	80083f0 <_dtoa_r+0x900>
 8008644:	4656      	mov	r6, sl
 8008646:	4621      	mov	r1, r4
 8008648:	4648      	mov	r0, r9
 800864a:	f7ff f9c7 	bl	80079dc <quorem>
 800864e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008652:	f806 8b01 	strb.w	r8, [r6], #1
 8008656:	9b00      	ldr	r3, [sp, #0]
 8008658:	eba6 020a 	sub.w	r2, r6, sl
 800865c:	4293      	cmp	r3, r2
 800865e:	ddb3      	ble.n	80085c8 <_dtoa_r+0xad8>
 8008660:	4649      	mov	r1, r9
 8008662:	2300      	movs	r3, #0
 8008664:	220a      	movs	r2, #10
 8008666:	4658      	mov	r0, fp
 8008668:	f000 f968 	bl	800893c <__multadd>
 800866c:	4681      	mov	r9, r0
 800866e:	e7ea      	b.n	8008646 <_dtoa_r+0xb56>
 8008670:	0800b9d3 	.word	0x0800b9d3
 8008674:	0800b957 	.word	0x0800b957

08008678 <_free_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4605      	mov	r5, r0
 800867c:	2900      	cmp	r1, #0
 800867e:	d041      	beq.n	8008704 <_free_r+0x8c>
 8008680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008684:	1f0c      	subs	r4, r1, #4
 8008686:	2b00      	cmp	r3, #0
 8008688:	bfb8      	it	lt
 800868a:	18e4      	addlt	r4, r4, r3
 800868c:	f000 f8e8 	bl	8008860 <__malloc_lock>
 8008690:	4a1d      	ldr	r2, [pc, #116]	@ (8008708 <_free_r+0x90>)
 8008692:	6813      	ldr	r3, [r2, #0]
 8008694:	b933      	cbnz	r3, 80086a4 <_free_r+0x2c>
 8008696:	6063      	str	r3, [r4, #4]
 8008698:	6014      	str	r4, [r2, #0]
 800869a:	4628      	mov	r0, r5
 800869c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086a0:	f000 b8e4 	b.w	800886c <__malloc_unlock>
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d908      	bls.n	80086ba <_free_r+0x42>
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	1821      	adds	r1, r4, r0
 80086ac:	428b      	cmp	r3, r1
 80086ae:	bf01      	itttt	eq
 80086b0:	6819      	ldreq	r1, [r3, #0]
 80086b2:	685b      	ldreq	r3, [r3, #4]
 80086b4:	1809      	addeq	r1, r1, r0
 80086b6:	6021      	streq	r1, [r4, #0]
 80086b8:	e7ed      	b.n	8008696 <_free_r+0x1e>
 80086ba:	461a      	mov	r2, r3
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	b10b      	cbz	r3, 80086c4 <_free_r+0x4c>
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	d9fa      	bls.n	80086ba <_free_r+0x42>
 80086c4:	6811      	ldr	r1, [r2, #0]
 80086c6:	1850      	adds	r0, r2, r1
 80086c8:	42a0      	cmp	r0, r4
 80086ca:	d10b      	bne.n	80086e4 <_free_r+0x6c>
 80086cc:	6820      	ldr	r0, [r4, #0]
 80086ce:	4401      	add	r1, r0
 80086d0:	1850      	adds	r0, r2, r1
 80086d2:	4283      	cmp	r3, r0
 80086d4:	6011      	str	r1, [r2, #0]
 80086d6:	d1e0      	bne.n	800869a <_free_r+0x22>
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	6053      	str	r3, [r2, #4]
 80086de:	4408      	add	r0, r1
 80086e0:	6010      	str	r0, [r2, #0]
 80086e2:	e7da      	b.n	800869a <_free_r+0x22>
 80086e4:	d902      	bls.n	80086ec <_free_r+0x74>
 80086e6:	230c      	movs	r3, #12
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	e7d6      	b.n	800869a <_free_r+0x22>
 80086ec:	6820      	ldr	r0, [r4, #0]
 80086ee:	1821      	adds	r1, r4, r0
 80086f0:	428b      	cmp	r3, r1
 80086f2:	bf04      	itt	eq
 80086f4:	6819      	ldreq	r1, [r3, #0]
 80086f6:	685b      	ldreq	r3, [r3, #4]
 80086f8:	6063      	str	r3, [r4, #4]
 80086fa:	bf04      	itt	eq
 80086fc:	1809      	addeq	r1, r1, r0
 80086fe:	6021      	streq	r1, [r4, #0]
 8008700:	6054      	str	r4, [r2, #4]
 8008702:	e7ca      	b.n	800869a <_free_r+0x22>
 8008704:	bd38      	pop	{r3, r4, r5, pc}
 8008706:	bf00      	nop
 8008708:	20001170 	.word	0x20001170

0800870c <malloc>:
 800870c:	4b02      	ldr	r3, [pc, #8]	@ (8008718 <malloc+0xc>)
 800870e:	4601      	mov	r1, r0
 8008710:	6818      	ldr	r0, [r3, #0]
 8008712:	f000 b825 	b.w	8008760 <_malloc_r>
 8008716:	bf00      	nop
 8008718:	20000bd0 	.word	0x20000bd0

0800871c <sbrk_aligned>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	4e0f      	ldr	r6, [pc, #60]	@ (800875c <sbrk_aligned+0x40>)
 8008720:	460c      	mov	r4, r1
 8008722:	6831      	ldr	r1, [r6, #0]
 8008724:	4605      	mov	r5, r0
 8008726:	b911      	cbnz	r1, 800872e <sbrk_aligned+0x12>
 8008728:	f002 fb60 	bl	800adec <_sbrk_r>
 800872c:	6030      	str	r0, [r6, #0]
 800872e:	4621      	mov	r1, r4
 8008730:	4628      	mov	r0, r5
 8008732:	f002 fb5b 	bl	800adec <_sbrk_r>
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	d103      	bne.n	8008742 <sbrk_aligned+0x26>
 800873a:	f04f 34ff 	mov.w	r4, #4294967295
 800873e:	4620      	mov	r0, r4
 8008740:	bd70      	pop	{r4, r5, r6, pc}
 8008742:	1cc4      	adds	r4, r0, #3
 8008744:	f024 0403 	bic.w	r4, r4, #3
 8008748:	42a0      	cmp	r0, r4
 800874a:	d0f8      	beq.n	800873e <sbrk_aligned+0x22>
 800874c:	1a21      	subs	r1, r4, r0
 800874e:	4628      	mov	r0, r5
 8008750:	f002 fb4c 	bl	800adec <_sbrk_r>
 8008754:	3001      	adds	r0, #1
 8008756:	d1f2      	bne.n	800873e <sbrk_aligned+0x22>
 8008758:	e7ef      	b.n	800873a <sbrk_aligned+0x1e>
 800875a:	bf00      	nop
 800875c:	2000116c 	.word	0x2000116c

08008760 <_malloc_r>:
 8008760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008764:	1ccd      	adds	r5, r1, #3
 8008766:	f025 0503 	bic.w	r5, r5, #3
 800876a:	3508      	adds	r5, #8
 800876c:	2d0c      	cmp	r5, #12
 800876e:	bf38      	it	cc
 8008770:	250c      	movcc	r5, #12
 8008772:	2d00      	cmp	r5, #0
 8008774:	4606      	mov	r6, r0
 8008776:	db01      	blt.n	800877c <_malloc_r+0x1c>
 8008778:	42a9      	cmp	r1, r5
 800877a:	d904      	bls.n	8008786 <_malloc_r+0x26>
 800877c:	230c      	movs	r3, #12
 800877e:	6033      	str	r3, [r6, #0]
 8008780:	2000      	movs	r0, #0
 8008782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008786:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800885c <_malloc_r+0xfc>
 800878a:	f000 f869 	bl	8008860 <__malloc_lock>
 800878e:	f8d8 3000 	ldr.w	r3, [r8]
 8008792:	461c      	mov	r4, r3
 8008794:	bb44      	cbnz	r4, 80087e8 <_malloc_r+0x88>
 8008796:	4629      	mov	r1, r5
 8008798:	4630      	mov	r0, r6
 800879a:	f7ff ffbf 	bl	800871c <sbrk_aligned>
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	4604      	mov	r4, r0
 80087a2:	d158      	bne.n	8008856 <_malloc_r+0xf6>
 80087a4:	f8d8 4000 	ldr.w	r4, [r8]
 80087a8:	4627      	mov	r7, r4
 80087aa:	2f00      	cmp	r7, #0
 80087ac:	d143      	bne.n	8008836 <_malloc_r+0xd6>
 80087ae:	2c00      	cmp	r4, #0
 80087b0:	d04b      	beq.n	800884a <_malloc_r+0xea>
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	4639      	mov	r1, r7
 80087b6:	4630      	mov	r0, r6
 80087b8:	eb04 0903 	add.w	r9, r4, r3
 80087bc:	f002 fb16 	bl	800adec <_sbrk_r>
 80087c0:	4581      	cmp	r9, r0
 80087c2:	d142      	bne.n	800884a <_malloc_r+0xea>
 80087c4:	6821      	ldr	r1, [r4, #0]
 80087c6:	1a6d      	subs	r5, r5, r1
 80087c8:	4629      	mov	r1, r5
 80087ca:	4630      	mov	r0, r6
 80087cc:	f7ff ffa6 	bl	800871c <sbrk_aligned>
 80087d0:	3001      	adds	r0, #1
 80087d2:	d03a      	beq.n	800884a <_malloc_r+0xea>
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	442b      	add	r3, r5
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	f8d8 3000 	ldr.w	r3, [r8]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	bb62      	cbnz	r2, 800883c <_malloc_r+0xdc>
 80087e2:	f8c8 7000 	str.w	r7, [r8]
 80087e6:	e00f      	b.n	8008808 <_malloc_r+0xa8>
 80087e8:	6822      	ldr	r2, [r4, #0]
 80087ea:	1b52      	subs	r2, r2, r5
 80087ec:	d420      	bmi.n	8008830 <_malloc_r+0xd0>
 80087ee:	2a0b      	cmp	r2, #11
 80087f0:	d917      	bls.n	8008822 <_malloc_r+0xc2>
 80087f2:	1961      	adds	r1, r4, r5
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	6025      	str	r5, [r4, #0]
 80087f8:	bf18      	it	ne
 80087fa:	6059      	strne	r1, [r3, #4]
 80087fc:	6863      	ldr	r3, [r4, #4]
 80087fe:	bf08      	it	eq
 8008800:	f8c8 1000 	streq.w	r1, [r8]
 8008804:	5162      	str	r2, [r4, r5]
 8008806:	604b      	str	r3, [r1, #4]
 8008808:	4630      	mov	r0, r6
 800880a:	f000 f82f 	bl	800886c <__malloc_unlock>
 800880e:	f104 000b 	add.w	r0, r4, #11
 8008812:	1d23      	adds	r3, r4, #4
 8008814:	f020 0007 	bic.w	r0, r0, #7
 8008818:	1ac2      	subs	r2, r0, r3
 800881a:	bf1c      	itt	ne
 800881c:	1a1b      	subne	r3, r3, r0
 800881e:	50a3      	strne	r3, [r4, r2]
 8008820:	e7af      	b.n	8008782 <_malloc_r+0x22>
 8008822:	6862      	ldr	r2, [r4, #4]
 8008824:	42a3      	cmp	r3, r4
 8008826:	bf0c      	ite	eq
 8008828:	f8c8 2000 	streq.w	r2, [r8]
 800882c:	605a      	strne	r2, [r3, #4]
 800882e:	e7eb      	b.n	8008808 <_malloc_r+0xa8>
 8008830:	4623      	mov	r3, r4
 8008832:	6864      	ldr	r4, [r4, #4]
 8008834:	e7ae      	b.n	8008794 <_malloc_r+0x34>
 8008836:	463c      	mov	r4, r7
 8008838:	687f      	ldr	r7, [r7, #4]
 800883a:	e7b6      	b.n	80087aa <_malloc_r+0x4a>
 800883c:	461a      	mov	r2, r3
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	42a3      	cmp	r3, r4
 8008842:	d1fb      	bne.n	800883c <_malloc_r+0xdc>
 8008844:	2300      	movs	r3, #0
 8008846:	6053      	str	r3, [r2, #4]
 8008848:	e7de      	b.n	8008808 <_malloc_r+0xa8>
 800884a:	230c      	movs	r3, #12
 800884c:	6033      	str	r3, [r6, #0]
 800884e:	4630      	mov	r0, r6
 8008850:	f000 f80c 	bl	800886c <__malloc_unlock>
 8008854:	e794      	b.n	8008780 <_malloc_r+0x20>
 8008856:	6005      	str	r5, [r0, #0]
 8008858:	e7d6      	b.n	8008808 <_malloc_r+0xa8>
 800885a:	bf00      	nop
 800885c:	20001170 	.word	0x20001170

08008860 <__malloc_lock>:
 8008860:	4801      	ldr	r0, [pc, #4]	@ (8008868 <__malloc_lock+0x8>)
 8008862:	f7ff b8aa 	b.w	80079ba <__retarget_lock_acquire_recursive>
 8008866:	bf00      	nop
 8008868:	20001168 	.word	0x20001168

0800886c <__malloc_unlock>:
 800886c:	4801      	ldr	r0, [pc, #4]	@ (8008874 <__malloc_unlock+0x8>)
 800886e:	f7ff b8a5 	b.w	80079bc <__retarget_lock_release_recursive>
 8008872:	bf00      	nop
 8008874:	20001168 	.word	0x20001168

08008878 <_Balloc>:
 8008878:	b570      	push	{r4, r5, r6, lr}
 800887a:	69c6      	ldr	r6, [r0, #28]
 800887c:	4604      	mov	r4, r0
 800887e:	460d      	mov	r5, r1
 8008880:	b976      	cbnz	r6, 80088a0 <_Balloc+0x28>
 8008882:	2010      	movs	r0, #16
 8008884:	f7ff ff42 	bl	800870c <malloc>
 8008888:	4602      	mov	r2, r0
 800888a:	61e0      	str	r0, [r4, #28]
 800888c:	b920      	cbnz	r0, 8008898 <_Balloc+0x20>
 800888e:	4b18      	ldr	r3, [pc, #96]	@ (80088f0 <_Balloc+0x78>)
 8008890:	4818      	ldr	r0, [pc, #96]	@ (80088f4 <_Balloc+0x7c>)
 8008892:	216b      	movs	r1, #107	@ 0x6b
 8008894:	f002 fad0 	bl	800ae38 <__assert_func>
 8008898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800889c:	6006      	str	r6, [r0, #0]
 800889e:	60c6      	str	r6, [r0, #12]
 80088a0:	69e6      	ldr	r6, [r4, #28]
 80088a2:	68f3      	ldr	r3, [r6, #12]
 80088a4:	b183      	cbz	r3, 80088c8 <_Balloc+0x50>
 80088a6:	69e3      	ldr	r3, [r4, #28]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088ae:	b9b8      	cbnz	r0, 80088e0 <_Balloc+0x68>
 80088b0:	2101      	movs	r1, #1
 80088b2:	fa01 f605 	lsl.w	r6, r1, r5
 80088b6:	1d72      	adds	r2, r6, #5
 80088b8:	0092      	lsls	r2, r2, #2
 80088ba:	4620      	mov	r0, r4
 80088bc:	f002 fada 	bl	800ae74 <_calloc_r>
 80088c0:	b160      	cbz	r0, 80088dc <_Balloc+0x64>
 80088c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088c6:	e00e      	b.n	80088e6 <_Balloc+0x6e>
 80088c8:	2221      	movs	r2, #33	@ 0x21
 80088ca:	2104      	movs	r1, #4
 80088cc:	4620      	mov	r0, r4
 80088ce:	f002 fad1 	bl	800ae74 <_calloc_r>
 80088d2:	69e3      	ldr	r3, [r4, #28]
 80088d4:	60f0      	str	r0, [r6, #12]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1e4      	bne.n	80088a6 <_Balloc+0x2e>
 80088dc:	2000      	movs	r0, #0
 80088de:	bd70      	pop	{r4, r5, r6, pc}
 80088e0:	6802      	ldr	r2, [r0, #0]
 80088e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088e6:	2300      	movs	r3, #0
 80088e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088ec:	e7f7      	b.n	80088de <_Balloc+0x66>
 80088ee:	bf00      	nop
 80088f0:	0800b964 	.word	0x0800b964
 80088f4:	0800b9e4 	.word	0x0800b9e4

080088f8 <_Bfree>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	69c6      	ldr	r6, [r0, #28]
 80088fc:	4605      	mov	r5, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	b976      	cbnz	r6, 8008920 <_Bfree+0x28>
 8008902:	2010      	movs	r0, #16
 8008904:	f7ff ff02 	bl	800870c <malloc>
 8008908:	4602      	mov	r2, r0
 800890a:	61e8      	str	r0, [r5, #28]
 800890c:	b920      	cbnz	r0, 8008918 <_Bfree+0x20>
 800890e:	4b09      	ldr	r3, [pc, #36]	@ (8008934 <_Bfree+0x3c>)
 8008910:	4809      	ldr	r0, [pc, #36]	@ (8008938 <_Bfree+0x40>)
 8008912:	218f      	movs	r1, #143	@ 0x8f
 8008914:	f002 fa90 	bl	800ae38 <__assert_func>
 8008918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800891c:	6006      	str	r6, [r0, #0]
 800891e:	60c6      	str	r6, [r0, #12]
 8008920:	b13c      	cbz	r4, 8008932 <_Bfree+0x3a>
 8008922:	69eb      	ldr	r3, [r5, #28]
 8008924:	6862      	ldr	r2, [r4, #4]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800892c:	6021      	str	r1, [r4, #0]
 800892e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008932:	bd70      	pop	{r4, r5, r6, pc}
 8008934:	0800b964 	.word	0x0800b964
 8008938:	0800b9e4 	.word	0x0800b9e4

0800893c <__multadd>:
 800893c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008940:	690d      	ldr	r5, [r1, #16]
 8008942:	4607      	mov	r7, r0
 8008944:	460c      	mov	r4, r1
 8008946:	461e      	mov	r6, r3
 8008948:	f101 0c14 	add.w	ip, r1, #20
 800894c:	2000      	movs	r0, #0
 800894e:	f8dc 3000 	ldr.w	r3, [ip]
 8008952:	b299      	uxth	r1, r3
 8008954:	fb02 6101 	mla	r1, r2, r1, r6
 8008958:	0c1e      	lsrs	r6, r3, #16
 800895a:	0c0b      	lsrs	r3, r1, #16
 800895c:	fb02 3306 	mla	r3, r2, r6, r3
 8008960:	b289      	uxth	r1, r1
 8008962:	3001      	adds	r0, #1
 8008964:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008968:	4285      	cmp	r5, r0
 800896a:	f84c 1b04 	str.w	r1, [ip], #4
 800896e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008972:	dcec      	bgt.n	800894e <__multadd+0x12>
 8008974:	b30e      	cbz	r6, 80089ba <__multadd+0x7e>
 8008976:	68a3      	ldr	r3, [r4, #8]
 8008978:	42ab      	cmp	r3, r5
 800897a:	dc19      	bgt.n	80089b0 <__multadd+0x74>
 800897c:	6861      	ldr	r1, [r4, #4]
 800897e:	4638      	mov	r0, r7
 8008980:	3101      	adds	r1, #1
 8008982:	f7ff ff79 	bl	8008878 <_Balloc>
 8008986:	4680      	mov	r8, r0
 8008988:	b928      	cbnz	r0, 8008996 <__multadd+0x5a>
 800898a:	4602      	mov	r2, r0
 800898c:	4b0c      	ldr	r3, [pc, #48]	@ (80089c0 <__multadd+0x84>)
 800898e:	480d      	ldr	r0, [pc, #52]	@ (80089c4 <__multadd+0x88>)
 8008990:	21ba      	movs	r1, #186	@ 0xba
 8008992:	f002 fa51 	bl	800ae38 <__assert_func>
 8008996:	6922      	ldr	r2, [r4, #16]
 8008998:	3202      	adds	r2, #2
 800899a:	f104 010c 	add.w	r1, r4, #12
 800899e:	0092      	lsls	r2, r2, #2
 80089a0:	300c      	adds	r0, #12
 80089a2:	f002 fa33 	bl	800ae0c <memcpy>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4638      	mov	r0, r7
 80089aa:	f7ff ffa5 	bl	80088f8 <_Bfree>
 80089ae:	4644      	mov	r4, r8
 80089b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089b4:	3501      	adds	r5, #1
 80089b6:	615e      	str	r6, [r3, #20]
 80089b8:	6125      	str	r5, [r4, #16]
 80089ba:	4620      	mov	r0, r4
 80089bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c0:	0800b9d3 	.word	0x0800b9d3
 80089c4:	0800b9e4 	.word	0x0800b9e4

080089c8 <__s2b>:
 80089c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089cc:	460c      	mov	r4, r1
 80089ce:	4615      	mov	r5, r2
 80089d0:	461f      	mov	r7, r3
 80089d2:	2209      	movs	r2, #9
 80089d4:	3308      	adds	r3, #8
 80089d6:	4606      	mov	r6, r0
 80089d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80089dc:	2100      	movs	r1, #0
 80089de:	2201      	movs	r2, #1
 80089e0:	429a      	cmp	r2, r3
 80089e2:	db09      	blt.n	80089f8 <__s2b+0x30>
 80089e4:	4630      	mov	r0, r6
 80089e6:	f7ff ff47 	bl	8008878 <_Balloc>
 80089ea:	b940      	cbnz	r0, 80089fe <__s2b+0x36>
 80089ec:	4602      	mov	r2, r0
 80089ee:	4b19      	ldr	r3, [pc, #100]	@ (8008a54 <__s2b+0x8c>)
 80089f0:	4819      	ldr	r0, [pc, #100]	@ (8008a58 <__s2b+0x90>)
 80089f2:	21d3      	movs	r1, #211	@ 0xd3
 80089f4:	f002 fa20 	bl	800ae38 <__assert_func>
 80089f8:	0052      	lsls	r2, r2, #1
 80089fa:	3101      	adds	r1, #1
 80089fc:	e7f0      	b.n	80089e0 <__s2b+0x18>
 80089fe:	9b08      	ldr	r3, [sp, #32]
 8008a00:	6143      	str	r3, [r0, #20]
 8008a02:	2d09      	cmp	r5, #9
 8008a04:	f04f 0301 	mov.w	r3, #1
 8008a08:	6103      	str	r3, [r0, #16]
 8008a0a:	dd16      	ble.n	8008a3a <__s2b+0x72>
 8008a0c:	f104 0909 	add.w	r9, r4, #9
 8008a10:	46c8      	mov	r8, r9
 8008a12:	442c      	add	r4, r5
 8008a14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008a18:	4601      	mov	r1, r0
 8008a1a:	3b30      	subs	r3, #48	@ 0x30
 8008a1c:	220a      	movs	r2, #10
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7ff ff8c 	bl	800893c <__multadd>
 8008a24:	45a0      	cmp	r8, r4
 8008a26:	d1f5      	bne.n	8008a14 <__s2b+0x4c>
 8008a28:	f1a5 0408 	sub.w	r4, r5, #8
 8008a2c:	444c      	add	r4, r9
 8008a2e:	1b2d      	subs	r5, r5, r4
 8008a30:	1963      	adds	r3, r4, r5
 8008a32:	42bb      	cmp	r3, r7
 8008a34:	db04      	blt.n	8008a40 <__s2b+0x78>
 8008a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a3a:	340a      	adds	r4, #10
 8008a3c:	2509      	movs	r5, #9
 8008a3e:	e7f6      	b.n	8008a2e <__s2b+0x66>
 8008a40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a44:	4601      	mov	r1, r0
 8008a46:	3b30      	subs	r3, #48	@ 0x30
 8008a48:	220a      	movs	r2, #10
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f7ff ff76 	bl	800893c <__multadd>
 8008a50:	e7ee      	b.n	8008a30 <__s2b+0x68>
 8008a52:	bf00      	nop
 8008a54:	0800b9d3 	.word	0x0800b9d3
 8008a58:	0800b9e4 	.word	0x0800b9e4

08008a5c <__hi0bits>:
 8008a5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a60:	4603      	mov	r3, r0
 8008a62:	bf36      	itet	cc
 8008a64:	0403      	lslcc	r3, r0, #16
 8008a66:	2000      	movcs	r0, #0
 8008a68:	2010      	movcc	r0, #16
 8008a6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a6e:	bf3c      	itt	cc
 8008a70:	021b      	lslcc	r3, r3, #8
 8008a72:	3008      	addcc	r0, #8
 8008a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a78:	bf3c      	itt	cc
 8008a7a:	011b      	lslcc	r3, r3, #4
 8008a7c:	3004      	addcc	r0, #4
 8008a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a82:	bf3c      	itt	cc
 8008a84:	009b      	lslcc	r3, r3, #2
 8008a86:	3002      	addcc	r0, #2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	db05      	blt.n	8008a98 <__hi0bits+0x3c>
 8008a8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a90:	f100 0001 	add.w	r0, r0, #1
 8008a94:	bf08      	it	eq
 8008a96:	2020      	moveq	r0, #32
 8008a98:	4770      	bx	lr

08008a9a <__lo0bits>:
 8008a9a:	6803      	ldr	r3, [r0, #0]
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	f013 0007 	ands.w	r0, r3, #7
 8008aa2:	d00b      	beq.n	8008abc <__lo0bits+0x22>
 8008aa4:	07d9      	lsls	r1, r3, #31
 8008aa6:	d421      	bmi.n	8008aec <__lo0bits+0x52>
 8008aa8:	0798      	lsls	r0, r3, #30
 8008aaa:	bf49      	itett	mi
 8008aac:	085b      	lsrmi	r3, r3, #1
 8008aae:	089b      	lsrpl	r3, r3, #2
 8008ab0:	2001      	movmi	r0, #1
 8008ab2:	6013      	strmi	r3, [r2, #0]
 8008ab4:	bf5c      	itt	pl
 8008ab6:	6013      	strpl	r3, [r2, #0]
 8008ab8:	2002      	movpl	r0, #2
 8008aba:	4770      	bx	lr
 8008abc:	b299      	uxth	r1, r3
 8008abe:	b909      	cbnz	r1, 8008ac4 <__lo0bits+0x2a>
 8008ac0:	0c1b      	lsrs	r3, r3, #16
 8008ac2:	2010      	movs	r0, #16
 8008ac4:	b2d9      	uxtb	r1, r3
 8008ac6:	b909      	cbnz	r1, 8008acc <__lo0bits+0x32>
 8008ac8:	3008      	adds	r0, #8
 8008aca:	0a1b      	lsrs	r3, r3, #8
 8008acc:	0719      	lsls	r1, r3, #28
 8008ace:	bf04      	itt	eq
 8008ad0:	091b      	lsreq	r3, r3, #4
 8008ad2:	3004      	addeq	r0, #4
 8008ad4:	0799      	lsls	r1, r3, #30
 8008ad6:	bf04      	itt	eq
 8008ad8:	089b      	lsreq	r3, r3, #2
 8008ada:	3002      	addeq	r0, #2
 8008adc:	07d9      	lsls	r1, r3, #31
 8008ade:	d403      	bmi.n	8008ae8 <__lo0bits+0x4e>
 8008ae0:	085b      	lsrs	r3, r3, #1
 8008ae2:	f100 0001 	add.w	r0, r0, #1
 8008ae6:	d003      	beq.n	8008af0 <__lo0bits+0x56>
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	4770      	bx	lr
 8008aec:	2000      	movs	r0, #0
 8008aee:	4770      	bx	lr
 8008af0:	2020      	movs	r0, #32
 8008af2:	4770      	bx	lr

08008af4 <__i2b>:
 8008af4:	b510      	push	{r4, lr}
 8008af6:	460c      	mov	r4, r1
 8008af8:	2101      	movs	r1, #1
 8008afa:	f7ff febd 	bl	8008878 <_Balloc>
 8008afe:	4602      	mov	r2, r0
 8008b00:	b928      	cbnz	r0, 8008b0e <__i2b+0x1a>
 8008b02:	4b05      	ldr	r3, [pc, #20]	@ (8008b18 <__i2b+0x24>)
 8008b04:	4805      	ldr	r0, [pc, #20]	@ (8008b1c <__i2b+0x28>)
 8008b06:	f240 1145 	movw	r1, #325	@ 0x145
 8008b0a:	f002 f995 	bl	800ae38 <__assert_func>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	6144      	str	r4, [r0, #20]
 8008b12:	6103      	str	r3, [r0, #16]
 8008b14:	bd10      	pop	{r4, pc}
 8008b16:	bf00      	nop
 8008b18:	0800b9d3 	.word	0x0800b9d3
 8008b1c:	0800b9e4 	.word	0x0800b9e4

08008b20 <__multiply>:
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	4614      	mov	r4, r2
 8008b26:	690a      	ldr	r2, [r1, #16]
 8008b28:	6923      	ldr	r3, [r4, #16]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	bfa8      	it	ge
 8008b2e:	4623      	movge	r3, r4
 8008b30:	460f      	mov	r7, r1
 8008b32:	bfa4      	itt	ge
 8008b34:	460c      	movge	r4, r1
 8008b36:	461f      	movge	r7, r3
 8008b38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008b3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b40:	68a3      	ldr	r3, [r4, #8]
 8008b42:	6861      	ldr	r1, [r4, #4]
 8008b44:	eb0a 0609 	add.w	r6, sl, r9
 8008b48:	42b3      	cmp	r3, r6
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	bfb8      	it	lt
 8008b4e:	3101      	addlt	r1, #1
 8008b50:	f7ff fe92 	bl	8008878 <_Balloc>
 8008b54:	b930      	cbnz	r0, 8008b64 <__multiply+0x44>
 8008b56:	4602      	mov	r2, r0
 8008b58:	4b44      	ldr	r3, [pc, #272]	@ (8008c6c <__multiply+0x14c>)
 8008b5a:	4845      	ldr	r0, [pc, #276]	@ (8008c70 <__multiply+0x150>)
 8008b5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b60:	f002 f96a 	bl	800ae38 <__assert_func>
 8008b64:	f100 0514 	add.w	r5, r0, #20
 8008b68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b6c:	462b      	mov	r3, r5
 8008b6e:	2200      	movs	r2, #0
 8008b70:	4543      	cmp	r3, r8
 8008b72:	d321      	bcc.n	8008bb8 <__multiply+0x98>
 8008b74:	f107 0114 	add.w	r1, r7, #20
 8008b78:	f104 0214 	add.w	r2, r4, #20
 8008b7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008b80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008b84:	9302      	str	r3, [sp, #8]
 8008b86:	1b13      	subs	r3, r2, r4
 8008b88:	3b15      	subs	r3, #21
 8008b8a:	f023 0303 	bic.w	r3, r3, #3
 8008b8e:	3304      	adds	r3, #4
 8008b90:	f104 0715 	add.w	r7, r4, #21
 8008b94:	42ba      	cmp	r2, r7
 8008b96:	bf38      	it	cc
 8008b98:	2304      	movcc	r3, #4
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	9b02      	ldr	r3, [sp, #8]
 8008b9e:	9103      	str	r1, [sp, #12]
 8008ba0:	428b      	cmp	r3, r1
 8008ba2:	d80c      	bhi.n	8008bbe <__multiply+0x9e>
 8008ba4:	2e00      	cmp	r6, #0
 8008ba6:	dd03      	ble.n	8008bb0 <__multiply+0x90>
 8008ba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d05b      	beq.n	8008c68 <__multiply+0x148>
 8008bb0:	6106      	str	r6, [r0, #16]
 8008bb2:	b005      	add	sp, #20
 8008bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb8:	f843 2b04 	str.w	r2, [r3], #4
 8008bbc:	e7d8      	b.n	8008b70 <__multiply+0x50>
 8008bbe:	f8b1 a000 	ldrh.w	sl, [r1]
 8008bc2:	f1ba 0f00 	cmp.w	sl, #0
 8008bc6:	d024      	beq.n	8008c12 <__multiply+0xf2>
 8008bc8:	f104 0e14 	add.w	lr, r4, #20
 8008bcc:	46a9      	mov	r9, r5
 8008bce:	f04f 0c00 	mov.w	ip, #0
 8008bd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bd6:	f8d9 3000 	ldr.w	r3, [r9]
 8008bda:	fa1f fb87 	uxth.w	fp, r7
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	fb0a 330b 	mla	r3, sl, fp, r3
 8008be4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008be8:	f8d9 7000 	ldr.w	r7, [r9]
 8008bec:	4463      	add	r3, ip
 8008bee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bf2:	fb0a c70b 	mla	r7, sl, fp, ip
 8008bf6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c00:	4572      	cmp	r2, lr
 8008c02:	f849 3b04 	str.w	r3, [r9], #4
 8008c06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008c0a:	d8e2      	bhi.n	8008bd2 <__multiply+0xb2>
 8008c0c:	9b01      	ldr	r3, [sp, #4]
 8008c0e:	f845 c003 	str.w	ip, [r5, r3]
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c18:	3104      	adds	r1, #4
 8008c1a:	f1b9 0f00 	cmp.w	r9, #0
 8008c1e:	d021      	beq.n	8008c64 <__multiply+0x144>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	f104 0c14 	add.w	ip, r4, #20
 8008c26:	46ae      	mov	lr, r5
 8008c28:	f04f 0a00 	mov.w	sl, #0
 8008c2c:	f8bc b000 	ldrh.w	fp, [ip]
 8008c30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008c34:	fb09 770b 	mla	r7, r9, fp, r7
 8008c38:	4457      	add	r7, sl
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c40:	f84e 3b04 	str.w	r3, [lr], #4
 8008c44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c4c:	f8be 3000 	ldrh.w	r3, [lr]
 8008c50:	fb09 330a 	mla	r3, r9, sl, r3
 8008c54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c58:	4562      	cmp	r2, ip
 8008c5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c5e:	d8e5      	bhi.n	8008c2c <__multiply+0x10c>
 8008c60:	9f01      	ldr	r7, [sp, #4]
 8008c62:	51eb      	str	r3, [r5, r7]
 8008c64:	3504      	adds	r5, #4
 8008c66:	e799      	b.n	8008b9c <__multiply+0x7c>
 8008c68:	3e01      	subs	r6, #1
 8008c6a:	e79b      	b.n	8008ba4 <__multiply+0x84>
 8008c6c:	0800b9d3 	.word	0x0800b9d3
 8008c70:	0800b9e4 	.word	0x0800b9e4

08008c74 <__pow5mult>:
 8008c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c78:	4615      	mov	r5, r2
 8008c7a:	f012 0203 	ands.w	r2, r2, #3
 8008c7e:	4607      	mov	r7, r0
 8008c80:	460e      	mov	r6, r1
 8008c82:	d007      	beq.n	8008c94 <__pow5mult+0x20>
 8008c84:	4c25      	ldr	r4, [pc, #148]	@ (8008d1c <__pow5mult+0xa8>)
 8008c86:	3a01      	subs	r2, #1
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c8e:	f7ff fe55 	bl	800893c <__multadd>
 8008c92:	4606      	mov	r6, r0
 8008c94:	10ad      	asrs	r5, r5, #2
 8008c96:	d03d      	beq.n	8008d14 <__pow5mult+0xa0>
 8008c98:	69fc      	ldr	r4, [r7, #28]
 8008c9a:	b97c      	cbnz	r4, 8008cbc <__pow5mult+0x48>
 8008c9c:	2010      	movs	r0, #16
 8008c9e:	f7ff fd35 	bl	800870c <malloc>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	61f8      	str	r0, [r7, #28]
 8008ca6:	b928      	cbnz	r0, 8008cb4 <__pow5mult+0x40>
 8008ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8008d20 <__pow5mult+0xac>)
 8008caa:	481e      	ldr	r0, [pc, #120]	@ (8008d24 <__pow5mult+0xb0>)
 8008cac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008cb0:	f002 f8c2 	bl	800ae38 <__assert_func>
 8008cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cb8:	6004      	str	r4, [r0, #0]
 8008cba:	60c4      	str	r4, [r0, #12]
 8008cbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cc4:	b94c      	cbnz	r4, 8008cda <__pow5mult+0x66>
 8008cc6:	f240 2171 	movw	r1, #625	@ 0x271
 8008cca:	4638      	mov	r0, r7
 8008ccc:	f7ff ff12 	bl	8008af4 <__i2b>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	6003      	str	r3, [r0, #0]
 8008cda:	f04f 0900 	mov.w	r9, #0
 8008cde:	07eb      	lsls	r3, r5, #31
 8008ce0:	d50a      	bpl.n	8008cf8 <__pow5mult+0x84>
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4622      	mov	r2, r4
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	f7ff ff1a 	bl	8008b20 <__multiply>
 8008cec:	4631      	mov	r1, r6
 8008cee:	4680      	mov	r8, r0
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	f7ff fe01 	bl	80088f8 <_Bfree>
 8008cf6:	4646      	mov	r6, r8
 8008cf8:	106d      	asrs	r5, r5, #1
 8008cfa:	d00b      	beq.n	8008d14 <__pow5mult+0xa0>
 8008cfc:	6820      	ldr	r0, [r4, #0]
 8008cfe:	b938      	cbnz	r0, 8008d10 <__pow5mult+0x9c>
 8008d00:	4622      	mov	r2, r4
 8008d02:	4621      	mov	r1, r4
 8008d04:	4638      	mov	r0, r7
 8008d06:	f7ff ff0b 	bl	8008b20 <__multiply>
 8008d0a:	6020      	str	r0, [r4, #0]
 8008d0c:	f8c0 9000 	str.w	r9, [r0]
 8008d10:	4604      	mov	r4, r0
 8008d12:	e7e4      	b.n	8008cde <__pow5mult+0x6a>
 8008d14:	4630      	mov	r0, r6
 8008d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1a:	bf00      	nop
 8008d1c:	0800ba40 	.word	0x0800ba40
 8008d20:	0800b964 	.word	0x0800b964
 8008d24:	0800b9e4 	.word	0x0800b9e4

08008d28 <__lshift>:
 8008d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	6849      	ldr	r1, [r1, #4]
 8008d30:	6923      	ldr	r3, [r4, #16]
 8008d32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	4607      	mov	r7, r0
 8008d3a:	4691      	mov	r9, r2
 8008d3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d40:	f108 0601 	add.w	r6, r8, #1
 8008d44:	42b3      	cmp	r3, r6
 8008d46:	db0b      	blt.n	8008d60 <__lshift+0x38>
 8008d48:	4638      	mov	r0, r7
 8008d4a:	f7ff fd95 	bl	8008878 <_Balloc>
 8008d4e:	4605      	mov	r5, r0
 8008d50:	b948      	cbnz	r0, 8008d66 <__lshift+0x3e>
 8008d52:	4602      	mov	r2, r0
 8008d54:	4b28      	ldr	r3, [pc, #160]	@ (8008df8 <__lshift+0xd0>)
 8008d56:	4829      	ldr	r0, [pc, #164]	@ (8008dfc <__lshift+0xd4>)
 8008d58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d5c:	f002 f86c 	bl	800ae38 <__assert_func>
 8008d60:	3101      	adds	r1, #1
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	e7ee      	b.n	8008d44 <__lshift+0x1c>
 8008d66:	2300      	movs	r3, #0
 8008d68:	f100 0114 	add.w	r1, r0, #20
 8008d6c:	f100 0210 	add.w	r2, r0, #16
 8008d70:	4618      	mov	r0, r3
 8008d72:	4553      	cmp	r3, sl
 8008d74:	db33      	blt.n	8008dde <__lshift+0xb6>
 8008d76:	6920      	ldr	r0, [r4, #16]
 8008d78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d7c:	f104 0314 	add.w	r3, r4, #20
 8008d80:	f019 091f 	ands.w	r9, r9, #31
 8008d84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d8c:	d02b      	beq.n	8008de6 <__lshift+0xbe>
 8008d8e:	f1c9 0e20 	rsb	lr, r9, #32
 8008d92:	468a      	mov	sl, r1
 8008d94:	2200      	movs	r2, #0
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	fa00 f009 	lsl.w	r0, r0, r9
 8008d9c:	4310      	orrs	r0, r2
 8008d9e:	f84a 0b04 	str.w	r0, [sl], #4
 8008da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008da6:	459c      	cmp	ip, r3
 8008da8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008dac:	d8f3      	bhi.n	8008d96 <__lshift+0x6e>
 8008dae:	ebac 0304 	sub.w	r3, ip, r4
 8008db2:	3b15      	subs	r3, #21
 8008db4:	f023 0303 	bic.w	r3, r3, #3
 8008db8:	3304      	adds	r3, #4
 8008dba:	f104 0015 	add.w	r0, r4, #21
 8008dbe:	4584      	cmp	ip, r0
 8008dc0:	bf38      	it	cc
 8008dc2:	2304      	movcc	r3, #4
 8008dc4:	50ca      	str	r2, [r1, r3]
 8008dc6:	b10a      	cbz	r2, 8008dcc <__lshift+0xa4>
 8008dc8:	f108 0602 	add.w	r6, r8, #2
 8008dcc:	3e01      	subs	r6, #1
 8008dce:	4638      	mov	r0, r7
 8008dd0:	612e      	str	r6, [r5, #16]
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	f7ff fd90 	bl	80088f8 <_Bfree>
 8008dd8:	4628      	mov	r0, r5
 8008dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dde:	f842 0f04 	str.w	r0, [r2, #4]!
 8008de2:	3301      	adds	r3, #1
 8008de4:	e7c5      	b.n	8008d72 <__lshift+0x4a>
 8008de6:	3904      	subs	r1, #4
 8008de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dec:	f841 2f04 	str.w	r2, [r1, #4]!
 8008df0:	459c      	cmp	ip, r3
 8008df2:	d8f9      	bhi.n	8008de8 <__lshift+0xc0>
 8008df4:	e7ea      	b.n	8008dcc <__lshift+0xa4>
 8008df6:	bf00      	nop
 8008df8:	0800b9d3 	.word	0x0800b9d3
 8008dfc:	0800b9e4 	.word	0x0800b9e4

08008e00 <__mcmp>:
 8008e00:	690a      	ldr	r2, [r1, #16]
 8008e02:	4603      	mov	r3, r0
 8008e04:	6900      	ldr	r0, [r0, #16]
 8008e06:	1a80      	subs	r0, r0, r2
 8008e08:	b530      	push	{r4, r5, lr}
 8008e0a:	d10e      	bne.n	8008e2a <__mcmp+0x2a>
 8008e0c:	3314      	adds	r3, #20
 8008e0e:	3114      	adds	r1, #20
 8008e10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e20:	4295      	cmp	r5, r2
 8008e22:	d003      	beq.n	8008e2c <__mcmp+0x2c>
 8008e24:	d205      	bcs.n	8008e32 <__mcmp+0x32>
 8008e26:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2a:	bd30      	pop	{r4, r5, pc}
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d3f3      	bcc.n	8008e18 <__mcmp+0x18>
 8008e30:	e7fb      	b.n	8008e2a <__mcmp+0x2a>
 8008e32:	2001      	movs	r0, #1
 8008e34:	e7f9      	b.n	8008e2a <__mcmp+0x2a>
	...

08008e38 <__mdiff>:
 8008e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	4689      	mov	r9, r1
 8008e3e:	4606      	mov	r6, r0
 8008e40:	4611      	mov	r1, r2
 8008e42:	4648      	mov	r0, r9
 8008e44:	4614      	mov	r4, r2
 8008e46:	f7ff ffdb 	bl	8008e00 <__mcmp>
 8008e4a:	1e05      	subs	r5, r0, #0
 8008e4c:	d112      	bne.n	8008e74 <__mdiff+0x3c>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7ff fd11 	bl	8008878 <_Balloc>
 8008e56:	4602      	mov	r2, r0
 8008e58:	b928      	cbnz	r0, 8008e66 <__mdiff+0x2e>
 8008e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8008f58 <__mdiff+0x120>)
 8008e5c:	f240 2137 	movw	r1, #567	@ 0x237
 8008e60:	483e      	ldr	r0, [pc, #248]	@ (8008f5c <__mdiff+0x124>)
 8008e62:	f001 ffe9 	bl	800ae38 <__assert_func>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	b003      	add	sp, #12
 8008e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e74:	bfbc      	itt	lt
 8008e76:	464b      	movlt	r3, r9
 8008e78:	46a1      	movlt	r9, r4
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e80:	bfba      	itte	lt
 8008e82:	461c      	movlt	r4, r3
 8008e84:	2501      	movlt	r5, #1
 8008e86:	2500      	movge	r5, #0
 8008e88:	f7ff fcf6 	bl	8008878 <_Balloc>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	b918      	cbnz	r0, 8008e98 <__mdiff+0x60>
 8008e90:	4b31      	ldr	r3, [pc, #196]	@ (8008f58 <__mdiff+0x120>)
 8008e92:	f240 2145 	movw	r1, #581	@ 0x245
 8008e96:	e7e3      	b.n	8008e60 <__mdiff+0x28>
 8008e98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e9c:	6926      	ldr	r6, [r4, #16]
 8008e9e:	60c5      	str	r5, [r0, #12]
 8008ea0:	f109 0310 	add.w	r3, r9, #16
 8008ea4:	f109 0514 	add.w	r5, r9, #20
 8008ea8:	f104 0e14 	add.w	lr, r4, #20
 8008eac:	f100 0b14 	add.w	fp, r0, #20
 8008eb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008eb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	46d9      	mov	r9, fp
 8008ebc:	f04f 0c00 	mov.w	ip, #0
 8008ec0:	9b01      	ldr	r3, [sp, #4]
 8008ec2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ec6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	fa1f f38a 	uxth.w	r3, sl
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	b283      	uxth	r3, r0
 8008ed4:	1acb      	subs	r3, r1, r3
 8008ed6:	0c00      	lsrs	r0, r0, #16
 8008ed8:	4463      	add	r3, ip
 8008eda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008ede:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ee8:	4576      	cmp	r6, lr
 8008eea:	f849 3b04 	str.w	r3, [r9], #4
 8008eee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ef2:	d8e5      	bhi.n	8008ec0 <__mdiff+0x88>
 8008ef4:	1b33      	subs	r3, r6, r4
 8008ef6:	3b15      	subs	r3, #21
 8008ef8:	f023 0303 	bic.w	r3, r3, #3
 8008efc:	3415      	adds	r4, #21
 8008efe:	3304      	adds	r3, #4
 8008f00:	42a6      	cmp	r6, r4
 8008f02:	bf38      	it	cc
 8008f04:	2304      	movcc	r3, #4
 8008f06:	441d      	add	r5, r3
 8008f08:	445b      	add	r3, fp
 8008f0a:	461e      	mov	r6, r3
 8008f0c:	462c      	mov	r4, r5
 8008f0e:	4544      	cmp	r4, r8
 8008f10:	d30e      	bcc.n	8008f30 <__mdiff+0xf8>
 8008f12:	f108 0103 	add.w	r1, r8, #3
 8008f16:	1b49      	subs	r1, r1, r5
 8008f18:	f021 0103 	bic.w	r1, r1, #3
 8008f1c:	3d03      	subs	r5, #3
 8008f1e:	45a8      	cmp	r8, r5
 8008f20:	bf38      	it	cc
 8008f22:	2100      	movcc	r1, #0
 8008f24:	440b      	add	r3, r1
 8008f26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f2a:	b191      	cbz	r1, 8008f52 <__mdiff+0x11a>
 8008f2c:	6117      	str	r7, [r2, #16]
 8008f2e:	e79d      	b.n	8008e6c <__mdiff+0x34>
 8008f30:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f34:	46e6      	mov	lr, ip
 8008f36:	0c08      	lsrs	r0, r1, #16
 8008f38:	fa1c fc81 	uxtah	ip, ip, r1
 8008f3c:	4471      	add	r1, lr
 8008f3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f42:	b289      	uxth	r1, r1
 8008f44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f48:	f846 1b04 	str.w	r1, [r6], #4
 8008f4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f50:	e7dd      	b.n	8008f0e <__mdiff+0xd6>
 8008f52:	3f01      	subs	r7, #1
 8008f54:	e7e7      	b.n	8008f26 <__mdiff+0xee>
 8008f56:	bf00      	nop
 8008f58:	0800b9d3 	.word	0x0800b9d3
 8008f5c:	0800b9e4 	.word	0x0800b9e4

08008f60 <__ulp>:
 8008f60:	b082      	sub	sp, #8
 8008f62:	ed8d 0b00 	vstr	d0, [sp]
 8008f66:	9a01      	ldr	r2, [sp, #4]
 8008f68:	4b0f      	ldr	r3, [pc, #60]	@ (8008fa8 <__ulp+0x48>)
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	dc08      	bgt.n	8008f86 <__ulp+0x26>
 8008f74:	425b      	negs	r3, r3
 8008f76:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008f7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f7e:	da04      	bge.n	8008f8a <__ulp+0x2a>
 8008f80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008f84:	4113      	asrs	r3, r2
 8008f86:	2200      	movs	r2, #0
 8008f88:	e008      	b.n	8008f9c <__ulp+0x3c>
 8008f8a:	f1a2 0314 	sub.w	r3, r2, #20
 8008f8e:	2b1e      	cmp	r3, #30
 8008f90:	bfda      	itte	le
 8008f92:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008f96:	40da      	lsrle	r2, r3
 8008f98:	2201      	movgt	r2, #1
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	ec41 0b10 	vmov	d0, r0, r1
 8008fa4:	b002      	add	sp, #8
 8008fa6:	4770      	bx	lr
 8008fa8:	7ff00000 	.word	0x7ff00000

08008fac <__b2d>:
 8008fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb0:	6906      	ldr	r6, [r0, #16]
 8008fb2:	f100 0814 	add.w	r8, r0, #20
 8008fb6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008fba:	1f37      	subs	r7, r6, #4
 8008fbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	f7ff fd4b 	bl	8008a5c <__hi0bits>
 8008fc6:	f1c0 0320 	rsb	r3, r0, #32
 8008fca:	280a      	cmp	r0, #10
 8008fcc:	600b      	str	r3, [r1, #0]
 8008fce:	491b      	ldr	r1, [pc, #108]	@ (800903c <__b2d+0x90>)
 8008fd0:	dc15      	bgt.n	8008ffe <__b2d+0x52>
 8008fd2:	f1c0 0c0b 	rsb	ip, r0, #11
 8008fd6:	fa22 f30c 	lsr.w	r3, r2, ip
 8008fda:	45b8      	cmp	r8, r7
 8008fdc:	ea43 0501 	orr.w	r5, r3, r1
 8008fe0:	bf34      	ite	cc
 8008fe2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008fe6:	2300      	movcs	r3, #0
 8008fe8:	3015      	adds	r0, #21
 8008fea:	fa02 f000 	lsl.w	r0, r2, r0
 8008fee:	fa23 f30c 	lsr.w	r3, r3, ip
 8008ff2:	4303      	orrs	r3, r0
 8008ff4:	461c      	mov	r4, r3
 8008ff6:	ec45 4b10 	vmov	d0, r4, r5
 8008ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ffe:	45b8      	cmp	r8, r7
 8009000:	bf3a      	itte	cc
 8009002:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009006:	f1a6 0708 	subcc.w	r7, r6, #8
 800900a:	2300      	movcs	r3, #0
 800900c:	380b      	subs	r0, #11
 800900e:	d012      	beq.n	8009036 <__b2d+0x8a>
 8009010:	f1c0 0120 	rsb	r1, r0, #32
 8009014:	fa23 f401 	lsr.w	r4, r3, r1
 8009018:	4082      	lsls	r2, r0
 800901a:	4322      	orrs	r2, r4
 800901c:	4547      	cmp	r7, r8
 800901e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009022:	bf8c      	ite	hi
 8009024:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009028:	2200      	movls	r2, #0
 800902a:	4083      	lsls	r3, r0
 800902c:	40ca      	lsrs	r2, r1
 800902e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009032:	4313      	orrs	r3, r2
 8009034:	e7de      	b.n	8008ff4 <__b2d+0x48>
 8009036:	ea42 0501 	orr.w	r5, r2, r1
 800903a:	e7db      	b.n	8008ff4 <__b2d+0x48>
 800903c:	3ff00000 	.word	0x3ff00000

08009040 <__d2b>:
 8009040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009044:	460f      	mov	r7, r1
 8009046:	2101      	movs	r1, #1
 8009048:	ec59 8b10 	vmov	r8, r9, d0
 800904c:	4616      	mov	r6, r2
 800904e:	f7ff fc13 	bl	8008878 <_Balloc>
 8009052:	4604      	mov	r4, r0
 8009054:	b930      	cbnz	r0, 8009064 <__d2b+0x24>
 8009056:	4602      	mov	r2, r0
 8009058:	4b23      	ldr	r3, [pc, #140]	@ (80090e8 <__d2b+0xa8>)
 800905a:	4824      	ldr	r0, [pc, #144]	@ (80090ec <__d2b+0xac>)
 800905c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009060:	f001 feea 	bl	800ae38 <__assert_func>
 8009064:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800906c:	b10d      	cbz	r5, 8009072 <__d2b+0x32>
 800906e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	f1b8 0300 	subs.w	r3, r8, #0
 8009078:	d023      	beq.n	80090c2 <__d2b+0x82>
 800907a:	4668      	mov	r0, sp
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	f7ff fd0c 	bl	8008a9a <__lo0bits>
 8009082:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009086:	b1d0      	cbz	r0, 80090be <__d2b+0x7e>
 8009088:	f1c0 0320 	rsb	r3, r0, #32
 800908c:	fa02 f303 	lsl.w	r3, r2, r3
 8009090:	430b      	orrs	r3, r1
 8009092:	40c2      	lsrs	r2, r0
 8009094:	6163      	str	r3, [r4, #20]
 8009096:	9201      	str	r2, [sp, #4]
 8009098:	9b01      	ldr	r3, [sp, #4]
 800909a:	61a3      	str	r3, [r4, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	bf0c      	ite	eq
 80090a0:	2201      	moveq	r2, #1
 80090a2:	2202      	movne	r2, #2
 80090a4:	6122      	str	r2, [r4, #16]
 80090a6:	b1a5      	cbz	r5, 80090d2 <__d2b+0x92>
 80090a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80090ac:	4405      	add	r5, r0
 80090ae:	603d      	str	r5, [r7, #0]
 80090b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80090b4:	6030      	str	r0, [r6, #0]
 80090b6:	4620      	mov	r0, r4
 80090b8:	b003      	add	sp, #12
 80090ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090be:	6161      	str	r1, [r4, #20]
 80090c0:	e7ea      	b.n	8009098 <__d2b+0x58>
 80090c2:	a801      	add	r0, sp, #4
 80090c4:	f7ff fce9 	bl	8008a9a <__lo0bits>
 80090c8:	9b01      	ldr	r3, [sp, #4]
 80090ca:	6163      	str	r3, [r4, #20]
 80090cc:	3020      	adds	r0, #32
 80090ce:	2201      	movs	r2, #1
 80090d0:	e7e8      	b.n	80090a4 <__d2b+0x64>
 80090d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80090da:	6038      	str	r0, [r7, #0]
 80090dc:	6918      	ldr	r0, [r3, #16]
 80090de:	f7ff fcbd 	bl	8008a5c <__hi0bits>
 80090e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090e6:	e7e5      	b.n	80090b4 <__d2b+0x74>
 80090e8:	0800b9d3 	.word	0x0800b9d3
 80090ec:	0800b9e4 	.word	0x0800b9e4

080090f0 <__ratio>:
 80090f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	b085      	sub	sp, #20
 80090f6:	e9cd 1000 	strd	r1, r0, [sp]
 80090fa:	a902      	add	r1, sp, #8
 80090fc:	f7ff ff56 	bl	8008fac <__b2d>
 8009100:	9800      	ldr	r0, [sp, #0]
 8009102:	a903      	add	r1, sp, #12
 8009104:	ec55 4b10 	vmov	r4, r5, d0
 8009108:	f7ff ff50 	bl	8008fac <__b2d>
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	6919      	ldr	r1, [r3, #16]
 8009110:	9b00      	ldr	r3, [sp, #0]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	1ac9      	subs	r1, r1, r3
 8009116:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800911a:	1a9b      	subs	r3, r3, r2
 800911c:	ec5b ab10 	vmov	sl, fp, d0
 8009120:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009124:	2b00      	cmp	r3, #0
 8009126:	bfce      	itee	gt
 8009128:	462a      	movgt	r2, r5
 800912a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800912e:	465a      	movle	r2, fp
 8009130:	462f      	mov	r7, r5
 8009132:	46d9      	mov	r9, fp
 8009134:	bfcc      	ite	gt
 8009136:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800913a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800913e:	464b      	mov	r3, r9
 8009140:	4652      	mov	r2, sl
 8009142:	4620      	mov	r0, r4
 8009144:	4639      	mov	r1, r7
 8009146:	f7f7 fb81 	bl	800084c <__aeabi_ddiv>
 800914a:	ec41 0b10 	vmov	d0, r0, r1
 800914e:	b005      	add	sp, #20
 8009150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009154 <__copybits>:
 8009154:	3901      	subs	r1, #1
 8009156:	b570      	push	{r4, r5, r6, lr}
 8009158:	1149      	asrs	r1, r1, #5
 800915a:	6914      	ldr	r4, [r2, #16]
 800915c:	3101      	adds	r1, #1
 800915e:	f102 0314 	add.w	r3, r2, #20
 8009162:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009166:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800916a:	1f05      	subs	r5, r0, #4
 800916c:	42a3      	cmp	r3, r4
 800916e:	d30c      	bcc.n	800918a <__copybits+0x36>
 8009170:	1aa3      	subs	r3, r4, r2
 8009172:	3b11      	subs	r3, #17
 8009174:	f023 0303 	bic.w	r3, r3, #3
 8009178:	3211      	adds	r2, #17
 800917a:	42a2      	cmp	r2, r4
 800917c:	bf88      	it	hi
 800917e:	2300      	movhi	r3, #0
 8009180:	4418      	add	r0, r3
 8009182:	2300      	movs	r3, #0
 8009184:	4288      	cmp	r0, r1
 8009186:	d305      	bcc.n	8009194 <__copybits+0x40>
 8009188:	bd70      	pop	{r4, r5, r6, pc}
 800918a:	f853 6b04 	ldr.w	r6, [r3], #4
 800918e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009192:	e7eb      	b.n	800916c <__copybits+0x18>
 8009194:	f840 3b04 	str.w	r3, [r0], #4
 8009198:	e7f4      	b.n	8009184 <__copybits+0x30>

0800919a <__any_on>:
 800919a:	f100 0214 	add.w	r2, r0, #20
 800919e:	6900      	ldr	r0, [r0, #16]
 80091a0:	114b      	asrs	r3, r1, #5
 80091a2:	4298      	cmp	r0, r3
 80091a4:	b510      	push	{r4, lr}
 80091a6:	db11      	blt.n	80091cc <__any_on+0x32>
 80091a8:	dd0a      	ble.n	80091c0 <__any_on+0x26>
 80091aa:	f011 011f 	ands.w	r1, r1, #31
 80091ae:	d007      	beq.n	80091c0 <__any_on+0x26>
 80091b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80091b4:	fa24 f001 	lsr.w	r0, r4, r1
 80091b8:	fa00 f101 	lsl.w	r1, r0, r1
 80091bc:	428c      	cmp	r4, r1
 80091be:	d10b      	bne.n	80091d8 <__any_on+0x3e>
 80091c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d803      	bhi.n	80091d0 <__any_on+0x36>
 80091c8:	2000      	movs	r0, #0
 80091ca:	bd10      	pop	{r4, pc}
 80091cc:	4603      	mov	r3, r0
 80091ce:	e7f7      	b.n	80091c0 <__any_on+0x26>
 80091d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091d4:	2900      	cmp	r1, #0
 80091d6:	d0f5      	beq.n	80091c4 <__any_on+0x2a>
 80091d8:	2001      	movs	r0, #1
 80091da:	e7f6      	b.n	80091ca <__any_on+0x30>

080091dc <sulp>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	4604      	mov	r4, r0
 80091e0:	460d      	mov	r5, r1
 80091e2:	ec45 4b10 	vmov	d0, r4, r5
 80091e6:	4616      	mov	r6, r2
 80091e8:	f7ff feba 	bl	8008f60 <__ulp>
 80091ec:	ec51 0b10 	vmov	r0, r1, d0
 80091f0:	b17e      	cbz	r6, 8009212 <sulp+0x36>
 80091f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80091f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dd09      	ble.n	8009212 <sulp+0x36>
 80091fe:	051b      	lsls	r3, r3, #20
 8009200:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009204:	2400      	movs	r4, #0
 8009206:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800920a:	4622      	mov	r2, r4
 800920c:	462b      	mov	r3, r5
 800920e:	f7f7 f9f3 	bl	80005f8 <__aeabi_dmul>
 8009212:	ec41 0b10 	vmov	d0, r0, r1
 8009216:	bd70      	pop	{r4, r5, r6, pc}

08009218 <_strtod_l>:
 8009218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	b09f      	sub	sp, #124	@ 0x7c
 800921e:	460c      	mov	r4, r1
 8009220:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009222:	2200      	movs	r2, #0
 8009224:	921a      	str	r2, [sp, #104]	@ 0x68
 8009226:	9005      	str	r0, [sp, #20]
 8009228:	f04f 0a00 	mov.w	sl, #0
 800922c:	f04f 0b00 	mov.w	fp, #0
 8009230:	460a      	mov	r2, r1
 8009232:	9219      	str	r2, [sp, #100]	@ 0x64
 8009234:	7811      	ldrb	r1, [r2, #0]
 8009236:	292b      	cmp	r1, #43	@ 0x2b
 8009238:	d04a      	beq.n	80092d0 <_strtod_l+0xb8>
 800923a:	d838      	bhi.n	80092ae <_strtod_l+0x96>
 800923c:	290d      	cmp	r1, #13
 800923e:	d832      	bhi.n	80092a6 <_strtod_l+0x8e>
 8009240:	2908      	cmp	r1, #8
 8009242:	d832      	bhi.n	80092aa <_strtod_l+0x92>
 8009244:	2900      	cmp	r1, #0
 8009246:	d03b      	beq.n	80092c0 <_strtod_l+0xa8>
 8009248:	2200      	movs	r2, #0
 800924a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800924c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800924e:	782a      	ldrb	r2, [r5, #0]
 8009250:	2a30      	cmp	r2, #48	@ 0x30
 8009252:	f040 80b3 	bne.w	80093bc <_strtod_l+0x1a4>
 8009256:	786a      	ldrb	r2, [r5, #1]
 8009258:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800925c:	2a58      	cmp	r2, #88	@ 0x58
 800925e:	d16e      	bne.n	800933e <_strtod_l+0x126>
 8009260:	9302      	str	r3, [sp, #8]
 8009262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	ab1a      	add	r3, sp, #104	@ 0x68
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	4a8e      	ldr	r2, [pc, #568]	@ (80094a4 <_strtod_l+0x28c>)
 800926c:	9805      	ldr	r0, [sp, #20]
 800926e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009270:	a919      	add	r1, sp, #100	@ 0x64
 8009272:	f001 fe7b 	bl	800af6c <__gethex>
 8009276:	f010 060f 	ands.w	r6, r0, #15
 800927a:	4604      	mov	r4, r0
 800927c:	d005      	beq.n	800928a <_strtod_l+0x72>
 800927e:	2e06      	cmp	r6, #6
 8009280:	d128      	bne.n	80092d4 <_strtod_l+0xbc>
 8009282:	3501      	adds	r5, #1
 8009284:	2300      	movs	r3, #0
 8009286:	9519      	str	r5, [sp, #100]	@ 0x64
 8009288:	930b      	str	r3, [sp, #44]	@ 0x2c
 800928a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800928c:	2b00      	cmp	r3, #0
 800928e:	f040 858e 	bne.w	8009dae <_strtod_l+0xb96>
 8009292:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009294:	b1cb      	cbz	r3, 80092ca <_strtod_l+0xb2>
 8009296:	4652      	mov	r2, sl
 8009298:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800929c:	ec43 2b10 	vmov	d0, r2, r3
 80092a0:	b01f      	add	sp, #124	@ 0x7c
 80092a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a6:	2920      	cmp	r1, #32
 80092a8:	d1ce      	bne.n	8009248 <_strtod_l+0x30>
 80092aa:	3201      	adds	r2, #1
 80092ac:	e7c1      	b.n	8009232 <_strtod_l+0x1a>
 80092ae:	292d      	cmp	r1, #45	@ 0x2d
 80092b0:	d1ca      	bne.n	8009248 <_strtod_l+0x30>
 80092b2:	2101      	movs	r1, #1
 80092b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80092b6:	1c51      	adds	r1, r2, #1
 80092b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80092ba:	7852      	ldrb	r2, [r2, #1]
 80092bc:	2a00      	cmp	r2, #0
 80092be:	d1c5      	bne.n	800924c <_strtod_l+0x34>
 80092c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f040 8570 	bne.w	8009daa <_strtod_l+0xb92>
 80092ca:	4652      	mov	r2, sl
 80092cc:	465b      	mov	r3, fp
 80092ce:	e7e5      	b.n	800929c <_strtod_l+0x84>
 80092d0:	2100      	movs	r1, #0
 80092d2:	e7ef      	b.n	80092b4 <_strtod_l+0x9c>
 80092d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092d6:	b13a      	cbz	r2, 80092e8 <_strtod_l+0xd0>
 80092d8:	2135      	movs	r1, #53	@ 0x35
 80092da:	a81c      	add	r0, sp, #112	@ 0x70
 80092dc:	f7ff ff3a 	bl	8009154 <__copybits>
 80092e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092e2:	9805      	ldr	r0, [sp, #20]
 80092e4:	f7ff fb08 	bl	80088f8 <_Bfree>
 80092e8:	3e01      	subs	r6, #1
 80092ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80092ec:	2e04      	cmp	r6, #4
 80092ee:	d806      	bhi.n	80092fe <_strtod_l+0xe6>
 80092f0:	e8df f006 	tbb	[pc, r6]
 80092f4:	201d0314 	.word	0x201d0314
 80092f8:	14          	.byte	0x14
 80092f9:	00          	.byte	0x00
 80092fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80092fe:	05e1      	lsls	r1, r4, #23
 8009300:	bf48      	it	mi
 8009302:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009306:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800930a:	0d1b      	lsrs	r3, r3, #20
 800930c:	051b      	lsls	r3, r3, #20
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1bb      	bne.n	800928a <_strtod_l+0x72>
 8009312:	f7fe fb27 	bl	8007964 <__errno>
 8009316:	2322      	movs	r3, #34	@ 0x22
 8009318:	6003      	str	r3, [r0, #0]
 800931a:	e7b6      	b.n	800928a <_strtod_l+0x72>
 800931c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009320:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009324:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009328:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800932c:	e7e7      	b.n	80092fe <_strtod_l+0xe6>
 800932e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80094ac <_strtod_l+0x294>
 8009332:	e7e4      	b.n	80092fe <_strtod_l+0xe6>
 8009334:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009338:	f04f 3aff 	mov.w	sl, #4294967295
 800933c:	e7df      	b.n	80092fe <_strtod_l+0xe6>
 800933e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	9219      	str	r2, [sp, #100]	@ 0x64
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	2b30      	cmp	r3, #48	@ 0x30
 8009348:	d0f9      	beq.n	800933e <_strtod_l+0x126>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d09d      	beq.n	800928a <_strtod_l+0x72>
 800934e:	2301      	movs	r3, #1
 8009350:	9309      	str	r3, [sp, #36]	@ 0x24
 8009352:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009354:	930c      	str	r3, [sp, #48]	@ 0x30
 8009356:	2300      	movs	r3, #0
 8009358:	9308      	str	r3, [sp, #32]
 800935a:	930a      	str	r3, [sp, #40]	@ 0x28
 800935c:	461f      	mov	r7, r3
 800935e:	220a      	movs	r2, #10
 8009360:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009362:	7805      	ldrb	r5, [r0, #0]
 8009364:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009368:	b2d9      	uxtb	r1, r3
 800936a:	2909      	cmp	r1, #9
 800936c:	d928      	bls.n	80093c0 <_strtod_l+0x1a8>
 800936e:	494e      	ldr	r1, [pc, #312]	@ (80094a8 <_strtod_l+0x290>)
 8009370:	2201      	movs	r2, #1
 8009372:	f001 fd06 	bl	800ad82 <strncmp>
 8009376:	2800      	cmp	r0, #0
 8009378:	d032      	beq.n	80093e0 <_strtod_l+0x1c8>
 800937a:	2000      	movs	r0, #0
 800937c:	462a      	mov	r2, r5
 800937e:	4681      	mov	r9, r0
 8009380:	463d      	mov	r5, r7
 8009382:	4603      	mov	r3, r0
 8009384:	2a65      	cmp	r2, #101	@ 0x65
 8009386:	d001      	beq.n	800938c <_strtod_l+0x174>
 8009388:	2a45      	cmp	r2, #69	@ 0x45
 800938a:	d114      	bne.n	80093b6 <_strtod_l+0x19e>
 800938c:	b91d      	cbnz	r5, 8009396 <_strtod_l+0x17e>
 800938e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009390:	4302      	orrs	r2, r0
 8009392:	d095      	beq.n	80092c0 <_strtod_l+0xa8>
 8009394:	2500      	movs	r5, #0
 8009396:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009398:	1c62      	adds	r2, r4, #1
 800939a:	9219      	str	r2, [sp, #100]	@ 0x64
 800939c:	7862      	ldrb	r2, [r4, #1]
 800939e:	2a2b      	cmp	r2, #43	@ 0x2b
 80093a0:	d077      	beq.n	8009492 <_strtod_l+0x27a>
 80093a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80093a4:	d07b      	beq.n	800949e <_strtod_l+0x286>
 80093a6:	f04f 0c00 	mov.w	ip, #0
 80093aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80093ae:	2909      	cmp	r1, #9
 80093b0:	f240 8082 	bls.w	80094b8 <_strtod_l+0x2a0>
 80093b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80093b6:	f04f 0800 	mov.w	r8, #0
 80093ba:	e0a2      	b.n	8009502 <_strtod_l+0x2ea>
 80093bc:	2300      	movs	r3, #0
 80093be:	e7c7      	b.n	8009350 <_strtod_l+0x138>
 80093c0:	2f08      	cmp	r7, #8
 80093c2:	bfd5      	itete	le
 80093c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80093c6:	9908      	ldrgt	r1, [sp, #32]
 80093c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80093cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80093d0:	f100 0001 	add.w	r0, r0, #1
 80093d4:	bfd4      	ite	le
 80093d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80093d8:	9308      	strgt	r3, [sp, #32]
 80093da:	3701      	adds	r7, #1
 80093dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80093de:	e7bf      	b.n	8009360 <_strtod_l+0x148>
 80093e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80093e6:	785a      	ldrb	r2, [r3, #1]
 80093e8:	b37f      	cbz	r7, 800944a <_strtod_l+0x232>
 80093ea:	4681      	mov	r9, r0
 80093ec:	463d      	mov	r5, r7
 80093ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80093f2:	2b09      	cmp	r3, #9
 80093f4:	d912      	bls.n	800941c <_strtod_l+0x204>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e7c4      	b.n	8009384 <_strtod_l+0x16c>
 80093fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009400:	785a      	ldrb	r2, [r3, #1]
 8009402:	3001      	adds	r0, #1
 8009404:	2a30      	cmp	r2, #48	@ 0x30
 8009406:	d0f8      	beq.n	80093fa <_strtod_l+0x1e2>
 8009408:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800940c:	2b08      	cmp	r3, #8
 800940e:	f200 84d3 	bhi.w	8009db8 <_strtod_l+0xba0>
 8009412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009414:	930c      	str	r3, [sp, #48]	@ 0x30
 8009416:	4681      	mov	r9, r0
 8009418:	2000      	movs	r0, #0
 800941a:	4605      	mov	r5, r0
 800941c:	3a30      	subs	r2, #48	@ 0x30
 800941e:	f100 0301 	add.w	r3, r0, #1
 8009422:	d02a      	beq.n	800947a <_strtod_l+0x262>
 8009424:	4499      	add	r9, r3
 8009426:	eb00 0c05 	add.w	ip, r0, r5
 800942a:	462b      	mov	r3, r5
 800942c:	210a      	movs	r1, #10
 800942e:	4563      	cmp	r3, ip
 8009430:	d10d      	bne.n	800944e <_strtod_l+0x236>
 8009432:	1c69      	adds	r1, r5, #1
 8009434:	4401      	add	r1, r0
 8009436:	4428      	add	r0, r5
 8009438:	2808      	cmp	r0, #8
 800943a:	dc16      	bgt.n	800946a <_strtod_l+0x252>
 800943c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800943e:	230a      	movs	r3, #10
 8009440:	fb03 2300 	mla	r3, r3, r0, r2
 8009444:	930a      	str	r3, [sp, #40]	@ 0x28
 8009446:	2300      	movs	r3, #0
 8009448:	e018      	b.n	800947c <_strtod_l+0x264>
 800944a:	4638      	mov	r0, r7
 800944c:	e7da      	b.n	8009404 <_strtod_l+0x1ec>
 800944e:	2b08      	cmp	r3, #8
 8009450:	f103 0301 	add.w	r3, r3, #1
 8009454:	dc03      	bgt.n	800945e <_strtod_l+0x246>
 8009456:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009458:	434e      	muls	r6, r1
 800945a:	960a      	str	r6, [sp, #40]	@ 0x28
 800945c:	e7e7      	b.n	800942e <_strtod_l+0x216>
 800945e:	2b10      	cmp	r3, #16
 8009460:	bfde      	ittt	le
 8009462:	9e08      	ldrle	r6, [sp, #32]
 8009464:	434e      	mulle	r6, r1
 8009466:	9608      	strle	r6, [sp, #32]
 8009468:	e7e1      	b.n	800942e <_strtod_l+0x216>
 800946a:	280f      	cmp	r0, #15
 800946c:	dceb      	bgt.n	8009446 <_strtod_l+0x22e>
 800946e:	9808      	ldr	r0, [sp, #32]
 8009470:	230a      	movs	r3, #10
 8009472:	fb03 2300 	mla	r3, r3, r0, r2
 8009476:	9308      	str	r3, [sp, #32]
 8009478:	e7e5      	b.n	8009446 <_strtod_l+0x22e>
 800947a:	4629      	mov	r1, r5
 800947c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800947e:	1c50      	adds	r0, r2, #1
 8009480:	9019      	str	r0, [sp, #100]	@ 0x64
 8009482:	7852      	ldrb	r2, [r2, #1]
 8009484:	4618      	mov	r0, r3
 8009486:	460d      	mov	r5, r1
 8009488:	e7b1      	b.n	80093ee <_strtod_l+0x1d6>
 800948a:	f04f 0900 	mov.w	r9, #0
 800948e:	2301      	movs	r3, #1
 8009490:	e77d      	b.n	800938e <_strtod_l+0x176>
 8009492:	f04f 0c00 	mov.w	ip, #0
 8009496:	1ca2      	adds	r2, r4, #2
 8009498:	9219      	str	r2, [sp, #100]	@ 0x64
 800949a:	78a2      	ldrb	r2, [r4, #2]
 800949c:	e785      	b.n	80093aa <_strtod_l+0x192>
 800949e:	f04f 0c01 	mov.w	ip, #1
 80094a2:	e7f8      	b.n	8009496 <_strtod_l+0x27e>
 80094a4:	0800bb58 	.word	0x0800bb58
 80094a8:	0800bb40 	.word	0x0800bb40
 80094ac:	7ff00000 	.word	0x7ff00000
 80094b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094b2:	1c51      	adds	r1, r2, #1
 80094b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80094b6:	7852      	ldrb	r2, [r2, #1]
 80094b8:	2a30      	cmp	r2, #48	@ 0x30
 80094ba:	d0f9      	beq.n	80094b0 <_strtod_l+0x298>
 80094bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80094c0:	2908      	cmp	r1, #8
 80094c2:	f63f af78 	bhi.w	80093b6 <_strtod_l+0x19e>
 80094c6:	3a30      	subs	r2, #48	@ 0x30
 80094c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80094ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80094ce:	f04f 080a 	mov.w	r8, #10
 80094d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094d4:	1c56      	adds	r6, r2, #1
 80094d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80094d8:	7852      	ldrb	r2, [r2, #1]
 80094da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80094de:	f1be 0f09 	cmp.w	lr, #9
 80094e2:	d939      	bls.n	8009558 <_strtod_l+0x340>
 80094e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80094e6:	1a76      	subs	r6, r6, r1
 80094e8:	2e08      	cmp	r6, #8
 80094ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80094ee:	dc03      	bgt.n	80094f8 <_strtod_l+0x2e0>
 80094f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80094f2:	4588      	cmp	r8, r1
 80094f4:	bfa8      	it	ge
 80094f6:	4688      	movge	r8, r1
 80094f8:	f1bc 0f00 	cmp.w	ip, #0
 80094fc:	d001      	beq.n	8009502 <_strtod_l+0x2ea>
 80094fe:	f1c8 0800 	rsb	r8, r8, #0
 8009502:	2d00      	cmp	r5, #0
 8009504:	d14e      	bne.n	80095a4 <_strtod_l+0x38c>
 8009506:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009508:	4308      	orrs	r0, r1
 800950a:	f47f aebe 	bne.w	800928a <_strtod_l+0x72>
 800950e:	2b00      	cmp	r3, #0
 8009510:	f47f aed6 	bne.w	80092c0 <_strtod_l+0xa8>
 8009514:	2a69      	cmp	r2, #105	@ 0x69
 8009516:	d028      	beq.n	800956a <_strtod_l+0x352>
 8009518:	dc25      	bgt.n	8009566 <_strtod_l+0x34e>
 800951a:	2a49      	cmp	r2, #73	@ 0x49
 800951c:	d025      	beq.n	800956a <_strtod_l+0x352>
 800951e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009520:	f47f aece 	bne.w	80092c0 <_strtod_l+0xa8>
 8009524:	499b      	ldr	r1, [pc, #620]	@ (8009794 <_strtod_l+0x57c>)
 8009526:	a819      	add	r0, sp, #100	@ 0x64
 8009528:	f001 ff42 	bl	800b3b0 <__match>
 800952c:	2800      	cmp	r0, #0
 800952e:	f43f aec7 	beq.w	80092c0 <_strtod_l+0xa8>
 8009532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	2b28      	cmp	r3, #40	@ 0x28
 8009538:	d12e      	bne.n	8009598 <_strtod_l+0x380>
 800953a:	4997      	ldr	r1, [pc, #604]	@ (8009798 <_strtod_l+0x580>)
 800953c:	aa1c      	add	r2, sp, #112	@ 0x70
 800953e:	a819      	add	r0, sp, #100	@ 0x64
 8009540:	f001 ff4a 	bl	800b3d8 <__hexnan>
 8009544:	2805      	cmp	r0, #5
 8009546:	d127      	bne.n	8009598 <_strtod_l+0x380>
 8009548:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800954a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800954e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009552:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009556:	e698      	b.n	800928a <_strtod_l+0x72>
 8009558:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800955a:	fb08 2101 	mla	r1, r8, r1, r2
 800955e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009562:	920e      	str	r2, [sp, #56]	@ 0x38
 8009564:	e7b5      	b.n	80094d2 <_strtod_l+0x2ba>
 8009566:	2a6e      	cmp	r2, #110	@ 0x6e
 8009568:	e7da      	b.n	8009520 <_strtod_l+0x308>
 800956a:	498c      	ldr	r1, [pc, #560]	@ (800979c <_strtod_l+0x584>)
 800956c:	a819      	add	r0, sp, #100	@ 0x64
 800956e:	f001 ff1f 	bl	800b3b0 <__match>
 8009572:	2800      	cmp	r0, #0
 8009574:	f43f aea4 	beq.w	80092c0 <_strtod_l+0xa8>
 8009578:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800957a:	4989      	ldr	r1, [pc, #548]	@ (80097a0 <_strtod_l+0x588>)
 800957c:	3b01      	subs	r3, #1
 800957e:	a819      	add	r0, sp, #100	@ 0x64
 8009580:	9319      	str	r3, [sp, #100]	@ 0x64
 8009582:	f001 ff15 	bl	800b3b0 <__match>
 8009586:	b910      	cbnz	r0, 800958e <_strtod_l+0x376>
 8009588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800958a:	3301      	adds	r3, #1
 800958c:	9319      	str	r3, [sp, #100]	@ 0x64
 800958e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80097b0 <_strtod_l+0x598>
 8009592:	f04f 0a00 	mov.w	sl, #0
 8009596:	e678      	b.n	800928a <_strtod_l+0x72>
 8009598:	4882      	ldr	r0, [pc, #520]	@ (80097a4 <_strtod_l+0x58c>)
 800959a:	f001 fc45 	bl	800ae28 <nan>
 800959e:	ec5b ab10 	vmov	sl, fp, d0
 80095a2:	e672      	b.n	800928a <_strtod_l+0x72>
 80095a4:	eba8 0309 	sub.w	r3, r8, r9
 80095a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ac:	2f00      	cmp	r7, #0
 80095ae:	bf08      	it	eq
 80095b0:	462f      	moveq	r7, r5
 80095b2:	2d10      	cmp	r5, #16
 80095b4:	462c      	mov	r4, r5
 80095b6:	bfa8      	it	ge
 80095b8:	2410      	movge	r4, #16
 80095ba:	f7f6 ffa3 	bl	8000504 <__aeabi_ui2d>
 80095be:	2d09      	cmp	r5, #9
 80095c0:	4682      	mov	sl, r0
 80095c2:	468b      	mov	fp, r1
 80095c4:	dc13      	bgt.n	80095ee <_strtod_l+0x3d6>
 80095c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f43f ae5e 	beq.w	800928a <_strtod_l+0x72>
 80095ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d0:	dd78      	ble.n	80096c4 <_strtod_l+0x4ac>
 80095d2:	2b16      	cmp	r3, #22
 80095d4:	dc5f      	bgt.n	8009696 <_strtod_l+0x47e>
 80095d6:	4974      	ldr	r1, [pc, #464]	@ (80097a8 <_strtod_l+0x590>)
 80095d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095e0:	4652      	mov	r2, sl
 80095e2:	465b      	mov	r3, fp
 80095e4:	f7f7 f808 	bl	80005f8 <__aeabi_dmul>
 80095e8:	4682      	mov	sl, r0
 80095ea:	468b      	mov	fp, r1
 80095ec:	e64d      	b.n	800928a <_strtod_l+0x72>
 80095ee:	4b6e      	ldr	r3, [pc, #440]	@ (80097a8 <_strtod_l+0x590>)
 80095f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80095f8:	f7f6 fffe 	bl	80005f8 <__aeabi_dmul>
 80095fc:	4682      	mov	sl, r0
 80095fe:	9808      	ldr	r0, [sp, #32]
 8009600:	468b      	mov	fp, r1
 8009602:	f7f6 ff7f 	bl	8000504 <__aeabi_ui2d>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4650      	mov	r0, sl
 800960c:	4659      	mov	r1, fp
 800960e:	f7f6 fe3d 	bl	800028c <__adddf3>
 8009612:	2d0f      	cmp	r5, #15
 8009614:	4682      	mov	sl, r0
 8009616:	468b      	mov	fp, r1
 8009618:	ddd5      	ble.n	80095c6 <_strtod_l+0x3ae>
 800961a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800961c:	1b2c      	subs	r4, r5, r4
 800961e:	441c      	add	r4, r3
 8009620:	2c00      	cmp	r4, #0
 8009622:	f340 8096 	ble.w	8009752 <_strtod_l+0x53a>
 8009626:	f014 030f 	ands.w	r3, r4, #15
 800962a:	d00a      	beq.n	8009642 <_strtod_l+0x42a>
 800962c:	495e      	ldr	r1, [pc, #376]	@ (80097a8 <_strtod_l+0x590>)
 800962e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009632:	4652      	mov	r2, sl
 8009634:	465b      	mov	r3, fp
 8009636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800963a:	f7f6 ffdd 	bl	80005f8 <__aeabi_dmul>
 800963e:	4682      	mov	sl, r0
 8009640:	468b      	mov	fp, r1
 8009642:	f034 040f 	bics.w	r4, r4, #15
 8009646:	d073      	beq.n	8009730 <_strtod_l+0x518>
 8009648:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800964c:	dd48      	ble.n	80096e0 <_strtod_l+0x4c8>
 800964e:	2400      	movs	r4, #0
 8009650:	46a0      	mov	r8, r4
 8009652:	940a      	str	r4, [sp, #40]	@ 0x28
 8009654:	46a1      	mov	r9, r4
 8009656:	9a05      	ldr	r2, [sp, #20]
 8009658:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80097b0 <_strtod_l+0x598>
 800965c:	2322      	movs	r3, #34	@ 0x22
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	f04f 0a00 	mov.w	sl, #0
 8009664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009666:	2b00      	cmp	r3, #0
 8009668:	f43f ae0f 	beq.w	800928a <_strtod_l+0x72>
 800966c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800966e:	9805      	ldr	r0, [sp, #20]
 8009670:	f7ff f942 	bl	80088f8 <_Bfree>
 8009674:	9805      	ldr	r0, [sp, #20]
 8009676:	4649      	mov	r1, r9
 8009678:	f7ff f93e 	bl	80088f8 <_Bfree>
 800967c:	9805      	ldr	r0, [sp, #20]
 800967e:	4641      	mov	r1, r8
 8009680:	f7ff f93a 	bl	80088f8 <_Bfree>
 8009684:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009686:	9805      	ldr	r0, [sp, #20]
 8009688:	f7ff f936 	bl	80088f8 <_Bfree>
 800968c:	9805      	ldr	r0, [sp, #20]
 800968e:	4621      	mov	r1, r4
 8009690:	f7ff f932 	bl	80088f8 <_Bfree>
 8009694:	e5f9      	b.n	800928a <_strtod_l+0x72>
 8009696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009698:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800969c:	4293      	cmp	r3, r2
 800969e:	dbbc      	blt.n	800961a <_strtod_l+0x402>
 80096a0:	4c41      	ldr	r4, [pc, #260]	@ (80097a8 <_strtod_l+0x590>)
 80096a2:	f1c5 050f 	rsb	r5, r5, #15
 80096a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096aa:	4652      	mov	r2, sl
 80096ac:	465b      	mov	r3, fp
 80096ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096b2:	f7f6 ffa1 	bl	80005f8 <__aeabi_dmul>
 80096b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b8:	1b5d      	subs	r5, r3, r5
 80096ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096c2:	e78f      	b.n	80095e4 <_strtod_l+0x3cc>
 80096c4:	3316      	adds	r3, #22
 80096c6:	dba8      	blt.n	800961a <_strtod_l+0x402>
 80096c8:	4b37      	ldr	r3, [pc, #220]	@ (80097a8 <_strtod_l+0x590>)
 80096ca:	eba9 0808 	sub.w	r8, r9, r8
 80096ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80096d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80096d6:	4650      	mov	r0, sl
 80096d8:	4659      	mov	r1, fp
 80096da:	f7f7 f8b7 	bl	800084c <__aeabi_ddiv>
 80096de:	e783      	b.n	80095e8 <_strtod_l+0x3d0>
 80096e0:	4b32      	ldr	r3, [pc, #200]	@ (80097ac <_strtod_l+0x594>)
 80096e2:	9308      	str	r3, [sp, #32]
 80096e4:	2300      	movs	r3, #0
 80096e6:	1124      	asrs	r4, r4, #4
 80096e8:	4650      	mov	r0, sl
 80096ea:	4659      	mov	r1, fp
 80096ec:	461e      	mov	r6, r3
 80096ee:	2c01      	cmp	r4, #1
 80096f0:	dc21      	bgt.n	8009736 <_strtod_l+0x51e>
 80096f2:	b10b      	cbz	r3, 80096f8 <_strtod_l+0x4e0>
 80096f4:	4682      	mov	sl, r0
 80096f6:	468b      	mov	fp, r1
 80096f8:	492c      	ldr	r1, [pc, #176]	@ (80097ac <_strtod_l+0x594>)
 80096fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80096fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009702:	4652      	mov	r2, sl
 8009704:	465b      	mov	r3, fp
 8009706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800970a:	f7f6 ff75 	bl	80005f8 <__aeabi_dmul>
 800970e:	4b28      	ldr	r3, [pc, #160]	@ (80097b0 <_strtod_l+0x598>)
 8009710:	460a      	mov	r2, r1
 8009712:	400b      	ands	r3, r1
 8009714:	4927      	ldr	r1, [pc, #156]	@ (80097b4 <_strtod_l+0x59c>)
 8009716:	428b      	cmp	r3, r1
 8009718:	4682      	mov	sl, r0
 800971a:	d898      	bhi.n	800964e <_strtod_l+0x436>
 800971c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009720:	428b      	cmp	r3, r1
 8009722:	bf86      	itte	hi
 8009724:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80097b8 <_strtod_l+0x5a0>
 8009728:	f04f 3aff 	movhi.w	sl, #4294967295
 800972c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009730:	2300      	movs	r3, #0
 8009732:	9308      	str	r3, [sp, #32]
 8009734:	e07a      	b.n	800982c <_strtod_l+0x614>
 8009736:	07e2      	lsls	r2, r4, #31
 8009738:	d505      	bpl.n	8009746 <_strtod_l+0x52e>
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009740:	f7f6 ff5a 	bl	80005f8 <__aeabi_dmul>
 8009744:	2301      	movs	r3, #1
 8009746:	9a08      	ldr	r2, [sp, #32]
 8009748:	3208      	adds	r2, #8
 800974a:	3601      	adds	r6, #1
 800974c:	1064      	asrs	r4, r4, #1
 800974e:	9208      	str	r2, [sp, #32]
 8009750:	e7cd      	b.n	80096ee <_strtod_l+0x4d6>
 8009752:	d0ed      	beq.n	8009730 <_strtod_l+0x518>
 8009754:	4264      	negs	r4, r4
 8009756:	f014 020f 	ands.w	r2, r4, #15
 800975a:	d00a      	beq.n	8009772 <_strtod_l+0x55a>
 800975c:	4b12      	ldr	r3, [pc, #72]	@ (80097a8 <_strtod_l+0x590>)
 800975e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009762:	4650      	mov	r0, sl
 8009764:	4659      	mov	r1, fp
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	f7f7 f86f 	bl	800084c <__aeabi_ddiv>
 800976e:	4682      	mov	sl, r0
 8009770:	468b      	mov	fp, r1
 8009772:	1124      	asrs	r4, r4, #4
 8009774:	d0dc      	beq.n	8009730 <_strtod_l+0x518>
 8009776:	2c1f      	cmp	r4, #31
 8009778:	dd20      	ble.n	80097bc <_strtod_l+0x5a4>
 800977a:	2400      	movs	r4, #0
 800977c:	46a0      	mov	r8, r4
 800977e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009780:	46a1      	mov	r9, r4
 8009782:	9a05      	ldr	r2, [sp, #20]
 8009784:	2322      	movs	r3, #34	@ 0x22
 8009786:	f04f 0a00 	mov.w	sl, #0
 800978a:	f04f 0b00 	mov.w	fp, #0
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	e768      	b.n	8009664 <_strtod_l+0x44c>
 8009792:	bf00      	nop
 8009794:	0800b92d 	.word	0x0800b92d
 8009798:	0800bb44 	.word	0x0800bb44
 800979c:	0800b925 	.word	0x0800b925
 80097a0:	0800b95a 	.word	0x0800b95a
 80097a4:	0800bd08 	.word	0x0800bd08
 80097a8:	0800ba78 	.word	0x0800ba78
 80097ac:	0800ba50 	.word	0x0800ba50
 80097b0:	7ff00000 	.word	0x7ff00000
 80097b4:	7ca00000 	.word	0x7ca00000
 80097b8:	7fefffff 	.word	0x7fefffff
 80097bc:	f014 0310 	ands.w	r3, r4, #16
 80097c0:	bf18      	it	ne
 80097c2:	236a      	movne	r3, #106	@ 0x6a
 80097c4:	4ea9      	ldr	r6, [pc, #676]	@ (8009a6c <_strtod_l+0x854>)
 80097c6:	9308      	str	r3, [sp, #32]
 80097c8:	4650      	mov	r0, sl
 80097ca:	4659      	mov	r1, fp
 80097cc:	2300      	movs	r3, #0
 80097ce:	07e2      	lsls	r2, r4, #31
 80097d0:	d504      	bpl.n	80097dc <_strtod_l+0x5c4>
 80097d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097d6:	f7f6 ff0f 	bl	80005f8 <__aeabi_dmul>
 80097da:	2301      	movs	r3, #1
 80097dc:	1064      	asrs	r4, r4, #1
 80097de:	f106 0608 	add.w	r6, r6, #8
 80097e2:	d1f4      	bne.n	80097ce <_strtod_l+0x5b6>
 80097e4:	b10b      	cbz	r3, 80097ea <_strtod_l+0x5d2>
 80097e6:	4682      	mov	sl, r0
 80097e8:	468b      	mov	fp, r1
 80097ea:	9b08      	ldr	r3, [sp, #32]
 80097ec:	b1b3      	cbz	r3, 800981c <_strtod_l+0x604>
 80097ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80097f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	4659      	mov	r1, fp
 80097fa:	dd0f      	ble.n	800981c <_strtod_l+0x604>
 80097fc:	2b1f      	cmp	r3, #31
 80097fe:	dd55      	ble.n	80098ac <_strtod_l+0x694>
 8009800:	2b34      	cmp	r3, #52	@ 0x34
 8009802:	bfde      	ittt	le
 8009804:	f04f 33ff 	movle.w	r3, #4294967295
 8009808:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800980c:	4093      	lslle	r3, r2
 800980e:	f04f 0a00 	mov.w	sl, #0
 8009812:	bfcc      	ite	gt
 8009814:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009818:	ea03 0b01 	andle.w	fp, r3, r1
 800981c:	2200      	movs	r2, #0
 800981e:	2300      	movs	r3, #0
 8009820:	4650      	mov	r0, sl
 8009822:	4659      	mov	r1, fp
 8009824:	f7f7 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 8009828:	2800      	cmp	r0, #0
 800982a:	d1a6      	bne.n	800977a <_strtod_l+0x562>
 800982c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009832:	9805      	ldr	r0, [sp, #20]
 8009834:	462b      	mov	r3, r5
 8009836:	463a      	mov	r2, r7
 8009838:	f7ff f8c6 	bl	80089c8 <__s2b>
 800983c:	900a      	str	r0, [sp, #40]	@ 0x28
 800983e:	2800      	cmp	r0, #0
 8009840:	f43f af05 	beq.w	800964e <_strtod_l+0x436>
 8009844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009846:	2a00      	cmp	r2, #0
 8009848:	eba9 0308 	sub.w	r3, r9, r8
 800984c:	bfa8      	it	ge
 800984e:	2300      	movge	r3, #0
 8009850:	9312      	str	r3, [sp, #72]	@ 0x48
 8009852:	2400      	movs	r4, #0
 8009854:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009858:	9316      	str	r3, [sp, #88]	@ 0x58
 800985a:	46a0      	mov	r8, r4
 800985c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800985e:	9805      	ldr	r0, [sp, #20]
 8009860:	6859      	ldr	r1, [r3, #4]
 8009862:	f7ff f809 	bl	8008878 <_Balloc>
 8009866:	4681      	mov	r9, r0
 8009868:	2800      	cmp	r0, #0
 800986a:	f43f aef4 	beq.w	8009656 <_strtod_l+0x43e>
 800986e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009870:	691a      	ldr	r2, [r3, #16]
 8009872:	3202      	adds	r2, #2
 8009874:	f103 010c 	add.w	r1, r3, #12
 8009878:	0092      	lsls	r2, r2, #2
 800987a:	300c      	adds	r0, #12
 800987c:	f001 fac6 	bl	800ae0c <memcpy>
 8009880:	ec4b ab10 	vmov	d0, sl, fp
 8009884:	9805      	ldr	r0, [sp, #20]
 8009886:	aa1c      	add	r2, sp, #112	@ 0x70
 8009888:	a91b      	add	r1, sp, #108	@ 0x6c
 800988a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800988e:	f7ff fbd7 	bl	8009040 <__d2b>
 8009892:	901a      	str	r0, [sp, #104]	@ 0x68
 8009894:	2800      	cmp	r0, #0
 8009896:	f43f aede 	beq.w	8009656 <_strtod_l+0x43e>
 800989a:	9805      	ldr	r0, [sp, #20]
 800989c:	2101      	movs	r1, #1
 800989e:	f7ff f929 	bl	8008af4 <__i2b>
 80098a2:	4680      	mov	r8, r0
 80098a4:	b948      	cbnz	r0, 80098ba <_strtod_l+0x6a2>
 80098a6:	f04f 0800 	mov.w	r8, #0
 80098aa:	e6d4      	b.n	8009656 <_strtod_l+0x43e>
 80098ac:	f04f 32ff 	mov.w	r2, #4294967295
 80098b0:	fa02 f303 	lsl.w	r3, r2, r3
 80098b4:	ea03 0a0a 	and.w	sl, r3, sl
 80098b8:	e7b0      	b.n	800981c <_strtod_l+0x604>
 80098ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80098bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80098be:	2d00      	cmp	r5, #0
 80098c0:	bfab      	itete	ge
 80098c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80098c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80098c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80098c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80098ca:	bfac      	ite	ge
 80098cc:	18ef      	addge	r7, r5, r3
 80098ce:	1b5e      	sublt	r6, r3, r5
 80098d0:	9b08      	ldr	r3, [sp, #32]
 80098d2:	1aed      	subs	r5, r5, r3
 80098d4:	4415      	add	r5, r2
 80098d6:	4b66      	ldr	r3, [pc, #408]	@ (8009a70 <_strtod_l+0x858>)
 80098d8:	3d01      	subs	r5, #1
 80098da:	429d      	cmp	r5, r3
 80098dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80098e0:	da50      	bge.n	8009984 <_strtod_l+0x76c>
 80098e2:	1b5b      	subs	r3, r3, r5
 80098e4:	2b1f      	cmp	r3, #31
 80098e6:	eba2 0203 	sub.w	r2, r2, r3
 80098ea:	f04f 0101 	mov.w	r1, #1
 80098ee:	dc3d      	bgt.n	800996c <_strtod_l+0x754>
 80098f0:	fa01 f303 	lsl.w	r3, r1, r3
 80098f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098f6:	2300      	movs	r3, #0
 80098f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80098fa:	18bd      	adds	r5, r7, r2
 80098fc:	9b08      	ldr	r3, [sp, #32]
 80098fe:	42af      	cmp	r7, r5
 8009900:	4416      	add	r6, r2
 8009902:	441e      	add	r6, r3
 8009904:	463b      	mov	r3, r7
 8009906:	bfa8      	it	ge
 8009908:	462b      	movge	r3, r5
 800990a:	42b3      	cmp	r3, r6
 800990c:	bfa8      	it	ge
 800990e:	4633      	movge	r3, r6
 8009910:	2b00      	cmp	r3, #0
 8009912:	bfc2      	ittt	gt
 8009914:	1aed      	subgt	r5, r5, r3
 8009916:	1af6      	subgt	r6, r6, r3
 8009918:	1aff      	subgt	r7, r7, r3
 800991a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800991c:	2b00      	cmp	r3, #0
 800991e:	dd16      	ble.n	800994e <_strtod_l+0x736>
 8009920:	4641      	mov	r1, r8
 8009922:	9805      	ldr	r0, [sp, #20]
 8009924:	461a      	mov	r2, r3
 8009926:	f7ff f9a5 	bl	8008c74 <__pow5mult>
 800992a:	4680      	mov	r8, r0
 800992c:	2800      	cmp	r0, #0
 800992e:	d0ba      	beq.n	80098a6 <_strtod_l+0x68e>
 8009930:	4601      	mov	r1, r0
 8009932:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009934:	9805      	ldr	r0, [sp, #20]
 8009936:	f7ff f8f3 	bl	8008b20 <__multiply>
 800993a:	900e      	str	r0, [sp, #56]	@ 0x38
 800993c:	2800      	cmp	r0, #0
 800993e:	f43f ae8a 	beq.w	8009656 <_strtod_l+0x43e>
 8009942:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009944:	9805      	ldr	r0, [sp, #20]
 8009946:	f7fe ffd7 	bl	80088f8 <_Bfree>
 800994a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800994c:	931a      	str	r3, [sp, #104]	@ 0x68
 800994e:	2d00      	cmp	r5, #0
 8009950:	dc1d      	bgt.n	800998e <_strtod_l+0x776>
 8009952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009954:	2b00      	cmp	r3, #0
 8009956:	dd23      	ble.n	80099a0 <_strtod_l+0x788>
 8009958:	4649      	mov	r1, r9
 800995a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800995c:	9805      	ldr	r0, [sp, #20]
 800995e:	f7ff f989 	bl	8008c74 <__pow5mult>
 8009962:	4681      	mov	r9, r0
 8009964:	b9e0      	cbnz	r0, 80099a0 <_strtod_l+0x788>
 8009966:	f04f 0900 	mov.w	r9, #0
 800996a:	e674      	b.n	8009656 <_strtod_l+0x43e>
 800996c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009970:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009974:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009978:	35e2      	adds	r5, #226	@ 0xe2
 800997a:	fa01 f305 	lsl.w	r3, r1, r5
 800997e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009980:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009982:	e7ba      	b.n	80098fa <_strtod_l+0x6e2>
 8009984:	2300      	movs	r3, #0
 8009986:	9310      	str	r3, [sp, #64]	@ 0x40
 8009988:	2301      	movs	r3, #1
 800998a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800998c:	e7b5      	b.n	80098fa <_strtod_l+0x6e2>
 800998e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009990:	9805      	ldr	r0, [sp, #20]
 8009992:	462a      	mov	r2, r5
 8009994:	f7ff f9c8 	bl	8008d28 <__lshift>
 8009998:	901a      	str	r0, [sp, #104]	@ 0x68
 800999a:	2800      	cmp	r0, #0
 800999c:	d1d9      	bne.n	8009952 <_strtod_l+0x73a>
 800999e:	e65a      	b.n	8009656 <_strtod_l+0x43e>
 80099a0:	2e00      	cmp	r6, #0
 80099a2:	dd07      	ble.n	80099b4 <_strtod_l+0x79c>
 80099a4:	4649      	mov	r1, r9
 80099a6:	9805      	ldr	r0, [sp, #20]
 80099a8:	4632      	mov	r2, r6
 80099aa:	f7ff f9bd 	bl	8008d28 <__lshift>
 80099ae:	4681      	mov	r9, r0
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d0d8      	beq.n	8009966 <_strtod_l+0x74e>
 80099b4:	2f00      	cmp	r7, #0
 80099b6:	dd08      	ble.n	80099ca <_strtod_l+0x7b2>
 80099b8:	4641      	mov	r1, r8
 80099ba:	9805      	ldr	r0, [sp, #20]
 80099bc:	463a      	mov	r2, r7
 80099be:	f7ff f9b3 	bl	8008d28 <__lshift>
 80099c2:	4680      	mov	r8, r0
 80099c4:	2800      	cmp	r0, #0
 80099c6:	f43f ae46 	beq.w	8009656 <_strtod_l+0x43e>
 80099ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099cc:	9805      	ldr	r0, [sp, #20]
 80099ce:	464a      	mov	r2, r9
 80099d0:	f7ff fa32 	bl	8008e38 <__mdiff>
 80099d4:	4604      	mov	r4, r0
 80099d6:	2800      	cmp	r0, #0
 80099d8:	f43f ae3d 	beq.w	8009656 <_strtod_l+0x43e>
 80099dc:	68c3      	ldr	r3, [r0, #12]
 80099de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099e0:	2300      	movs	r3, #0
 80099e2:	60c3      	str	r3, [r0, #12]
 80099e4:	4641      	mov	r1, r8
 80099e6:	f7ff fa0b 	bl	8008e00 <__mcmp>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	da46      	bge.n	8009a7c <_strtod_l+0x864>
 80099ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099f0:	ea53 030a 	orrs.w	r3, r3, sl
 80099f4:	d16c      	bne.n	8009ad0 <_strtod_l+0x8b8>
 80099f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d168      	bne.n	8009ad0 <_strtod_l+0x8b8>
 80099fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a02:	0d1b      	lsrs	r3, r3, #20
 8009a04:	051b      	lsls	r3, r3, #20
 8009a06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a0a:	d961      	bls.n	8009ad0 <_strtod_l+0x8b8>
 8009a0c:	6963      	ldr	r3, [r4, #20]
 8009a0e:	b913      	cbnz	r3, 8009a16 <_strtod_l+0x7fe>
 8009a10:	6923      	ldr	r3, [r4, #16]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	dd5c      	ble.n	8009ad0 <_strtod_l+0x8b8>
 8009a16:	4621      	mov	r1, r4
 8009a18:	2201      	movs	r2, #1
 8009a1a:	9805      	ldr	r0, [sp, #20]
 8009a1c:	f7ff f984 	bl	8008d28 <__lshift>
 8009a20:	4641      	mov	r1, r8
 8009a22:	4604      	mov	r4, r0
 8009a24:	f7ff f9ec 	bl	8008e00 <__mcmp>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	dd51      	ble.n	8009ad0 <_strtod_l+0x8b8>
 8009a2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a30:	9a08      	ldr	r2, [sp, #32]
 8009a32:	0d1b      	lsrs	r3, r3, #20
 8009a34:	051b      	lsls	r3, r3, #20
 8009a36:	2a00      	cmp	r2, #0
 8009a38:	d06b      	beq.n	8009b12 <_strtod_l+0x8fa>
 8009a3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a3e:	d868      	bhi.n	8009b12 <_strtod_l+0x8fa>
 8009a40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009a44:	f67f ae9d 	bls.w	8009782 <_strtod_l+0x56a>
 8009a48:	4b0a      	ldr	r3, [pc, #40]	@ (8009a74 <_strtod_l+0x85c>)
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	4659      	mov	r1, fp
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f7f6 fdd2 	bl	80005f8 <__aeabi_dmul>
 8009a54:	4b08      	ldr	r3, [pc, #32]	@ (8009a78 <_strtod_l+0x860>)
 8009a56:	400b      	ands	r3, r1
 8009a58:	4682      	mov	sl, r0
 8009a5a:	468b      	mov	fp, r1
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f47f ae05 	bne.w	800966c <_strtod_l+0x454>
 8009a62:	9a05      	ldr	r2, [sp, #20]
 8009a64:	2322      	movs	r3, #34	@ 0x22
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	e600      	b.n	800966c <_strtod_l+0x454>
 8009a6a:	bf00      	nop
 8009a6c:	0800bb70 	.word	0x0800bb70
 8009a70:	fffffc02 	.word	0xfffffc02
 8009a74:	39500000 	.word	0x39500000
 8009a78:	7ff00000 	.word	0x7ff00000
 8009a7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009a80:	d165      	bne.n	8009b4e <_strtod_l+0x936>
 8009a82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a88:	b35a      	cbz	r2, 8009ae2 <_strtod_l+0x8ca>
 8009a8a:	4a9f      	ldr	r2, [pc, #636]	@ (8009d08 <_strtod_l+0xaf0>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d12b      	bne.n	8009ae8 <_strtod_l+0x8d0>
 8009a90:	9b08      	ldr	r3, [sp, #32]
 8009a92:	4651      	mov	r1, sl
 8009a94:	b303      	cbz	r3, 8009ad8 <_strtod_l+0x8c0>
 8009a96:	4b9d      	ldr	r3, [pc, #628]	@ (8009d0c <_strtod_l+0xaf4>)
 8009a98:	465a      	mov	r2, fp
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa4:	d81b      	bhi.n	8009ade <_strtod_l+0x8c6>
 8009aa6:	0d1b      	lsrs	r3, r3, #20
 8009aa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009aac:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab0:	4299      	cmp	r1, r3
 8009ab2:	d119      	bne.n	8009ae8 <_strtod_l+0x8d0>
 8009ab4:	4b96      	ldr	r3, [pc, #600]	@ (8009d10 <_strtod_l+0xaf8>)
 8009ab6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d102      	bne.n	8009ac2 <_strtod_l+0x8aa>
 8009abc:	3101      	adds	r1, #1
 8009abe:	f43f adca 	beq.w	8009656 <_strtod_l+0x43e>
 8009ac2:	4b92      	ldr	r3, [pc, #584]	@ (8009d0c <_strtod_l+0xaf4>)
 8009ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ac6:	401a      	ands	r2, r3
 8009ac8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009acc:	f04f 0a00 	mov.w	sl, #0
 8009ad0:	9b08      	ldr	r3, [sp, #32]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1b8      	bne.n	8009a48 <_strtod_l+0x830>
 8009ad6:	e5c9      	b.n	800966c <_strtod_l+0x454>
 8009ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8009adc:	e7e8      	b.n	8009ab0 <_strtod_l+0x898>
 8009ade:	4613      	mov	r3, r2
 8009ae0:	e7e6      	b.n	8009ab0 <_strtod_l+0x898>
 8009ae2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ae6:	d0a1      	beq.n	8009a2c <_strtod_l+0x814>
 8009ae8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009aea:	b1db      	cbz	r3, 8009b24 <_strtod_l+0x90c>
 8009aec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009aee:	4213      	tst	r3, r2
 8009af0:	d0ee      	beq.n	8009ad0 <_strtod_l+0x8b8>
 8009af2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009af4:	9a08      	ldr	r2, [sp, #32]
 8009af6:	4650      	mov	r0, sl
 8009af8:	4659      	mov	r1, fp
 8009afa:	b1bb      	cbz	r3, 8009b2c <_strtod_l+0x914>
 8009afc:	f7ff fb6e 	bl	80091dc <sulp>
 8009b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b04:	ec53 2b10 	vmov	r2, r3, d0
 8009b08:	f7f6 fbc0 	bl	800028c <__adddf3>
 8009b0c:	4682      	mov	sl, r0
 8009b0e:	468b      	mov	fp, r1
 8009b10:	e7de      	b.n	8009ad0 <_strtod_l+0x8b8>
 8009b12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009b16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b1e:	f04f 3aff 	mov.w	sl, #4294967295
 8009b22:	e7d5      	b.n	8009ad0 <_strtod_l+0x8b8>
 8009b24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b26:	ea13 0f0a 	tst.w	r3, sl
 8009b2a:	e7e1      	b.n	8009af0 <_strtod_l+0x8d8>
 8009b2c:	f7ff fb56 	bl	80091dc <sulp>
 8009b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b34:	ec53 2b10 	vmov	r2, r3, d0
 8009b38:	f7f6 fba6 	bl	8000288 <__aeabi_dsub>
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2300      	movs	r3, #0
 8009b40:	4682      	mov	sl, r0
 8009b42:	468b      	mov	fp, r1
 8009b44:	f7f6 ffc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d0c1      	beq.n	8009ad0 <_strtod_l+0x8b8>
 8009b4c:	e619      	b.n	8009782 <_strtod_l+0x56a>
 8009b4e:	4641      	mov	r1, r8
 8009b50:	4620      	mov	r0, r4
 8009b52:	f7ff facd 	bl	80090f0 <__ratio>
 8009b56:	ec57 6b10 	vmov	r6, r7, d0
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009b60:	4630      	mov	r0, r6
 8009b62:	4639      	mov	r1, r7
 8009b64:	f7f6 ffc4 	bl	8000af0 <__aeabi_dcmple>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d06f      	beq.n	8009c4c <_strtod_l+0xa34>
 8009b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d17a      	bne.n	8009c68 <_strtod_l+0xa50>
 8009b72:	f1ba 0f00 	cmp.w	sl, #0
 8009b76:	d158      	bne.n	8009c2a <_strtod_l+0xa12>
 8009b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d15a      	bne.n	8009c38 <_strtod_l+0xa20>
 8009b82:	4b64      	ldr	r3, [pc, #400]	@ (8009d14 <_strtod_l+0xafc>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	4630      	mov	r0, r6
 8009b88:	4639      	mov	r1, r7
 8009b8a:	f7f6 ffa7 	bl	8000adc <__aeabi_dcmplt>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d159      	bne.n	8009c46 <_strtod_l+0xa2e>
 8009b92:	4630      	mov	r0, r6
 8009b94:	4639      	mov	r1, r7
 8009b96:	4b60      	ldr	r3, [pc, #384]	@ (8009d18 <_strtod_l+0xb00>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f7f6 fd2d 	bl	80005f8 <__aeabi_dmul>
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	460f      	mov	r7, r1
 8009ba2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009ba6:	9606      	str	r6, [sp, #24]
 8009ba8:	9307      	str	r3, [sp, #28]
 8009baa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bae:	4d57      	ldr	r5, [pc, #348]	@ (8009d0c <_strtod_l+0xaf4>)
 8009bb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009bb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bb6:	401d      	ands	r5, r3
 8009bb8:	4b58      	ldr	r3, [pc, #352]	@ (8009d1c <_strtod_l+0xb04>)
 8009bba:	429d      	cmp	r5, r3
 8009bbc:	f040 80b2 	bne.w	8009d24 <_strtod_l+0xb0c>
 8009bc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009bc6:	ec4b ab10 	vmov	d0, sl, fp
 8009bca:	f7ff f9c9 	bl	8008f60 <__ulp>
 8009bce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bd2:	ec51 0b10 	vmov	r0, r1, d0
 8009bd6:	f7f6 fd0f 	bl	80005f8 <__aeabi_dmul>
 8009bda:	4652      	mov	r2, sl
 8009bdc:	465b      	mov	r3, fp
 8009bde:	f7f6 fb55 	bl	800028c <__adddf3>
 8009be2:	460b      	mov	r3, r1
 8009be4:	4949      	ldr	r1, [pc, #292]	@ (8009d0c <_strtod_l+0xaf4>)
 8009be6:	4a4e      	ldr	r2, [pc, #312]	@ (8009d20 <_strtod_l+0xb08>)
 8009be8:	4019      	ands	r1, r3
 8009bea:	4291      	cmp	r1, r2
 8009bec:	4682      	mov	sl, r0
 8009bee:	d942      	bls.n	8009c76 <_strtod_l+0xa5e>
 8009bf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bf2:	4b47      	ldr	r3, [pc, #284]	@ (8009d10 <_strtod_l+0xaf8>)
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d103      	bne.n	8009c00 <_strtod_l+0x9e8>
 8009bf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	f43f ad2b 	beq.w	8009656 <_strtod_l+0x43e>
 8009c00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009d10 <_strtod_l+0xaf8>
 8009c04:	f04f 3aff 	mov.w	sl, #4294967295
 8009c08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c0a:	9805      	ldr	r0, [sp, #20]
 8009c0c:	f7fe fe74 	bl	80088f8 <_Bfree>
 8009c10:	9805      	ldr	r0, [sp, #20]
 8009c12:	4649      	mov	r1, r9
 8009c14:	f7fe fe70 	bl	80088f8 <_Bfree>
 8009c18:	9805      	ldr	r0, [sp, #20]
 8009c1a:	4641      	mov	r1, r8
 8009c1c:	f7fe fe6c 	bl	80088f8 <_Bfree>
 8009c20:	9805      	ldr	r0, [sp, #20]
 8009c22:	4621      	mov	r1, r4
 8009c24:	f7fe fe68 	bl	80088f8 <_Bfree>
 8009c28:	e618      	b.n	800985c <_strtod_l+0x644>
 8009c2a:	f1ba 0f01 	cmp.w	sl, #1
 8009c2e:	d103      	bne.n	8009c38 <_strtod_l+0xa20>
 8009c30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f43f ada5 	beq.w	8009782 <_strtod_l+0x56a>
 8009c38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009ce8 <_strtod_l+0xad0>
 8009c3c:	4f35      	ldr	r7, [pc, #212]	@ (8009d14 <_strtod_l+0xafc>)
 8009c3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c42:	2600      	movs	r6, #0
 8009c44:	e7b1      	b.n	8009baa <_strtod_l+0x992>
 8009c46:	4f34      	ldr	r7, [pc, #208]	@ (8009d18 <_strtod_l+0xb00>)
 8009c48:	2600      	movs	r6, #0
 8009c4a:	e7aa      	b.n	8009ba2 <_strtod_l+0x98a>
 8009c4c:	4b32      	ldr	r3, [pc, #200]	@ (8009d18 <_strtod_l+0xb00>)
 8009c4e:	4630      	mov	r0, r6
 8009c50:	4639      	mov	r1, r7
 8009c52:	2200      	movs	r2, #0
 8009c54:	f7f6 fcd0 	bl	80005f8 <__aeabi_dmul>
 8009c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	460f      	mov	r7, r1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d09f      	beq.n	8009ba2 <_strtod_l+0x98a>
 8009c62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c66:	e7a0      	b.n	8009baa <_strtod_l+0x992>
 8009c68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009cf0 <_strtod_l+0xad8>
 8009c6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c70:	ec57 6b17 	vmov	r6, r7, d7
 8009c74:	e799      	b.n	8009baa <_strtod_l+0x992>
 8009c76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009c7a:	9b08      	ldr	r3, [sp, #32]
 8009c7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1c1      	bne.n	8009c08 <_strtod_l+0x9f0>
 8009c84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c88:	0d1b      	lsrs	r3, r3, #20
 8009c8a:	051b      	lsls	r3, r3, #20
 8009c8c:	429d      	cmp	r5, r3
 8009c8e:	d1bb      	bne.n	8009c08 <_strtod_l+0x9f0>
 8009c90:	4630      	mov	r0, r6
 8009c92:	4639      	mov	r1, r7
 8009c94:	f7f7 f810 	bl	8000cb8 <__aeabi_d2lz>
 8009c98:	f7f6 fc80 	bl	800059c <__aeabi_l2d>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	f7f6 faf0 	bl	8000288 <__aeabi_dsub>
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4602      	mov	r2, r0
 8009cac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009cb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cb6:	ea46 060a 	orr.w	r6, r6, sl
 8009cba:	431e      	orrs	r6, r3
 8009cbc:	d06f      	beq.n	8009d9e <_strtod_l+0xb86>
 8009cbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009cf8 <_strtod_l+0xae0>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	f7f6 ff0a 	bl	8000adc <__aeabi_dcmplt>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	f47f accf 	bne.w	800966c <_strtod_l+0x454>
 8009cce:	a30c      	add	r3, pc, #48	@ (adr r3, 8009d00 <_strtod_l+0xae8>)
 8009cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cd8:	f7f6 ff1e 	bl	8000b18 <__aeabi_dcmpgt>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d093      	beq.n	8009c08 <_strtod_l+0x9f0>
 8009ce0:	e4c4      	b.n	800966c <_strtod_l+0x454>
 8009ce2:	bf00      	nop
 8009ce4:	f3af 8000 	nop.w
 8009ce8:	00000000 	.word	0x00000000
 8009cec:	bff00000 	.word	0xbff00000
 8009cf0:	00000000 	.word	0x00000000
 8009cf4:	3ff00000 	.word	0x3ff00000
 8009cf8:	94a03595 	.word	0x94a03595
 8009cfc:	3fdfffff 	.word	0x3fdfffff
 8009d00:	35afe535 	.word	0x35afe535
 8009d04:	3fe00000 	.word	0x3fe00000
 8009d08:	000fffff 	.word	0x000fffff
 8009d0c:	7ff00000 	.word	0x7ff00000
 8009d10:	7fefffff 	.word	0x7fefffff
 8009d14:	3ff00000 	.word	0x3ff00000
 8009d18:	3fe00000 	.word	0x3fe00000
 8009d1c:	7fe00000 	.word	0x7fe00000
 8009d20:	7c9fffff 	.word	0x7c9fffff
 8009d24:	9b08      	ldr	r3, [sp, #32]
 8009d26:	b323      	cbz	r3, 8009d72 <_strtod_l+0xb5a>
 8009d28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009d2c:	d821      	bhi.n	8009d72 <_strtod_l+0xb5a>
 8009d2e:	a328      	add	r3, pc, #160	@ (adr r3, 8009dd0 <_strtod_l+0xbb8>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	4630      	mov	r0, r6
 8009d36:	4639      	mov	r1, r7
 8009d38:	f7f6 feda 	bl	8000af0 <__aeabi_dcmple>
 8009d3c:	b1a0      	cbz	r0, 8009d68 <_strtod_l+0xb50>
 8009d3e:	4639      	mov	r1, r7
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7f6 ff31 	bl	8000ba8 <__aeabi_d2uiz>
 8009d46:	2801      	cmp	r0, #1
 8009d48:	bf38      	it	cc
 8009d4a:	2001      	movcc	r0, #1
 8009d4c:	f7f6 fbda 	bl	8000504 <__aeabi_ui2d>
 8009d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	b9fb      	cbnz	r3, 8009d98 <_strtod_l+0xb80>
 8009d58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d5c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009d5e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009d64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009d6e:	1b5b      	subs	r3, r3, r5
 8009d70:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009d7a:	f7ff f8f1 	bl	8008f60 <__ulp>
 8009d7e:	4650      	mov	r0, sl
 8009d80:	ec53 2b10 	vmov	r2, r3, d0
 8009d84:	4659      	mov	r1, fp
 8009d86:	f7f6 fc37 	bl	80005f8 <__aeabi_dmul>
 8009d8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d8e:	f7f6 fa7d 	bl	800028c <__adddf3>
 8009d92:	4682      	mov	sl, r0
 8009d94:	468b      	mov	fp, r1
 8009d96:	e770      	b.n	8009c7a <_strtod_l+0xa62>
 8009d98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009d9c:	e7e0      	b.n	8009d60 <_strtod_l+0xb48>
 8009d9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009dd8 <_strtod_l+0xbc0>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	f7f6 fe9a 	bl	8000adc <__aeabi_dcmplt>
 8009da8:	e798      	b.n	8009cdc <_strtod_l+0xac4>
 8009daa:	2300      	movs	r3, #0
 8009dac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009db0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	f7ff ba6d 	b.w	8009292 <_strtod_l+0x7a>
 8009db8:	2a65      	cmp	r2, #101	@ 0x65
 8009dba:	f43f ab66 	beq.w	800948a <_strtod_l+0x272>
 8009dbe:	2a45      	cmp	r2, #69	@ 0x45
 8009dc0:	f43f ab63 	beq.w	800948a <_strtod_l+0x272>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	f7ff bb9e 	b.w	8009506 <_strtod_l+0x2ee>
 8009dca:	bf00      	nop
 8009dcc:	f3af 8000 	nop.w
 8009dd0:	ffc00000 	.word	0xffc00000
 8009dd4:	41dfffff 	.word	0x41dfffff
 8009dd8:	94a03595 	.word	0x94a03595
 8009ddc:	3fcfffff 	.word	0x3fcfffff

08009de0 <_strtod_r>:
 8009de0:	4b01      	ldr	r3, [pc, #4]	@ (8009de8 <_strtod_r+0x8>)
 8009de2:	f7ff ba19 	b.w	8009218 <_strtod_l>
 8009de6:	bf00      	nop
 8009de8:	20000c20 	.word	0x20000c20

08009dec <_strtol_l.constprop.0>:
 8009dec:	2b24      	cmp	r3, #36	@ 0x24
 8009dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df2:	4686      	mov	lr, r0
 8009df4:	4690      	mov	r8, r2
 8009df6:	d801      	bhi.n	8009dfc <_strtol_l.constprop.0+0x10>
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d106      	bne.n	8009e0a <_strtol_l.constprop.0+0x1e>
 8009dfc:	f7fd fdb2 	bl	8007964 <__errno>
 8009e00:	2316      	movs	r3, #22
 8009e02:	6003      	str	r3, [r0, #0]
 8009e04:	2000      	movs	r0, #0
 8009e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e0a:	4834      	ldr	r0, [pc, #208]	@ (8009edc <_strtol_l.constprop.0+0xf0>)
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	462a      	mov	r2, r5
 8009e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e14:	5d06      	ldrb	r6, [r0, r4]
 8009e16:	f016 0608 	ands.w	r6, r6, #8
 8009e1a:	d1f8      	bne.n	8009e0e <_strtol_l.constprop.0+0x22>
 8009e1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e1e:	d12d      	bne.n	8009e7c <_strtol_l.constprop.0+0x90>
 8009e20:	782c      	ldrb	r4, [r5, #0]
 8009e22:	2601      	movs	r6, #1
 8009e24:	1c95      	adds	r5, r2, #2
 8009e26:	f033 0210 	bics.w	r2, r3, #16
 8009e2a:	d109      	bne.n	8009e40 <_strtol_l.constprop.0+0x54>
 8009e2c:	2c30      	cmp	r4, #48	@ 0x30
 8009e2e:	d12a      	bne.n	8009e86 <_strtol_l.constprop.0+0x9a>
 8009e30:	782a      	ldrb	r2, [r5, #0]
 8009e32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e36:	2a58      	cmp	r2, #88	@ 0x58
 8009e38:	d125      	bne.n	8009e86 <_strtol_l.constprop.0+0x9a>
 8009e3a:	786c      	ldrb	r4, [r5, #1]
 8009e3c:	2310      	movs	r3, #16
 8009e3e:	3502      	adds	r5, #2
 8009e40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e48:	2200      	movs	r2, #0
 8009e4a:	fbbc f9f3 	udiv	r9, ip, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e58:	2f09      	cmp	r7, #9
 8009e5a:	d81b      	bhi.n	8009e94 <_strtol_l.constprop.0+0xa8>
 8009e5c:	463c      	mov	r4, r7
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	dd27      	ble.n	8009eb2 <_strtol_l.constprop.0+0xc6>
 8009e62:	1c57      	adds	r7, r2, #1
 8009e64:	d007      	beq.n	8009e76 <_strtol_l.constprop.0+0x8a>
 8009e66:	4581      	cmp	r9, r0
 8009e68:	d320      	bcc.n	8009eac <_strtol_l.constprop.0+0xc0>
 8009e6a:	d101      	bne.n	8009e70 <_strtol_l.constprop.0+0x84>
 8009e6c:	45a2      	cmp	sl, r4
 8009e6e:	db1d      	blt.n	8009eac <_strtol_l.constprop.0+0xc0>
 8009e70:	fb00 4003 	mla	r0, r0, r3, r4
 8009e74:	2201      	movs	r2, #1
 8009e76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e7a:	e7eb      	b.n	8009e54 <_strtol_l.constprop.0+0x68>
 8009e7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e7e:	bf04      	itt	eq
 8009e80:	782c      	ldrbeq	r4, [r5, #0]
 8009e82:	1c95      	addeq	r5, r2, #2
 8009e84:	e7cf      	b.n	8009e26 <_strtol_l.constprop.0+0x3a>
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1da      	bne.n	8009e40 <_strtol_l.constprop.0+0x54>
 8009e8a:	2c30      	cmp	r4, #48	@ 0x30
 8009e8c:	bf0c      	ite	eq
 8009e8e:	2308      	moveq	r3, #8
 8009e90:	230a      	movne	r3, #10
 8009e92:	e7d5      	b.n	8009e40 <_strtol_l.constprop.0+0x54>
 8009e94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e98:	2f19      	cmp	r7, #25
 8009e9a:	d801      	bhi.n	8009ea0 <_strtol_l.constprop.0+0xb4>
 8009e9c:	3c37      	subs	r4, #55	@ 0x37
 8009e9e:	e7de      	b.n	8009e5e <_strtol_l.constprop.0+0x72>
 8009ea0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ea4:	2f19      	cmp	r7, #25
 8009ea6:	d804      	bhi.n	8009eb2 <_strtol_l.constprop.0+0xc6>
 8009ea8:	3c57      	subs	r4, #87	@ 0x57
 8009eaa:	e7d8      	b.n	8009e5e <_strtol_l.constprop.0+0x72>
 8009eac:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb0:	e7e1      	b.n	8009e76 <_strtol_l.constprop.0+0x8a>
 8009eb2:	1c53      	adds	r3, r2, #1
 8009eb4:	d108      	bne.n	8009ec8 <_strtol_l.constprop.0+0xdc>
 8009eb6:	2322      	movs	r3, #34	@ 0x22
 8009eb8:	f8ce 3000 	str.w	r3, [lr]
 8009ebc:	4660      	mov	r0, ip
 8009ebe:	f1b8 0f00 	cmp.w	r8, #0
 8009ec2:	d0a0      	beq.n	8009e06 <_strtol_l.constprop.0+0x1a>
 8009ec4:	1e69      	subs	r1, r5, #1
 8009ec6:	e006      	b.n	8009ed6 <_strtol_l.constprop.0+0xea>
 8009ec8:	b106      	cbz	r6, 8009ecc <_strtol_l.constprop.0+0xe0>
 8009eca:	4240      	negs	r0, r0
 8009ecc:	f1b8 0f00 	cmp.w	r8, #0
 8009ed0:	d099      	beq.n	8009e06 <_strtol_l.constprop.0+0x1a>
 8009ed2:	2a00      	cmp	r2, #0
 8009ed4:	d1f6      	bne.n	8009ec4 <_strtol_l.constprop.0+0xd8>
 8009ed6:	f8c8 1000 	str.w	r1, [r8]
 8009eda:	e794      	b.n	8009e06 <_strtol_l.constprop.0+0x1a>
 8009edc:	0800bb99 	.word	0x0800bb99

08009ee0 <_strtol_r>:
 8009ee0:	f7ff bf84 	b.w	8009dec <_strtol_l.constprop.0>

08009ee4 <__ssputs_r>:
 8009ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	688e      	ldr	r6, [r1, #8]
 8009eea:	461f      	mov	r7, r3
 8009eec:	42be      	cmp	r6, r7
 8009eee:	680b      	ldr	r3, [r1, #0]
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	4690      	mov	r8, r2
 8009ef6:	d82d      	bhi.n	8009f54 <__ssputs_r+0x70>
 8009ef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009efc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f00:	d026      	beq.n	8009f50 <__ssputs_r+0x6c>
 8009f02:	6965      	ldr	r5, [r4, #20]
 8009f04:	6909      	ldr	r1, [r1, #16]
 8009f06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f0a:	eba3 0901 	sub.w	r9, r3, r1
 8009f0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f12:	1c7b      	adds	r3, r7, #1
 8009f14:	444b      	add	r3, r9
 8009f16:	106d      	asrs	r5, r5, #1
 8009f18:	429d      	cmp	r5, r3
 8009f1a:	bf38      	it	cc
 8009f1c:	461d      	movcc	r5, r3
 8009f1e:	0553      	lsls	r3, r2, #21
 8009f20:	d527      	bpl.n	8009f72 <__ssputs_r+0x8e>
 8009f22:	4629      	mov	r1, r5
 8009f24:	f7fe fc1c 	bl	8008760 <_malloc_r>
 8009f28:	4606      	mov	r6, r0
 8009f2a:	b360      	cbz	r0, 8009f86 <__ssputs_r+0xa2>
 8009f2c:	6921      	ldr	r1, [r4, #16]
 8009f2e:	464a      	mov	r2, r9
 8009f30:	f000 ff6c 	bl	800ae0c <memcpy>
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f3e:	81a3      	strh	r3, [r4, #12]
 8009f40:	6126      	str	r6, [r4, #16]
 8009f42:	6165      	str	r5, [r4, #20]
 8009f44:	444e      	add	r6, r9
 8009f46:	eba5 0509 	sub.w	r5, r5, r9
 8009f4a:	6026      	str	r6, [r4, #0]
 8009f4c:	60a5      	str	r5, [r4, #8]
 8009f4e:	463e      	mov	r6, r7
 8009f50:	42be      	cmp	r6, r7
 8009f52:	d900      	bls.n	8009f56 <__ssputs_r+0x72>
 8009f54:	463e      	mov	r6, r7
 8009f56:	6820      	ldr	r0, [r4, #0]
 8009f58:	4632      	mov	r2, r6
 8009f5a:	4641      	mov	r1, r8
 8009f5c:	f000 fef7 	bl	800ad4e <memmove>
 8009f60:	68a3      	ldr	r3, [r4, #8]
 8009f62:	1b9b      	subs	r3, r3, r6
 8009f64:	60a3      	str	r3, [r4, #8]
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	4433      	add	r3, r6
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f72:	462a      	mov	r2, r5
 8009f74:	f001 fadd 	bl	800b532 <_realloc_r>
 8009f78:	4606      	mov	r6, r0
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d1e0      	bne.n	8009f40 <__ssputs_r+0x5c>
 8009f7e:	6921      	ldr	r1, [r4, #16]
 8009f80:	4650      	mov	r0, sl
 8009f82:	f7fe fb79 	bl	8008678 <_free_r>
 8009f86:	230c      	movs	r3, #12
 8009f88:	f8ca 3000 	str.w	r3, [sl]
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f92:	81a3      	strh	r3, [r4, #12]
 8009f94:	f04f 30ff 	mov.w	r0, #4294967295
 8009f98:	e7e9      	b.n	8009f6e <__ssputs_r+0x8a>
	...

08009f9c <_svfiprintf_r>:
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	4698      	mov	r8, r3
 8009fa2:	898b      	ldrh	r3, [r1, #12]
 8009fa4:	061b      	lsls	r3, r3, #24
 8009fa6:	b09d      	sub	sp, #116	@ 0x74
 8009fa8:	4607      	mov	r7, r0
 8009faa:	460d      	mov	r5, r1
 8009fac:	4614      	mov	r4, r2
 8009fae:	d510      	bpl.n	8009fd2 <_svfiprintf_r+0x36>
 8009fb0:	690b      	ldr	r3, [r1, #16]
 8009fb2:	b973      	cbnz	r3, 8009fd2 <_svfiprintf_r+0x36>
 8009fb4:	2140      	movs	r1, #64	@ 0x40
 8009fb6:	f7fe fbd3 	bl	8008760 <_malloc_r>
 8009fba:	6028      	str	r0, [r5, #0]
 8009fbc:	6128      	str	r0, [r5, #16]
 8009fbe:	b930      	cbnz	r0, 8009fce <_svfiprintf_r+0x32>
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	b01d      	add	sp, #116	@ 0x74
 8009fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fce:	2340      	movs	r3, #64	@ 0x40
 8009fd0:	616b      	str	r3, [r5, #20]
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fd6:	2320      	movs	r3, #32
 8009fd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fe0:	2330      	movs	r3, #48	@ 0x30
 8009fe2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a180 <_svfiprintf_r+0x1e4>
 8009fe6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fea:	f04f 0901 	mov.w	r9, #1
 8009fee:	4623      	mov	r3, r4
 8009ff0:	469a      	mov	sl, r3
 8009ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ff6:	b10a      	cbz	r2, 8009ffc <_svfiprintf_r+0x60>
 8009ff8:	2a25      	cmp	r2, #37	@ 0x25
 8009ffa:	d1f9      	bne.n	8009ff0 <_svfiprintf_r+0x54>
 8009ffc:	ebba 0b04 	subs.w	fp, sl, r4
 800a000:	d00b      	beq.n	800a01a <_svfiprintf_r+0x7e>
 800a002:	465b      	mov	r3, fp
 800a004:	4622      	mov	r2, r4
 800a006:	4629      	mov	r1, r5
 800a008:	4638      	mov	r0, r7
 800a00a:	f7ff ff6b 	bl	8009ee4 <__ssputs_r>
 800a00e:	3001      	adds	r0, #1
 800a010:	f000 80a7 	beq.w	800a162 <_svfiprintf_r+0x1c6>
 800a014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a016:	445a      	add	r2, fp
 800a018:	9209      	str	r2, [sp, #36]	@ 0x24
 800a01a:	f89a 3000 	ldrb.w	r3, [sl]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 809f 	beq.w	800a162 <_svfiprintf_r+0x1c6>
 800a024:	2300      	movs	r3, #0
 800a026:	f04f 32ff 	mov.w	r2, #4294967295
 800a02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a02e:	f10a 0a01 	add.w	sl, sl, #1
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	9307      	str	r3, [sp, #28]
 800a036:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a03a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a03c:	4654      	mov	r4, sl
 800a03e:	2205      	movs	r2, #5
 800a040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a044:	484e      	ldr	r0, [pc, #312]	@ (800a180 <_svfiprintf_r+0x1e4>)
 800a046:	f7f6 f8c3 	bl	80001d0 <memchr>
 800a04a:	9a04      	ldr	r2, [sp, #16]
 800a04c:	b9d8      	cbnz	r0, 800a086 <_svfiprintf_r+0xea>
 800a04e:	06d0      	lsls	r0, r2, #27
 800a050:	bf44      	itt	mi
 800a052:	2320      	movmi	r3, #32
 800a054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a058:	0711      	lsls	r1, r2, #28
 800a05a:	bf44      	itt	mi
 800a05c:	232b      	movmi	r3, #43	@ 0x2b
 800a05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a062:	f89a 3000 	ldrb.w	r3, [sl]
 800a066:	2b2a      	cmp	r3, #42	@ 0x2a
 800a068:	d015      	beq.n	800a096 <_svfiprintf_r+0xfa>
 800a06a:	9a07      	ldr	r2, [sp, #28]
 800a06c:	4654      	mov	r4, sl
 800a06e:	2000      	movs	r0, #0
 800a070:	f04f 0c0a 	mov.w	ip, #10
 800a074:	4621      	mov	r1, r4
 800a076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a07a:	3b30      	subs	r3, #48	@ 0x30
 800a07c:	2b09      	cmp	r3, #9
 800a07e:	d94b      	bls.n	800a118 <_svfiprintf_r+0x17c>
 800a080:	b1b0      	cbz	r0, 800a0b0 <_svfiprintf_r+0x114>
 800a082:	9207      	str	r2, [sp, #28]
 800a084:	e014      	b.n	800a0b0 <_svfiprintf_r+0x114>
 800a086:	eba0 0308 	sub.w	r3, r0, r8
 800a08a:	fa09 f303 	lsl.w	r3, r9, r3
 800a08e:	4313      	orrs	r3, r2
 800a090:	9304      	str	r3, [sp, #16]
 800a092:	46a2      	mov	sl, r4
 800a094:	e7d2      	b.n	800a03c <_svfiprintf_r+0xa0>
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	1d19      	adds	r1, r3, #4
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	9103      	str	r1, [sp, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	bfbb      	ittet	lt
 800a0a2:	425b      	neglt	r3, r3
 800a0a4:	f042 0202 	orrlt.w	r2, r2, #2
 800a0a8:	9307      	strge	r3, [sp, #28]
 800a0aa:	9307      	strlt	r3, [sp, #28]
 800a0ac:	bfb8      	it	lt
 800a0ae:	9204      	strlt	r2, [sp, #16]
 800a0b0:	7823      	ldrb	r3, [r4, #0]
 800a0b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0b4:	d10a      	bne.n	800a0cc <_svfiprintf_r+0x130>
 800a0b6:	7863      	ldrb	r3, [r4, #1]
 800a0b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0ba:	d132      	bne.n	800a122 <_svfiprintf_r+0x186>
 800a0bc:	9b03      	ldr	r3, [sp, #12]
 800a0be:	1d1a      	adds	r2, r3, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	9203      	str	r2, [sp, #12]
 800a0c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0c8:	3402      	adds	r4, #2
 800a0ca:	9305      	str	r3, [sp, #20]
 800a0cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a190 <_svfiprintf_r+0x1f4>
 800a0d0:	7821      	ldrb	r1, [r4, #0]
 800a0d2:	2203      	movs	r2, #3
 800a0d4:	4650      	mov	r0, sl
 800a0d6:	f7f6 f87b 	bl	80001d0 <memchr>
 800a0da:	b138      	cbz	r0, 800a0ec <_svfiprintf_r+0x150>
 800a0dc:	9b04      	ldr	r3, [sp, #16]
 800a0de:	eba0 000a 	sub.w	r0, r0, sl
 800a0e2:	2240      	movs	r2, #64	@ 0x40
 800a0e4:	4082      	lsls	r2, r0
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	3401      	adds	r4, #1
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0f0:	4824      	ldr	r0, [pc, #144]	@ (800a184 <_svfiprintf_r+0x1e8>)
 800a0f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0f6:	2206      	movs	r2, #6
 800a0f8:	f7f6 f86a 	bl	80001d0 <memchr>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d036      	beq.n	800a16e <_svfiprintf_r+0x1d2>
 800a100:	4b21      	ldr	r3, [pc, #132]	@ (800a188 <_svfiprintf_r+0x1ec>)
 800a102:	bb1b      	cbnz	r3, 800a14c <_svfiprintf_r+0x1b0>
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	3307      	adds	r3, #7
 800a108:	f023 0307 	bic.w	r3, r3, #7
 800a10c:	3308      	adds	r3, #8
 800a10e:	9303      	str	r3, [sp, #12]
 800a110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a112:	4433      	add	r3, r6
 800a114:	9309      	str	r3, [sp, #36]	@ 0x24
 800a116:	e76a      	b.n	8009fee <_svfiprintf_r+0x52>
 800a118:	fb0c 3202 	mla	r2, ip, r2, r3
 800a11c:	460c      	mov	r4, r1
 800a11e:	2001      	movs	r0, #1
 800a120:	e7a8      	b.n	800a074 <_svfiprintf_r+0xd8>
 800a122:	2300      	movs	r3, #0
 800a124:	3401      	adds	r4, #1
 800a126:	9305      	str	r3, [sp, #20]
 800a128:	4619      	mov	r1, r3
 800a12a:	f04f 0c0a 	mov.w	ip, #10
 800a12e:	4620      	mov	r0, r4
 800a130:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a134:	3a30      	subs	r2, #48	@ 0x30
 800a136:	2a09      	cmp	r2, #9
 800a138:	d903      	bls.n	800a142 <_svfiprintf_r+0x1a6>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d0c6      	beq.n	800a0cc <_svfiprintf_r+0x130>
 800a13e:	9105      	str	r1, [sp, #20]
 800a140:	e7c4      	b.n	800a0cc <_svfiprintf_r+0x130>
 800a142:	fb0c 2101 	mla	r1, ip, r1, r2
 800a146:	4604      	mov	r4, r0
 800a148:	2301      	movs	r3, #1
 800a14a:	e7f0      	b.n	800a12e <_svfiprintf_r+0x192>
 800a14c:	ab03      	add	r3, sp, #12
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	462a      	mov	r2, r5
 800a152:	4b0e      	ldr	r3, [pc, #56]	@ (800a18c <_svfiprintf_r+0x1f0>)
 800a154:	a904      	add	r1, sp, #16
 800a156:	4638      	mov	r0, r7
 800a158:	f7fc fb5a 	bl	8006810 <_printf_float>
 800a15c:	1c42      	adds	r2, r0, #1
 800a15e:	4606      	mov	r6, r0
 800a160:	d1d6      	bne.n	800a110 <_svfiprintf_r+0x174>
 800a162:	89ab      	ldrh	r3, [r5, #12]
 800a164:	065b      	lsls	r3, r3, #25
 800a166:	f53f af2d 	bmi.w	8009fc4 <_svfiprintf_r+0x28>
 800a16a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a16c:	e72c      	b.n	8009fc8 <_svfiprintf_r+0x2c>
 800a16e:	ab03      	add	r3, sp, #12
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	462a      	mov	r2, r5
 800a174:	4b05      	ldr	r3, [pc, #20]	@ (800a18c <_svfiprintf_r+0x1f0>)
 800a176:	a904      	add	r1, sp, #16
 800a178:	4638      	mov	r0, r7
 800a17a:	f7fc fde1 	bl	8006d40 <_printf_i>
 800a17e:	e7ed      	b.n	800a15c <_svfiprintf_r+0x1c0>
 800a180:	0800bc99 	.word	0x0800bc99
 800a184:	0800bca3 	.word	0x0800bca3
 800a188:	08006811 	.word	0x08006811
 800a18c:	08009ee5 	.word	0x08009ee5
 800a190:	0800bc9f 	.word	0x0800bc9f

0800a194 <_sungetc_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	1c4b      	adds	r3, r1, #1
 800a198:	4614      	mov	r4, r2
 800a19a:	d103      	bne.n	800a1a4 <_sungetc_r+0x10>
 800a19c:	f04f 35ff 	mov.w	r5, #4294967295
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	bd38      	pop	{r3, r4, r5, pc}
 800a1a4:	8993      	ldrh	r3, [r2, #12]
 800a1a6:	f023 0320 	bic.w	r3, r3, #32
 800a1aa:	8193      	strh	r3, [r2, #12]
 800a1ac:	6853      	ldr	r3, [r2, #4]
 800a1ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a1b0:	b2cd      	uxtb	r5, r1
 800a1b2:	b18a      	cbz	r2, 800a1d8 <_sungetc_r+0x44>
 800a1b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	dd08      	ble.n	800a1cc <_sungetc_r+0x38>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	1e5a      	subs	r2, r3, #1
 800a1be:	6022      	str	r2, [r4, #0]
 800a1c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a1c4:	6863      	ldr	r3, [r4, #4]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	6063      	str	r3, [r4, #4]
 800a1ca:	e7e9      	b.n	800a1a0 <_sungetc_r+0xc>
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	f000 fd84 	bl	800acda <__submore>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d0f1      	beq.n	800a1ba <_sungetc_r+0x26>
 800a1d6:	e7e1      	b.n	800a19c <_sungetc_r+0x8>
 800a1d8:	6921      	ldr	r1, [r4, #16]
 800a1da:	6822      	ldr	r2, [r4, #0]
 800a1dc:	b141      	cbz	r1, 800a1f0 <_sungetc_r+0x5c>
 800a1de:	4291      	cmp	r1, r2
 800a1e0:	d206      	bcs.n	800a1f0 <_sungetc_r+0x5c>
 800a1e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a1e6:	42a9      	cmp	r1, r5
 800a1e8:	d102      	bne.n	800a1f0 <_sungetc_r+0x5c>
 800a1ea:	3a01      	subs	r2, #1
 800a1ec:	6022      	str	r2, [r4, #0]
 800a1ee:	e7ea      	b.n	800a1c6 <_sungetc_r+0x32>
 800a1f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a1f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a1fe:	4623      	mov	r3, r4
 800a200:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	2301      	movs	r3, #1
 800a208:	e7de      	b.n	800a1c8 <_sungetc_r+0x34>

0800a20a <__ssrefill_r>:
 800a20a:	b510      	push	{r4, lr}
 800a20c:	460c      	mov	r4, r1
 800a20e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a210:	b169      	cbz	r1, 800a22e <__ssrefill_r+0x24>
 800a212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a216:	4299      	cmp	r1, r3
 800a218:	d001      	beq.n	800a21e <__ssrefill_r+0x14>
 800a21a:	f7fe fa2d 	bl	8008678 <_free_r>
 800a21e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a220:	6063      	str	r3, [r4, #4]
 800a222:	2000      	movs	r0, #0
 800a224:	6360      	str	r0, [r4, #52]	@ 0x34
 800a226:	b113      	cbz	r3, 800a22e <__ssrefill_r+0x24>
 800a228:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a22a:	6023      	str	r3, [r4, #0]
 800a22c:	bd10      	pop	{r4, pc}
 800a22e:	6923      	ldr	r3, [r4, #16]
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	2300      	movs	r3, #0
 800a234:	6063      	str	r3, [r4, #4]
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	f043 0320 	orr.w	r3, r3, #32
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	f04f 30ff 	mov.w	r0, #4294967295
 800a242:	e7f3      	b.n	800a22c <__ssrefill_r+0x22>

0800a244 <__ssvfiscanf_r>:
 800a244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a248:	460c      	mov	r4, r1
 800a24a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a24e:	2100      	movs	r1, #0
 800a250:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a254:	49a5      	ldr	r1, [pc, #660]	@ (800a4ec <__ssvfiscanf_r+0x2a8>)
 800a256:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a258:	f10d 0804 	add.w	r8, sp, #4
 800a25c:	49a4      	ldr	r1, [pc, #656]	@ (800a4f0 <__ssvfiscanf_r+0x2ac>)
 800a25e:	4fa5      	ldr	r7, [pc, #660]	@ (800a4f4 <__ssvfiscanf_r+0x2b0>)
 800a260:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a264:	4606      	mov	r6, r0
 800a266:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	7813      	ldrb	r3, [r2, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 8158 	beq.w	800a522 <__ssvfiscanf_r+0x2de>
 800a272:	5cf9      	ldrb	r1, [r7, r3]
 800a274:	f011 0108 	ands.w	r1, r1, #8
 800a278:	f102 0501 	add.w	r5, r2, #1
 800a27c:	d019      	beq.n	800a2b2 <__ssvfiscanf_r+0x6e>
 800a27e:	6863      	ldr	r3, [r4, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	dd0f      	ble.n	800a2a4 <__ssvfiscanf_r+0x60>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	781a      	ldrb	r2, [r3, #0]
 800a288:	5cba      	ldrb	r2, [r7, r2]
 800a28a:	0712      	lsls	r2, r2, #28
 800a28c:	d401      	bmi.n	800a292 <__ssvfiscanf_r+0x4e>
 800a28e:	462a      	mov	r2, r5
 800a290:	e7eb      	b.n	800a26a <__ssvfiscanf_r+0x26>
 800a292:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a294:	3201      	adds	r2, #1
 800a296:	9245      	str	r2, [sp, #276]	@ 0x114
 800a298:	6862      	ldr	r2, [r4, #4]
 800a29a:	3301      	adds	r3, #1
 800a29c:	3a01      	subs	r2, #1
 800a29e:	6062      	str	r2, [r4, #4]
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	e7ec      	b.n	800a27e <__ssvfiscanf_r+0x3a>
 800a2a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	4798      	blx	r3
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d0e9      	beq.n	800a284 <__ssvfiscanf_r+0x40>
 800a2b0:	e7ed      	b.n	800a28e <__ssvfiscanf_r+0x4a>
 800a2b2:	2b25      	cmp	r3, #37	@ 0x25
 800a2b4:	d012      	beq.n	800a2dc <__ssvfiscanf_r+0x98>
 800a2b6:	4699      	mov	r9, r3
 800a2b8:	6863      	ldr	r3, [r4, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f340 8093 	ble.w	800a3e6 <__ssvfiscanf_r+0x1a2>
 800a2c0:	6822      	ldr	r2, [r4, #0]
 800a2c2:	7813      	ldrb	r3, [r2, #0]
 800a2c4:	454b      	cmp	r3, r9
 800a2c6:	f040 812c 	bne.w	800a522 <__ssvfiscanf_r+0x2de>
 800a2ca:	6863      	ldr	r3, [r4, #4]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	6063      	str	r3, [r4, #4]
 800a2d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a2d2:	3201      	adds	r2, #1
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	6022      	str	r2, [r4, #0]
 800a2d8:	9345      	str	r3, [sp, #276]	@ 0x114
 800a2da:	e7d8      	b.n	800a28e <__ssvfiscanf_r+0x4a>
 800a2dc:	9141      	str	r1, [sp, #260]	@ 0x104
 800a2de:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a2e0:	7853      	ldrb	r3, [r2, #1]
 800a2e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2e4:	bf02      	ittt	eq
 800a2e6:	2310      	moveq	r3, #16
 800a2e8:	1c95      	addeq	r5, r2, #2
 800a2ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a2ec:	220a      	movs	r2, #10
 800a2ee:	46a9      	mov	r9, r5
 800a2f0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a2f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a2f8:	2b09      	cmp	r3, #9
 800a2fa:	d91e      	bls.n	800a33a <__ssvfiscanf_r+0xf6>
 800a2fc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a4f8 <__ssvfiscanf_r+0x2b4>
 800a300:	2203      	movs	r2, #3
 800a302:	4650      	mov	r0, sl
 800a304:	f7f5 ff64 	bl	80001d0 <memchr>
 800a308:	b138      	cbz	r0, 800a31a <__ssvfiscanf_r+0xd6>
 800a30a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a30c:	eba0 000a 	sub.w	r0, r0, sl
 800a310:	2301      	movs	r3, #1
 800a312:	4083      	lsls	r3, r0
 800a314:	4313      	orrs	r3, r2
 800a316:	9341      	str	r3, [sp, #260]	@ 0x104
 800a318:	464d      	mov	r5, r9
 800a31a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a31e:	2b78      	cmp	r3, #120	@ 0x78
 800a320:	d806      	bhi.n	800a330 <__ssvfiscanf_r+0xec>
 800a322:	2b57      	cmp	r3, #87	@ 0x57
 800a324:	d810      	bhi.n	800a348 <__ssvfiscanf_r+0x104>
 800a326:	2b25      	cmp	r3, #37	@ 0x25
 800a328:	d0c5      	beq.n	800a2b6 <__ssvfiscanf_r+0x72>
 800a32a:	d857      	bhi.n	800a3dc <__ssvfiscanf_r+0x198>
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d065      	beq.n	800a3fc <__ssvfiscanf_r+0x1b8>
 800a330:	2303      	movs	r3, #3
 800a332:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a334:	230a      	movs	r3, #10
 800a336:	9342      	str	r3, [sp, #264]	@ 0x108
 800a338:	e078      	b.n	800a42c <__ssvfiscanf_r+0x1e8>
 800a33a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a33c:	fb02 1103 	mla	r1, r2, r3, r1
 800a340:	3930      	subs	r1, #48	@ 0x30
 800a342:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a344:	464d      	mov	r5, r9
 800a346:	e7d2      	b.n	800a2ee <__ssvfiscanf_r+0xaa>
 800a348:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a34c:	2a20      	cmp	r2, #32
 800a34e:	d8ef      	bhi.n	800a330 <__ssvfiscanf_r+0xec>
 800a350:	a101      	add	r1, pc, #4	@ (adr r1, 800a358 <__ssvfiscanf_r+0x114>)
 800a352:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a356:	bf00      	nop
 800a358:	0800a40b 	.word	0x0800a40b
 800a35c:	0800a331 	.word	0x0800a331
 800a360:	0800a331 	.word	0x0800a331
 800a364:	0800a465 	.word	0x0800a465
 800a368:	0800a331 	.word	0x0800a331
 800a36c:	0800a331 	.word	0x0800a331
 800a370:	0800a331 	.word	0x0800a331
 800a374:	0800a331 	.word	0x0800a331
 800a378:	0800a331 	.word	0x0800a331
 800a37c:	0800a331 	.word	0x0800a331
 800a380:	0800a331 	.word	0x0800a331
 800a384:	0800a47b 	.word	0x0800a47b
 800a388:	0800a461 	.word	0x0800a461
 800a38c:	0800a3e3 	.word	0x0800a3e3
 800a390:	0800a3e3 	.word	0x0800a3e3
 800a394:	0800a3e3 	.word	0x0800a3e3
 800a398:	0800a331 	.word	0x0800a331
 800a39c:	0800a41d 	.word	0x0800a41d
 800a3a0:	0800a331 	.word	0x0800a331
 800a3a4:	0800a331 	.word	0x0800a331
 800a3a8:	0800a331 	.word	0x0800a331
 800a3ac:	0800a331 	.word	0x0800a331
 800a3b0:	0800a48b 	.word	0x0800a48b
 800a3b4:	0800a425 	.word	0x0800a425
 800a3b8:	0800a403 	.word	0x0800a403
 800a3bc:	0800a331 	.word	0x0800a331
 800a3c0:	0800a331 	.word	0x0800a331
 800a3c4:	0800a487 	.word	0x0800a487
 800a3c8:	0800a331 	.word	0x0800a331
 800a3cc:	0800a461 	.word	0x0800a461
 800a3d0:	0800a331 	.word	0x0800a331
 800a3d4:	0800a331 	.word	0x0800a331
 800a3d8:	0800a40b 	.word	0x0800a40b
 800a3dc:	3b45      	subs	r3, #69	@ 0x45
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d8a6      	bhi.n	800a330 <__ssvfiscanf_r+0xec>
 800a3e2:	2305      	movs	r3, #5
 800a3e4:	e021      	b.n	800a42a <__ssvfiscanf_r+0x1e6>
 800a3e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	4798      	blx	r3
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	f43f af66 	beq.w	800a2c0 <__ssvfiscanf_r+0x7c>
 800a3f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f040 808b 	bne.w	800a512 <__ssvfiscanf_r+0x2ce>
 800a3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a400:	e08b      	b.n	800a51a <__ssvfiscanf_r+0x2d6>
 800a402:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a404:	f042 0220 	orr.w	r2, r2, #32
 800a408:	9241      	str	r2, [sp, #260]	@ 0x104
 800a40a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a40c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a410:	9241      	str	r2, [sp, #260]	@ 0x104
 800a412:	2210      	movs	r2, #16
 800a414:	2b6e      	cmp	r3, #110	@ 0x6e
 800a416:	9242      	str	r2, [sp, #264]	@ 0x108
 800a418:	d902      	bls.n	800a420 <__ssvfiscanf_r+0x1dc>
 800a41a:	e005      	b.n	800a428 <__ssvfiscanf_r+0x1e4>
 800a41c:	2300      	movs	r3, #0
 800a41e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a420:	2303      	movs	r3, #3
 800a422:	e002      	b.n	800a42a <__ssvfiscanf_r+0x1e6>
 800a424:	2308      	movs	r3, #8
 800a426:	9342      	str	r3, [sp, #264]	@ 0x108
 800a428:	2304      	movs	r3, #4
 800a42a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a42c:	6863      	ldr	r3, [r4, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	dd39      	ble.n	800a4a6 <__ssvfiscanf_r+0x262>
 800a432:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a434:	0659      	lsls	r1, r3, #25
 800a436:	d404      	bmi.n	800a442 <__ssvfiscanf_r+0x1fe>
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	781a      	ldrb	r2, [r3, #0]
 800a43c:	5cba      	ldrb	r2, [r7, r2]
 800a43e:	0712      	lsls	r2, r2, #28
 800a440:	d438      	bmi.n	800a4b4 <__ssvfiscanf_r+0x270>
 800a442:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a444:	2b02      	cmp	r3, #2
 800a446:	dc47      	bgt.n	800a4d8 <__ssvfiscanf_r+0x294>
 800a448:	466b      	mov	r3, sp
 800a44a:	4622      	mov	r2, r4
 800a44c:	a941      	add	r1, sp, #260	@ 0x104
 800a44e:	4630      	mov	r0, r6
 800a450:	f000 f9ae 	bl	800a7b0 <_scanf_chars>
 800a454:	2801      	cmp	r0, #1
 800a456:	d064      	beq.n	800a522 <__ssvfiscanf_r+0x2de>
 800a458:	2802      	cmp	r0, #2
 800a45a:	f47f af18 	bne.w	800a28e <__ssvfiscanf_r+0x4a>
 800a45e:	e7c9      	b.n	800a3f4 <__ssvfiscanf_r+0x1b0>
 800a460:	220a      	movs	r2, #10
 800a462:	e7d7      	b.n	800a414 <__ssvfiscanf_r+0x1d0>
 800a464:	4629      	mov	r1, r5
 800a466:	4640      	mov	r0, r8
 800a468:	f000 fbfe 	bl	800ac68 <__sccl>
 800a46c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a46e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a472:	9341      	str	r3, [sp, #260]	@ 0x104
 800a474:	4605      	mov	r5, r0
 800a476:	2301      	movs	r3, #1
 800a478:	e7d7      	b.n	800a42a <__ssvfiscanf_r+0x1e6>
 800a47a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a47c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a480:	9341      	str	r3, [sp, #260]	@ 0x104
 800a482:	2300      	movs	r3, #0
 800a484:	e7d1      	b.n	800a42a <__ssvfiscanf_r+0x1e6>
 800a486:	2302      	movs	r3, #2
 800a488:	e7cf      	b.n	800a42a <__ssvfiscanf_r+0x1e6>
 800a48a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a48c:	06c3      	lsls	r3, r0, #27
 800a48e:	f53f aefe 	bmi.w	800a28e <__ssvfiscanf_r+0x4a>
 800a492:	9b00      	ldr	r3, [sp, #0]
 800a494:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a496:	1d19      	adds	r1, r3, #4
 800a498:	9100      	str	r1, [sp, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	07c0      	lsls	r0, r0, #31
 800a49e:	bf4c      	ite	mi
 800a4a0:	801a      	strhmi	r2, [r3, #0]
 800a4a2:	601a      	strpl	r2, [r3, #0]
 800a4a4:	e6f3      	b.n	800a28e <__ssvfiscanf_r+0x4a>
 800a4a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	4798      	blx	r3
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d0bf      	beq.n	800a432 <__ssvfiscanf_r+0x1ee>
 800a4b2:	e79f      	b.n	800a3f4 <__ssvfiscanf_r+0x1b0>
 800a4b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a4b6:	3201      	adds	r2, #1
 800a4b8:	9245      	str	r2, [sp, #276]	@ 0x114
 800a4ba:	6862      	ldr	r2, [r4, #4]
 800a4bc:	3a01      	subs	r2, #1
 800a4be:	2a00      	cmp	r2, #0
 800a4c0:	6062      	str	r2, [r4, #4]
 800a4c2:	dd02      	ble.n	800a4ca <__ssvfiscanf_r+0x286>
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	6023      	str	r3, [r4, #0]
 800a4c8:	e7b6      	b.n	800a438 <__ssvfiscanf_r+0x1f4>
 800a4ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	4798      	blx	r3
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d0b0      	beq.n	800a438 <__ssvfiscanf_r+0x1f4>
 800a4d6:	e78d      	b.n	800a3f4 <__ssvfiscanf_r+0x1b0>
 800a4d8:	2b04      	cmp	r3, #4
 800a4da:	dc0f      	bgt.n	800a4fc <__ssvfiscanf_r+0x2b8>
 800a4dc:	466b      	mov	r3, sp
 800a4de:	4622      	mov	r2, r4
 800a4e0:	a941      	add	r1, sp, #260	@ 0x104
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f000 f9be 	bl	800a864 <_scanf_i>
 800a4e8:	e7b4      	b.n	800a454 <__ssvfiscanf_r+0x210>
 800a4ea:	bf00      	nop
 800a4ec:	0800a195 	.word	0x0800a195
 800a4f0:	0800a20b 	.word	0x0800a20b
 800a4f4:	0800bb99 	.word	0x0800bb99
 800a4f8:	0800bc9f 	.word	0x0800bc9f
 800a4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a528 <__ssvfiscanf_r+0x2e4>)
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f43f aec5 	beq.w	800a28e <__ssvfiscanf_r+0x4a>
 800a504:	466b      	mov	r3, sp
 800a506:	4622      	mov	r2, r4
 800a508:	a941      	add	r1, sp, #260	@ 0x104
 800a50a:	4630      	mov	r0, r6
 800a50c:	f7fc fd38 	bl	8006f80 <_scanf_float>
 800a510:	e7a0      	b.n	800a454 <__ssvfiscanf_r+0x210>
 800a512:	89a3      	ldrh	r3, [r4, #12]
 800a514:	065b      	lsls	r3, r3, #25
 800a516:	f53f af71 	bmi.w	800a3fc <__ssvfiscanf_r+0x1b8>
 800a51a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a522:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a524:	e7f9      	b.n	800a51a <__ssvfiscanf_r+0x2d6>
 800a526:	bf00      	nop
 800a528:	08006f81 	.word	0x08006f81

0800a52c <__sfputc_r>:
 800a52c:	6893      	ldr	r3, [r2, #8]
 800a52e:	3b01      	subs	r3, #1
 800a530:	2b00      	cmp	r3, #0
 800a532:	b410      	push	{r4}
 800a534:	6093      	str	r3, [r2, #8]
 800a536:	da08      	bge.n	800a54a <__sfputc_r+0x1e>
 800a538:	6994      	ldr	r4, [r2, #24]
 800a53a:	42a3      	cmp	r3, r4
 800a53c:	db01      	blt.n	800a542 <__sfputc_r+0x16>
 800a53e:	290a      	cmp	r1, #10
 800a540:	d103      	bne.n	800a54a <__sfputc_r+0x1e>
 800a542:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a546:	f7fd b8f0 	b.w	800772a <__swbuf_r>
 800a54a:	6813      	ldr	r3, [r2, #0]
 800a54c:	1c58      	adds	r0, r3, #1
 800a54e:	6010      	str	r0, [r2, #0]
 800a550:	7019      	strb	r1, [r3, #0]
 800a552:	4608      	mov	r0, r1
 800a554:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <__sfputs_r>:
 800a55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55c:	4606      	mov	r6, r0
 800a55e:	460f      	mov	r7, r1
 800a560:	4614      	mov	r4, r2
 800a562:	18d5      	adds	r5, r2, r3
 800a564:	42ac      	cmp	r4, r5
 800a566:	d101      	bne.n	800a56c <__sfputs_r+0x12>
 800a568:	2000      	movs	r0, #0
 800a56a:	e007      	b.n	800a57c <__sfputs_r+0x22>
 800a56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a570:	463a      	mov	r2, r7
 800a572:	4630      	mov	r0, r6
 800a574:	f7ff ffda 	bl	800a52c <__sfputc_r>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d1f3      	bne.n	800a564 <__sfputs_r+0xa>
 800a57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a580 <_vfiprintf_r>:
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	460d      	mov	r5, r1
 800a586:	b09d      	sub	sp, #116	@ 0x74
 800a588:	4614      	mov	r4, r2
 800a58a:	4698      	mov	r8, r3
 800a58c:	4606      	mov	r6, r0
 800a58e:	b118      	cbz	r0, 800a598 <_vfiprintf_r+0x18>
 800a590:	6a03      	ldr	r3, [r0, #32]
 800a592:	b90b      	cbnz	r3, 800a598 <_vfiprintf_r+0x18>
 800a594:	f7fc ff94 	bl	80074c0 <__sinit>
 800a598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a59a:	07d9      	lsls	r1, r3, #31
 800a59c:	d405      	bmi.n	800a5aa <_vfiprintf_r+0x2a>
 800a59e:	89ab      	ldrh	r3, [r5, #12]
 800a5a0:	059a      	lsls	r2, r3, #22
 800a5a2:	d402      	bmi.n	800a5aa <_vfiprintf_r+0x2a>
 800a5a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5a6:	f7fd fa08 	bl	80079ba <__retarget_lock_acquire_recursive>
 800a5aa:	89ab      	ldrh	r3, [r5, #12]
 800a5ac:	071b      	lsls	r3, r3, #28
 800a5ae:	d501      	bpl.n	800a5b4 <_vfiprintf_r+0x34>
 800a5b0:	692b      	ldr	r3, [r5, #16]
 800a5b2:	b99b      	cbnz	r3, 800a5dc <_vfiprintf_r+0x5c>
 800a5b4:	4629      	mov	r1, r5
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f7fd f8f6 	bl	80077a8 <__swsetup_r>
 800a5bc:	b170      	cbz	r0, 800a5dc <_vfiprintf_r+0x5c>
 800a5be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5c0:	07dc      	lsls	r4, r3, #31
 800a5c2:	d504      	bpl.n	800a5ce <_vfiprintf_r+0x4e>
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c8:	b01d      	add	sp, #116	@ 0x74
 800a5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ce:	89ab      	ldrh	r3, [r5, #12]
 800a5d0:	0598      	lsls	r0, r3, #22
 800a5d2:	d4f7      	bmi.n	800a5c4 <_vfiprintf_r+0x44>
 800a5d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5d6:	f7fd f9f1 	bl	80079bc <__retarget_lock_release_recursive>
 800a5da:	e7f3      	b.n	800a5c4 <_vfiprintf_r+0x44>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5e0:	2320      	movs	r3, #32
 800a5e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5ea:	2330      	movs	r3, #48	@ 0x30
 800a5ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a79c <_vfiprintf_r+0x21c>
 800a5f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5f4:	f04f 0901 	mov.w	r9, #1
 800a5f8:	4623      	mov	r3, r4
 800a5fa:	469a      	mov	sl, r3
 800a5fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a600:	b10a      	cbz	r2, 800a606 <_vfiprintf_r+0x86>
 800a602:	2a25      	cmp	r2, #37	@ 0x25
 800a604:	d1f9      	bne.n	800a5fa <_vfiprintf_r+0x7a>
 800a606:	ebba 0b04 	subs.w	fp, sl, r4
 800a60a:	d00b      	beq.n	800a624 <_vfiprintf_r+0xa4>
 800a60c:	465b      	mov	r3, fp
 800a60e:	4622      	mov	r2, r4
 800a610:	4629      	mov	r1, r5
 800a612:	4630      	mov	r0, r6
 800a614:	f7ff ffa1 	bl	800a55a <__sfputs_r>
 800a618:	3001      	adds	r0, #1
 800a61a:	f000 80a7 	beq.w	800a76c <_vfiprintf_r+0x1ec>
 800a61e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a620:	445a      	add	r2, fp
 800a622:	9209      	str	r2, [sp, #36]	@ 0x24
 800a624:	f89a 3000 	ldrb.w	r3, [sl]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 809f 	beq.w	800a76c <_vfiprintf_r+0x1ec>
 800a62e:	2300      	movs	r3, #0
 800a630:	f04f 32ff 	mov.w	r2, #4294967295
 800a634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a638:	f10a 0a01 	add.w	sl, sl, #1
 800a63c:	9304      	str	r3, [sp, #16]
 800a63e:	9307      	str	r3, [sp, #28]
 800a640:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a644:	931a      	str	r3, [sp, #104]	@ 0x68
 800a646:	4654      	mov	r4, sl
 800a648:	2205      	movs	r2, #5
 800a64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a64e:	4853      	ldr	r0, [pc, #332]	@ (800a79c <_vfiprintf_r+0x21c>)
 800a650:	f7f5 fdbe 	bl	80001d0 <memchr>
 800a654:	9a04      	ldr	r2, [sp, #16]
 800a656:	b9d8      	cbnz	r0, 800a690 <_vfiprintf_r+0x110>
 800a658:	06d1      	lsls	r1, r2, #27
 800a65a:	bf44      	itt	mi
 800a65c:	2320      	movmi	r3, #32
 800a65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a662:	0713      	lsls	r3, r2, #28
 800a664:	bf44      	itt	mi
 800a666:	232b      	movmi	r3, #43	@ 0x2b
 800a668:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a66c:	f89a 3000 	ldrb.w	r3, [sl]
 800a670:	2b2a      	cmp	r3, #42	@ 0x2a
 800a672:	d015      	beq.n	800a6a0 <_vfiprintf_r+0x120>
 800a674:	9a07      	ldr	r2, [sp, #28]
 800a676:	4654      	mov	r4, sl
 800a678:	2000      	movs	r0, #0
 800a67a:	f04f 0c0a 	mov.w	ip, #10
 800a67e:	4621      	mov	r1, r4
 800a680:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a684:	3b30      	subs	r3, #48	@ 0x30
 800a686:	2b09      	cmp	r3, #9
 800a688:	d94b      	bls.n	800a722 <_vfiprintf_r+0x1a2>
 800a68a:	b1b0      	cbz	r0, 800a6ba <_vfiprintf_r+0x13a>
 800a68c:	9207      	str	r2, [sp, #28]
 800a68e:	e014      	b.n	800a6ba <_vfiprintf_r+0x13a>
 800a690:	eba0 0308 	sub.w	r3, r0, r8
 800a694:	fa09 f303 	lsl.w	r3, r9, r3
 800a698:	4313      	orrs	r3, r2
 800a69a:	9304      	str	r3, [sp, #16]
 800a69c:	46a2      	mov	sl, r4
 800a69e:	e7d2      	b.n	800a646 <_vfiprintf_r+0xc6>
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	1d19      	adds	r1, r3, #4
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	9103      	str	r1, [sp, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	bfbb      	ittet	lt
 800a6ac:	425b      	neglt	r3, r3
 800a6ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a6b2:	9307      	strge	r3, [sp, #28]
 800a6b4:	9307      	strlt	r3, [sp, #28]
 800a6b6:	bfb8      	it	lt
 800a6b8:	9204      	strlt	r2, [sp, #16]
 800a6ba:	7823      	ldrb	r3, [r4, #0]
 800a6bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6be:	d10a      	bne.n	800a6d6 <_vfiprintf_r+0x156>
 800a6c0:	7863      	ldrb	r3, [r4, #1]
 800a6c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6c4:	d132      	bne.n	800a72c <_vfiprintf_r+0x1ac>
 800a6c6:	9b03      	ldr	r3, [sp, #12]
 800a6c8:	1d1a      	adds	r2, r3, #4
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	9203      	str	r2, [sp, #12]
 800a6ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6d2:	3402      	adds	r4, #2
 800a6d4:	9305      	str	r3, [sp, #20]
 800a6d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a7ac <_vfiprintf_r+0x22c>
 800a6da:	7821      	ldrb	r1, [r4, #0]
 800a6dc:	2203      	movs	r2, #3
 800a6de:	4650      	mov	r0, sl
 800a6e0:	f7f5 fd76 	bl	80001d0 <memchr>
 800a6e4:	b138      	cbz	r0, 800a6f6 <_vfiprintf_r+0x176>
 800a6e6:	9b04      	ldr	r3, [sp, #16]
 800a6e8:	eba0 000a 	sub.w	r0, r0, sl
 800a6ec:	2240      	movs	r2, #64	@ 0x40
 800a6ee:	4082      	lsls	r2, r0
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	3401      	adds	r4, #1
 800a6f4:	9304      	str	r3, [sp, #16]
 800a6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6fa:	4829      	ldr	r0, [pc, #164]	@ (800a7a0 <_vfiprintf_r+0x220>)
 800a6fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a700:	2206      	movs	r2, #6
 800a702:	f7f5 fd65 	bl	80001d0 <memchr>
 800a706:	2800      	cmp	r0, #0
 800a708:	d03f      	beq.n	800a78a <_vfiprintf_r+0x20a>
 800a70a:	4b26      	ldr	r3, [pc, #152]	@ (800a7a4 <_vfiprintf_r+0x224>)
 800a70c:	bb1b      	cbnz	r3, 800a756 <_vfiprintf_r+0x1d6>
 800a70e:	9b03      	ldr	r3, [sp, #12]
 800a710:	3307      	adds	r3, #7
 800a712:	f023 0307 	bic.w	r3, r3, #7
 800a716:	3308      	adds	r3, #8
 800a718:	9303      	str	r3, [sp, #12]
 800a71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a71c:	443b      	add	r3, r7
 800a71e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a720:	e76a      	b.n	800a5f8 <_vfiprintf_r+0x78>
 800a722:	fb0c 3202 	mla	r2, ip, r2, r3
 800a726:	460c      	mov	r4, r1
 800a728:	2001      	movs	r0, #1
 800a72a:	e7a8      	b.n	800a67e <_vfiprintf_r+0xfe>
 800a72c:	2300      	movs	r3, #0
 800a72e:	3401      	adds	r4, #1
 800a730:	9305      	str	r3, [sp, #20]
 800a732:	4619      	mov	r1, r3
 800a734:	f04f 0c0a 	mov.w	ip, #10
 800a738:	4620      	mov	r0, r4
 800a73a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a73e:	3a30      	subs	r2, #48	@ 0x30
 800a740:	2a09      	cmp	r2, #9
 800a742:	d903      	bls.n	800a74c <_vfiprintf_r+0x1cc>
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0c6      	beq.n	800a6d6 <_vfiprintf_r+0x156>
 800a748:	9105      	str	r1, [sp, #20]
 800a74a:	e7c4      	b.n	800a6d6 <_vfiprintf_r+0x156>
 800a74c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a750:	4604      	mov	r4, r0
 800a752:	2301      	movs	r3, #1
 800a754:	e7f0      	b.n	800a738 <_vfiprintf_r+0x1b8>
 800a756:	ab03      	add	r3, sp, #12
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	462a      	mov	r2, r5
 800a75c:	4b12      	ldr	r3, [pc, #72]	@ (800a7a8 <_vfiprintf_r+0x228>)
 800a75e:	a904      	add	r1, sp, #16
 800a760:	4630      	mov	r0, r6
 800a762:	f7fc f855 	bl	8006810 <_printf_float>
 800a766:	4607      	mov	r7, r0
 800a768:	1c78      	adds	r0, r7, #1
 800a76a:	d1d6      	bne.n	800a71a <_vfiprintf_r+0x19a>
 800a76c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a76e:	07d9      	lsls	r1, r3, #31
 800a770:	d405      	bmi.n	800a77e <_vfiprintf_r+0x1fe>
 800a772:	89ab      	ldrh	r3, [r5, #12]
 800a774:	059a      	lsls	r2, r3, #22
 800a776:	d402      	bmi.n	800a77e <_vfiprintf_r+0x1fe>
 800a778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a77a:	f7fd f91f 	bl	80079bc <__retarget_lock_release_recursive>
 800a77e:	89ab      	ldrh	r3, [r5, #12]
 800a780:	065b      	lsls	r3, r3, #25
 800a782:	f53f af1f 	bmi.w	800a5c4 <_vfiprintf_r+0x44>
 800a786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a788:	e71e      	b.n	800a5c8 <_vfiprintf_r+0x48>
 800a78a:	ab03      	add	r3, sp, #12
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	462a      	mov	r2, r5
 800a790:	4b05      	ldr	r3, [pc, #20]	@ (800a7a8 <_vfiprintf_r+0x228>)
 800a792:	a904      	add	r1, sp, #16
 800a794:	4630      	mov	r0, r6
 800a796:	f7fc fad3 	bl	8006d40 <_printf_i>
 800a79a:	e7e4      	b.n	800a766 <_vfiprintf_r+0x1e6>
 800a79c:	0800bc99 	.word	0x0800bc99
 800a7a0:	0800bca3 	.word	0x0800bca3
 800a7a4:	08006811 	.word	0x08006811
 800a7a8:	0800a55b 	.word	0x0800a55b
 800a7ac:	0800bc9f 	.word	0x0800bc9f

0800a7b0 <_scanf_chars>:
 800a7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7b4:	4615      	mov	r5, r2
 800a7b6:	688a      	ldr	r2, [r1, #8]
 800a7b8:	4680      	mov	r8, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	b932      	cbnz	r2, 800a7cc <_scanf_chars+0x1c>
 800a7be:	698a      	ldr	r2, [r1, #24]
 800a7c0:	2a00      	cmp	r2, #0
 800a7c2:	bf14      	ite	ne
 800a7c4:	f04f 32ff 	movne.w	r2, #4294967295
 800a7c8:	2201      	moveq	r2, #1
 800a7ca:	608a      	str	r2, [r1, #8]
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a860 <_scanf_chars+0xb0>
 800a7d2:	06d1      	lsls	r1, r2, #27
 800a7d4:	bf5f      	itttt	pl
 800a7d6:	681a      	ldrpl	r2, [r3, #0]
 800a7d8:	1d11      	addpl	r1, r2, #4
 800a7da:	6019      	strpl	r1, [r3, #0]
 800a7dc:	6816      	ldrpl	r6, [r2, #0]
 800a7de:	2700      	movs	r7, #0
 800a7e0:	69a0      	ldr	r0, [r4, #24]
 800a7e2:	b188      	cbz	r0, 800a808 <_scanf_chars+0x58>
 800a7e4:	2801      	cmp	r0, #1
 800a7e6:	d107      	bne.n	800a7f8 <_scanf_chars+0x48>
 800a7e8:	682b      	ldr	r3, [r5, #0]
 800a7ea:	781a      	ldrb	r2, [r3, #0]
 800a7ec:	6963      	ldr	r3, [r4, #20]
 800a7ee:	5c9b      	ldrb	r3, [r3, r2]
 800a7f0:	b953      	cbnz	r3, 800a808 <_scanf_chars+0x58>
 800a7f2:	2f00      	cmp	r7, #0
 800a7f4:	d031      	beq.n	800a85a <_scanf_chars+0xaa>
 800a7f6:	e022      	b.n	800a83e <_scanf_chars+0x8e>
 800a7f8:	2802      	cmp	r0, #2
 800a7fa:	d120      	bne.n	800a83e <_scanf_chars+0x8e>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a804:	071b      	lsls	r3, r3, #28
 800a806:	d41a      	bmi.n	800a83e <_scanf_chars+0x8e>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	06da      	lsls	r2, r3, #27
 800a80c:	bf5e      	ittt	pl
 800a80e:	682b      	ldrpl	r3, [r5, #0]
 800a810:	781b      	ldrbpl	r3, [r3, #0]
 800a812:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a816:	682a      	ldr	r2, [r5, #0]
 800a818:	686b      	ldr	r3, [r5, #4]
 800a81a:	3201      	adds	r2, #1
 800a81c:	602a      	str	r2, [r5, #0]
 800a81e:	68a2      	ldr	r2, [r4, #8]
 800a820:	3b01      	subs	r3, #1
 800a822:	3a01      	subs	r2, #1
 800a824:	606b      	str	r3, [r5, #4]
 800a826:	3701      	adds	r7, #1
 800a828:	60a2      	str	r2, [r4, #8]
 800a82a:	b142      	cbz	r2, 800a83e <_scanf_chars+0x8e>
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	dcd7      	bgt.n	800a7e0 <_scanf_chars+0x30>
 800a830:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a834:	4629      	mov	r1, r5
 800a836:	4640      	mov	r0, r8
 800a838:	4798      	blx	r3
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d0d0      	beq.n	800a7e0 <_scanf_chars+0x30>
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	f013 0310 	ands.w	r3, r3, #16
 800a844:	d105      	bne.n	800a852 <_scanf_chars+0xa2>
 800a846:	68e2      	ldr	r2, [r4, #12]
 800a848:	3201      	adds	r2, #1
 800a84a:	60e2      	str	r2, [r4, #12]
 800a84c:	69a2      	ldr	r2, [r4, #24]
 800a84e:	b102      	cbz	r2, 800a852 <_scanf_chars+0xa2>
 800a850:	7033      	strb	r3, [r6, #0]
 800a852:	6923      	ldr	r3, [r4, #16]
 800a854:	443b      	add	r3, r7
 800a856:	6123      	str	r3, [r4, #16]
 800a858:	2000      	movs	r0, #0
 800a85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a85e:	bf00      	nop
 800a860:	0800bb99 	.word	0x0800bb99

0800a864 <_scanf_i>:
 800a864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a868:	4698      	mov	r8, r3
 800a86a:	4b74      	ldr	r3, [pc, #464]	@ (800aa3c <_scanf_i+0x1d8>)
 800a86c:	460c      	mov	r4, r1
 800a86e:	4682      	mov	sl, r0
 800a870:	4616      	mov	r6, r2
 800a872:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a876:	b087      	sub	sp, #28
 800a878:	ab03      	add	r3, sp, #12
 800a87a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a87e:	4b70      	ldr	r3, [pc, #448]	@ (800aa40 <_scanf_i+0x1dc>)
 800a880:	69a1      	ldr	r1, [r4, #24]
 800a882:	4a70      	ldr	r2, [pc, #448]	@ (800aa44 <_scanf_i+0x1e0>)
 800a884:	2903      	cmp	r1, #3
 800a886:	bf08      	it	eq
 800a888:	461a      	moveq	r2, r3
 800a88a:	68a3      	ldr	r3, [r4, #8]
 800a88c:	9201      	str	r2, [sp, #4]
 800a88e:	1e5a      	subs	r2, r3, #1
 800a890:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a894:	bf88      	it	hi
 800a896:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a89a:	4627      	mov	r7, r4
 800a89c:	bf82      	ittt	hi
 800a89e:	eb03 0905 	addhi.w	r9, r3, r5
 800a8a2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a8a6:	60a3      	strhi	r3, [r4, #8]
 800a8a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a8ac:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a8b0:	bf98      	it	ls
 800a8b2:	f04f 0900 	movls.w	r9, #0
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	463d      	mov	r5, r7
 800a8ba:	f04f 0b00 	mov.w	fp, #0
 800a8be:	6831      	ldr	r1, [r6, #0]
 800a8c0:	ab03      	add	r3, sp, #12
 800a8c2:	7809      	ldrb	r1, [r1, #0]
 800a8c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	f7f5 fc81 	bl	80001d0 <memchr>
 800a8ce:	b328      	cbz	r0, 800a91c <_scanf_i+0xb8>
 800a8d0:	f1bb 0f01 	cmp.w	fp, #1
 800a8d4:	d159      	bne.n	800a98a <_scanf_i+0x126>
 800a8d6:	6862      	ldr	r2, [r4, #4]
 800a8d8:	b92a      	cbnz	r2, 800a8e6 <_scanf_i+0x82>
 800a8da:	6822      	ldr	r2, [r4, #0]
 800a8dc:	2108      	movs	r1, #8
 800a8de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8e2:	6061      	str	r1, [r4, #4]
 800a8e4:	6022      	str	r2, [r4, #0]
 800a8e6:	6822      	ldr	r2, [r4, #0]
 800a8e8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a8ec:	6022      	str	r2, [r4, #0]
 800a8ee:	68a2      	ldr	r2, [r4, #8]
 800a8f0:	1e51      	subs	r1, r2, #1
 800a8f2:	60a1      	str	r1, [r4, #8]
 800a8f4:	b192      	cbz	r2, 800a91c <_scanf_i+0xb8>
 800a8f6:	6832      	ldr	r2, [r6, #0]
 800a8f8:	1c51      	adds	r1, r2, #1
 800a8fa:	6031      	str	r1, [r6, #0]
 800a8fc:	7812      	ldrb	r2, [r2, #0]
 800a8fe:	f805 2b01 	strb.w	r2, [r5], #1
 800a902:	6872      	ldr	r2, [r6, #4]
 800a904:	3a01      	subs	r2, #1
 800a906:	2a00      	cmp	r2, #0
 800a908:	6072      	str	r2, [r6, #4]
 800a90a:	dc07      	bgt.n	800a91c <_scanf_i+0xb8>
 800a90c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a910:	4631      	mov	r1, r6
 800a912:	4650      	mov	r0, sl
 800a914:	4790      	blx	r2
 800a916:	2800      	cmp	r0, #0
 800a918:	f040 8085 	bne.w	800aa26 <_scanf_i+0x1c2>
 800a91c:	f10b 0b01 	add.w	fp, fp, #1
 800a920:	f1bb 0f03 	cmp.w	fp, #3
 800a924:	d1cb      	bne.n	800a8be <_scanf_i+0x5a>
 800a926:	6863      	ldr	r3, [r4, #4]
 800a928:	b90b      	cbnz	r3, 800a92e <_scanf_i+0xca>
 800a92a:	230a      	movs	r3, #10
 800a92c:	6063      	str	r3, [r4, #4]
 800a92e:	6863      	ldr	r3, [r4, #4]
 800a930:	4945      	ldr	r1, [pc, #276]	@ (800aa48 <_scanf_i+0x1e4>)
 800a932:	6960      	ldr	r0, [r4, #20]
 800a934:	1ac9      	subs	r1, r1, r3
 800a936:	f000 f997 	bl	800ac68 <__sccl>
 800a93a:	f04f 0b00 	mov.w	fp, #0
 800a93e:	68a3      	ldr	r3, [r4, #8]
 800a940:	6822      	ldr	r2, [r4, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d03d      	beq.n	800a9c2 <_scanf_i+0x15e>
 800a946:	6831      	ldr	r1, [r6, #0]
 800a948:	6960      	ldr	r0, [r4, #20]
 800a94a:	f891 c000 	ldrb.w	ip, [r1]
 800a94e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a952:	2800      	cmp	r0, #0
 800a954:	d035      	beq.n	800a9c2 <_scanf_i+0x15e>
 800a956:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a95a:	d124      	bne.n	800a9a6 <_scanf_i+0x142>
 800a95c:	0510      	lsls	r0, r2, #20
 800a95e:	d522      	bpl.n	800a9a6 <_scanf_i+0x142>
 800a960:	f10b 0b01 	add.w	fp, fp, #1
 800a964:	f1b9 0f00 	cmp.w	r9, #0
 800a968:	d003      	beq.n	800a972 <_scanf_i+0x10e>
 800a96a:	3301      	adds	r3, #1
 800a96c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a970:	60a3      	str	r3, [r4, #8]
 800a972:	6873      	ldr	r3, [r6, #4]
 800a974:	3b01      	subs	r3, #1
 800a976:	2b00      	cmp	r3, #0
 800a978:	6073      	str	r3, [r6, #4]
 800a97a:	dd1b      	ble.n	800a9b4 <_scanf_i+0x150>
 800a97c:	6833      	ldr	r3, [r6, #0]
 800a97e:	3301      	adds	r3, #1
 800a980:	6033      	str	r3, [r6, #0]
 800a982:	68a3      	ldr	r3, [r4, #8]
 800a984:	3b01      	subs	r3, #1
 800a986:	60a3      	str	r3, [r4, #8]
 800a988:	e7d9      	b.n	800a93e <_scanf_i+0xda>
 800a98a:	f1bb 0f02 	cmp.w	fp, #2
 800a98e:	d1ae      	bne.n	800a8ee <_scanf_i+0x8a>
 800a990:	6822      	ldr	r2, [r4, #0]
 800a992:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a996:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a99a:	d1bf      	bne.n	800a91c <_scanf_i+0xb8>
 800a99c:	2110      	movs	r1, #16
 800a99e:	6061      	str	r1, [r4, #4]
 800a9a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a9a4:	e7a2      	b.n	800a8ec <_scanf_i+0x88>
 800a9a6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a9aa:	6022      	str	r2, [r4, #0]
 800a9ac:	780b      	ldrb	r3, [r1, #0]
 800a9ae:	f805 3b01 	strb.w	r3, [r5], #1
 800a9b2:	e7de      	b.n	800a972 <_scanf_i+0x10e>
 800a9b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a9b8:	4631      	mov	r1, r6
 800a9ba:	4650      	mov	r0, sl
 800a9bc:	4798      	blx	r3
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d0df      	beq.n	800a982 <_scanf_i+0x11e>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	05d9      	lsls	r1, r3, #23
 800a9c6:	d50d      	bpl.n	800a9e4 <_scanf_i+0x180>
 800a9c8:	42bd      	cmp	r5, r7
 800a9ca:	d909      	bls.n	800a9e0 <_scanf_i+0x17c>
 800a9cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a9d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	4650      	mov	r0, sl
 800a9d8:	4798      	blx	r3
 800a9da:	f105 39ff 	add.w	r9, r5, #4294967295
 800a9de:	464d      	mov	r5, r9
 800a9e0:	42bd      	cmp	r5, r7
 800a9e2:	d028      	beq.n	800aa36 <_scanf_i+0x1d2>
 800a9e4:	6822      	ldr	r2, [r4, #0]
 800a9e6:	f012 0210 	ands.w	r2, r2, #16
 800a9ea:	d113      	bne.n	800aa14 <_scanf_i+0x1b0>
 800a9ec:	702a      	strb	r2, [r5, #0]
 800a9ee:	6863      	ldr	r3, [r4, #4]
 800a9f0:	9e01      	ldr	r6, [sp, #4]
 800a9f2:	4639      	mov	r1, r7
 800a9f4:	4650      	mov	r0, sl
 800a9f6:	47b0      	blx	r6
 800a9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fc:	6821      	ldr	r1, [r4, #0]
 800a9fe:	1d1a      	adds	r2, r3, #4
 800aa00:	f8c8 2000 	str.w	r2, [r8]
 800aa04:	f011 0f20 	tst.w	r1, #32
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	d00f      	beq.n	800aa2c <_scanf_i+0x1c8>
 800aa0c:	6018      	str	r0, [r3, #0]
 800aa0e:	68e3      	ldr	r3, [r4, #12]
 800aa10:	3301      	adds	r3, #1
 800aa12:	60e3      	str	r3, [r4, #12]
 800aa14:	6923      	ldr	r3, [r4, #16]
 800aa16:	1bed      	subs	r5, r5, r7
 800aa18:	445d      	add	r5, fp
 800aa1a:	442b      	add	r3, r5
 800aa1c:	6123      	str	r3, [r4, #16]
 800aa1e:	2000      	movs	r0, #0
 800aa20:	b007      	add	sp, #28
 800aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa26:	f04f 0b00 	mov.w	fp, #0
 800aa2a:	e7ca      	b.n	800a9c2 <_scanf_i+0x15e>
 800aa2c:	07ca      	lsls	r2, r1, #31
 800aa2e:	bf4c      	ite	mi
 800aa30:	8018      	strhmi	r0, [r3, #0]
 800aa32:	6018      	strpl	r0, [r3, #0]
 800aa34:	e7eb      	b.n	800aa0e <_scanf_i+0x1aa>
 800aa36:	2001      	movs	r0, #1
 800aa38:	e7f2      	b.n	800aa20 <_scanf_i+0x1bc>
 800aa3a:	bf00      	nop
 800aa3c:	0800b8cc 	.word	0x0800b8cc
 800aa40:	08009ee1 	.word	0x08009ee1
 800aa44:	0800b66d 	.word	0x0800b66d
 800aa48:	0800bcba 	.word	0x0800bcba

0800aa4c <__sflush_r>:
 800aa4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa54:	0716      	lsls	r6, r2, #28
 800aa56:	4605      	mov	r5, r0
 800aa58:	460c      	mov	r4, r1
 800aa5a:	d454      	bmi.n	800ab06 <__sflush_r+0xba>
 800aa5c:	684b      	ldr	r3, [r1, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	dc02      	bgt.n	800aa68 <__sflush_r+0x1c>
 800aa62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	dd48      	ble.n	800aafa <__sflush_r+0xae>
 800aa68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa6a:	2e00      	cmp	r6, #0
 800aa6c:	d045      	beq.n	800aafa <__sflush_r+0xae>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa74:	682f      	ldr	r7, [r5, #0]
 800aa76:	6a21      	ldr	r1, [r4, #32]
 800aa78:	602b      	str	r3, [r5, #0]
 800aa7a:	d030      	beq.n	800aade <__sflush_r+0x92>
 800aa7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa7e:	89a3      	ldrh	r3, [r4, #12]
 800aa80:	0759      	lsls	r1, r3, #29
 800aa82:	d505      	bpl.n	800aa90 <__sflush_r+0x44>
 800aa84:	6863      	ldr	r3, [r4, #4]
 800aa86:	1ad2      	subs	r2, r2, r3
 800aa88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa8a:	b10b      	cbz	r3, 800aa90 <__sflush_r+0x44>
 800aa8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa8e:	1ad2      	subs	r2, r2, r3
 800aa90:	2300      	movs	r3, #0
 800aa92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa94:	6a21      	ldr	r1, [r4, #32]
 800aa96:	4628      	mov	r0, r5
 800aa98:	47b0      	blx	r6
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	89a3      	ldrh	r3, [r4, #12]
 800aa9e:	d106      	bne.n	800aaae <__sflush_r+0x62>
 800aaa0:	6829      	ldr	r1, [r5, #0]
 800aaa2:	291d      	cmp	r1, #29
 800aaa4:	d82b      	bhi.n	800aafe <__sflush_r+0xb2>
 800aaa6:	4a2a      	ldr	r2, [pc, #168]	@ (800ab50 <__sflush_r+0x104>)
 800aaa8:	410a      	asrs	r2, r1
 800aaaa:	07d6      	lsls	r6, r2, #31
 800aaac:	d427      	bmi.n	800aafe <__sflush_r+0xb2>
 800aaae:	2200      	movs	r2, #0
 800aab0:	6062      	str	r2, [r4, #4]
 800aab2:	04d9      	lsls	r1, r3, #19
 800aab4:	6922      	ldr	r2, [r4, #16]
 800aab6:	6022      	str	r2, [r4, #0]
 800aab8:	d504      	bpl.n	800aac4 <__sflush_r+0x78>
 800aaba:	1c42      	adds	r2, r0, #1
 800aabc:	d101      	bne.n	800aac2 <__sflush_r+0x76>
 800aabe:	682b      	ldr	r3, [r5, #0]
 800aac0:	b903      	cbnz	r3, 800aac4 <__sflush_r+0x78>
 800aac2:	6560      	str	r0, [r4, #84]	@ 0x54
 800aac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aac6:	602f      	str	r7, [r5, #0]
 800aac8:	b1b9      	cbz	r1, 800aafa <__sflush_r+0xae>
 800aaca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aace:	4299      	cmp	r1, r3
 800aad0:	d002      	beq.n	800aad8 <__sflush_r+0x8c>
 800aad2:	4628      	mov	r0, r5
 800aad4:	f7fd fdd0 	bl	8008678 <_free_r>
 800aad8:	2300      	movs	r3, #0
 800aada:	6363      	str	r3, [r4, #52]	@ 0x34
 800aadc:	e00d      	b.n	800aafa <__sflush_r+0xae>
 800aade:	2301      	movs	r3, #1
 800aae0:	4628      	mov	r0, r5
 800aae2:	47b0      	blx	r6
 800aae4:	4602      	mov	r2, r0
 800aae6:	1c50      	adds	r0, r2, #1
 800aae8:	d1c9      	bne.n	800aa7e <__sflush_r+0x32>
 800aaea:	682b      	ldr	r3, [r5, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d0c6      	beq.n	800aa7e <__sflush_r+0x32>
 800aaf0:	2b1d      	cmp	r3, #29
 800aaf2:	d001      	beq.n	800aaf8 <__sflush_r+0xac>
 800aaf4:	2b16      	cmp	r3, #22
 800aaf6:	d11e      	bne.n	800ab36 <__sflush_r+0xea>
 800aaf8:	602f      	str	r7, [r5, #0]
 800aafa:	2000      	movs	r0, #0
 800aafc:	e022      	b.n	800ab44 <__sflush_r+0xf8>
 800aafe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab02:	b21b      	sxth	r3, r3
 800ab04:	e01b      	b.n	800ab3e <__sflush_r+0xf2>
 800ab06:	690f      	ldr	r7, [r1, #16]
 800ab08:	2f00      	cmp	r7, #0
 800ab0a:	d0f6      	beq.n	800aafa <__sflush_r+0xae>
 800ab0c:	0793      	lsls	r3, r2, #30
 800ab0e:	680e      	ldr	r6, [r1, #0]
 800ab10:	bf08      	it	eq
 800ab12:	694b      	ldreq	r3, [r1, #20]
 800ab14:	600f      	str	r7, [r1, #0]
 800ab16:	bf18      	it	ne
 800ab18:	2300      	movne	r3, #0
 800ab1a:	eba6 0807 	sub.w	r8, r6, r7
 800ab1e:	608b      	str	r3, [r1, #8]
 800ab20:	f1b8 0f00 	cmp.w	r8, #0
 800ab24:	dde9      	ble.n	800aafa <__sflush_r+0xae>
 800ab26:	6a21      	ldr	r1, [r4, #32]
 800ab28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab2a:	4643      	mov	r3, r8
 800ab2c:	463a      	mov	r2, r7
 800ab2e:	4628      	mov	r0, r5
 800ab30:	47b0      	blx	r6
 800ab32:	2800      	cmp	r0, #0
 800ab34:	dc08      	bgt.n	800ab48 <__sflush_r+0xfc>
 800ab36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab3e:	81a3      	strh	r3, [r4, #12]
 800ab40:	f04f 30ff 	mov.w	r0, #4294967295
 800ab44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab48:	4407      	add	r7, r0
 800ab4a:	eba8 0800 	sub.w	r8, r8, r0
 800ab4e:	e7e7      	b.n	800ab20 <__sflush_r+0xd4>
 800ab50:	dfbffffe 	.word	0xdfbffffe

0800ab54 <_fflush_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	690b      	ldr	r3, [r1, #16]
 800ab58:	4605      	mov	r5, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	b913      	cbnz	r3, 800ab64 <_fflush_r+0x10>
 800ab5e:	2500      	movs	r5, #0
 800ab60:	4628      	mov	r0, r5
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	b118      	cbz	r0, 800ab6e <_fflush_r+0x1a>
 800ab66:	6a03      	ldr	r3, [r0, #32]
 800ab68:	b90b      	cbnz	r3, 800ab6e <_fflush_r+0x1a>
 800ab6a:	f7fc fca9 	bl	80074c0 <__sinit>
 800ab6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0f3      	beq.n	800ab5e <_fflush_r+0xa>
 800ab76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab78:	07d0      	lsls	r0, r2, #31
 800ab7a:	d404      	bmi.n	800ab86 <_fflush_r+0x32>
 800ab7c:	0599      	lsls	r1, r3, #22
 800ab7e:	d402      	bmi.n	800ab86 <_fflush_r+0x32>
 800ab80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab82:	f7fc ff1a 	bl	80079ba <__retarget_lock_acquire_recursive>
 800ab86:	4628      	mov	r0, r5
 800ab88:	4621      	mov	r1, r4
 800ab8a:	f7ff ff5f 	bl	800aa4c <__sflush_r>
 800ab8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab90:	07da      	lsls	r2, r3, #31
 800ab92:	4605      	mov	r5, r0
 800ab94:	d4e4      	bmi.n	800ab60 <_fflush_r+0xc>
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	059b      	lsls	r3, r3, #22
 800ab9a:	d4e1      	bmi.n	800ab60 <_fflush_r+0xc>
 800ab9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab9e:	f7fc ff0d 	bl	80079bc <__retarget_lock_release_recursive>
 800aba2:	e7dd      	b.n	800ab60 <_fflush_r+0xc>

0800aba4 <__swhatbuf_r>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	460c      	mov	r4, r1
 800aba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abac:	2900      	cmp	r1, #0
 800abae:	b096      	sub	sp, #88	@ 0x58
 800abb0:	4615      	mov	r5, r2
 800abb2:	461e      	mov	r6, r3
 800abb4:	da0d      	bge.n	800abd2 <__swhatbuf_r+0x2e>
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800abbc:	f04f 0100 	mov.w	r1, #0
 800abc0:	bf14      	ite	ne
 800abc2:	2340      	movne	r3, #64	@ 0x40
 800abc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800abc8:	2000      	movs	r0, #0
 800abca:	6031      	str	r1, [r6, #0]
 800abcc:	602b      	str	r3, [r5, #0]
 800abce:	b016      	add	sp, #88	@ 0x58
 800abd0:	bd70      	pop	{r4, r5, r6, pc}
 800abd2:	466a      	mov	r2, sp
 800abd4:	f000 f8e8 	bl	800ada8 <_fstat_r>
 800abd8:	2800      	cmp	r0, #0
 800abda:	dbec      	blt.n	800abb6 <__swhatbuf_r+0x12>
 800abdc:	9901      	ldr	r1, [sp, #4]
 800abde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800abe2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abe6:	4259      	negs	r1, r3
 800abe8:	4159      	adcs	r1, r3
 800abea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abee:	e7eb      	b.n	800abc8 <__swhatbuf_r+0x24>

0800abf0 <__smakebuf_r>:
 800abf0:	898b      	ldrh	r3, [r1, #12]
 800abf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abf4:	079d      	lsls	r5, r3, #30
 800abf6:	4606      	mov	r6, r0
 800abf8:	460c      	mov	r4, r1
 800abfa:	d507      	bpl.n	800ac0c <__smakebuf_r+0x1c>
 800abfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	6123      	str	r3, [r4, #16]
 800ac04:	2301      	movs	r3, #1
 800ac06:	6163      	str	r3, [r4, #20]
 800ac08:	b003      	add	sp, #12
 800ac0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac0c:	ab01      	add	r3, sp, #4
 800ac0e:	466a      	mov	r2, sp
 800ac10:	f7ff ffc8 	bl	800aba4 <__swhatbuf_r>
 800ac14:	9f00      	ldr	r7, [sp, #0]
 800ac16:	4605      	mov	r5, r0
 800ac18:	4639      	mov	r1, r7
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	f7fd fda0 	bl	8008760 <_malloc_r>
 800ac20:	b948      	cbnz	r0, 800ac36 <__smakebuf_r+0x46>
 800ac22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac26:	059a      	lsls	r2, r3, #22
 800ac28:	d4ee      	bmi.n	800ac08 <__smakebuf_r+0x18>
 800ac2a:	f023 0303 	bic.w	r3, r3, #3
 800ac2e:	f043 0302 	orr.w	r3, r3, #2
 800ac32:	81a3      	strh	r3, [r4, #12]
 800ac34:	e7e2      	b.n	800abfc <__smakebuf_r+0xc>
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	6020      	str	r0, [r4, #0]
 800ac3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac3e:	81a3      	strh	r3, [r4, #12]
 800ac40:	9b01      	ldr	r3, [sp, #4]
 800ac42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac46:	b15b      	cbz	r3, 800ac60 <__smakebuf_r+0x70>
 800ac48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	f000 f8bd 	bl	800adcc <_isatty_r>
 800ac52:	b128      	cbz	r0, 800ac60 <__smakebuf_r+0x70>
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	f023 0303 	bic.w	r3, r3, #3
 800ac5a:	f043 0301 	orr.w	r3, r3, #1
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	431d      	orrs	r5, r3
 800ac64:	81a5      	strh	r5, [r4, #12]
 800ac66:	e7cf      	b.n	800ac08 <__smakebuf_r+0x18>

0800ac68 <__sccl>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	780b      	ldrb	r3, [r1, #0]
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	2b5e      	cmp	r3, #94	@ 0x5e
 800ac70:	bf0b      	itete	eq
 800ac72:	784b      	ldrbeq	r3, [r1, #1]
 800ac74:	1c4a      	addne	r2, r1, #1
 800ac76:	1c8a      	addeq	r2, r1, #2
 800ac78:	2100      	movne	r1, #0
 800ac7a:	bf08      	it	eq
 800ac7c:	2101      	moveq	r1, #1
 800ac7e:	3801      	subs	r0, #1
 800ac80:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ac84:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ac88:	42a8      	cmp	r0, r5
 800ac8a:	d1fb      	bne.n	800ac84 <__sccl+0x1c>
 800ac8c:	b90b      	cbnz	r3, 800ac92 <__sccl+0x2a>
 800ac8e:	1e50      	subs	r0, r2, #1
 800ac90:	bd70      	pop	{r4, r5, r6, pc}
 800ac92:	f081 0101 	eor.w	r1, r1, #1
 800ac96:	54e1      	strb	r1, [r4, r3]
 800ac98:	4610      	mov	r0, r2
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aca0:	2d2d      	cmp	r5, #45	@ 0x2d
 800aca2:	d005      	beq.n	800acb0 <__sccl+0x48>
 800aca4:	2d5d      	cmp	r5, #93	@ 0x5d
 800aca6:	d016      	beq.n	800acd6 <__sccl+0x6e>
 800aca8:	2d00      	cmp	r5, #0
 800acaa:	d0f1      	beq.n	800ac90 <__sccl+0x28>
 800acac:	462b      	mov	r3, r5
 800acae:	e7f2      	b.n	800ac96 <__sccl+0x2e>
 800acb0:	7846      	ldrb	r6, [r0, #1]
 800acb2:	2e5d      	cmp	r6, #93	@ 0x5d
 800acb4:	d0fa      	beq.n	800acac <__sccl+0x44>
 800acb6:	42b3      	cmp	r3, r6
 800acb8:	dcf8      	bgt.n	800acac <__sccl+0x44>
 800acba:	3002      	adds	r0, #2
 800acbc:	461a      	mov	r2, r3
 800acbe:	3201      	adds	r2, #1
 800acc0:	4296      	cmp	r6, r2
 800acc2:	54a1      	strb	r1, [r4, r2]
 800acc4:	dcfb      	bgt.n	800acbe <__sccl+0x56>
 800acc6:	1af2      	subs	r2, r6, r3
 800acc8:	3a01      	subs	r2, #1
 800acca:	1c5d      	adds	r5, r3, #1
 800accc:	42b3      	cmp	r3, r6
 800acce:	bfa8      	it	ge
 800acd0:	2200      	movge	r2, #0
 800acd2:	18ab      	adds	r3, r5, r2
 800acd4:	e7e1      	b.n	800ac9a <__sccl+0x32>
 800acd6:	4610      	mov	r0, r2
 800acd8:	e7da      	b.n	800ac90 <__sccl+0x28>

0800acda <__submore>:
 800acda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acde:	460c      	mov	r4, r1
 800ace0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ace2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ace6:	4299      	cmp	r1, r3
 800ace8:	d11d      	bne.n	800ad26 <__submore+0x4c>
 800acea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800acee:	f7fd fd37 	bl	8008760 <_malloc_r>
 800acf2:	b918      	cbnz	r0, 800acfc <__submore+0x22>
 800acf4:	f04f 30ff 	mov.w	r0, #4294967295
 800acf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad00:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ad02:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ad06:	6360      	str	r0, [r4, #52]	@ 0x34
 800ad08:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ad0c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ad10:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ad14:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ad18:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ad1c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ad20:	6020      	str	r0, [r4, #0]
 800ad22:	2000      	movs	r0, #0
 800ad24:	e7e8      	b.n	800acf8 <__submore+0x1e>
 800ad26:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ad28:	0077      	lsls	r7, r6, #1
 800ad2a:	463a      	mov	r2, r7
 800ad2c:	f000 fc01 	bl	800b532 <_realloc_r>
 800ad30:	4605      	mov	r5, r0
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d0de      	beq.n	800acf4 <__submore+0x1a>
 800ad36:	eb00 0806 	add.w	r8, r0, r6
 800ad3a:	4601      	mov	r1, r0
 800ad3c:	4632      	mov	r2, r6
 800ad3e:	4640      	mov	r0, r8
 800ad40:	f000 f864 	bl	800ae0c <memcpy>
 800ad44:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ad48:	f8c4 8000 	str.w	r8, [r4]
 800ad4c:	e7e9      	b.n	800ad22 <__submore+0x48>

0800ad4e <memmove>:
 800ad4e:	4288      	cmp	r0, r1
 800ad50:	b510      	push	{r4, lr}
 800ad52:	eb01 0402 	add.w	r4, r1, r2
 800ad56:	d902      	bls.n	800ad5e <memmove+0x10>
 800ad58:	4284      	cmp	r4, r0
 800ad5a:	4623      	mov	r3, r4
 800ad5c:	d807      	bhi.n	800ad6e <memmove+0x20>
 800ad5e:	1e43      	subs	r3, r0, #1
 800ad60:	42a1      	cmp	r1, r4
 800ad62:	d008      	beq.n	800ad76 <memmove+0x28>
 800ad64:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad68:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad6c:	e7f8      	b.n	800ad60 <memmove+0x12>
 800ad6e:	4402      	add	r2, r0
 800ad70:	4601      	mov	r1, r0
 800ad72:	428a      	cmp	r2, r1
 800ad74:	d100      	bne.n	800ad78 <memmove+0x2a>
 800ad76:	bd10      	pop	{r4, pc}
 800ad78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad80:	e7f7      	b.n	800ad72 <memmove+0x24>

0800ad82 <strncmp>:
 800ad82:	b510      	push	{r4, lr}
 800ad84:	b16a      	cbz	r2, 800ada2 <strncmp+0x20>
 800ad86:	3901      	subs	r1, #1
 800ad88:	1884      	adds	r4, r0, r2
 800ad8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad8e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d103      	bne.n	800ad9e <strncmp+0x1c>
 800ad96:	42a0      	cmp	r0, r4
 800ad98:	d001      	beq.n	800ad9e <strncmp+0x1c>
 800ad9a:	2a00      	cmp	r2, #0
 800ad9c:	d1f5      	bne.n	800ad8a <strncmp+0x8>
 800ad9e:	1ad0      	subs	r0, r2, r3
 800ada0:	bd10      	pop	{r4, pc}
 800ada2:	4610      	mov	r0, r2
 800ada4:	e7fc      	b.n	800ada0 <strncmp+0x1e>
	...

0800ada8 <_fstat_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d07      	ldr	r5, [pc, #28]	@ (800adc8 <_fstat_r+0x20>)
 800adac:	2300      	movs	r3, #0
 800adae:	4604      	mov	r4, r0
 800adb0:	4608      	mov	r0, r1
 800adb2:	4611      	mov	r1, r2
 800adb4:	602b      	str	r3, [r5, #0]
 800adb6:	f7f6 ff7b 	bl	8001cb0 <_fstat>
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	d102      	bne.n	800adc4 <_fstat_r+0x1c>
 800adbe:	682b      	ldr	r3, [r5, #0]
 800adc0:	b103      	cbz	r3, 800adc4 <_fstat_r+0x1c>
 800adc2:	6023      	str	r3, [r4, #0]
 800adc4:	bd38      	pop	{r3, r4, r5, pc}
 800adc6:	bf00      	nop
 800adc8:	20001164 	.word	0x20001164

0800adcc <_isatty_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d06      	ldr	r5, [pc, #24]	@ (800ade8 <_isatty_r+0x1c>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	602b      	str	r3, [r5, #0]
 800add8:	f7f6 ff7a 	bl	8001cd0 <_isatty>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_isatty_r+0x1a>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_isatty_r+0x1a>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	20001164 	.word	0x20001164

0800adec <_sbrk_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d06      	ldr	r5, [pc, #24]	@ (800ae08 <_sbrk_r+0x1c>)
 800adf0:	2300      	movs	r3, #0
 800adf2:	4604      	mov	r4, r0
 800adf4:	4608      	mov	r0, r1
 800adf6:	602b      	str	r3, [r5, #0]
 800adf8:	f7f6 ff82 	bl	8001d00 <_sbrk>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d102      	bne.n	800ae06 <_sbrk_r+0x1a>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	b103      	cbz	r3, 800ae06 <_sbrk_r+0x1a>
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	bd38      	pop	{r3, r4, r5, pc}
 800ae08:	20001164 	.word	0x20001164

0800ae0c <memcpy>:
 800ae0c:	440a      	add	r2, r1
 800ae0e:	4291      	cmp	r1, r2
 800ae10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae14:	d100      	bne.n	800ae18 <memcpy+0xc>
 800ae16:	4770      	bx	lr
 800ae18:	b510      	push	{r4, lr}
 800ae1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae22:	4291      	cmp	r1, r2
 800ae24:	d1f9      	bne.n	800ae1a <memcpy+0xe>
 800ae26:	bd10      	pop	{r4, pc}

0800ae28 <nan>:
 800ae28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae30 <nan+0x8>
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	00000000 	.word	0x00000000
 800ae34:	7ff80000 	.word	0x7ff80000

0800ae38 <__assert_func>:
 800ae38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae3a:	4614      	mov	r4, r2
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	4b09      	ldr	r3, [pc, #36]	@ (800ae64 <__assert_func+0x2c>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4605      	mov	r5, r0
 800ae44:	68d8      	ldr	r0, [r3, #12]
 800ae46:	b954      	cbnz	r4, 800ae5e <__assert_func+0x26>
 800ae48:	4b07      	ldr	r3, [pc, #28]	@ (800ae68 <__assert_func+0x30>)
 800ae4a:	461c      	mov	r4, r3
 800ae4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae50:	9100      	str	r1, [sp, #0]
 800ae52:	462b      	mov	r3, r5
 800ae54:	4905      	ldr	r1, [pc, #20]	@ (800ae6c <__assert_func+0x34>)
 800ae56:	f000 fc19 	bl	800b68c <fiprintf>
 800ae5a:	f000 fc29 	bl	800b6b0 <abort>
 800ae5e:	4b04      	ldr	r3, [pc, #16]	@ (800ae70 <__assert_func+0x38>)
 800ae60:	e7f4      	b.n	800ae4c <__assert_func+0x14>
 800ae62:	bf00      	nop
 800ae64:	20000bd0 	.word	0x20000bd0
 800ae68:	0800bd08 	.word	0x0800bd08
 800ae6c:	0800bcda 	.word	0x0800bcda
 800ae70:	0800bccd 	.word	0x0800bccd

0800ae74 <_calloc_r>:
 800ae74:	b570      	push	{r4, r5, r6, lr}
 800ae76:	fba1 5402 	umull	r5, r4, r1, r2
 800ae7a:	b93c      	cbnz	r4, 800ae8c <_calloc_r+0x18>
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	f7fd fc6f 	bl	8008760 <_malloc_r>
 800ae82:	4606      	mov	r6, r0
 800ae84:	b928      	cbnz	r0, 800ae92 <_calloc_r+0x1e>
 800ae86:	2600      	movs	r6, #0
 800ae88:	4630      	mov	r0, r6
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}
 800ae8c:	220c      	movs	r2, #12
 800ae8e:	6002      	str	r2, [r0, #0]
 800ae90:	e7f9      	b.n	800ae86 <_calloc_r+0x12>
 800ae92:	462a      	mov	r2, r5
 800ae94:	4621      	mov	r1, r4
 800ae96:	f7fc fcdd 	bl	8007854 <memset>
 800ae9a:	e7f5      	b.n	800ae88 <_calloc_r+0x14>

0800ae9c <rshift>:
 800ae9c:	6903      	ldr	r3, [r0, #16]
 800ae9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aea2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aea6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aeaa:	f100 0414 	add.w	r4, r0, #20
 800aeae:	dd45      	ble.n	800af3c <rshift+0xa0>
 800aeb0:	f011 011f 	ands.w	r1, r1, #31
 800aeb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aeb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aebc:	d10c      	bne.n	800aed8 <rshift+0x3c>
 800aebe:	f100 0710 	add.w	r7, r0, #16
 800aec2:	4629      	mov	r1, r5
 800aec4:	42b1      	cmp	r1, r6
 800aec6:	d334      	bcc.n	800af32 <rshift+0x96>
 800aec8:	1a9b      	subs	r3, r3, r2
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	1eea      	subs	r2, r5, #3
 800aece:	4296      	cmp	r6, r2
 800aed0:	bf38      	it	cc
 800aed2:	2300      	movcc	r3, #0
 800aed4:	4423      	add	r3, r4
 800aed6:	e015      	b.n	800af04 <rshift+0x68>
 800aed8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aedc:	f1c1 0820 	rsb	r8, r1, #32
 800aee0:	40cf      	lsrs	r7, r1
 800aee2:	f105 0e04 	add.w	lr, r5, #4
 800aee6:	46a1      	mov	r9, r4
 800aee8:	4576      	cmp	r6, lr
 800aeea:	46f4      	mov	ip, lr
 800aeec:	d815      	bhi.n	800af1a <rshift+0x7e>
 800aeee:	1a9a      	subs	r2, r3, r2
 800aef0:	0092      	lsls	r2, r2, #2
 800aef2:	3a04      	subs	r2, #4
 800aef4:	3501      	adds	r5, #1
 800aef6:	42ae      	cmp	r6, r5
 800aef8:	bf38      	it	cc
 800aefa:	2200      	movcc	r2, #0
 800aefc:	18a3      	adds	r3, r4, r2
 800aefe:	50a7      	str	r7, [r4, r2]
 800af00:	b107      	cbz	r7, 800af04 <rshift+0x68>
 800af02:	3304      	adds	r3, #4
 800af04:	1b1a      	subs	r2, r3, r4
 800af06:	42a3      	cmp	r3, r4
 800af08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af0c:	bf08      	it	eq
 800af0e:	2300      	moveq	r3, #0
 800af10:	6102      	str	r2, [r0, #16]
 800af12:	bf08      	it	eq
 800af14:	6143      	streq	r3, [r0, #20]
 800af16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af1a:	f8dc c000 	ldr.w	ip, [ip]
 800af1e:	fa0c fc08 	lsl.w	ip, ip, r8
 800af22:	ea4c 0707 	orr.w	r7, ip, r7
 800af26:	f849 7b04 	str.w	r7, [r9], #4
 800af2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af2e:	40cf      	lsrs	r7, r1
 800af30:	e7da      	b.n	800aee8 <rshift+0x4c>
 800af32:	f851 cb04 	ldr.w	ip, [r1], #4
 800af36:	f847 cf04 	str.w	ip, [r7, #4]!
 800af3a:	e7c3      	b.n	800aec4 <rshift+0x28>
 800af3c:	4623      	mov	r3, r4
 800af3e:	e7e1      	b.n	800af04 <rshift+0x68>

0800af40 <__hexdig_fun>:
 800af40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800af44:	2b09      	cmp	r3, #9
 800af46:	d802      	bhi.n	800af4e <__hexdig_fun+0xe>
 800af48:	3820      	subs	r0, #32
 800af4a:	b2c0      	uxtb	r0, r0
 800af4c:	4770      	bx	lr
 800af4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800af52:	2b05      	cmp	r3, #5
 800af54:	d801      	bhi.n	800af5a <__hexdig_fun+0x1a>
 800af56:	3847      	subs	r0, #71	@ 0x47
 800af58:	e7f7      	b.n	800af4a <__hexdig_fun+0xa>
 800af5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800af5e:	2b05      	cmp	r3, #5
 800af60:	d801      	bhi.n	800af66 <__hexdig_fun+0x26>
 800af62:	3827      	subs	r0, #39	@ 0x27
 800af64:	e7f1      	b.n	800af4a <__hexdig_fun+0xa>
 800af66:	2000      	movs	r0, #0
 800af68:	4770      	bx	lr
	...

0800af6c <__gethex>:
 800af6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af70:	b085      	sub	sp, #20
 800af72:	468a      	mov	sl, r1
 800af74:	9302      	str	r3, [sp, #8]
 800af76:	680b      	ldr	r3, [r1, #0]
 800af78:	9001      	str	r0, [sp, #4]
 800af7a:	4690      	mov	r8, r2
 800af7c:	1c9c      	adds	r4, r3, #2
 800af7e:	46a1      	mov	r9, r4
 800af80:	f814 0b01 	ldrb.w	r0, [r4], #1
 800af84:	2830      	cmp	r0, #48	@ 0x30
 800af86:	d0fa      	beq.n	800af7e <__gethex+0x12>
 800af88:	eba9 0303 	sub.w	r3, r9, r3
 800af8c:	f1a3 0b02 	sub.w	fp, r3, #2
 800af90:	f7ff ffd6 	bl	800af40 <__hexdig_fun>
 800af94:	4605      	mov	r5, r0
 800af96:	2800      	cmp	r0, #0
 800af98:	d168      	bne.n	800b06c <__gethex+0x100>
 800af9a:	49a0      	ldr	r1, [pc, #640]	@ (800b21c <__gethex+0x2b0>)
 800af9c:	2201      	movs	r2, #1
 800af9e:	4648      	mov	r0, r9
 800afa0:	f7ff feef 	bl	800ad82 <strncmp>
 800afa4:	4607      	mov	r7, r0
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d167      	bne.n	800b07a <__gethex+0x10e>
 800afaa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800afae:	4626      	mov	r6, r4
 800afb0:	f7ff ffc6 	bl	800af40 <__hexdig_fun>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d062      	beq.n	800b07e <__gethex+0x112>
 800afb8:	4623      	mov	r3, r4
 800afba:	7818      	ldrb	r0, [r3, #0]
 800afbc:	2830      	cmp	r0, #48	@ 0x30
 800afbe:	4699      	mov	r9, r3
 800afc0:	f103 0301 	add.w	r3, r3, #1
 800afc4:	d0f9      	beq.n	800afba <__gethex+0x4e>
 800afc6:	f7ff ffbb 	bl	800af40 <__hexdig_fun>
 800afca:	fab0 f580 	clz	r5, r0
 800afce:	096d      	lsrs	r5, r5, #5
 800afd0:	f04f 0b01 	mov.w	fp, #1
 800afd4:	464a      	mov	r2, r9
 800afd6:	4616      	mov	r6, r2
 800afd8:	3201      	adds	r2, #1
 800afda:	7830      	ldrb	r0, [r6, #0]
 800afdc:	f7ff ffb0 	bl	800af40 <__hexdig_fun>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d1f8      	bne.n	800afd6 <__gethex+0x6a>
 800afe4:	498d      	ldr	r1, [pc, #564]	@ (800b21c <__gethex+0x2b0>)
 800afe6:	2201      	movs	r2, #1
 800afe8:	4630      	mov	r0, r6
 800afea:	f7ff feca 	bl	800ad82 <strncmp>
 800afee:	2800      	cmp	r0, #0
 800aff0:	d13f      	bne.n	800b072 <__gethex+0x106>
 800aff2:	b944      	cbnz	r4, 800b006 <__gethex+0x9a>
 800aff4:	1c74      	adds	r4, r6, #1
 800aff6:	4622      	mov	r2, r4
 800aff8:	4616      	mov	r6, r2
 800affa:	3201      	adds	r2, #1
 800affc:	7830      	ldrb	r0, [r6, #0]
 800affe:	f7ff ff9f 	bl	800af40 <__hexdig_fun>
 800b002:	2800      	cmp	r0, #0
 800b004:	d1f8      	bne.n	800aff8 <__gethex+0x8c>
 800b006:	1ba4      	subs	r4, r4, r6
 800b008:	00a7      	lsls	r7, r4, #2
 800b00a:	7833      	ldrb	r3, [r6, #0]
 800b00c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b010:	2b50      	cmp	r3, #80	@ 0x50
 800b012:	d13e      	bne.n	800b092 <__gethex+0x126>
 800b014:	7873      	ldrb	r3, [r6, #1]
 800b016:	2b2b      	cmp	r3, #43	@ 0x2b
 800b018:	d033      	beq.n	800b082 <__gethex+0x116>
 800b01a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b01c:	d034      	beq.n	800b088 <__gethex+0x11c>
 800b01e:	1c71      	adds	r1, r6, #1
 800b020:	2400      	movs	r4, #0
 800b022:	7808      	ldrb	r0, [r1, #0]
 800b024:	f7ff ff8c 	bl	800af40 <__hexdig_fun>
 800b028:	1e43      	subs	r3, r0, #1
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b18      	cmp	r3, #24
 800b02e:	d830      	bhi.n	800b092 <__gethex+0x126>
 800b030:	f1a0 0210 	sub.w	r2, r0, #16
 800b034:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b038:	f7ff ff82 	bl	800af40 <__hexdig_fun>
 800b03c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b040:	fa5f fc8c 	uxtb.w	ip, ip
 800b044:	f1bc 0f18 	cmp.w	ip, #24
 800b048:	f04f 030a 	mov.w	r3, #10
 800b04c:	d91e      	bls.n	800b08c <__gethex+0x120>
 800b04e:	b104      	cbz	r4, 800b052 <__gethex+0xe6>
 800b050:	4252      	negs	r2, r2
 800b052:	4417      	add	r7, r2
 800b054:	f8ca 1000 	str.w	r1, [sl]
 800b058:	b1ed      	cbz	r5, 800b096 <__gethex+0x12a>
 800b05a:	f1bb 0f00 	cmp.w	fp, #0
 800b05e:	bf0c      	ite	eq
 800b060:	2506      	moveq	r5, #6
 800b062:	2500      	movne	r5, #0
 800b064:	4628      	mov	r0, r5
 800b066:	b005      	add	sp, #20
 800b068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06c:	2500      	movs	r5, #0
 800b06e:	462c      	mov	r4, r5
 800b070:	e7b0      	b.n	800afd4 <__gethex+0x68>
 800b072:	2c00      	cmp	r4, #0
 800b074:	d1c7      	bne.n	800b006 <__gethex+0x9a>
 800b076:	4627      	mov	r7, r4
 800b078:	e7c7      	b.n	800b00a <__gethex+0x9e>
 800b07a:	464e      	mov	r6, r9
 800b07c:	462f      	mov	r7, r5
 800b07e:	2501      	movs	r5, #1
 800b080:	e7c3      	b.n	800b00a <__gethex+0x9e>
 800b082:	2400      	movs	r4, #0
 800b084:	1cb1      	adds	r1, r6, #2
 800b086:	e7cc      	b.n	800b022 <__gethex+0xb6>
 800b088:	2401      	movs	r4, #1
 800b08a:	e7fb      	b.n	800b084 <__gethex+0x118>
 800b08c:	fb03 0002 	mla	r0, r3, r2, r0
 800b090:	e7ce      	b.n	800b030 <__gethex+0xc4>
 800b092:	4631      	mov	r1, r6
 800b094:	e7de      	b.n	800b054 <__gethex+0xe8>
 800b096:	eba6 0309 	sub.w	r3, r6, r9
 800b09a:	3b01      	subs	r3, #1
 800b09c:	4629      	mov	r1, r5
 800b09e:	2b07      	cmp	r3, #7
 800b0a0:	dc0a      	bgt.n	800b0b8 <__gethex+0x14c>
 800b0a2:	9801      	ldr	r0, [sp, #4]
 800b0a4:	f7fd fbe8 	bl	8008878 <_Balloc>
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	b940      	cbnz	r0, 800b0be <__gethex+0x152>
 800b0ac:	4b5c      	ldr	r3, [pc, #368]	@ (800b220 <__gethex+0x2b4>)
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	21e4      	movs	r1, #228	@ 0xe4
 800b0b2:	485c      	ldr	r0, [pc, #368]	@ (800b224 <__gethex+0x2b8>)
 800b0b4:	f7ff fec0 	bl	800ae38 <__assert_func>
 800b0b8:	3101      	adds	r1, #1
 800b0ba:	105b      	asrs	r3, r3, #1
 800b0bc:	e7ef      	b.n	800b09e <__gethex+0x132>
 800b0be:	f100 0a14 	add.w	sl, r0, #20
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	4655      	mov	r5, sl
 800b0c6:	469b      	mov	fp, r3
 800b0c8:	45b1      	cmp	r9, r6
 800b0ca:	d337      	bcc.n	800b13c <__gethex+0x1d0>
 800b0cc:	f845 bb04 	str.w	fp, [r5], #4
 800b0d0:	eba5 050a 	sub.w	r5, r5, sl
 800b0d4:	10ad      	asrs	r5, r5, #2
 800b0d6:	6125      	str	r5, [r4, #16]
 800b0d8:	4658      	mov	r0, fp
 800b0da:	f7fd fcbf 	bl	8008a5c <__hi0bits>
 800b0de:	016d      	lsls	r5, r5, #5
 800b0e0:	f8d8 6000 	ldr.w	r6, [r8]
 800b0e4:	1a2d      	subs	r5, r5, r0
 800b0e6:	42b5      	cmp	r5, r6
 800b0e8:	dd54      	ble.n	800b194 <__gethex+0x228>
 800b0ea:	1bad      	subs	r5, r5, r6
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f7fe f853 	bl	800919a <__any_on>
 800b0f4:	4681      	mov	r9, r0
 800b0f6:	b178      	cbz	r0, 800b118 <__gethex+0x1ac>
 800b0f8:	1e6b      	subs	r3, r5, #1
 800b0fa:	1159      	asrs	r1, r3, #5
 800b0fc:	f003 021f 	and.w	r2, r3, #31
 800b100:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b104:	f04f 0901 	mov.w	r9, #1
 800b108:	fa09 f202 	lsl.w	r2, r9, r2
 800b10c:	420a      	tst	r2, r1
 800b10e:	d003      	beq.n	800b118 <__gethex+0x1ac>
 800b110:	454b      	cmp	r3, r9
 800b112:	dc36      	bgt.n	800b182 <__gethex+0x216>
 800b114:	f04f 0902 	mov.w	r9, #2
 800b118:	4629      	mov	r1, r5
 800b11a:	4620      	mov	r0, r4
 800b11c:	f7ff febe 	bl	800ae9c <rshift>
 800b120:	442f      	add	r7, r5
 800b122:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b126:	42bb      	cmp	r3, r7
 800b128:	da42      	bge.n	800b1b0 <__gethex+0x244>
 800b12a:	9801      	ldr	r0, [sp, #4]
 800b12c:	4621      	mov	r1, r4
 800b12e:	f7fd fbe3 	bl	80088f8 <_Bfree>
 800b132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b134:	2300      	movs	r3, #0
 800b136:	6013      	str	r3, [r2, #0]
 800b138:	25a3      	movs	r5, #163	@ 0xa3
 800b13a:	e793      	b.n	800b064 <__gethex+0xf8>
 800b13c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b140:	2a2e      	cmp	r2, #46	@ 0x2e
 800b142:	d012      	beq.n	800b16a <__gethex+0x1fe>
 800b144:	2b20      	cmp	r3, #32
 800b146:	d104      	bne.n	800b152 <__gethex+0x1e6>
 800b148:	f845 bb04 	str.w	fp, [r5], #4
 800b14c:	f04f 0b00 	mov.w	fp, #0
 800b150:	465b      	mov	r3, fp
 800b152:	7830      	ldrb	r0, [r6, #0]
 800b154:	9303      	str	r3, [sp, #12]
 800b156:	f7ff fef3 	bl	800af40 <__hexdig_fun>
 800b15a:	9b03      	ldr	r3, [sp, #12]
 800b15c:	f000 000f 	and.w	r0, r0, #15
 800b160:	4098      	lsls	r0, r3
 800b162:	ea4b 0b00 	orr.w	fp, fp, r0
 800b166:	3304      	adds	r3, #4
 800b168:	e7ae      	b.n	800b0c8 <__gethex+0x15c>
 800b16a:	45b1      	cmp	r9, r6
 800b16c:	d8ea      	bhi.n	800b144 <__gethex+0x1d8>
 800b16e:	492b      	ldr	r1, [pc, #172]	@ (800b21c <__gethex+0x2b0>)
 800b170:	9303      	str	r3, [sp, #12]
 800b172:	2201      	movs	r2, #1
 800b174:	4630      	mov	r0, r6
 800b176:	f7ff fe04 	bl	800ad82 <strncmp>
 800b17a:	9b03      	ldr	r3, [sp, #12]
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d1e1      	bne.n	800b144 <__gethex+0x1d8>
 800b180:	e7a2      	b.n	800b0c8 <__gethex+0x15c>
 800b182:	1ea9      	subs	r1, r5, #2
 800b184:	4620      	mov	r0, r4
 800b186:	f7fe f808 	bl	800919a <__any_on>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d0c2      	beq.n	800b114 <__gethex+0x1a8>
 800b18e:	f04f 0903 	mov.w	r9, #3
 800b192:	e7c1      	b.n	800b118 <__gethex+0x1ac>
 800b194:	da09      	bge.n	800b1aa <__gethex+0x23e>
 800b196:	1b75      	subs	r5, r6, r5
 800b198:	4621      	mov	r1, r4
 800b19a:	9801      	ldr	r0, [sp, #4]
 800b19c:	462a      	mov	r2, r5
 800b19e:	f7fd fdc3 	bl	8008d28 <__lshift>
 800b1a2:	1b7f      	subs	r7, r7, r5
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	f100 0a14 	add.w	sl, r0, #20
 800b1aa:	f04f 0900 	mov.w	r9, #0
 800b1ae:	e7b8      	b.n	800b122 <__gethex+0x1b6>
 800b1b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b1b4:	42bd      	cmp	r5, r7
 800b1b6:	dd6f      	ble.n	800b298 <__gethex+0x32c>
 800b1b8:	1bed      	subs	r5, r5, r7
 800b1ba:	42ae      	cmp	r6, r5
 800b1bc:	dc34      	bgt.n	800b228 <__gethex+0x2bc>
 800b1be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d022      	beq.n	800b20c <__gethex+0x2a0>
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d024      	beq.n	800b214 <__gethex+0x2a8>
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d115      	bne.n	800b1fa <__gethex+0x28e>
 800b1ce:	42ae      	cmp	r6, r5
 800b1d0:	d113      	bne.n	800b1fa <__gethex+0x28e>
 800b1d2:	2e01      	cmp	r6, #1
 800b1d4:	d10b      	bne.n	800b1ee <__gethex+0x282>
 800b1d6:	9a02      	ldr	r2, [sp, #8]
 800b1d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	2301      	movs	r3, #1
 800b1e0:	6123      	str	r3, [r4, #16]
 800b1e2:	f8ca 3000 	str.w	r3, [sl]
 800b1e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1e8:	2562      	movs	r5, #98	@ 0x62
 800b1ea:	601c      	str	r4, [r3, #0]
 800b1ec:	e73a      	b.n	800b064 <__gethex+0xf8>
 800b1ee:	1e71      	subs	r1, r6, #1
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f7fd ffd2 	bl	800919a <__any_on>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d1ed      	bne.n	800b1d6 <__gethex+0x26a>
 800b1fa:	9801      	ldr	r0, [sp, #4]
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	f7fd fb7b 	bl	80088f8 <_Bfree>
 800b202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b204:	2300      	movs	r3, #0
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	2550      	movs	r5, #80	@ 0x50
 800b20a:	e72b      	b.n	800b064 <__gethex+0xf8>
 800b20c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1f3      	bne.n	800b1fa <__gethex+0x28e>
 800b212:	e7e0      	b.n	800b1d6 <__gethex+0x26a>
 800b214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1dd      	bne.n	800b1d6 <__gethex+0x26a>
 800b21a:	e7ee      	b.n	800b1fa <__gethex+0x28e>
 800b21c:	0800bb40 	.word	0x0800bb40
 800b220:	0800b9d3 	.word	0x0800b9d3
 800b224:	0800bd09 	.word	0x0800bd09
 800b228:	1e6f      	subs	r7, r5, #1
 800b22a:	f1b9 0f00 	cmp.w	r9, #0
 800b22e:	d130      	bne.n	800b292 <__gethex+0x326>
 800b230:	b127      	cbz	r7, 800b23c <__gethex+0x2d0>
 800b232:	4639      	mov	r1, r7
 800b234:	4620      	mov	r0, r4
 800b236:	f7fd ffb0 	bl	800919a <__any_on>
 800b23a:	4681      	mov	r9, r0
 800b23c:	117a      	asrs	r2, r7, #5
 800b23e:	2301      	movs	r3, #1
 800b240:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b244:	f007 071f 	and.w	r7, r7, #31
 800b248:	40bb      	lsls	r3, r7
 800b24a:	4213      	tst	r3, r2
 800b24c:	4629      	mov	r1, r5
 800b24e:	4620      	mov	r0, r4
 800b250:	bf18      	it	ne
 800b252:	f049 0902 	orrne.w	r9, r9, #2
 800b256:	f7ff fe21 	bl	800ae9c <rshift>
 800b25a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b25e:	1b76      	subs	r6, r6, r5
 800b260:	2502      	movs	r5, #2
 800b262:	f1b9 0f00 	cmp.w	r9, #0
 800b266:	d047      	beq.n	800b2f8 <__gethex+0x38c>
 800b268:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d015      	beq.n	800b29c <__gethex+0x330>
 800b270:	2b03      	cmp	r3, #3
 800b272:	d017      	beq.n	800b2a4 <__gethex+0x338>
 800b274:	2b01      	cmp	r3, #1
 800b276:	d109      	bne.n	800b28c <__gethex+0x320>
 800b278:	f019 0f02 	tst.w	r9, #2
 800b27c:	d006      	beq.n	800b28c <__gethex+0x320>
 800b27e:	f8da 3000 	ldr.w	r3, [sl]
 800b282:	ea49 0903 	orr.w	r9, r9, r3
 800b286:	f019 0f01 	tst.w	r9, #1
 800b28a:	d10e      	bne.n	800b2aa <__gethex+0x33e>
 800b28c:	f045 0510 	orr.w	r5, r5, #16
 800b290:	e032      	b.n	800b2f8 <__gethex+0x38c>
 800b292:	f04f 0901 	mov.w	r9, #1
 800b296:	e7d1      	b.n	800b23c <__gethex+0x2d0>
 800b298:	2501      	movs	r5, #1
 800b29a:	e7e2      	b.n	800b262 <__gethex+0x2f6>
 800b29c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b29e:	f1c3 0301 	rsb	r3, r3, #1
 800b2a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0f0      	beq.n	800b28c <__gethex+0x320>
 800b2aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2ae:	f104 0314 	add.w	r3, r4, #20
 800b2b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2ba:	f04f 0c00 	mov.w	ip, #0
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2c8:	d01b      	beq.n	800b302 <__gethex+0x396>
 800b2ca:	3201      	adds	r2, #1
 800b2cc:	6002      	str	r2, [r0, #0]
 800b2ce:	2d02      	cmp	r5, #2
 800b2d0:	f104 0314 	add.w	r3, r4, #20
 800b2d4:	d13c      	bne.n	800b350 <__gethex+0x3e4>
 800b2d6:	f8d8 2000 	ldr.w	r2, [r8]
 800b2da:	3a01      	subs	r2, #1
 800b2dc:	42b2      	cmp	r2, r6
 800b2de:	d109      	bne.n	800b2f4 <__gethex+0x388>
 800b2e0:	1171      	asrs	r1, r6, #5
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2e8:	f006 061f 	and.w	r6, r6, #31
 800b2ec:	fa02 f606 	lsl.w	r6, r2, r6
 800b2f0:	421e      	tst	r6, r3
 800b2f2:	d13a      	bne.n	800b36a <__gethex+0x3fe>
 800b2f4:	f045 0520 	orr.w	r5, r5, #32
 800b2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2fa:	601c      	str	r4, [r3, #0]
 800b2fc:	9b02      	ldr	r3, [sp, #8]
 800b2fe:	601f      	str	r7, [r3, #0]
 800b300:	e6b0      	b.n	800b064 <__gethex+0xf8>
 800b302:	4299      	cmp	r1, r3
 800b304:	f843 cc04 	str.w	ip, [r3, #-4]
 800b308:	d8d9      	bhi.n	800b2be <__gethex+0x352>
 800b30a:	68a3      	ldr	r3, [r4, #8]
 800b30c:	459b      	cmp	fp, r3
 800b30e:	db17      	blt.n	800b340 <__gethex+0x3d4>
 800b310:	6861      	ldr	r1, [r4, #4]
 800b312:	9801      	ldr	r0, [sp, #4]
 800b314:	3101      	adds	r1, #1
 800b316:	f7fd faaf 	bl	8008878 <_Balloc>
 800b31a:	4681      	mov	r9, r0
 800b31c:	b918      	cbnz	r0, 800b326 <__gethex+0x3ba>
 800b31e:	4b1a      	ldr	r3, [pc, #104]	@ (800b388 <__gethex+0x41c>)
 800b320:	4602      	mov	r2, r0
 800b322:	2184      	movs	r1, #132	@ 0x84
 800b324:	e6c5      	b.n	800b0b2 <__gethex+0x146>
 800b326:	6922      	ldr	r2, [r4, #16]
 800b328:	3202      	adds	r2, #2
 800b32a:	f104 010c 	add.w	r1, r4, #12
 800b32e:	0092      	lsls	r2, r2, #2
 800b330:	300c      	adds	r0, #12
 800b332:	f7ff fd6b 	bl	800ae0c <memcpy>
 800b336:	4621      	mov	r1, r4
 800b338:	9801      	ldr	r0, [sp, #4]
 800b33a:	f7fd fadd 	bl	80088f8 <_Bfree>
 800b33e:	464c      	mov	r4, r9
 800b340:	6923      	ldr	r3, [r4, #16]
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b348:	6122      	str	r2, [r4, #16]
 800b34a:	2201      	movs	r2, #1
 800b34c:	615a      	str	r2, [r3, #20]
 800b34e:	e7be      	b.n	800b2ce <__gethex+0x362>
 800b350:	6922      	ldr	r2, [r4, #16]
 800b352:	455a      	cmp	r2, fp
 800b354:	dd0b      	ble.n	800b36e <__gethex+0x402>
 800b356:	2101      	movs	r1, #1
 800b358:	4620      	mov	r0, r4
 800b35a:	f7ff fd9f 	bl	800ae9c <rshift>
 800b35e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b362:	3701      	adds	r7, #1
 800b364:	42bb      	cmp	r3, r7
 800b366:	f6ff aee0 	blt.w	800b12a <__gethex+0x1be>
 800b36a:	2501      	movs	r5, #1
 800b36c:	e7c2      	b.n	800b2f4 <__gethex+0x388>
 800b36e:	f016 061f 	ands.w	r6, r6, #31
 800b372:	d0fa      	beq.n	800b36a <__gethex+0x3fe>
 800b374:	4453      	add	r3, sl
 800b376:	f1c6 0620 	rsb	r6, r6, #32
 800b37a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b37e:	f7fd fb6d 	bl	8008a5c <__hi0bits>
 800b382:	42b0      	cmp	r0, r6
 800b384:	dbe7      	blt.n	800b356 <__gethex+0x3ea>
 800b386:	e7f0      	b.n	800b36a <__gethex+0x3fe>
 800b388:	0800b9d3 	.word	0x0800b9d3

0800b38c <L_shift>:
 800b38c:	f1c2 0208 	rsb	r2, r2, #8
 800b390:	0092      	lsls	r2, r2, #2
 800b392:	b570      	push	{r4, r5, r6, lr}
 800b394:	f1c2 0620 	rsb	r6, r2, #32
 800b398:	6843      	ldr	r3, [r0, #4]
 800b39a:	6804      	ldr	r4, [r0, #0]
 800b39c:	fa03 f506 	lsl.w	r5, r3, r6
 800b3a0:	432c      	orrs	r4, r5
 800b3a2:	40d3      	lsrs	r3, r2
 800b3a4:	6004      	str	r4, [r0, #0]
 800b3a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3aa:	4288      	cmp	r0, r1
 800b3ac:	d3f4      	bcc.n	800b398 <L_shift+0xc>
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}

0800b3b0 <__match>:
 800b3b0:	b530      	push	{r4, r5, lr}
 800b3b2:	6803      	ldr	r3, [r0, #0]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ba:	b914      	cbnz	r4, 800b3c2 <__match+0x12>
 800b3bc:	6003      	str	r3, [r0, #0]
 800b3be:	2001      	movs	r0, #1
 800b3c0:	bd30      	pop	{r4, r5, pc}
 800b3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b3ca:	2d19      	cmp	r5, #25
 800b3cc:	bf98      	it	ls
 800b3ce:	3220      	addls	r2, #32
 800b3d0:	42a2      	cmp	r2, r4
 800b3d2:	d0f0      	beq.n	800b3b6 <__match+0x6>
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	e7f3      	b.n	800b3c0 <__match+0x10>

0800b3d8 <__hexnan>:
 800b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	680b      	ldr	r3, [r1, #0]
 800b3de:	6801      	ldr	r1, [r0, #0]
 800b3e0:	115e      	asrs	r6, r3, #5
 800b3e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3e6:	f013 031f 	ands.w	r3, r3, #31
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	bf18      	it	ne
 800b3ee:	3604      	addne	r6, #4
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	1f37      	subs	r7, r6, #4
 800b3f4:	4682      	mov	sl, r0
 800b3f6:	4690      	mov	r8, r2
 800b3f8:	9301      	str	r3, [sp, #4]
 800b3fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800b3fe:	46b9      	mov	r9, r7
 800b400:	463c      	mov	r4, r7
 800b402:	9502      	str	r5, [sp, #8]
 800b404:	46ab      	mov	fp, r5
 800b406:	784a      	ldrb	r2, [r1, #1]
 800b408:	1c4b      	adds	r3, r1, #1
 800b40a:	9303      	str	r3, [sp, #12]
 800b40c:	b342      	cbz	r2, 800b460 <__hexnan+0x88>
 800b40e:	4610      	mov	r0, r2
 800b410:	9105      	str	r1, [sp, #20]
 800b412:	9204      	str	r2, [sp, #16]
 800b414:	f7ff fd94 	bl	800af40 <__hexdig_fun>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d151      	bne.n	800b4c0 <__hexnan+0xe8>
 800b41c:	9a04      	ldr	r2, [sp, #16]
 800b41e:	9905      	ldr	r1, [sp, #20]
 800b420:	2a20      	cmp	r2, #32
 800b422:	d818      	bhi.n	800b456 <__hexnan+0x7e>
 800b424:	9b02      	ldr	r3, [sp, #8]
 800b426:	459b      	cmp	fp, r3
 800b428:	dd13      	ble.n	800b452 <__hexnan+0x7a>
 800b42a:	454c      	cmp	r4, r9
 800b42c:	d206      	bcs.n	800b43c <__hexnan+0x64>
 800b42e:	2d07      	cmp	r5, #7
 800b430:	dc04      	bgt.n	800b43c <__hexnan+0x64>
 800b432:	462a      	mov	r2, r5
 800b434:	4649      	mov	r1, r9
 800b436:	4620      	mov	r0, r4
 800b438:	f7ff ffa8 	bl	800b38c <L_shift>
 800b43c:	4544      	cmp	r4, r8
 800b43e:	d952      	bls.n	800b4e6 <__hexnan+0x10e>
 800b440:	2300      	movs	r3, #0
 800b442:	f1a4 0904 	sub.w	r9, r4, #4
 800b446:	f844 3c04 	str.w	r3, [r4, #-4]
 800b44a:	f8cd b008 	str.w	fp, [sp, #8]
 800b44e:	464c      	mov	r4, r9
 800b450:	461d      	mov	r5, r3
 800b452:	9903      	ldr	r1, [sp, #12]
 800b454:	e7d7      	b.n	800b406 <__hexnan+0x2e>
 800b456:	2a29      	cmp	r2, #41	@ 0x29
 800b458:	d157      	bne.n	800b50a <__hexnan+0x132>
 800b45a:	3102      	adds	r1, #2
 800b45c:	f8ca 1000 	str.w	r1, [sl]
 800b460:	f1bb 0f00 	cmp.w	fp, #0
 800b464:	d051      	beq.n	800b50a <__hexnan+0x132>
 800b466:	454c      	cmp	r4, r9
 800b468:	d206      	bcs.n	800b478 <__hexnan+0xa0>
 800b46a:	2d07      	cmp	r5, #7
 800b46c:	dc04      	bgt.n	800b478 <__hexnan+0xa0>
 800b46e:	462a      	mov	r2, r5
 800b470:	4649      	mov	r1, r9
 800b472:	4620      	mov	r0, r4
 800b474:	f7ff ff8a 	bl	800b38c <L_shift>
 800b478:	4544      	cmp	r4, r8
 800b47a:	d936      	bls.n	800b4ea <__hexnan+0x112>
 800b47c:	f1a8 0204 	sub.w	r2, r8, #4
 800b480:	4623      	mov	r3, r4
 800b482:	f853 1b04 	ldr.w	r1, [r3], #4
 800b486:	f842 1f04 	str.w	r1, [r2, #4]!
 800b48a:	429f      	cmp	r7, r3
 800b48c:	d2f9      	bcs.n	800b482 <__hexnan+0xaa>
 800b48e:	1b3b      	subs	r3, r7, r4
 800b490:	f023 0303 	bic.w	r3, r3, #3
 800b494:	3304      	adds	r3, #4
 800b496:	3401      	adds	r4, #1
 800b498:	3e03      	subs	r6, #3
 800b49a:	42b4      	cmp	r4, r6
 800b49c:	bf88      	it	hi
 800b49e:	2304      	movhi	r3, #4
 800b4a0:	4443      	add	r3, r8
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f843 2b04 	str.w	r2, [r3], #4
 800b4a8:	429f      	cmp	r7, r3
 800b4aa:	d2fb      	bcs.n	800b4a4 <__hexnan+0xcc>
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	b91b      	cbnz	r3, 800b4b8 <__hexnan+0xe0>
 800b4b0:	4547      	cmp	r7, r8
 800b4b2:	d128      	bne.n	800b506 <__hexnan+0x12e>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	603b      	str	r3, [r7, #0]
 800b4b8:	2005      	movs	r0, #5
 800b4ba:	b007      	add	sp, #28
 800b4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c0:	3501      	adds	r5, #1
 800b4c2:	2d08      	cmp	r5, #8
 800b4c4:	f10b 0b01 	add.w	fp, fp, #1
 800b4c8:	dd06      	ble.n	800b4d8 <__hexnan+0x100>
 800b4ca:	4544      	cmp	r4, r8
 800b4cc:	d9c1      	bls.n	800b452 <__hexnan+0x7a>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4d4:	2501      	movs	r5, #1
 800b4d6:	3c04      	subs	r4, #4
 800b4d8:	6822      	ldr	r2, [r4, #0]
 800b4da:	f000 000f 	and.w	r0, r0, #15
 800b4de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b4e2:	6020      	str	r0, [r4, #0]
 800b4e4:	e7b5      	b.n	800b452 <__hexnan+0x7a>
 800b4e6:	2508      	movs	r5, #8
 800b4e8:	e7b3      	b.n	800b452 <__hexnan+0x7a>
 800b4ea:	9b01      	ldr	r3, [sp, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d0dd      	beq.n	800b4ac <__hexnan+0xd4>
 800b4f0:	f1c3 0320 	rsb	r3, r3, #32
 800b4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f8:	40da      	lsrs	r2, r3
 800b4fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b4fe:	4013      	ands	r3, r2
 800b500:	f846 3c04 	str.w	r3, [r6, #-4]
 800b504:	e7d2      	b.n	800b4ac <__hexnan+0xd4>
 800b506:	3f04      	subs	r7, #4
 800b508:	e7d0      	b.n	800b4ac <__hexnan+0xd4>
 800b50a:	2004      	movs	r0, #4
 800b50c:	e7d5      	b.n	800b4ba <__hexnan+0xe2>

0800b50e <__ascii_mbtowc>:
 800b50e:	b082      	sub	sp, #8
 800b510:	b901      	cbnz	r1, 800b514 <__ascii_mbtowc+0x6>
 800b512:	a901      	add	r1, sp, #4
 800b514:	b142      	cbz	r2, 800b528 <__ascii_mbtowc+0x1a>
 800b516:	b14b      	cbz	r3, 800b52c <__ascii_mbtowc+0x1e>
 800b518:	7813      	ldrb	r3, [r2, #0]
 800b51a:	600b      	str	r3, [r1, #0]
 800b51c:	7812      	ldrb	r2, [r2, #0]
 800b51e:	1e10      	subs	r0, r2, #0
 800b520:	bf18      	it	ne
 800b522:	2001      	movne	r0, #1
 800b524:	b002      	add	sp, #8
 800b526:	4770      	bx	lr
 800b528:	4610      	mov	r0, r2
 800b52a:	e7fb      	b.n	800b524 <__ascii_mbtowc+0x16>
 800b52c:	f06f 0001 	mvn.w	r0, #1
 800b530:	e7f8      	b.n	800b524 <__ascii_mbtowc+0x16>

0800b532 <_realloc_r>:
 800b532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b536:	4680      	mov	r8, r0
 800b538:	4615      	mov	r5, r2
 800b53a:	460c      	mov	r4, r1
 800b53c:	b921      	cbnz	r1, 800b548 <_realloc_r+0x16>
 800b53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b542:	4611      	mov	r1, r2
 800b544:	f7fd b90c 	b.w	8008760 <_malloc_r>
 800b548:	b92a      	cbnz	r2, 800b556 <_realloc_r+0x24>
 800b54a:	f7fd f895 	bl	8008678 <_free_r>
 800b54e:	2400      	movs	r4, #0
 800b550:	4620      	mov	r0, r4
 800b552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b556:	f000 f8b2 	bl	800b6be <_malloc_usable_size_r>
 800b55a:	4285      	cmp	r5, r0
 800b55c:	4606      	mov	r6, r0
 800b55e:	d802      	bhi.n	800b566 <_realloc_r+0x34>
 800b560:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b564:	d8f4      	bhi.n	800b550 <_realloc_r+0x1e>
 800b566:	4629      	mov	r1, r5
 800b568:	4640      	mov	r0, r8
 800b56a:	f7fd f8f9 	bl	8008760 <_malloc_r>
 800b56e:	4607      	mov	r7, r0
 800b570:	2800      	cmp	r0, #0
 800b572:	d0ec      	beq.n	800b54e <_realloc_r+0x1c>
 800b574:	42b5      	cmp	r5, r6
 800b576:	462a      	mov	r2, r5
 800b578:	4621      	mov	r1, r4
 800b57a:	bf28      	it	cs
 800b57c:	4632      	movcs	r2, r6
 800b57e:	f7ff fc45 	bl	800ae0c <memcpy>
 800b582:	4621      	mov	r1, r4
 800b584:	4640      	mov	r0, r8
 800b586:	f7fd f877 	bl	8008678 <_free_r>
 800b58a:	463c      	mov	r4, r7
 800b58c:	e7e0      	b.n	800b550 <_realloc_r+0x1e>
	...

0800b590 <_strtoul_l.constprop.0>:
 800b590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b594:	4e34      	ldr	r6, [pc, #208]	@ (800b668 <_strtoul_l.constprop.0+0xd8>)
 800b596:	4686      	mov	lr, r0
 800b598:	460d      	mov	r5, r1
 800b59a:	4628      	mov	r0, r5
 800b59c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5a0:	5d37      	ldrb	r7, [r6, r4]
 800b5a2:	f017 0708 	ands.w	r7, r7, #8
 800b5a6:	d1f8      	bne.n	800b59a <_strtoul_l.constprop.0+0xa>
 800b5a8:	2c2d      	cmp	r4, #45	@ 0x2d
 800b5aa:	d12f      	bne.n	800b60c <_strtoul_l.constprop.0+0x7c>
 800b5ac:	782c      	ldrb	r4, [r5, #0]
 800b5ae:	2701      	movs	r7, #1
 800b5b0:	1c85      	adds	r5, r0, #2
 800b5b2:	f033 0010 	bics.w	r0, r3, #16
 800b5b6:	d109      	bne.n	800b5cc <_strtoul_l.constprop.0+0x3c>
 800b5b8:	2c30      	cmp	r4, #48	@ 0x30
 800b5ba:	d12c      	bne.n	800b616 <_strtoul_l.constprop.0+0x86>
 800b5bc:	7828      	ldrb	r0, [r5, #0]
 800b5be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b5c2:	2858      	cmp	r0, #88	@ 0x58
 800b5c4:	d127      	bne.n	800b616 <_strtoul_l.constprop.0+0x86>
 800b5c6:	786c      	ldrb	r4, [r5, #1]
 800b5c8:	2310      	movs	r3, #16
 800b5ca:	3502      	adds	r5, #2
 800b5cc:	f04f 38ff 	mov.w	r8, #4294967295
 800b5d0:	2600      	movs	r6, #0
 800b5d2:	fbb8 f8f3 	udiv	r8, r8, r3
 800b5d6:	fb03 f908 	mul.w	r9, r3, r8
 800b5da:	ea6f 0909 	mvn.w	r9, r9
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b5e4:	f1bc 0f09 	cmp.w	ip, #9
 800b5e8:	d81c      	bhi.n	800b624 <_strtoul_l.constprop.0+0x94>
 800b5ea:	4664      	mov	r4, ip
 800b5ec:	42a3      	cmp	r3, r4
 800b5ee:	dd2a      	ble.n	800b646 <_strtoul_l.constprop.0+0xb6>
 800b5f0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b5f4:	d007      	beq.n	800b606 <_strtoul_l.constprop.0+0x76>
 800b5f6:	4580      	cmp	r8, r0
 800b5f8:	d322      	bcc.n	800b640 <_strtoul_l.constprop.0+0xb0>
 800b5fa:	d101      	bne.n	800b600 <_strtoul_l.constprop.0+0x70>
 800b5fc:	45a1      	cmp	r9, r4
 800b5fe:	db1f      	blt.n	800b640 <_strtoul_l.constprop.0+0xb0>
 800b600:	fb00 4003 	mla	r0, r0, r3, r4
 800b604:	2601      	movs	r6, #1
 800b606:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b60a:	e7e9      	b.n	800b5e0 <_strtoul_l.constprop.0+0x50>
 800b60c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b60e:	bf04      	itt	eq
 800b610:	782c      	ldrbeq	r4, [r5, #0]
 800b612:	1c85      	addeq	r5, r0, #2
 800b614:	e7cd      	b.n	800b5b2 <_strtoul_l.constprop.0+0x22>
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1d8      	bne.n	800b5cc <_strtoul_l.constprop.0+0x3c>
 800b61a:	2c30      	cmp	r4, #48	@ 0x30
 800b61c:	bf0c      	ite	eq
 800b61e:	2308      	moveq	r3, #8
 800b620:	230a      	movne	r3, #10
 800b622:	e7d3      	b.n	800b5cc <_strtoul_l.constprop.0+0x3c>
 800b624:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b628:	f1bc 0f19 	cmp.w	ip, #25
 800b62c:	d801      	bhi.n	800b632 <_strtoul_l.constprop.0+0xa2>
 800b62e:	3c37      	subs	r4, #55	@ 0x37
 800b630:	e7dc      	b.n	800b5ec <_strtoul_l.constprop.0+0x5c>
 800b632:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b636:	f1bc 0f19 	cmp.w	ip, #25
 800b63a:	d804      	bhi.n	800b646 <_strtoul_l.constprop.0+0xb6>
 800b63c:	3c57      	subs	r4, #87	@ 0x57
 800b63e:	e7d5      	b.n	800b5ec <_strtoul_l.constprop.0+0x5c>
 800b640:	f04f 36ff 	mov.w	r6, #4294967295
 800b644:	e7df      	b.n	800b606 <_strtoul_l.constprop.0+0x76>
 800b646:	1c73      	adds	r3, r6, #1
 800b648:	d106      	bne.n	800b658 <_strtoul_l.constprop.0+0xc8>
 800b64a:	2322      	movs	r3, #34	@ 0x22
 800b64c:	f8ce 3000 	str.w	r3, [lr]
 800b650:	4630      	mov	r0, r6
 800b652:	b932      	cbnz	r2, 800b662 <_strtoul_l.constprop.0+0xd2>
 800b654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b658:	b107      	cbz	r7, 800b65c <_strtoul_l.constprop.0+0xcc>
 800b65a:	4240      	negs	r0, r0
 800b65c:	2a00      	cmp	r2, #0
 800b65e:	d0f9      	beq.n	800b654 <_strtoul_l.constprop.0+0xc4>
 800b660:	b106      	cbz	r6, 800b664 <_strtoul_l.constprop.0+0xd4>
 800b662:	1e69      	subs	r1, r5, #1
 800b664:	6011      	str	r1, [r2, #0]
 800b666:	e7f5      	b.n	800b654 <_strtoul_l.constprop.0+0xc4>
 800b668:	0800bb99 	.word	0x0800bb99

0800b66c <_strtoul_r>:
 800b66c:	f7ff bf90 	b.w	800b590 <_strtoul_l.constprop.0>

0800b670 <__ascii_wctomb>:
 800b670:	4603      	mov	r3, r0
 800b672:	4608      	mov	r0, r1
 800b674:	b141      	cbz	r1, 800b688 <__ascii_wctomb+0x18>
 800b676:	2aff      	cmp	r2, #255	@ 0xff
 800b678:	d904      	bls.n	800b684 <__ascii_wctomb+0x14>
 800b67a:	228a      	movs	r2, #138	@ 0x8a
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	f04f 30ff 	mov.w	r0, #4294967295
 800b682:	4770      	bx	lr
 800b684:	700a      	strb	r2, [r1, #0]
 800b686:	2001      	movs	r0, #1
 800b688:	4770      	bx	lr
	...

0800b68c <fiprintf>:
 800b68c:	b40e      	push	{r1, r2, r3}
 800b68e:	b503      	push	{r0, r1, lr}
 800b690:	4601      	mov	r1, r0
 800b692:	ab03      	add	r3, sp, #12
 800b694:	4805      	ldr	r0, [pc, #20]	@ (800b6ac <fiprintf+0x20>)
 800b696:	f853 2b04 	ldr.w	r2, [r3], #4
 800b69a:	6800      	ldr	r0, [r0, #0]
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	f7fe ff6f 	bl	800a580 <_vfiprintf_r>
 800b6a2:	b002      	add	sp, #8
 800b6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6a8:	b003      	add	sp, #12
 800b6aa:	4770      	bx	lr
 800b6ac:	20000bd0 	.word	0x20000bd0

0800b6b0 <abort>:
 800b6b0:	b508      	push	{r3, lr}
 800b6b2:	2006      	movs	r0, #6
 800b6b4:	f000 f834 	bl	800b720 <raise>
 800b6b8:	2001      	movs	r0, #1
 800b6ba:	f7f6 faa9 	bl	8001c10 <_exit>

0800b6be <_malloc_usable_size_r>:
 800b6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c2:	1f18      	subs	r0, r3, #4
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bfbc      	itt	lt
 800b6c8:	580b      	ldrlt	r3, [r1, r0]
 800b6ca:	18c0      	addlt	r0, r0, r3
 800b6cc:	4770      	bx	lr

0800b6ce <_raise_r>:
 800b6ce:	291f      	cmp	r1, #31
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4605      	mov	r5, r0
 800b6d4:	460c      	mov	r4, r1
 800b6d6:	d904      	bls.n	800b6e2 <_raise_r+0x14>
 800b6d8:	2316      	movs	r3, #22
 800b6da:	6003      	str	r3, [r0, #0]
 800b6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e0:	bd38      	pop	{r3, r4, r5, pc}
 800b6e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b6e4:	b112      	cbz	r2, 800b6ec <_raise_r+0x1e>
 800b6e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6ea:	b94b      	cbnz	r3, 800b700 <_raise_r+0x32>
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	f000 f831 	bl	800b754 <_getpid_r>
 800b6f2:	4622      	mov	r2, r4
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6fc:	f000 b818 	b.w	800b730 <_kill_r>
 800b700:	2b01      	cmp	r3, #1
 800b702:	d00a      	beq.n	800b71a <_raise_r+0x4c>
 800b704:	1c59      	adds	r1, r3, #1
 800b706:	d103      	bne.n	800b710 <_raise_r+0x42>
 800b708:	2316      	movs	r3, #22
 800b70a:	6003      	str	r3, [r0, #0]
 800b70c:	2001      	movs	r0, #1
 800b70e:	e7e7      	b.n	800b6e0 <_raise_r+0x12>
 800b710:	2100      	movs	r1, #0
 800b712:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b716:	4620      	mov	r0, r4
 800b718:	4798      	blx	r3
 800b71a:	2000      	movs	r0, #0
 800b71c:	e7e0      	b.n	800b6e0 <_raise_r+0x12>
	...

0800b720 <raise>:
 800b720:	4b02      	ldr	r3, [pc, #8]	@ (800b72c <raise+0xc>)
 800b722:	4601      	mov	r1, r0
 800b724:	6818      	ldr	r0, [r3, #0]
 800b726:	f7ff bfd2 	b.w	800b6ce <_raise_r>
 800b72a:	bf00      	nop
 800b72c:	20000bd0 	.word	0x20000bd0

0800b730 <_kill_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	4d07      	ldr	r5, [pc, #28]	@ (800b750 <_kill_r+0x20>)
 800b734:	2300      	movs	r3, #0
 800b736:	4604      	mov	r4, r0
 800b738:	4608      	mov	r0, r1
 800b73a:	4611      	mov	r1, r2
 800b73c:	602b      	str	r3, [r5, #0]
 800b73e:	f7f6 fa57 	bl	8001bf0 <_kill>
 800b742:	1c43      	adds	r3, r0, #1
 800b744:	d102      	bne.n	800b74c <_kill_r+0x1c>
 800b746:	682b      	ldr	r3, [r5, #0]
 800b748:	b103      	cbz	r3, 800b74c <_kill_r+0x1c>
 800b74a:	6023      	str	r3, [r4, #0]
 800b74c:	bd38      	pop	{r3, r4, r5, pc}
 800b74e:	bf00      	nop
 800b750:	20001164 	.word	0x20001164

0800b754 <_getpid_r>:
 800b754:	f7f6 ba44 	b.w	8001be0 <_getpid>

0800b758 <_init>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	bf00      	nop
 800b75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75e:	bc08      	pop	{r3}
 800b760:	469e      	mov	lr, r3
 800b762:	4770      	bx	lr

0800b764 <_fini>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	bf00      	nop
 800b768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b76a:	bc08      	pop	{r3}
 800b76c:	469e      	mov	lr, r3
 800b76e:	4770      	bx	lr
