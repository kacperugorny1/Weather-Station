
Projekt1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08009db8  08009db8  00019db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2f0  0800a2f0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2f0  0800a2f0  0001a2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2f8  0800a2f8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2f8  0800a2f8  0001a2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2fc  0800a2fc  0001a2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a300  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  200001e8  0800a4e8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0800a4e8  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecfb  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210d  00000000  00000000  0002ef56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00031068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ff  00000000  00000000  00031d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000274bf  00000000  00000000  00032757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d9e  00000000  00000000  00059c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed1cd  00000000  00000000  0006a9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a78  00000000  00000000  00157b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0015c5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009da0 	.word	0x08009da0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009da0 	.word	0x08009da0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9bb 	b.w	8000fe0 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b970 	b.w	8000fe0 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9e08      	ldr	r6, [sp, #32]
 8000d1e:	460d      	mov	r5, r1
 8000d20:	4604      	mov	r4, r0
 8000d22:	460f      	mov	r7, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d14a      	bne.n	8000dbe <__udivmoddi4+0xa6>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4694      	mov	ip, r2
 8000d2c:	d965      	bls.n	8000dfa <__udivmoddi4+0xe2>
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	b143      	cbz	r3, 8000d46 <__udivmoddi4+0x2e>
 8000d34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d38:	f1c3 0220 	rsb	r2, r3, #32
 8000d3c:	409f      	lsls	r7, r3
 8000d3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d42:	4317      	orrs	r7, r2
 8000d44:	409c      	lsls	r4, r3
 8000d46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d4a:	fa1f f58c 	uxth.w	r5, ip
 8000d4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d52:	0c22      	lsrs	r2, r4, #16
 8000d54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d5c:	fb01 f005 	mul.w	r0, r1, r5
 8000d60:	4290      	cmp	r0, r2
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x62>
 8000d64:	eb1c 0202 	adds.w	r2, ip, r2
 8000d68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d6c:	f080 811c 	bcs.w	8000fa8 <__udivmoddi4+0x290>
 8000d70:	4290      	cmp	r0, r2
 8000d72:	f240 8119 	bls.w	8000fa8 <__udivmoddi4+0x290>
 8000d76:	3902      	subs	r1, #2
 8000d78:	4462      	add	r2, ip
 8000d7a:	1a12      	subs	r2, r2, r0
 8000d7c:	b2a4      	uxth	r4, r4
 8000d7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8a:	fb00 f505 	mul.w	r5, r0, r5
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x90>
 8000d92:	eb1c 0404 	adds.w	r4, ip, r4
 8000d96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9a:	f080 8107 	bcs.w	8000fac <__udivmoddi4+0x294>
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	f240 8104 	bls.w	8000fac <__udivmoddi4+0x294>
 8000da4:	4464      	add	r4, ip
 8000da6:	3802      	subs	r0, #2
 8000da8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dac:	1b64      	subs	r4, r4, r5
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11e      	cbz	r6, 8000dba <__udivmoddi4+0xa2>
 8000db2:	40dc      	lsrs	r4, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0xbc>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80ed 	beq.w	8000fa2 <__udivmoddi4+0x28a>
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e9c6 0500 	strd	r0, r5, [r6]
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd4:	fab3 f183 	clz	r1, r3
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	d149      	bne.n	8000e70 <__udivmoddi4+0x158>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	d302      	bcc.n	8000de6 <__udivmoddi4+0xce>
 8000de0:	4282      	cmp	r2, r0
 8000de2:	f200 80f8 	bhi.w	8000fd6 <__udivmoddi4+0x2be>
 8000de6:	1a84      	subs	r4, r0, r2
 8000de8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dec:	2001      	movs	r0, #1
 8000dee:	4617      	mov	r7, r2
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0e2      	beq.n	8000dba <__udivmoddi4+0xa2>
 8000df4:	e9c6 4700 	strd	r4, r7, [r6]
 8000df8:	e7df      	b.n	8000dba <__udivmoddi4+0xa2>
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xe6>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f382 	clz	r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x210>
 8000e08:	1a8a      	subs	r2, r1, r2
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f fe8c 	uxth.w	lr, ip
 8000e12:	2101      	movs	r1, #1
 8000e14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e18:	fb07 2015 	mls	r0, r7, r5, r2
 8000e1c:	0c22      	lsrs	r2, r4, #16
 8000e1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e22:	fb0e f005 	mul.w	r0, lr, r5
 8000e26:	4290      	cmp	r0, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x124>
 8000e2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x122>
 8000e34:	4290      	cmp	r0, r2
 8000e36:	f200 80cb 	bhi.w	8000fd0 <__udivmoddi4+0x2b8>
 8000e3a:	4645      	mov	r5, r8
 8000e3c:	1a12      	subs	r2, r2, r0
 8000e3e:	b2a4      	uxth	r4, r4
 8000e40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e44:	fb07 2210 	mls	r2, r7, r0, r2
 8000e48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e50:	45a6      	cmp	lr, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x14e>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e5c:	d202      	bcs.n	8000e64 <__udivmoddi4+0x14c>
 8000e5e:	45a6      	cmp	lr, r4
 8000e60:	f200 80bb 	bhi.w	8000fda <__udivmoddi4+0x2c2>
 8000e64:	4610      	mov	r0, r2
 8000e66:	eba4 040e 	sub.w	r4, r4, lr
 8000e6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e6e:	e79f      	b.n	8000db0 <__udivmoddi4+0x98>
 8000e70:	f1c1 0720 	rsb	r7, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e82:	fa20 f307 	lsr.w	r3, r0, r7
 8000e86:	40fd      	lsrs	r5, r7
 8000e88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e92:	fa1f fe8c 	uxth.w	lr, ip
 8000e96:	fb09 5518 	mls	r5, r9, r8, r5
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ea0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eaa:	fa00 f001 	lsl.w	r0, r0, r1
 8000eae:	d90b      	bls.n	8000ec8 <__udivmoddi4+0x1b0>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb8:	f080 8088 	bcs.w	8000fcc <__udivmoddi4+0x2b4>
 8000ebc:	42a5      	cmp	r5, r4
 8000ebe:	f240 8085 	bls.w	8000fcc <__udivmoddi4+0x2b4>
 8000ec2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec6:	4464      	add	r4, ip
 8000ec8:	1b64      	subs	r4, r4, r5
 8000eca:	b29d      	uxth	r5, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ed8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000edc:	45a6      	cmp	lr, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1da>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ee8:	d26c      	bcs.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	d96a      	bls.n	8000fc4 <__udivmoddi4+0x2ac>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	4464      	add	r4, ip
 8000ef2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ef6:	fba3 9502 	umull	r9, r5, r3, r2
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	42ac      	cmp	r4, r5
 8000f00:	46c8      	mov	r8, r9
 8000f02:	46ae      	mov	lr, r5
 8000f04:	d356      	bcc.n	8000fb4 <__udivmoddi4+0x29c>
 8000f06:	d053      	beq.n	8000fb0 <__udivmoddi4+0x298>
 8000f08:	b156      	cbz	r6, 8000f20 <__udivmoddi4+0x208>
 8000f0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f12:	fa04 f707 	lsl.w	r7, r4, r7
 8000f16:	40ca      	lsrs	r2, r1
 8000f18:	40cc      	lsrs	r4, r1
 8000f1a:	4317      	orrs	r7, r2
 8000f1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f20:	4618      	mov	r0, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f28:	f1c3 0120 	rsb	r1, r3, #32
 8000f2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f30:	fa20 f201 	lsr.w	r2, r0, r1
 8000f34:	fa25 f101 	lsr.w	r1, r5, r1
 8000f38:	409d      	lsls	r5, r3
 8000f3a:	432a      	orrs	r2, r5
 8000f3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f40:	fa1f fe8c 	uxth.w	lr, ip
 8000f44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f48:	fb07 1510 	mls	r5, r7, r0, r1
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f52:	fb00 f50e 	mul.w	r5, r0, lr
 8000f56:	428d      	cmp	r5, r1
 8000f58:	fa04 f403 	lsl.w	r4, r4, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x258>
 8000f5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f66:	d22f      	bcs.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f68:	428d      	cmp	r5, r1
 8000f6a:	d92d      	bls.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	1b49      	subs	r1, r1, r5
 8000f72:	b292      	uxth	r2, r2
 8000f74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f78:	fb07 1115 	mls	r1, r7, r5, r1
 8000f7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f80:	fb05 f10e 	mul.w	r1, r5, lr
 8000f84:	4291      	cmp	r1, r2
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x282>
 8000f88:	eb1c 0202 	adds.w	r2, ip, r2
 8000f8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f90:	d216      	bcs.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f92:	4291      	cmp	r1, r2
 8000f94:	d914      	bls.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f96:	3d02      	subs	r5, #2
 8000f98:	4462      	add	r2, ip
 8000f9a:	1a52      	subs	r2, r2, r1
 8000f9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fa0:	e738      	b.n	8000e14 <__udivmoddi4+0xfc>
 8000fa2:	4631      	mov	r1, r6
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	e708      	b.n	8000dba <__udivmoddi4+0xa2>
 8000fa8:	4639      	mov	r1, r7
 8000faa:	e6e6      	b.n	8000d7a <__udivmoddi4+0x62>
 8000fac:	4610      	mov	r0, r2
 8000fae:	e6fb      	b.n	8000da8 <__udivmoddi4+0x90>
 8000fb0:	4548      	cmp	r0, r9
 8000fb2:	d2a9      	bcs.n	8000f08 <__udivmoddi4+0x1f0>
 8000fb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	e7a3      	b.n	8000f08 <__udivmoddi4+0x1f0>
 8000fc0:	4645      	mov	r5, r8
 8000fc2:	e7ea      	b.n	8000f9a <__udivmoddi4+0x282>
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	e794      	b.n	8000ef2 <__udivmoddi4+0x1da>
 8000fc8:	4640      	mov	r0, r8
 8000fca:	e7d1      	b.n	8000f70 <__udivmoddi4+0x258>
 8000fcc:	46d0      	mov	r8, sl
 8000fce:	e77b      	b.n	8000ec8 <__udivmoddi4+0x1b0>
 8000fd0:	3d02      	subs	r5, #2
 8000fd2:	4462      	add	r2, ip
 8000fd4:	e732      	b.n	8000e3c <__udivmoddi4+0x124>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e70a      	b.n	8000df0 <__udivmoddi4+0xd8>
 8000fda:	4464      	add	r4, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e742      	b.n	8000e66 <__udivmoddi4+0x14e>

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <bmp280_init_default_params>:
#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params)
 {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2203      	movs	r2, #3
 8000ff0:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2203      	movs	r2, #3
 8001002:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2203      	movs	r2, #3
 8001008:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2203      	movs	r2, #3
 800100e:	715a      	strb	r2, [r3, #5]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value)
 {
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af04      	add	r7, sp, #16
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	460b      	mov	r3, r1
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	b29a      	uxth	r2, r3
 800103a:	8af9      	ldrh	r1, [r7, #22]
 800103c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2302      	movs	r3, #2
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	f002 fac9 	bl	80035e4 <HAL_I2C_Mem_Read>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d10b      	bne.n	8001070 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001058:	7d7b      	ldrb	r3, [r7, #21]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	7d3b      	ldrb	r3, [r7, #20]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29a      	uxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	801a      	strh	r2, [r3, #0]
		return true;
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <read_register16+0x56>
	} else
		return false;
 8001070:	2300      	movs	r3, #0

}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len)
		{
 800107a:	b590      	push	{r4, r7, lr}
 800107c:	b08b      	sub	sp, #44	; 0x2c
 800107e:	af04      	add	r7, sp, #16
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	461a      	mov	r2, r3
 8001086:	460b      	mov	r3, r1
 8001088:	72fb      	strb	r3, [r7, #11]
 800108a:	4613      	mov	r3, r2
 800108c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	b29a      	uxth	r2, r3
 800109e:	7abb      	ldrb	r3, [r7, #10]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	8af9      	ldrh	r1, [r7, #22]
 80010a4:	f241 3488 	movw	r4, #5000	; 0x1388
 80010a8:	9402      	str	r4, [sp, #8]
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	f002 fa97 	bl	80035e4 <HAL_I2C_Mem_Read>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <read_data+0x46>
		return 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	e000      	b.n	80010c2 <read_data+0x48>
	else
		return 1;
 80010c0:	2301      	movs	r3, #1

}
 80010c2:	4618      	mov	r0, r3
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd90      	pop	{r4, r7, pc}

080010ca <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	461a      	mov	r2, r3
 80010d6:	2188      	movs	r1, #136	; 0x88
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff9f 	bl	800101c <read_register16>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d06f      	beq.n	80011c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3302      	adds	r3, #2
 80010e8:	461a      	mov	r2, r3
 80010ea:	218a      	movs	r1, #138	; 0x8a
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff95 	bl	800101c <read_register16>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d065      	beq.n	80011c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3304      	adds	r3, #4
 80010fc:	461a      	mov	r2, r3
 80010fe:	218c      	movs	r1, #140	; 0x8c
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff8b 	bl	800101c <read_register16>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d05b      	beq.n	80011c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, (uint16_t *)&dev->dig_P1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3306      	adds	r3, #6
 8001110:	461a      	mov	r2, r3
 8001112:	218e      	movs	r1, #142	; 0x8e
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff81 	bl	800101c <read_register16>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d051      	beq.n	80011c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3308      	adds	r3, #8
 8001124:	461a      	mov	r2, r3
 8001126:	2190      	movs	r1, #144	; 0x90
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff77 	bl	800101c <read_register16>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d047      	beq.n	80011c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	330a      	adds	r3, #10
 8001138:	461a      	mov	r2, r3
 800113a:	2192      	movs	r1, #146	; 0x92
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff6d 	bl	800101c <read_register16>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d03d      	beq.n	80011c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	330c      	adds	r3, #12
 800114c:	461a      	mov	r2, r3
 800114e:	2194      	movs	r1, #148	; 0x94
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff63 	bl	800101c <read_register16>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d033      	beq.n	80011c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	330e      	adds	r3, #14
 8001160:	461a      	mov	r2, r3
 8001162:	2196      	movs	r1, #150	; 0x96
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff59 	bl	800101c <read_register16>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d029      	beq.n	80011c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3310      	adds	r3, #16
 8001174:	461a      	mov	r2, r3
 8001176:	2198      	movs	r1, #152	; 0x98
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff4f 	bl	800101c <read_register16>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01f      	beq.n	80011c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3312      	adds	r3, #18
 8001188:	461a      	mov	r2, r3
 800118a:	219a      	movs	r1, #154	; 0x9a
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff45 	bl	800101c <read_register16>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d015      	beq.n	80011c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3314      	adds	r3, #20
 800119c:	461a      	mov	r2, r3
 800119e:	219c      	movs	r1, #156	; 0x9c
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff3b 	bl	800101c <read_register16>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00b      	beq.n	80011c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e, (uint16_t *) &dev->dig_P9))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3316      	adds	r3, #22
 80011b0:	461a      	mov	r2, r3
 80011b2:	219e      	movs	r1, #158	; 0x9e
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff31 	bl	800101c <read_register16>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <read_calibration_data+0xfa>
	{

		return true;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <read_calibration_data+0xfc>
	}

	return false;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f103 0218 	add.w	r2, r3, #24
 80011dc:	2301      	movs	r3, #1
 80011de:	21a1      	movs	r1, #161	; 0xa1
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff4a 	bl	800107a <read_data>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d14b      	bne.n	8001284 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	331a      	adds	r3, #26
 80011f0:	461a      	mov	r2, r3
 80011f2:	21e1      	movs	r1, #225	; 0xe1
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff11 	bl	800101c <read_register16>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d041      	beq.n	8001284 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f103 021c 	add.w	r2, r3, #28
 8001206:	2301      	movs	r3, #1
 8001208:	21e3      	movs	r1, #227	; 0xe3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff35 	bl	800107a <read_data>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d136      	bne.n	8001284 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001216:	f107 030e 	add.w	r3, r7, #14
 800121a:	461a      	mov	r2, r3
 800121c:	21e4      	movs	r1, #228	; 0xe4
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fefc 	bl	800101c <read_register16>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d02c      	beq.n	8001284 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	461a      	mov	r2, r3
 8001230:	21e5      	movs	r1, #229	; 0xe5
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fef2 	bl	800101c <read_register16>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d022      	beq.n	8001284 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001244:	2301      	movs	r3, #1
 8001246:	21e7      	movs	r1, #231	; 0xe7
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff16 	bl	800107a <read_data>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d117      	bne.n	8001284 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001254:	89fb      	ldrh	r3, [r7, #14]
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	b21b      	sxth	r3, r3
 800125a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800125e:	b21a      	sxth	r2, r3
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	121b      	asrs	r3, r3, #8
 8001264:	b21b      	sxth	r3, r3
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21a      	sxth	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001274:	89bb      	ldrh	r3, [r7, #12]
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	b29b      	uxth	r3, r3
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	841a      	strh	r2, [r3, #32]

		return true;
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800128e:	b580      	push	{r7, lr}
 8001290:	b088      	sub	sp, #32
 8001292:	af04      	add	r7, sp, #16
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	70fb      	strb	r3, [r7, #3]
 800129a:	4613      	mov	r3, r2
 800129c:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	89f9      	ldrh	r1, [r7, #14]
 80012b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	1cbb      	adds	r3, r7, #2
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	f002 f87c 	bl	80033bc <HAL_I2C_Mem_Write>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <write_register8+0x40>
		return false;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <write_register8+0x42>
	else
		return true;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012e6:	2b76      	cmp	r3, #118	; 0x76
 80012e8:	d005      	beq.n	80012f6 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012ee:	2b77      	cmp	r3, #119	; 0x77
 80012f0:	d001      	beq.n	80012f6 <bmp280_init+0x1e>

		return false;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e099      	b.n	800142a <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80012fc:	2301      	movs	r3, #1
 80012fe:	21d0      	movs	r1, #208	; 0xd0
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff feba 	bl	800107a <read_data>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <bmp280_init+0x38>
		return false;
 800130c:	2300      	movs	r3, #0
 800130e:	e08c      	b.n	800142a <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001316:	2b58      	cmp	r3, #88	; 0x58
 8001318:	d006      	beq.n	8001328 <bmp280_init+0x50>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001320:	2b60      	cmp	r3, #96	; 0x60
 8001322:	d001      	beq.n	8001328 <bmp280_init+0x50>

		return false;
 8001324:	2300      	movs	r3, #0
 8001326:	e080      	b.n	800142a <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001328:	22b6      	movs	r2, #182	; 0xb6
 800132a:	21e0      	movs	r1, #224	; 0xe0
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ffae 	bl	800128e <write_register8>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <bmp280_init+0x64>
		return false;
 8001338:	2300      	movs	r3, #0
 800133a:	e076      	b.n	800142a <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800133c:	f107 020c 	add.w	r2, r7, #12
 8001340:	2301      	movs	r3, #1
 8001342:	21f3      	movs	r1, #243	; 0xf3
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fe98 	bl	800107a <read_data>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f5      	bne.n	800133c <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001350:	7b3b      	ldrb	r3, [r7, #12]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff feb5 	bl	80010ca <read_calibration_data>
 8001360:	4603      	mov	r3, r0
 8001362:	f083 0301 	eor.w	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d100      	bne.n	800136e <bmp280_init+0x96>
 800136c:	e001      	b.n	8001372 <bmp280_init+0x9a>
		return false;
 800136e:	2300      	movs	r3, #0
 8001370:	e05b      	b.n	800142a <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001378:	2b60      	cmp	r3, #96	; 0x60
 800137a:	d10a      	bne.n	8001392 <bmp280_init+0xba>
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff26 	bl	80011ce <read_hum_calibration_data>
 8001382:	4603      	mov	r3, r0
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <bmp280_init+0xba>
		return false;
 800138e:	2300      	movs	r3, #0
 8001390:	e04b      	b.n	800142a <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	795b      	ldrb	r3, [r3, #5]
 8001396:	015b      	lsls	r3, r3, #5
 8001398:	b25a      	sxtb	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	785b      	ldrb	r3, [r3, #1]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	461a      	mov	r2, r3
 80013ac:	21f5      	movs	r1, #245	; 0xf5
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ff6d 	bl	800128e <write_register8>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <bmp280_init+0xe6>
		return false;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e035      	b.n	800142a <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d102      	bne.n	80013cc <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	78db      	ldrb	r3, [r3, #3]
 80013d0:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80013d2:	b25a      	sxtb	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	789b      	ldrb	r3, [r3, #2]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80013ea:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013f2:	2b60      	cmp	r3, #96	; 0x60
 80013f4:	d10d      	bne.n	8001412 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	791b      	ldrb	r3, [r3, #4]
 80013fa:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80013fc:	7b7b      	ldrb	r3, [r7, #13]
 80013fe:	461a      	mov	r2, r3
 8001400:	21f2      	movs	r1, #242	; 0xf2
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ff43 	bl	800128e <write_register8>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <bmp280_init+0x13a>
			return false;
 800140e:	2300      	movs	r3, #0
 8001410:	e00b      	b.n	800142a <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001412:	7bbb      	ldrb	r3, [r7, #14]
 8001414:	461a      	mov	r2, r3
 8001416:	21f4      	movs	r1, #244	; 0xf4
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff38 	bl	800128e <write_register8>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <bmp280_init+0x150>
		return false;
 8001424:	2300      	movs	r3, #0
 8001426:	e000      	b.n	800142a <bmp280_init+0x152>
	}

	return true;
 8001428:	2301      	movs	r3, #1
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001432:	b480      	push	{r7}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	10da      	asrs	r2, r3, #3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001450:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001454:	12db      	asrs	r3, r3, #11
 8001456:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	111b      	asrs	r3, r3, #4
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	8812      	ldrh	r2, [r2, #0]
 8001460:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	1112      	asrs	r2, r2, #4
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	8809      	ldrh	r1, [r1, #0]
 800146a:	1a52      	subs	r2, r2, r1
 800146c:	fb02 f303 	mul.w	r3, r2, r3
 8001470:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001478:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800147c:	139b      	asrs	r3, r3, #14
 800147e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	441a      	add	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3380      	adds	r3, #128	; 0x80
 8001496:	121b      	asrs	r3, r3, #8
}
 8001498:	4618      	mov	r0, r3
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80014a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014a8:	b0cc      	sub	sp, #304	; 0x130
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80014b0:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80014b4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80014b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014bc:	17da      	asrs	r2, r3, #31
 80014be:	461c      	mov	r4, r3
 80014c0:	4615      	mov	r5, r2
 80014c2:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80014c6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80014ca:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80014ce:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80014d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014d6:	fb03 f102 	mul.w	r1, r3, r2
 80014da:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80014de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	18ca      	adds	r2, r1, r3
 80014e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014ec:	fba3 8903 	umull	r8, r9, r3, r3
 80014f0:	eb02 0309 	add.w	r3, r2, r9
 80014f4:	4699      	mov	r9, r3
 80014f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014fa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	17da      	asrs	r2, r3, #31
 8001502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001506:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800150a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800150e:	4603      	mov	r3, r0
 8001510:	fb03 f209 	mul.w	r2, r3, r9
 8001514:	460b      	mov	r3, r1
 8001516:	fb08 f303 	mul.w	r3, r8, r3
 800151a:	4413      	add	r3, r2
 800151c:	4602      	mov	r2, r0
 800151e:	fba8 1202 	umull	r1, r2, r8, r2
 8001522:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001526:	460a      	mov	r2, r1
 8001528:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800152c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001530:	4413      	add	r3, r2
 8001532:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001536:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800153a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800153e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001546:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800154a:	b21b      	sxth	r3, r3
 800154c:	17da      	asrs	r2, r3, #31
 800154e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001552:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001556:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800155a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800155e:	462a      	mov	r2, r5
 8001560:	fb02 f203 	mul.w	r2, r2, r3
 8001564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001568:	4621      	mov	r1, r4
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	441a      	add	r2, r3
 8001570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001574:	4621      	mov	r1, r4
 8001576:	fba3 1301 	umull	r1, r3, r3, r1
 800157a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800157e:	460b      	mov	r3, r1
 8001580:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001588:	18d3      	adds	r3, r2, r3
 800158a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800158e:	f04f 0000 	mov.w	r0, #0
 8001592:	f04f 0100 	mov.w	r1, #0
 8001596:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800159a:	462b      	mov	r3, r5
 800159c:	0459      	lsls	r1, r3, #17
 800159e:	4623      	mov	r3, r4
 80015a0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80015a4:	4623      	mov	r3, r4
 80015a6:	0458      	lsls	r0, r3, #17
 80015a8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015ac:	1814      	adds	r4, r2, r0
 80015ae:	643c      	str	r4, [r7, #64]	; 0x40
 80015b0:	414b      	adcs	r3, r1
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
 80015b4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80015b8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80015bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	17da      	asrs	r2, r3, #31
 80015c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015d0:	f04f 0000 	mov.w	r0, #0
 80015d4:	f04f 0100 	mov.w	r1, #0
 80015d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015dc:	00d9      	lsls	r1, r3, #3
 80015de:	2000      	movs	r0, #0
 80015e0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015e4:	1814      	adds	r4, r2, r0
 80015e6:	63bc      	str	r4, [r7, #56]	; 0x38
 80015e8:	414b      	adcs	r3, r1
 80015ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ec:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015f0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80015f4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015fc:	fb03 f102 	mul.w	r1, r3, r2
 8001600:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001604:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	18ca      	adds	r2, r1, r3
 800160e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001612:	fba3 1303 	umull	r1, r3, r3, r3
 8001616:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800161a:	460b      	mov	r3, r1
 800161c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001624:	18d3      	adds	r3, r2, r3
 8001626:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800162a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800162e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001632:	b21b      	sxth	r3, r3
 8001634:	17da      	asrs	r2, r3, #31
 8001636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800163a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800163e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001642:	462b      	mov	r3, r5
 8001644:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001648:	4642      	mov	r2, r8
 800164a:	fb02 f203 	mul.w	r2, r2, r3
 800164e:	464b      	mov	r3, r9
 8001650:	4621      	mov	r1, r4
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	4413      	add	r3, r2
 8001658:	4622      	mov	r2, r4
 800165a:	4641      	mov	r1, r8
 800165c:	fba2 1201 	umull	r1, r2, r2, r1
 8001660:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001664:	460a      	mov	r2, r1
 8001666:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800166a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800166e:	4413      	add	r3, r2
 8001670:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001674:	f04f 0000 	mov.w	r0, #0
 8001678:	f04f 0100 	mov.w	r1, #0
 800167c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001680:	4623      	mov	r3, r4
 8001682:	0a18      	lsrs	r0, r3, #8
 8001684:	462b      	mov	r3, r5
 8001686:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800168a:	462b      	mov	r3, r5
 800168c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800168e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001692:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001696:	b21b      	sxth	r3, r3
 8001698:	17da      	asrs	r2, r3, #31
 800169a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800169e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016a6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80016aa:	464a      	mov	r2, r9
 80016ac:	fb02 f203 	mul.w	r2, r2, r3
 80016b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80016b4:	4644      	mov	r4, r8
 80016b6:	fb04 f303 	mul.w	r3, r4, r3
 80016ba:	441a      	add	r2, r3
 80016bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016c0:	4644      	mov	r4, r8
 80016c2:	fba3 4304 	umull	r4, r3, r3, r4
 80016c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016ca:	4623      	mov	r3, r4
 80016cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016d4:	18d3      	adds	r3, r2, r3
 80016d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016e6:	464c      	mov	r4, r9
 80016e8:	0323      	lsls	r3, r4, #12
 80016ea:	4644      	mov	r4, r8
 80016ec:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016f0:	4644      	mov	r4, r8
 80016f2:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80016f4:	1884      	adds	r4, r0, r2
 80016f6:	633c      	str	r4, [r7, #48]	; 0x30
 80016f8:	eb41 0303 	adc.w	r3, r1, r3
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
 80016fe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001702:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001706:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800170a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800170e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001712:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800171a:	88db      	ldrh	r3, [r3, #6]
 800171c:	b29b      	uxth	r3, r3
 800171e:	2200      	movs	r2, #0
 8001720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001724:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001728:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800172c:	462b      	mov	r3, r5
 800172e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001732:	4642      	mov	r2, r8
 8001734:	fb02 f203 	mul.w	r2, r2, r3
 8001738:	464b      	mov	r3, r9
 800173a:	4621      	mov	r1, r4
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	4622      	mov	r2, r4
 8001744:	4641      	mov	r1, r8
 8001746:	fba2 1201 	umull	r1, r2, r2, r1
 800174a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800174e:	460a      	mov	r2, r1
 8001750:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001754:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001758:	4413      	add	r3, r2
 800175a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800176a:	4629      	mov	r1, r5
 800176c:	104a      	asrs	r2, r1, #1
 800176e:	4629      	mov	r1, r5
 8001770:	17cb      	asrs	r3, r1, #31
 8001772:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001776:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800177a:	4313      	orrs	r3, r2
 800177c:	d101      	bne.n	8001782 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 800177e:	2300      	movs	r3, #0
 8001780:	e148      	b.n	8001a14 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001782:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001786:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800178a:	17da      	asrs	r2, r3, #31
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
 800178e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001790:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001794:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001798:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800179c:	105b      	asrs	r3, r3, #1
 800179e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80017a6:	07db      	lsls	r3, r3, #31
 80017a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017ac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017b0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80017b4:	4621      	mov	r1, r4
 80017b6:	1a89      	subs	r1, r1, r2
 80017b8:	67b9      	str	r1, [r7, #120]	; 0x78
 80017ba:	4629      	mov	r1, r5
 80017bc:	eb61 0303 	sbc.w	r3, r1, r3
 80017c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017c6:	4622      	mov	r2, r4
 80017c8:	462b      	mov	r3, r5
 80017ca:	1891      	adds	r1, r2, r2
 80017cc:	6239      	str	r1, [r7, #32]
 80017ce:	415b      	adcs	r3, r3
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
 80017d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017d6:	4621      	mov	r1, r4
 80017d8:	1851      	adds	r1, r2, r1
 80017da:	61b9      	str	r1, [r7, #24]
 80017dc:	4629      	mov	r1, r5
 80017de:	414b      	adcs	r3, r1
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017ee:	4649      	mov	r1, r9
 80017f0:	018b      	lsls	r3, r1, #6
 80017f2:	4641      	mov	r1, r8
 80017f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017f8:	4641      	mov	r1, r8
 80017fa:	018a      	lsls	r2, r1, #6
 80017fc:	4641      	mov	r1, r8
 80017fe:	1889      	adds	r1, r1, r2
 8001800:	6139      	str	r1, [r7, #16]
 8001802:	4649      	mov	r1, r9
 8001804:	eb43 0101 	adc.w	r1, r3, r1
 8001808:	6179      	str	r1, [r7, #20]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001816:	4649      	mov	r1, r9
 8001818:	008b      	lsls	r3, r1, #2
 800181a:	4641      	mov	r1, r8
 800181c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001820:	4641      	mov	r1, r8
 8001822:	008a      	lsls	r2, r1, #2
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	4603      	mov	r3, r0
 800182a:	4622      	mov	r2, r4
 800182c:	189b      	adds	r3, r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	460b      	mov	r3, r1
 8001832:	462a      	mov	r2, r5
 8001834:	eb42 0303 	adc.w	r3, r2, r3
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001846:	4649      	mov	r1, r9
 8001848:	008b      	lsls	r3, r1, #2
 800184a:	4641      	mov	r1, r8
 800184c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001850:	4641      	mov	r1, r8
 8001852:	008a      	lsls	r2, r1, #2
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	4603      	mov	r3, r0
 800185a:	4622      	mov	r2, r4
 800185c:	189b      	adds	r3, r3, r2
 800185e:	673b      	str	r3, [r7, #112]	; 0x70
 8001860:	462b      	mov	r3, r5
 8001862:	460a      	mov	r2, r1
 8001864:	eb42 0303 	adc.w	r3, r2, r3
 8001868:	677b      	str	r3, [r7, #116]	; 0x74
 800186a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800186e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001872:	f7ff f9e9 	bl	8000c48 <__aeabi_ldivmod>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800187e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001882:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001886:	b21b      	sxth	r3, r3
 8001888:	17da      	asrs	r2, r3, #31
 800188a:	66bb      	str	r3, [r7, #104]	; 0x68
 800188c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800188e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001892:	f04f 0000 	mov.w	r0, #0
 8001896:	f04f 0100 	mov.w	r1, #0
 800189a:	0b50      	lsrs	r0, r2, #13
 800189c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018a0:	1359      	asrs	r1, r3, #13
 80018a2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80018a6:	462b      	mov	r3, r5
 80018a8:	fb00 f203 	mul.w	r2, r0, r3
 80018ac:	4623      	mov	r3, r4
 80018ae:	fb03 f301 	mul.w	r3, r3, r1
 80018b2:	4413      	add	r3, r2
 80018b4:	4622      	mov	r2, r4
 80018b6:	fba2 1200 	umull	r1, r2, r2, r0
 80018ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80018be:	460a      	mov	r2, r1
 80018c0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018c8:	4413      	add	r3, r2
 80018ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018ce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018d2:	f04f 0000 	mov.w	r0, #0
 80018d6:	f04f 0100 	mov.w	r1, #0
 80018da:	0b50      	lsrs	r0, r2, #13
 80018dc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018e0:	1359      	asrs	r1, r3, #13
 80018e2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018e6:	462b      	mov	r3, r5
 80018e8:	fb00 f203 	mul.w	r2, r0, r3
 80018ec:	4623      	mov	r3, r4
 80018ee:	fb03 f301 	mul.w	r3, r3, r1
 80018f2:	4413      	add	r3, r2
 80018f4:	4622      	mov	r2, r4
 80018f6:	fba2 1200 	umull	r1, r2, r2, r0
 80018fa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018fe:	460a      	mov	r2, r1
 8001900:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001904:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001908:	4413      	add	r3, r2
 800190a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800191a:	4621      	mov	r1, r4
 800191c:	0e4a      	lsrs	r2, r1, #25
 800191e:	4629      	mov	r1, r5
 8001920:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001924:	4629      	mov	r1, r5
 8001926:	164b      	asrs	r3, r1, #25
 8001928:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800192c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001930:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001934:	b21b      	sxth	r3, r3
 8001936:	17da      	asrs	r2, r3, #31
 8001938:	663b      	str	r3, [r7, #96]	; 0x60
 800193a:	667a      	str	r2, [r7, #100]	; 0x64
 800193c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001940:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001944:	462a      	mov	r2, r5
 8001946:	fb02 f203 	mul.w	r2, r2, r3
 800194a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800194e:	4621      	mov	r1, r4
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800195a:	4621      	mov	r1, r4
 800195c:	fba2 1201 	umull	r1, r2, r2, r1
 8001960:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001964:	460a      	mov	r2, r1
 8001966:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800196a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800196e:	4413      	add	r3, r2
 8001970:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001980:	4621      	mov	r1, r4
 8001982:	0cca      	lsrs	r2, r1, #19
 8001984:	4629      	mov	r1, r5
 8001986:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800198a:	4629      	mov	r1, r5
 800198c:	14cb      	asrs	r3, r1, #19
 800198e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001992:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001996:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800199a:	1884      	adds	r4, r0, r2
 800199c:	65bc      	str	r4, [r7, #88]	; 0x58
 800199e:	eb41 0303 	adc.w	r3, r1, r3
 80019a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019a4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019a8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80019ac:	4621      	mov	r1, r4
 80019ae:	1889      	adds	r1, r1, r2
 80019b0:	6539      	str	r1, [r7, #80]	; 0x50
 80019b2:	4629      	mov	r1, r5
 80019b4:	eb43 0101 	adc.w	r1, r3, r1
 80019b8:	6579      	str	r1, [r7, #84]	; 0x54
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80019c6:	4623      	mov	r3, r4
 80019c8:	0a18      	lsrs	r0, r3, #8
 80019ca:	462b      	mov	r3, r5
 80019cc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019d0:	462b      	mov	r3, r5
 80019d2:	1219      	asrs	r1, r3, #8
 80019d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80019dc:	b21b      	sxth	r3, r3
 80019de:	17da      	asrs	r2, r3, #31
 80019e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80019e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80019f0:	464c      	mov	r4, r9
 80019f2:	0123      	lsls	r3, r4, #4
 80019f4:	4644      	mov	r4, r8
 80019f6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019fa:	4644      	mov	r4, r8
 80019fc:	0122      	lsls	r2, r4, #4
 80019fe:	1884      	adds	r4, r0, r2
 8001a00:	603c      	str	r4, [r7, #0]
 8001a02:	eb41 0303 	adc.w	r3, r1, r3
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a0c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001a10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001a20 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a32:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	039a      	lsls	r2, r3, #14
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a3e:	051b      	lsls	r3, r3, #20
 8001a40:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a56:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001a5e:	4611      	mov	r1, r2
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	fb01 f202 	mul.w	r2, r1, r2
 8001a66:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	7f09      	ldrb	r1, [r1, #28]
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	6979      	ldr	r1, [r7, #20]
 8001a70:	fb00 f101 	mul.w	r1, r0, r1
 8001a74:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a76:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001a7a:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001a7e:	1292      	asrs	r2, r2, #10
 8001a80:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001a8a:	fb01 f202 	mul.w	r2, r1, r2
 8001a8e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001a92:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	13db      	asrs	r3, r3, #15
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	13d2      	asrs	r2, r2, #15
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	7e12      	ldrb	r2, [r2, #24]
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001abe:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001ac6:	bfa8      	it	ge
 8001ac8:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001acc:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	131b      	asrs	r3, r3, #12
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	371c      	adds	r7, #28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b08c      	sub	sp, #48	; 0x30
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001af2:	2b60      	cmp	r3, #96	; 0x60
 8001af4:	d007      	beq.n	8001b06 <bmp280_read_fixed+0x28>
		if (humidity)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <bmp280_read_fixed+0x32>
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	e000      	b.n	8001b12 <bmp280_read_fixed+0x34>
 8001b10:	2306      	movs	r3, #6
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f107 0218 	add.w	r2, r7, #24
 8001b1c:	21f7      	movs	r1, #247	; 0xf7
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7ff faab 	bl	800107a <read_data>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <bmp280_read_fixed+0x50>
		return false;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e038      	b.n	8001ba0 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001b2e:	7e3b      	ldrb	r3, [r7, #24]
 8001b30:	031a      	lsls	r2, r3, #12
 8001b32:	7e7b      	ldrb	r3, [r7, #25]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4313      	orrs	r3, r2
 8001b38:	7eba      	ldrb	r2, [r7, #26]
 8001b3a:	0912      	lsrs	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001b42:	7efb      	ldrb	r3, [r7, #27]
 8001b44:	031a      	lsls	r2, r3, #12
 8001b46:	7f3b      	ldrb	r3, [r7, #28]
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	7f7a      	ldrb	r2, [r7, #29]
 8001b4e:	0912      	lsrs	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	4313      	orrs	r3, r2
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff fc67 	bl	8001432 <compensate_temperature>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff fc97 	bl	80014a4 <compensate_pressure>
 8001b76:	4602      	mov	r2, r0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00d      	beq.n	8001b9e <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001b82:	7fbb      	ldrb	r3, [r7, #30]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	7ffa      	ldrb	r2, [r7, #31]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6a39      	ldr	r1, [r7, #32]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7ff ff44 	bl	8001a20 <compensate_humidity>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3730      	adds	r7, #48	; 0x30
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <bmp280_read_float+0x1a>
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	e000      	b.n	8001bc4 <bmp280_read_float+0x1c>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f107 0218 	add.w	r2, r7, #24
 8001bc8:	f107 011c 	add.w	r1, r7, #28
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff ff86 	bl	8001ade <bmp280_read_fixed>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d028      	beq.n	8001c2a <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be2:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001c34 <bmp280_read_float+0x8c>
 8001be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bfa:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001c38 <bmp280_read_float+0x90>
 8001bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c18:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001c3c <bmp280_read_float+0x94>
 8001c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <bmp280_read_float+0x84>
	}

	return false;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	42c80000 	.word	0x42c80000
 8001c38:	43800000 	.word	0x43800000
 8001c3c:	44800000 	.word	0x44800000

08001c40 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
 {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
     if (ch == '\n') {
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b0a      	cmp	r3, #10
 8001c4c:	d109      	bne.n	8001c62 <__io_putchar+0x22>
         uint8_t ch2 = '\r';
 8001c4e:	230d      	movs	r3, #13
 8001c50:	73fb      	strb	r3, [r7, #15]
         HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8001c52:	f107 010f 	add.w	r1, r7, #15
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4807      	ldr	r0, [pc, #28]	; (8001c7c <__io_putchar+0x3c>)
 8001c5e:	f003 fd1b 	bl	8005698 <HAL_UART_Transmit>
     }

     HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001c62:	1d39      	adds	r1, r7, #4
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4804      	ldr	r0, [pc, #16]	; (8001c7c <__io_putchar+0x3c>)
 8001c6c:	f003 fd14 	bl	8005698 <HAL_UART_Transmit>
     return 1;
 8001c70:	2301      	movs	r3, #1
 }
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000258 	.word	0x20000258

08001c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c84:	b093      	sub	sp, #76	; 0x4c
 8001c86:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c88:	f000 fd93 	bl	80027b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c8c:	f000 fa90 	bl	80021b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c90:	f000 fb42 	bl	8002318 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c94:	f000 fad2 	bl	800223c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001c98:	f000 fb0e 	bl	80022b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //AHT20
  float temp;
  float humi;
  const uint16_t addr = 0b0111000; //0x38
 8001c9c:	2338      	movs	r3, #56	; 0x38
 8001c9e:	84fb      	strh	r3, [r7, #38]	; 0x26
  const int addr_wr = addr<<1;
 8001ca0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	623b      	str	r3, [r7, #32]
  const int addr_rc = addr_wr + 1;
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t temp_data;
  uint8_t init[3] = {0xbe, 0x08, 0x00};
 8001cac:	4a93      	ldr	r2, [pc, #588]	; (8001efc <main+0x27c>)
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	8019      	strh	r1, [r3, #0]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	0c12      	lsrs	r2, r2, #16
 8001cbc:	701a      	strb	r2, [r3, #0]
  uint8_t measure[3] = {0xac, 0x33, 0x00};
 8001cbe:	4a90      	ldr	r2, [pc, #576]	; (8001f00 <main+0x280>)
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	8019      	strh	r1, [r3, #0]
 8001cca:	3302      	adds	r3, #2
 8001ccc:	0c12      	lsrs	r2, r2, #16
 8001cce:	701a      	strb	r2, [r3, #0]
  uint8_t data[6];
//  uint16_t addr_bmp = 0b1110111; // 0x77


  bmp280_init_default_params(&bmp280.params);
 8001cd0:	488c      	ldr	r0, [pc, #560]	; (8001f04 <main+0x284>)
 8001cd2:	f7ff f987 	bl	8000fe4 <bmp280_init_default_params>
  	bmp280.addr = BMP280_I2C_ADDRESS_1;
 8001cd6:	4b8c      	ldr	r3, [pc, #560]	; (8001f08 <main+0x288>)
 8001cd8:	2277      	movs	r2, #119	; 0x77
 8001cda:	849a      	strh	r2, [r3, #36]	; 0x24
  	bmp280.i2c = &hi2c1;
 8001cdc:	4b8a      	ldr	r3, [pc, #552]	; (8001f08 <main+0x288>)
 8001cde:	4a8b      	ldr	r2, [pc, #556]	; (8001f0c <main+0x28c>)
 8001ce0:	629a      	str	r2, [r3, #40]	; 0x28

  	while (!(bmp280_init(&bmp280, &bmp280.params)))
 8001ce2:	e013      	b.n	8001d0c <main+0x8c>
  		{
  			size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8001ce4:	498a      	ldr	r1, [pc, #552]	; (8001f10 <main+0x290>)
 8001ce6:	488b      	ldr	r0, [pc, #556]	; (8001f14 <main+0x294>)
 8001ce8:	f004 ffc4 	bl	8006c74 <siprintf>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b89      	ldr	r3, [pc, #548]	; (8001f18 <main+0x298>)
 8001cf2:	801a      	strh	r2, [r3, #0]
  			HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001cf4:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <main+0x298>)
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfc:	4985      	ldr	r1, [pc, #532]	; (8001f14 <main+0x294>)
 8001cfe:	4887      	ldr	r0, [pc, #540]	; (8001f1c <main+0x29c>)
 8001d00:	f003 fcca 	bl	8005698 <HAL_UART_Transmit>
  			HAL_Delay(2000);
 8001d04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d08:	f000 fdc8 	bl	800289c <HAL_Delay>
  	while (!(bmp280_init(&bmp280, &bmp280.params)))
 8001d0c:	497d      	ldr	r1, [pc, #500]	; (8001f04 <main+0x284>)
 8001d0e:	487e      	ldr	r0, [pc, #504]	; (8001f08 <main+0x288>)
 8001d10:	f7ff fae2 	bl	80012d8 <bmp280_init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f083 0301 	eor.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e1      	bne.n	8001ce4 <main+0x64>
  		}
  	bool bme280p = bmp280.id == BMP280_CHIP_ID;
 8001d20:	4b79      	ldr	r3, [pc, #484]	; (8001f08 <main+0x288>)
 8001d22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001d26:	2b58      	cmp	r3, #88	; 0x58
 8001d28:	bf0c      	ite	eq
 8001d2a:	2301      	moveq	r3, #1
 8001d2c:	2300      	movne	r3, #0
 8001d2e:	76fb      	strb	r3, [r7, #27]
  	size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8001d30:	7efb      	ldrb	r3, [r7, #27]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <main+0xba>
 8001d36:	4b7a      	ldr	r3, [pc, #488]	; (8001f20 <main+0x2a0>)
 8001d38:	e000      	b.n	8001d3c <main+0xbc>
 8001d3a:	4b7a      	ldr	r3, [pc, #488]	; (8001f24 <main+0x2a4>)
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	497a      	ldr	r1, [pc, #488]	; (8001f28 <main+0x2a8>)
 8001d40:	4874      	ldr	r0, [pc, #464]	; (8001f14 <main+0x294>)
 8001d42:	f004 ff97 	bl	8006c74 <siprintf>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <main+0x298>)
 8001d4c:	801a      	strh	r2, [r3, #0]
  	HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001d4e:	4b72      	ldr	r3, [pc, #456]	; (8001f18 <main+0x298>)
 8001d50:	881a      	ldrh	r2, [r3, #0]
 8001d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d56:	496f      	ldr	r1, [pc, #444]	; (8001f14 <main+0x294>)
 8001d58:	4870      	ldr	r0, [pc, #448]	; (8001f1c <main+0x29c>)
 8001d5a:	f003 fc9d 	bl	8005698 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d5e:	2120      	movs	r1, #32
 8001d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d64:	f001 f866 	bl	8002e34 <HAL_GPIO_TogglePin>
	HAL_Delay(5000);
 8001d68:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d6c:	f000 fd96 	bl	800289c <HAL_Delay>


	//AHT20
	HAL_I2C_Master_Receive(&hi2c1, addr_rc, (uint8_t *)data, 6, 1000);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	b299      	uxth	r1, r3
 8001d74:	1d3a      	adds	r2, r7, #4
 8001d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2306      	movs	r3, #6
 8001d7e:	4863      	ldr	r0, [pc, #396]	; (8001f0c <main+0x28c>)
 8001d80:	f001 fa26 	bl	80031d0 <HAL_I2C_Master_Receive>
	printf("Leading text "BYTE_TO_BINARY_PATTERN"\n", BYTE_TO_BINARY(data[0]));
 8001d84:	793b      	ldrb	r3, [r7, #4]
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da01      	bge.n	8001d90 <main+0x110>
 8001d8c:	2531      	movs	r5, #49	; 0x31
 8001d8e:	e000      	b.n	8001d92 <main+0x112>
 8001d90:	2530      	movs	r5, #48	; 0x30
 8001d92:	793b      	ldrb	r3, [r7, #4]
 8001d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <main+0x120>
 8001d9c:	2631      	movs	r6, #49	; 0x31
 8001d9e:	e000      	b.n	8001da2 <main+0x122>
 8001da0:	2630      	movs	r6, #48	; 0x30
 8001da2:	793b      	ldrb	r3, [r7, #4]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <main+0x132>
 8001dac:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8001db0:	e001      	b.n	8001db6 <main+0x136>
 8001db2:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <main+0x144>
 8001dc0:	2331      	movs	r3, #49	; 0x31
 8001dc2:	e000      	b.n	8001dc6 <main+0x146>
 8001dc4:	2330      	movs	r3, #48	; 0x30
 8001dc6:	793a      	ldrb	r2, [r7, #4]
 8001dc8:	f002 0208 	and.w	r2, r2, #8
 8001dcc:	2a00      	cmp	r2, #0
 8001dce:	d001      	beq.n	8001dd4 <main+0x154>
 8001dd0:	2231      	movs	r2, #49	; 0x31
 8001dd2:	e000      	b.n	8001dd6 <main+0x156>
 8001dd4:	2230      	movs	r2, #48	; 0x30
 8001dd6:	7939      	ldrb	r1, [r7, #4]
 8001dd8:	f001 0104 	and.w	r1, r1, #4
 8001ddc:	2900      	cmp	r1, #0
 8001dde:	d001      	beq.n	8001de4 <main+0x164>
 8001de0:	2131      	movs	r1, #49	; 0x31
 8001de2:	e000      	b.n	8001de6 <main+0x166>
 8001de4:	2130      	movs	r1, #48	; 0x30
 8001de6:	7938      	ldrb	r0, [r7, #4]
 8001de8:	f000 0002 	and.w	r0, r0, #2
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d001      	beq.n	8001df4 <main+0x174>
 8001df0:	2031      	movs	r0, #49	; 0x31
 8001df2:	e000      	b.n	8001df6 <main+0x176>
 8001df4:	2030      	movs	r0, #48	; 0x30
 8001df6:	793c      	ldrb	r4, [r7, #4]
 8001df8:	f004 0401 	and.w	r4, r4, #1
 8001dfc:	2c00      	cmp	r4, #0
 8001dfe:	d001      	beq.n	8001e04 <main+0x184>
 8001e00:	2431      	movs	r4, #49	; 0x31
 8001e02:	e000      	b.n	8001e06 <main+0x186>
 8001e04:	2430      	movs	r4, #48	; 0x30
 8001e06:	9404      	str	r4, [sp, #16]
 8001e08:	9003      	str	r0, [sp, #12]
 8001e0a:	9102      	str	r1, [sp, #8]
 8001e0c:	9201      	str	r2, [sp, #4]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4663      	mov	r3, ip
 8001e12:	4632      	mov	r2, r6
 8001e14:	4629      	mov	r1, r5
 8001e16:	4845      	ldr	r0, [pc, #276]	; (8001f2c <main+0x2ac>)
 8001e18:	f004 febe 	bl	8006b98 <iprintf>
	if((data[0] >> 3 & 1) != 1){
 8001e1c:	793b      	ldrb	r3, [r7, #4]
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10d      	bne.n	8001e46 <main+0x1c6>
	  printf("Kalibracja\n");
 8001e2a:	4841      	ldr	r0, [pc, #260]	; (8001f30 <main+0x2b0>)
 8001e2c:	f004 ff1a 	bl	8006c64 <puts>
	  HAL_I2C_Master_Transmit(&hi2c1, addr_wr, (uint8_t *)init, 3, 1000);
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	b299      	uxth	r1, r3
 8001e34:	f107 0210 	add.w	r2, r7, #16
 8001e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2303      	movs	r3, #3
 8001e40:	4832      	ldr	r0, [pc, #200]	; (8001f0c <main+0x28c>)
 8001e42:	f001 f8ad 	bl	8002fa0 <HAL_I2C_Master_Transmit>
	}
	HAL_Delay(10);
 8001e46:	200a      	movs	r0, #10
 8001e48:	f000 fd28 	bl	800289c <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, addr_wr, (uint8_t *)measure, 3, 1000);
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	b299      	uxth	r1, r3
 8001e50:	f107 020c 	add.w	r2, r7, #12
 8001e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	482b      	ldr	r0, [pc, #172]	; (8001f0c <main+0x28c>)
 8001e5e:	f001 f89f 	bl	8002fa0 <HAL_I2C_Master_Transmit>
	HAL_Delay(85);
 8001e62:	2055      	movs	r0, #85	; 0x55
 8001e64:	f000 fd1a 	bl	800289c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, addr_rc, (uint8_t *)data, 6, 1000);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	b299      	uxth	r1, r3
 8001e6c:	1d3a      	adds	r2, r7, #4
 8001e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2306      	movs	r3, #6
 8001e76:	4825      	ldr	r0, [pc, #148]	; (8001f0c <main+0x28c>)
 8001e78:	f001 f9aa 	bl	80031d0 <HAL_I2C_Master_Receive>
	//AHT20 COMM FINISHED

	//display control byte
	printf("Leading text "BYTE_TO_BINARY_PATTERN"\n", BYTE_TO_BINARY(data[0]));
 8001e7c:	793b      	ldrb	r3, [r7, #4]
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da01      	bge.n	8001e88 <main+0x208>
 8001e84:	2531      	movs	r5, #49	; 0x31
 8001e86:	e000      	b.n	8001e8a <main+0x20a>
 8001e88:	2530      	movs	r5, #48	; 0x30
 8001e8a:	793b      	ldrb	r3, [r7, #4]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <main+0x218>
 8001e94:	2631      	movs	r6, #49	; 0x31
 8001e96:	e000      	b.n	8001e9a <main+0x21a>
 8001e98:	2630      	movs	r6, #48	; 0x30
 8001e9a:	793b      	ldrb	r3, [r7, #4]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <main+0x22a>
 8001ea4:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8001ea8:	e001      	b.n	8001eae <main+0x22e>
 8001eaa:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8001eae:	793b      	ldrb	r3, [r7, #4]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <main+0x23c>
 8001eb8:	2331      	movs	r3, #49	; 0x31
 8001eba:	e000      	b.n	8001ebe <main+0x23e>
 8001ebc:	2330      	movs	r3, #48	; 0x30
 8001ebe:	793a      	ldrb	r2, [r7, #4]
 8001ec0:	f002 0208 	and.w	r2, r2, #8
 8001ec4:	2a00      	cmp	r2, #0
 8001ec6:	d001      	beq.n	8001ecc <main+0x24c>
 8001ec8:	2231      	movs	r2, #49	; 0x31
 8001eca:	e000      	b.n	8001ece <main+0x24e>
 8001ecc:	2230      	movs	r2, #48	; 0x30
 8001ece:	7939      	ldrb	r1, [r7, #4]
 8001ed0:	f001 0104 	and.w	r1, r1, #4
 8001ed4:	2900      	cmp	r1, #0
 8001ed6:	d001      	beq.n	8001edc <main+0x25c>
 8001ed8:	2131      	movs	r1, #49	; 0x31
 8001eda:	e000      	b.n	8001ede <main+0x25e>
 8001edc:	2130      	movs	r1, #48	; 0x30
 8001ede:	7938      	ldrb	r0, [r7, #4]
 8001ee0:	f000 0002 	and.w	r0, r0, #2
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d001      	beq.n	8001eec <main+0x26c>
 8001ee8:	2031      	movs	r0, #49	; 0x31
 8001eea:	e000      	b.n	8001eee <main+0x26e>
 8001eec:	2030      	movs	r0, #48	; 0x30
 8001eee:	793c      	ldrb	r4, [r7, #4]
 8001ef0:	f004 0401 	and.w	r4, r4, #1
 8001ef4:	2c00      	cmp	r4, #0
 8001ef6:	d01d      	beq.n	8001f34 <main+0x2b4>
 8001ef8:	2431      	movs	r4, #49	; 0x31
 8001efa:	e01c      	b.n	8001f36 <main+0x2b6>
 8001efc:	08009ef8 	.word	0x08009ef8
 8001f00:	08009efc 	.word	0x08009efc
 8001f04:	2000030c 	.word	0x2000030c
 8001f08:	200002e0 	.word	0x200002e0
 8001f0c:	20000204 	.word	0x20000204
 8001f10:	08009db8 	.word	0x08009db8
 8001f14:	2000032c 	.word	0x2000032c
 8001f18:	20000328 	.word	0x20000328
 8001f1c:	20000258 	.word	0x20000258
 8001f20:	08009dd8 	.word	0x08009dd8
 8001f24:	08009de0 	.word	0x08009de0
 8001f28:	08009de8 	.word	0x08009de8
 8001f2c:	08009dfc 	.word	0x08009dfc
 8001f30:	08009e1c 	.word	0x08009e1c
 8001f34:	2430      	movs	r4, #48	; 0x30
 8001f36:	9404      	str	r4, [sp, #16]
 8001f38:	9003      	str	r0, [sp, #12]
 8001f3a:	9102      	str	r1, [sp, #8]
 8001f3c:	9201      	str	r2, [sp, #4]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	4663      	mov	r3, ip
 8001f42:	4632      	mov	r2, r6
 8001f44:	4629      	mov	r1, r5
 8001f46:	4884      	ldr	r0, [pc, #528]	; (8002158 <main+0x4d8>)
 8001f48:	f004 fe26 	bl	8006b98 <iprintf>
	//check control byte and calculate values
	if(((data[0] >> 7) & 1) == 0) {
 8001f4c:	793b      	ldrb	r3, [r7, #4]
 8001f4e:	09db      	lsrs	r3, r3, #7
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d13c      	bne.n	8001fd4 <main+0x354>
	  printf("Komunikacja udana \n");
 8001f5a:	4880      	ldr	r0, [pc, #512]	; (800215c <main+0x4dc>)
 8001f5c:	f004 fe82 	bl	8006c64 <puts>
	  temp_data = ((uint32_t)data[3] << 16) + ((uint32_t)data[4] << 8) + (uint32_t)data[5];
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	041a      	lsls	r2, r3, #16
 8001f64:	7a3b      	ldrb	r3, [r7, #8]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	4413      	add	r3, r2
 8001f6a:	7a7a      	ldrb	r2, [r7, #9]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
	  temp_data = temp_data & (~(0xFFF00000));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f76:	617b      	str	r3, [r7, #20]
	  temp = ((float)temp_data/1048576) * 200 - 50;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f82:	eddf 6a77 	vldr	s13, [pc, #476]	; 8002160 <main+0x4e0>
 8001f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f8a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002164 <main+0x4e4>
 8001f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f92:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002168 <main+0x4e8>
 8001f96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f9a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  temp_data = ((uint32_t)data[1] << 16) + ((uint32_t)data[2] << 8) + (uint32_t)data[3];
 8001f9e:	797b      	ldrb	r3, [r7, #5]
 8001fa0:	041a      	lsls	r2, r3, #16
 8001fa2:	79bb      	ldrb	r3, [r7, #6]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	4413      	add	r3, r2
 8001fa8:	79fa      	ldrb	r2, [r7, #7]
 8001faa:	4413      	add	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]
	  temp_data = temp_data >> 4;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	617b      	str	r3, [r7, #20]
	  humi = ((float)temp_data/1048576) * 100;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fbe:	eddf 6a68 	vldr	s13, [pc, #416]	; 8002160 <main+0x4e0>
 8001fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800216c <main+0x4ec>
 8001fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001fd2:	e002      	b.n	8001fda <main+0x35a>
	}
	else
	{
	  printf("Komunikacja nie udana\n");
 8001fd4:	4866      	ldr	r0, [pc, #408]	; (8002170 <main+0x4f0>)
 8001fd6:	f004 fe45 	bl	8006c64 <puts>
	}




	printf("Temperatura wynosi %f *C\n", temp);
 8001fda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fdc:	f7fe fab4 	bl	8000548 <__aeabi_f2d>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4863      	ldr	r0, [pc, #396]	; (8002174 <main+0x4f4>)
 8001fe6:	f004 fdd7 	bl	8006b98 <iprintf>
	printf("Wilgotnosc  wynosi %f %%\n", humi);
 8001fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fec:	f7fe faac 	bl	8000548 <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4860      	ldr	r0, [pc, #384]	; (8002178 <main+0x4f8>)
 8001ff6:	f004 fdcf 	bl	8006b98 <iprintf>


	HAL_Delay(100);
 8001ffa:	2064      	movs	r0, #100	; 0x64
 8001ffc:	f000 fc4e 	bl	800289c <HAL_Delay>
			while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8002000:	e013      	b.n	800202a <main+0x3aa>
				size = sprintf((char *)Data,
 8002002:	495e      	ldr	r1, [pc, #376]	; (800217c <main+0x4fc>)
 8002004:	485e      	ldr	r0, [pc, #376]	; (8002180 <main+0x500>)
 8002006:	f004 fe35 	bl	8006c74 <siprintf>
 800200a:	4603      	mov	r3, r0
 800200c:	b29a      	uxth	r2, r3
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <main+0x504>)
 8002010:	801a      	strh	r2, [r3, #0]
						"Temperature/pressure reading failed\n");
				HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002012:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <main+0x504>)
 8002014:	881a      	ldrh	r2, [r3, #0]
 8002016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201a:	4959      	ldr	r1, [pc, #356]	; (8002180 <main+0x500>)
 800201c:	485a      	ldr	r0, [pc, #360]	; (8002188 <main+0x508>)
 800201e:	f003 fb3b 	bl	8005698 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8002022:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002026:	f000 fc39 	bl	800289c <HAL_Delay>
			while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800202a:	4b58      	ldr	r3, [pc, #352]	; (800218c <main+0x50c>)
 800202c:	4a58      	ldr	r2, [pc, #352]	; (8002190 <main+0x510>)
 800202e:	4959      	ldr	r1, [pc, #356]	; (8002194 <main+0x514>)
 8002030:	4859      	ldr	r0, [pc, #356]	; (8002198 <main+0x518>)
 8002032:	f7ff fdb9 	bl	8001ba8 <bmp280_read_float>
 8002036:	4603      	mov	r3, r0
 8002038:	f083 0301 	eor.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1df      	bne.n	8002002 <main+0x382>
			}
				p = pressure/100;
 8002042:	4b53      	ldr	r3, [pc, #332]	; (8002190 <main+0x510>)
 8002044:	ed93 7a00 	vldr	s14, [r3]
 8002048:	eddf 6a48 	vldr	s13, [pc, #288]	; 800216c <main+0x4ec>
 800204c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002050:	4b52      	ldr	r3, [pc, #328]	; (800219c <main+0x51c>)
 8002052:	edc3 7a00 	vstr	s15, [r3]
			 altitude = 44330.0*(1-pow(p/1013.25, 1/5.255));
 8002056:	4b51      	ldr	r3, [pc, #324]	; (800219c <main+0x51c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa74 	bl	8000548 <__aeabi_f2d>
 8002060:	a337      	add	r3, pc, #220	; (adr r3, 8002140 <main+0x4c0>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fbf1 	bl	800084c <__aeabi_ddiv>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	ec43 2b17 	vmov	d7, r2, r3
 8002072:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8002148 <main+0x4c8>
 8002076:	eeb0 0a47 	vmov.f32	s0, s14
 800207a:	eef0 0a67 	vmov.f32	s1, s15
 800207e:	f006 ff57 	bl	8008f30 <pow>
 8002082:	ec53 2b10 	vmov	r2, r3, d0
 8002086:	f04f 0000 	mov.w	r0, #0
 800208a:	4945      	ldr	r1, [pc, #276]	; (80021a0 <main+0x520>)
 800208c:	f7fe f8fc 	bl	8000288 <__aeabi_dsub>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	a32d      	add	r3, pc, #180	; (adr r3, 8002150 <main+0x4d0>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f7fe faab 	bl	80005f8 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7fe fd7d 	bl	8000ba8 <__aeabi_d2f>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4a3c      	ldr	r2, [pc, #240]	; (80021a4 <main+0x524>)
 80020b2:	6013      	str	r3, [r2, #0]

			  size = sprintf((char *)Data,"\nPressure: %.2f Pa, Temperature: %.2f C , Altitude: %.2f m\r\n",
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <main+0x510>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa45 	bl	8000548 <__aeabi_f2d>
 80020be:	4680      	mov	r8, r0
 80020c0:	4689      	mov	r9, r1
 80020c2:	4b34      	ldr	r3, [pc, #208]	; (8002194 <main+0x514>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fa3e 	bl	8000548 <__aeabi_f2d>
 80020cc:	4604      	mov	r4, r0
 80020ce:	460d      	mov	r5, r1
 80020d0:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <main+0x524>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fa37 	bl	8000548 <__aeabi_f2d>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020e2:	e9cd 4500 	strd	r4, r5, [sp]
 80020e6:	4642      	mov	r2, r8
 80020e8:	464b      	mov	r3, r9
 80020ea:	492f      	ldr	r1, [pc, #188]	; (80021a8 <main+0x528>)
 80020ec:	4824      	ldr	r0, [pc, #144]	; (8002180 <main+0x500>)
 80020ee:	f004 fdc1 	bl	8006c74 <siprintf>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <main+0x504>)
 80020f8:	801a      	strh	r2, [r3, #0]
					pressure, temperature , altitude);
			//size = sprintf((char *)Data,"\nPressure: %.2f Pa, Temperature: %.2f C \r\n",
			//		pressure, temperature);
			HAL_UART_Transmit(&huart2, Data, size, 1000);
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <main+0x504>)
 80020fc:	881a      	ldrh	r2, [r3, #0]
 80020fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002102:	491f      	ldr	r1, [pc, #124]	; (8002180 <main+0x500>)
 8002104:	4820      	ldr	r0, [pc, #128]	; (8002188 <main+0x508>)
 8002106:	f003 fac7 	bl	8005698 <HAL_UART_Transmit>
			if (bme280p) {
 800210a:	7efb      	ldrb	r3, [r7, #27]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10f      	bne.n	8002130 <main+0x4b0>
				//size = sprintf((char *)Data,", Humidity: %.2f\n", humidity);
				//HAL_UART_Transmit(&huart1, Data, size, 1000);
			}

			else {
				size = sprintf((char *)Data, "\n");
 8002110:	4926      	ldr	r1, [pc, #152]	; (80021ac <main+0x52c>)
 8002112:	481b      	ldr	r0, [pc, #108]	; (8002180 <main+0x500>)
 8002114:	f004 fdae 	bl	8006c74 <siprintf>
 8002118:	4603      	mov	r3, r0
 800211a:	b29a      	uxth	r2, r3
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <main+0x504>)
 800211e:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <main+0x504>)
 8002122:	881a      	ldrh	r2, [r3, #0]
 8002124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002128:	4915      	ldr	r1, [pc, #84]	; (8002180 <main+0x500>)
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <main+0x508>)
 800212c:	f003 fab4 	bl	8005698 <HAL_UART_Transmit>
			}
			HAL_Delay(500);
 8002130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002134:	f000 fbb2 	bl	800289c <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002138:	e611      	b.n	8001d5e <main+0xde>
 800213a:	bf00      	nop
 800213c:	f3af 8000 	nop.w
 8002140:	00000000 	.word	0x00000000
 8002144:	408faa00 	.word	0x408faa00
 8002148:	ccd9456c 	.word	0xccd9456c
 800214c:	3fc85b95 	.word	0x3fc85b95
 8002150:	00000000 	.word	0x00000000
 8002154:	40e5a540 	.word	0x40e5a540
 8002158:	08009dfc 	.word	0x08009dfc
 800215c:	08009e28 	.word	0x08009e28
 8002160:	49800000 	.word	0x49800000
 8002164:	43480000 	.word	0x43480000
 8002168:	42480000 	.word	0x42480000
 800216c:	42c80000 	.word	0x42c80000
 8002170:	08009e3c 	.word	0x08009e3c
 8002174:	08009e54 	.word	0x08009e54
 8002178:	08009e70 	.word	0x08009e70
 800217c:	08009e8c 	.word	0x08009e8c
 8002180:	2000032c 	.word	0x2000032c
 8002184:	20000328 	.word	0x20000328
 8002188:	20000258 	.word	0x20000258
 800218c:	20000324 	.word	0x20000324
 8002190:	20000318 	.word	0x20000318
 8002194:	20000320 	.word	0x20000320
 8002198:	200002e0 	.word	0x200002e0
 800219c:	2000031c 	.word	0x2000031c
 80021a0:	3ff00000 	.word	0x3ff00000
 80021a4:	20000314 	.word	0x20000314
 80021a8:	08009eb4 	.word	0x08009eb4
 80021ac:	08009ef4 	.word	0x08009ef4

080021b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b096      	sub	sp, #88	; 0x58
 80021b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	2244      	movs	r2, #68	; 0x44
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 fe50 	bl	8006e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c4:	463b      	mov	r3, r7
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021d6:	f001 feff 	bl	8003fd8 <HAL_PWREx_ControlVoltageScaling>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021e0:	f000 f8d8 	bl	8002394 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80021e4:	2310      	movs	r3, #16
 80021e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021e8:	2301      	movs	r3, #1
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021f0:	2360      	movs	r3, #96	; 0x60
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 ff41 	bl	8004084 <HAL_RCC_OscConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002208:	f000 f8c4 	bl	8002394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800220c:	230f      	movs	r3, #15
 800220e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002210:	2300      	movs	r3, #0
 8002212:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002220:	463b      	mov	r3, r7
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f002 fb09 	bl	800483c <HAL_RCC_ClockConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002230:	f000 f8b0 	bl	8002394 <Error_Handler>
  }
}
 8002234:	bf00      	nop
 8002236:	3758      	adds	r7, #88	; 0x58
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002240:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002242:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <MX_I2C1_Init+0x78>)
 8002244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002248:	f640 6214 	movw	r2, #3604	; 0xe14
 800224c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002256:	2201      	movs	r2, #1
 8002258:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <MX_I2C1_Init+0x74>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002262:	2200      	movs	r2, #0
 8002264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <MX_I2C1_Init+0x74>)
 800226e:	2200      	movs	r2, #0
 8002270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002272:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <MX_I2C1_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002278:	480d      	ldr	r0, [pc, #52]	; (80022b0 <MX_I2C1_Init+0x74>)
 800227a:	f000 fdf5 	bl	8002e68 <HAL_I2C_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002284:	f000 f886 	bl	8002394 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002288:	2100      	movs	r1, #0
 800228a:	4809      	ldr	r0, [pc, #36]	; (80022b0 <MX_I2C1_Init+0x74>)
 800228c:	f001 fdfe 	bl	8003e8c <HAL_I2CEx_ConfigAnalogFilter>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002296:	f000 f87d 	bl	8002394 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800229a:	2100      	movs	r1, #0
 800229c:	4804      	ldr	r0, [pc, #16]	; (80022b0 <MX_I2C1_Init+0x74>)
 800229e:	f001 fe40 	bl	8003f22 <HAL_I2CEx_ConfigDigitalFilter>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80022a8:	f000 f874 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000204 	.word	0x20000204
 80022b4:	40005400 	.word	0x40005400

080022b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <MX_USART2_UART_Init+0x5c>)
 80022c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022de:	220c      	movs	r2, #12
 80022e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <MX_USART2_UART_Init+0x58>)
 80022fc:	f003 f97e 	bl	80055fc <HAL_UART_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002306:	f000 f845 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000258 	.word	0x20000258
 8002314:	40004400 	.word	0x40004400

08002318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_GPIO_Init+0x78>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <MX_GPIO_Init+0x78>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <MX_GPIO_Init+0x78>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <MX_GPIO_Init+0x78>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	4a11      	ldr	r2, [pc, #68]	; (8002390 <MX_GPIO_Init+0x78>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_GPIO_Init+0x78>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	2120      	movs	r1, #32
 8002362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002366:	f000 fd4d 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800236a:	2320      	movs	r3, #32
 800236c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236e:	2301      	movs	r3, #1
 8002370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800237a:	f107 030c 	add.w	r3, r7, #12
 800237e:	4619      	mov	r1, r3
 8002380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002384:	f000 fb94 	bl	8002ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002388:	bf00      	nop
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000

08002394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002398:	b672      	cpsid	i
}
 800239a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800239c:	e7fe      	b.n	800239c <Error_Handler+0x8>
	...

080023a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_MspInit+0x44>)
 80023a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023aa:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <HAL_MspInit+0x44>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6613      	str	r3, [r2, #96]	; 0x60
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_MspInit+0x44>)
 80023b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_MspInit+0x44>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	4a08      	ldr	r2, [pc, #32]	; (80023e4 <HAL_MspInit+0x44>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6593      	str	r3, [r2, #88]	; 0x58
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_MspInit+0x44>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000

080023e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0ac      	sub	sp, #176	; 0xb0
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2288      	movs	r2, #136	; 0x88
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f004 fd2b 	bl	8006e64 <memset>
  if(hi2c->Instance==I2C1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a21      	ldr	r2, [pc, #132]	; (8002498 <HAL_I2C_MspInit+0xb0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d13a      	bne.n	800248e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002418:	2340      	movs	r3, #64	; 0x40
 800241a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800241c:	2300      	movs	r3, #0
 800241e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4618      	mov	r0, r3
 8002426:	f002 fc2d 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002430:	f7ff ffb0 	bl	8002394 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_I2C_MspInit+0xb4>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	4a18      	ldr	r2, [pc, #96]	; (800249c <HAL_I2C_MspInit+0xb4>)
 800243a:	f043 0302 	orr.w	r3, r3, #2
 800243e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <HAL_I2C_MspInit+0xb4>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800244c:	23c0      	movs	r3, #192	; 0xc0
 800244e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002452:	2312      	movs	r3, #18
 8002454:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245e:	2303      	movs	r3, #3
 8002460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002464:	2304      	movs	r3, #4
 8002466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800246e:	4619      	mov	r1, r3
 8002470:	480b      	ldr	r0, [pc, #44]	; (80024a0 <HAL_I2C_MspInit+0xb8>)
 8002472:	f000 fb1d 	bl	8002ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_I2C_MspInit+0xb4>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	4a08      	ldr	r2, [pc, #32]	; (800249c <HAL_I2C_MspInit+0xb4>)
 800247c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002480:	6593      	str	r3, [r2, #88]	; 0x58
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_I2C_MspInit+0xb4>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800248e:	bf00      	nop
 8002490:	37b0      	adds	r7, #176	; 0xb0
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40005400 	.word	0x40005400
 800249c:	40021000 	.word	0x40021000
 80024a0:	48000400 	.word	0x48000400

080024a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b0ac      	sub	sp, #176	; 0xb0
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	2288      	movs	r2, #136	; 0x88
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f004 fccd 	bl	8006e64 <memset>
  if(huart->Instance==USART2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <HAL_UART_MspInit+0xb0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d13b      	bne.n	800254c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024d4:	2302      	movs	r3, #2
 80024d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024d8:	2300      	movs	r3, #0
 80024da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	4618      	mov	r0, r3
 80024e2:	f002 fbcf 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024ec:	f7ff ff52 	bl	8002394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_UART_MspInit+0xb4>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	4a18      	ldr	r2, [pc, #96]	; (8002558 <HAL_UART_MspInit+0xb4>)
 80024f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fa:	6593      	str	r3, [r2, #88]	; 0x58
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <HAL_UART_MspInit+0xb4>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_UART_MspInit+0xb4>)
 800250a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250c:	4a12      	ldr	r2, [pc, #72]	; (8002558 <HAL_UART_MspInit+0xb4>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_UART_MspInit+0xb4>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002520:	230c      	movs	r3, #12
 8002522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002538:	2307      	movs	r3, #7
 800253a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002542:	4619      	mov	r1, r3
 8002544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002548:	f000 fab2 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800254c:	bf00      	nop
 800254e:	37b0      	adds	r7, #176	; 0xb0
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40004400 	.word	0x40004400
 8002558:	40021000 	.word	0x40021000

0800255c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002560:	e7fe      	b.n	8002560 <NMI_Handler+0x4>

08002562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002566:	e7fe      	b.n	8002566 <HardFault_Handler+0x4>

08002568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800256c:	e7fe      	b.n	800256c <MemManage_Handler+0x4>

0800256e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002572:	e7fe      	b.n	8002572 <BusFault_Handler+0x4>

08002574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <UsageFault_Handler+0x4>

0800257a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a8:	f000 f958 	bl	800285c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return 1;
 80025b4:	2301      	movs	r3, #1
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_kill>:

int _kill(int pid, int sig)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ca:	f004 fc9d 	bl	8006f08 <__errno>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2216      	movs	r2, #22
 80025d2:	601a      	str	r2, [r3, #0]
  return -1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_exit>:

void _exit (int status)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ffe7 	bl	80025c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025f2:	e7fe      	b.n	80025f2 <_exit+0x12>

080025f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e00a      	b.n	800261c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002606:	f3af 8000 	nop.w
 800260a:	4601      	mov	r1, r0
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	60ba      	str	r2, [r7, #8]
 8002612:	b2ca      	uxtb	r2, r1
 8002614:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3301      	adds	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	dbf0      	blt.n	8002606 <_read+0x12>
  }

  return len;
 8002624:	687b      	ldr	r3, [r7, #4]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e009      	b.n	8002654 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	60ba      	str	r2, [r7, #8]
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff faf9 	bl	8001c40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3301      	adds	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	429a      	cmp	r2, r3
 800265a:	dbf1      	blt.n	8002640 <_write+0x12>
  }
  return len;
 800265c:	687b      	ldr	r3, [r7, #4]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <_close>:

int _close(int file)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800268e:	605a      	str	r2, [r3, #4]
  return 0;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <_isatty>:

int _isatty(int file)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026a6:	2301      	movs	r3, #1
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <_sbrk+0x5c>)
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <_sbrk+0x60>)
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <_sbrk+0x64>)
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <_sbrk+0x68>)
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d207      	bcs.n	8002710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002700:	f004 fc02 	bl	8006f08 <__errno>
 8002704:	4603      	mov	r3, r0
 8002706:	220c      	movs	r2, #12
 8002708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	e009      	b.n	8002724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <_sbrk+0x64>)
 8002720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20018000 	.word	0x20018000
 8002730:	00000400 	.word	0x00000400
 8002734:	2000042c 	.word	0x2000042c
 8002738:	20000580 	.word	0x20000580

0800273c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <SystemInit+0x20>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <SystemInit+0x20>)
 8002748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800274c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002798 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002764:	f7ff ffea 	bl	800273c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002768:	480c      	ldr	r0, [pc, #48]	; (800279c <LoopForever+0x6>)
  ldr r1, =_edata
 800276a:	490d      	ldr	r1, [pc, #52]	; (80027a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800276c:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <LoopForever+0xe>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002770:	e002      	b.n	8002778 <LoopCopyDataInit>

08002772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002776:	3304      	adds	r3, #4

08002778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800277a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800277c:	d3f9      	bcc.n	8002772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002780:	4c0a      	ldr	r4, [pc, #40]	; (80027ac <LoopForever+0x16>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002784:	e001      	b.n	800278a <LoopFillZerobss>

08002786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002788:	3204      	adds	r2, #4

0800278a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800278a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800278c:	d3fb      	bcc.n	8002786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278e:	f004 fbc1 	bl	8006f14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002792:	f7ff fa75 	bl	8001c80 <main>

08002796 <LoopForever>:

LoopForever:
    b LoopForever
 8002796:	e7fe      	b.n	8002796 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002798:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800279c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80027a4:	0800a300 	.word	0x0800a300
  ldr r2, =_sbss
 80027a8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80027ac:	20000580 	.word	0x20000580

080027b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <ADC1_2_IRQHandler>

080027b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027bc:	2003      	movs	r0, #3
 80027be:	f000 f943 	bl	8002a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027c2:	200f      	movs	r0, #15
 80027c4:	f000 f80e 	bl	80027e4 <HAL_InitTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	71fb      	strb	r3, [r7, #7]
 80027d2:	e001      	b.n	80027d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027d4:	f7ff fde4 	bl	80023a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027d8:	79fb      	ldrb	r3, [r7, #7]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027f0:	4b17      	ldr	r3, [pc, #92]	; (8002850 <HAL_InitTick+0x6c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d023      	beq.n	8002840 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_InitTick+0x70>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b14      	ldr	r3, [pc, #80]	; (8002850 <HAL_InitTick+0x6c>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f941 	bl	8002a96 <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d809      	bhi.n	8002834 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002820:	2200      	movs	r2, #0
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f000 f919 	bl	8002a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <HAL_InitTick+0x74>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e007      	b.n	8002844 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	e004      	b.n	8002844 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	e001      	b.n	8002844 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000008 	.word	0x20000008
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_IncTick+0x20>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x24>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_IncTick+0x24>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000008 	.word	0x20000008
 8002880:	20000430 	.word	0x20000430

08002884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_GetTick+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000430 	.word	0x20000430

0800289c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff ffee 	bl	8002884 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d005      	beq.n	80028c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_Delay+0x44>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c2:	bf00      	nop
 80028c4:	f7ff ffde 	bl	8002884 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f7      	bhi.n	80028c4 <HAL_Delay+0x28>
  {
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000008 	.word	0x20000008

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800290c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	; (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	; (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a14:	d301      	bcc.n	8002a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <SysTick_Config+0x40>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a22:	210f      	movs	r1, #15
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	f7ff ff8e 	bl	8002948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <SysTick_Config+0x40>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a32:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <SysTick_Config+0x40>)
 8002a34:	2207      	movs	r2, #7
 8002a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	e000e010 	.word	0xe000e010

08002a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff47 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a70:	f7ff ff5c 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f7ff ff8e 	bl	800299c <NVIC_EncodePriority>
 8002a80:	4602      	mov	r2, r0
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff5d 	bl	8002948 <__NVIC_SetPriority>
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ffb0 	bl	8002a04 <SysTick_Config>
 8002aa4:	4603      	mov	r3, r0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abe:	e17f      	b.n	8002dc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8171 	beq.w	8002dba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d005      	beq.n	8002af0 <HAL_GPIO_Init+0x40>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d130      	bne.n	8002b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	2203      	movs	r2, #3
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b26:	2201      	movs	r2, #1
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	091b      	lsrs	r3, r3, #4
 8002b3c:	f003 0201 	and.w	r2, r3, #1
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d118      	bne.n	8002b90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b64:	2201      	movs	r2, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	08db      	lsrs	r3, r3, #3
 8002b7a:	f003 0201 	and.w	r2, r3, #1
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d017      	beq.n	8002bcc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d123      	bne.n	8002c20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	08da      	lsrs	r2, r3, #3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3208      	adds	r2, #8
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	08da      	lsrs	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3208      	adds	r2, #8
 8002c1a:	6939      	ldr	r1, [r7, #16]
 8002c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80ac 	beq.w	8002dba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <HAL_GPIO_Init+0x330>)
 8002c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c66:	4a5e      	ldr	r2, [pc, #376]	; (8002de0 <HAL_GPIO_Init+0x330>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c6e:	4b5c      	ldr	r3, [pc, #368]	; (8002de0 <HAL_GPIO_Init+0x330>)
 8002c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c7a:	4a5a      	ldr	r2, [pc, #360]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ca4:	d025      	beq.n	8002cf2 <HAL_GPIO_Init+0x242>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4f      	ldr	r2, [pc, #316]	; (8002de8 <HAL_GPIO_Init+0x338>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01f      	beq.n	8002cee <HAL_GPIO_Init+0x23e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4e      	ldr	r2, [pc, #312]	; (8002dec <HAL_GPIO_Init+0x33c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x23a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4d      	ldr	r2, [pc, #308]	; (8002df0 <HAL_GPIO_Init+0x340>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x236>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4c      	ldr	r2, [pc, #304]	; (8002df4 <HAL_GPIO_Init+0x344>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x232>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4b      	ldr	r2, [pc, #300]	; (8002df8 <HAL_GPIO_Init+0x348>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x22e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_GPIO_Init+0x34c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x22a>
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x244>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d04:	4937      	ldr	r1, [pc, #220]	; (8002de4 <HAL_GPIO_Init+0x334>)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d36:	4a32      	ldr	r2, [pc, #200]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d60:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d66:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002db4:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <HAL_GPIO_Init+0x350>)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f47f ae78 	bne.w	8002ac0 <HAL_GPIO_Init+0x10>
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40010000 	.word	0x40010000
 8002de8:	48000400 	.word	0x48000400
 8002dec:	48000800 	.word	0x48000800
 8002df0:	48000c00 	.word	0x48000c00
 8002df4:	48001000 	.word	0x48001000
 8002df8:	48001400 	.word	0x48001400
 8002dfc:	48001800 	.word	0x48001800
 8002e00:	40010400 	.word	0x40010400

08002e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
 8002e10:	4613      	mov	r3, r2
 8002e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e20:	e002      	b.n	8002e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	041a      	lsls	r2, r3, #16
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	43d9      	mvns	r1, r3
 8002e52:	887b      	ldrh	r3, [r7, #2]
 8002e54:	400b      	ands	r3, r1
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	619a      	str	r2, [r3, #24]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e08d      	b.n	8002f96 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff faaa 	bl	80023e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	; 0x24
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ec8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	e006      	b.n	8002ef0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d108      	bne.n	8002f0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	e007      	b.n	8002f1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69d9      	ldr	r1, [r3, #28]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	461a      	mov	r2, r3
 8002fac:	460b      	mov	r3, r1
 8002fae:	817b      	strh	r3, [r7, #10]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	f040 80fd 	bne.w	80031bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_I2C_Master_Transmit+0x30>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e0f6      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fd8:	f7ff fc54 	bl	8002884 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2319      	movs	r3, #25
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fce0 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0e1      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2221      	movs	r2, #33	; 0x21
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2210      	movs	r2, #16
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	893a      	ldrh	r2, [r7, #8]
 800301a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	2bff      	cmp	r3, #255	; 0xff
 800302a:	d906      	bls.n	800303a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	22ff      	movs	r2, #255	; 0xff
 8003030:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003032:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e007      	b.n	800304a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003048:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d024      	beq.n	800309c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3301      	adds	r3, #1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	8979      	ldrh	r1, [r7, #10]
 800308e:	4b4e      	ldr	r3, [pc, #312]	; (80031c8 <HAL_I2C_Master_Transmit+0x228>)
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fec7 	bl	8003e28 <I2C_TransferConfig>
 800309a:	e066      	b.n	800316a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	8979      	ldrh	r1, [r7, #10]
 80030a4:	4b48      	ldr	r3, [pc, #288]	; (80031c8 <HAL_I2C_Master_Transmit+0x228>)
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 febc 	bl	8003e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030b0:	e05b      	b.n	800316a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	6a39      	ldr	r1, [r7, #32]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fcc9 	bl	8003a4e <I2C_WaitOnTXISFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e07b      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d034      	beq.n	800316a <HAL_I2C_Master_Transmit+0x1ca>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	d130      	bne.n	800316a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	2200      	movs	r2, #0
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fc4c 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e04d      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2bff      	cmp	r3, #255	; 0xff
 800312a:	d90e      	bls.n	800314a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	22ff      	movs	r2, #255	; 0xff
 8003130:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	b2da      	uxtb	r2, r3
 8003138:	8979      	ldrh	r1, [r7, #10]
 800313a:	2300      	movs	r3, #0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fe70 	bl	8003e28 <I2C_TransferConfig>
 8003148:	e00f      	b.n	800316a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	b2da      	uxtb	r2, r3
 800315a:	8979      	ldrh	r1, [r7, #10]
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fe5f 	bl	8003e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d19e      	bne.n	80030b2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	6a39      	ldr	r1, [r7, #32]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fcaf 	bl	8003adc <I2C_WaitOnSTOPFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e01a      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2220      	movs	r2, #32
 800318e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_I2C_Master_Transmit+0x22c>)
 800319c:	400b      	ands	r3, r1
 800319e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
  }
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	80002000 	.word	0x80002000
 80031cc:	fe00e800 	.word	0xfe00e800

080031d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	461a      	mov	r2, r3
 80031dc:	460b      	mov	r3, r1
 80031de:	817b      	strh	r3, [r7, #10]
 80031e0:	4613      	mov	r3, r2
 80031e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	f040 80db 	bne.w	80033a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_I2C_Master_Receive+0x30>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e0d4      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003208:	f7ff fb3c 	bl	8002884 <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2319      	movs	r3, #25
 8003214:	2201      	movs	r2, #1
 8003216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fbc8 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0bf      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2222      	movs	r2, #34	; 0x22
 800322e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2210      	movs	r2, #16
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	893a      	ldrh	r2, [r7, #8]
 800324a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	2bff      	cmp	r3, #255	; 0xff
 800325a:	d90e      	bls.n	800327a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	22ff      	movs	r2, #255	; 0xff
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003266:	b2da      	uxtb	r2, r3
 8003268:	8979      	ldrh	r1, [r7, #10]
 800326a:	4b52      	ldr	r3, [pc, #328]	; (80033b4 <HAL_I2C_Master_Receive+0x1e4>)
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fdd8 	bl	8003e28 <I2C_TransferConfig>
 8003278:	e06d      	b.n	8003356 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	b2da      	uxtb	r2, r3
 800328a:	8979      	ldrh	r1, [r7, #10]
 800328c:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <HAL_I2C_Master_Receive+0x1e4>)
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fdc7 	bl	8003e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800329a:	e05c      	b.n	8003356 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	6a39      	ldr	r1, [r7, #32]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fc5f 	bl	8003b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e07c      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d034      	beq.n	8003356 <HAL_I2C_Master_Receive+0x186>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d130      	bne.n	8003356 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	2200      	movs	r2, #0
 80032fc:	2180      	movs	r1, #128	; 0x80
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fb56 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e04d      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2bff      	cmp	r3, #255	; 0xff
 8003316:	d90e      	bls.n	8003336 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	22ff      	movs	r2, #255	; 0xff
 800331c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003322:	b2da      	uxtb	r2, r3
 8003324:	8979      	ldrh	r1, [r7, #10]
 8003326:	2300      	movs	r3, #0
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fd7a 	bl	8003e28 <I2C_TransferConfig>
 8003334:	e00f      	b.n	8003356 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	b2da      	uxtb	r2, r3
 8003346:	8979      	ldrh	r1, [r7, #10]
 8003348:	2300      	movs	r3, #0
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fd69 	bl	8003e28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d19d      	bne.n	800329c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	6a39      	ldr	r1, [r7, #32]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fbb9 	bl	8003adc <I2C_WaitOnSTOPFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e01a      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2220      	movs	r2, #32
 800337a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <HAL_I2C_Master_Receive+0x1e8>)
 8003388:	400b      	ands	r3, r1
 800338a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	e000      	b.n	80033aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	80002400 	.word	0x80002400
 80033b8:	fe00e800 	.word	0xfe00e800

080033bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	4608      	mov	r0, r1
 80033c6:	4611      	mov	r1, r2
 80033c8:	461a      	mov	r2, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	817b      	strh	r3, [r7, #10]
 80033ce:	460b      	mov	r3, r1
 80033d0:	813b      	strh	r3, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b20      	cmp	r3, #32
 80033e0:	f040 80f9 	bne.w	80035d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_I2C_Mem_Write+0x34>
 80033ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0ed      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_I2C_Mem_Write+0x4e>
 8003406:	2302      	movs	r3, #2
 8003408:	e0e6      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003412:	f7ff fa37 	bl	8002884 <HAL_GetTick>
 8003416:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2319      	movs	r3, #25
 800341e:	2201      	movs	r2, #1
 8003420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 fac3 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0d1      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2221      	movs	r2, #33	; 0x21
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2240      	movs	r2, #64	; 0x40
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a3a      	ldr	r2, [r7, #32]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800345c:	88f8      	ldrh	r0, [r7, #6]
 800345e:	893a      	ldrh	r2, [r7, #8]
 8003460:	8979      	ldrh	r1, [r7, #10]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	4603      	mov	r3, r0
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f9d3 	bl	8003818 <I2C_RequestMemoryWrite>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0a9      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	2bff      	cmp	r3, #255	; 0xff
 800348c:	d90e      	bls.n	80034ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	22ff      	movs	r2, #255	; 0xff
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003498:	b2da      	uxtb	r2, r3
 800349a:	8979      	ldrh	r1, [r7, #10]
 800349c:	2300      	movs	r3, #0
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fcbf 	bl	8003e28 <I2C_TransferConfig>
 80034aa:	e00f      	b.n	80034cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	8979      	ldrh	r1, [r7, #10]
 80034be:	2300      	movs	r3, #0
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fcae 	bl	8003e28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fabc 	bl	8003a4e <I2C_WaitOnTXISFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e07b      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d034      	beq.n	8003584 <HAL_I2C_Mem_Write+0x1c8>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	2b00      	cmp	r3, #0
 8003520:	d130      	bne.n	8003584 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	; 0x80
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fa3f 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e04d      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	2bff      	cmp	r3, #255	; 0xff
 8003544:	d90e      	bls.n	8003564 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	22ff      	movs	r2, #255	; 0xff
 800354a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	b2da      	uxtb	r2, r3
 8003552:	8979      	ldrh	r1, [r7, #10]
 8003554:	2300      	movs	r3, #0
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fc63 	bl	8003e28 <I2C_TransferConfig>
 8003562:	e00f      	b.n	8003584 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	b2da      	uxtb	r2, r3
 8003574:	8979      	ldrh	r1, [r7, #10]
 8003576:	2300      	movs	r3, #0
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fc52 	bl	8003e28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d19e      	bne.n	80034cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 faa2 	bl	8003adc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e01a      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2220      	movs	r2, #32
 80035a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <HAL_I2C_Mem_Write+0x224>)
 80035b6:	400b      	ands	r3, r1
 80035b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	fe00e800 	.word	0xfe00e800

080035e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	4608      	mov	r0, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	461a      	mov	r2, r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	817b      	strh	r3, [r7, #10]
 80035f6:	460b      	mov	r3, r1
 80035f8:	813b      	strh	r3, [r7, #8]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b20      	cmp	r3, #32
 8003608:	f040 80fd 	bne.w	8003806 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_I2C_Mem_Read+0x34>
 8003612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0f1      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_I2C_Mem_Read+0x4e>
 800362e:	2302      	movs	r3, #2
 8003630:	e0ea      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800363a:	f7ff f923 	bl	8002884 <HAL_GetTick>
 800363e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2319      	movs	r3, #25
 8003646:	2201      	movs	r2, #1
 8003648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f9af 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0d5      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2222      	movs	r2, #34	; 0x22
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2240      	movs	r2, #64	; 0x40
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a3a      	ldr	r2, [r7, #32]
 8003676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800367c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003684:	88f8      	ldrh	r0, [r7, #6]
 8003686:	893a      	ldrh	r2, [r7, #8]
 8003688:	8979      	ldrh	r1, [r7, #10]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	9301      	str	r3, [sp, #4]
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	4603      	mov	r3, r0
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f913 	bl	80038c0 <I2C_RequestMemoryRead>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0ad      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2bff      	cmp	r3, #255	; 0xff
 80036b4:	d90e      	bls.n	80036d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	22ff      	movs	r2, #255	; 0xff
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	8979      	ldrh	r1, [r7, #10]
 80036c4:	4b52      	ldr	r3, [pc, #328]	; (8003810 <HAL_I2C_Mem_Read+0x22c>)
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fbab 	bl	8003e28 <I2C_TransferConfig>
 80036d2:	e00f      	b.n	80036f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	8979      	ldrh	r1, [r7, #10]
 80036e6:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_I2C_Mem_Read+0x22c>)
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fb9a 	bl	8003e28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	2200      	movs	r2, #0
 80036fc:	2104      	movs	r1, #4
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f956 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e07c      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d034      	beq.n	80037b4 <HAL_I2C_Mem_Read+0x1d0>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374e:	2b00      	cmp	r3, #0
 8003750:	d130      	bne.n	80037b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	2200      	movs	r2, #0
 800375a:	2180      	movs	r1, #128	; 0x80
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f927 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e04d      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2bff      	cmp	r3, #255	; 0xff
 8003774:	d90e      	bls.n	8003794 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	22ff      	movs	r2, #255	; 0xff
 800377a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	8979      	ldrh	r1, [r7, #10]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fb4b 	bl	8003e28 <I2C_TransferConfig>
 8003792:	e00f      	b.n	80037b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	8979      	ldrh	r1, [r7, #10]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fb3a 	bl	8003e28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d19a      	bne.n	80036f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f98a 	bl	8003adc <I2C_WaitOnSTOPFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e01a      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2220      	movs	r2, #32
 80037d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_I2C_Mem_Read+0x230>)
 80037e6:	400b      	ands	r3, r1
 80037e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e000      	b.n	8003808 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003806:	2302      	movs	r3, #2
  }
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	80002400 	.word	0x80002400
 8003814:	fe00e800 	.word	0xfe00e800

08003818 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	4608      	mov	r0, r1
 8003822:	4611      	mov	r1, r2
 8003824:	461a      	mov	r2, r3
 8003826:	4603      	mov	r3, r0
 8003828:	817b      	strh	r3, [r7, #10]
 800382a:	460b      	mov	r3, r1
 800382c:	813b      	strh	r3, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	8979      	ldrh	r1, [r7, #10]
 8003838:	4b20      	ldr	r3, [pc, #128]	; (80038bc <I2C_RequestMemoryWrite+0xa4>)
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 faf1 	bl	8003e28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	69b9      	ldr	r1, [r7, #24]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f8ff 	bl	8003a4e <I2C_WaitOnTXISFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e02c      	b.n	80038b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d105      	bne.n	800386c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003860:	893b      	ldrh	r3, [r7, #8]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
 800386a:	e015      	b.n	8003898 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800386c:	893b      	ldrh	r3, [r7, #8]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	b29b      	uxth	r3, r3
 8003872:	b2da      	uxtb	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	69b9      	ldr	r1, [r7, #24]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8e5 	bl	8003a4e <I2C_WaitOnTXISFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e012      	b.n	80038b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800388e:	893b      	ldrh	r3, [r7, #8]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	2200      	movs	r2, #0
 80038a0:	2180      	movs	r1, #128	; 0x80
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f884 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	80002000 	.word	0x80002000

080038c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	4608      	mov	r0, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	817b      	strh	r3, [r7, #10]
 80038d2:	460b      	mov	r3, r1
 80038d4:	813b      	strh	r3, [r7, #8]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	8979      	ldrh	r1, [r7, #10]
 80038e0:	4b20      	ldr	r3, [pc, #128]	; (8003964 <I2C_RequestMemoryRead+0xa4>)
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2300      	movs	r3, #0
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fa9e 	bl	8003e28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f8ac 	bl	8003a4e <I2C_WaitOnTXISFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e02c      	b.n	800395a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d105      	bne.n	8003912 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003906:	893b      	ldrh	r3, [r7, #8]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
 8003910:	e015      	b.n	800393e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003912:	893b      	ldrh	r3, [r7, #8]
 8003914:	0a1b      	lsrs	r3, r3, #8
 8003916:	b29b      	uxth	r3, r3
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	69b9      	ldr	r1, [r7, #24]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f892 	bl	8003a4e <I2C_WaitOnTXISFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e012      	b.n	800395a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003934:	893b      	ldrh	r3, [r7, #8]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2200      	movs	r2, #0
 8003946:	2140      	movs	r1, #64	; 0x40
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f831 	bl	80039b0 <I2C_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	80002000 	.word	0x80002000

08003968 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d103      	bne.n	8003986 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d007      	beq.n	80039a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	619a      	str	r2, [r3, #24]
  }
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c0:	e031      	b.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d02d      	beq.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fe ff5b 	bl	8002884 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d122      	bne.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d113      	bne.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e00f      	b.n	8003a46 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	bf0c      	ite	eq
 8003a36:	2301      	moveq	r3, #1
 8003a38:	2300      	movne	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d0be      	beq.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a5a:	e033      	b.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f901 	bl	8003c68 <I2C_IsErrorOccurred>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e031      	b.n	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d025      	beq.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a78:	f7fe ff04 	bl	8002884 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d302      	bcc.n	8003a8e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d11a      	bne.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d013      	beq.n	8003ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e007      	b.n	8003ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d1c4      	bne.n	8003a5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae8:	e02f      	b.n	8003b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f8ba 	bl	8003c68 <I2C_IsErrorOccurred>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e02d      	b.n	8003b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fe fec1 	bl	8002884 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11a      	bne.n	8003b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d013      	beq.n	8003b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f043 0220 	orr.w	r2, r3, #32
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e007      	b.n	8003b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d1c8      	bne.n	8003aea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b70:	e06b      	b.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f876 	bl	8003c68 <I2C_IsErrorOccurred>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e069      	b.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d138      	bne.n	8003c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d105      	bne.n	8003bae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e055      	b.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b10      	cmp	r3, #16
 8003bba:	d107      	bne.n	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
 8003bca:	e002      	b.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003be6:	400b      	ands	r3, r1
 8003be8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e029      	b.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7fe fe3d 	bl	8002884 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d116      	bne.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d00f      	beq.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f043 0220 	orr.w	r2, r3, #32
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e007      	b.n	8003c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d18c      	bne.n	8003b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	fe00e800 	.word	0xfe00e800

08003c68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	; 0x28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d068      	beq.n	8003d66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c9c:	e049      	b.n	8003d32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d045      	beq.n	8003d32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fe fded 	bl	8002884 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <I2C_IsErrorOccurred+0x54>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d13a      	bne.n	8003d32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cde:	d121      	bne.n	8003d24 <I2C_IsErrorOccurred+0xbc>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ce6:	d01d      	beq.n	8003d24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d01a      	beq.n	8003d24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cfe:	f7fe fdc1 	bl	8002884 <HAL_GetTick>
 8003d02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d04:	e00e      	b.n	8003d24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d06:	f7fe fdbd 	bl	8002884 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b19      	cmp	r3, #25
 8003d12:	d907      	bls.n	8003d24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	f043 0320 	orr.w	r3, r3, #32
 8003d1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003d22:	e006      	b.n	8003d32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d1e9      	bne.n	8003d06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d003      	beq.n	8003d48 <I2C_IsErrorOccurred+0xe0>
 8003d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0aa      	beq.n	8003c9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d103      	bne.n	8003d58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2220      	movs	r2, #32
 8003d56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	f043 0304 	orr.w	r3, r3, #4
 8003d5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00b      	beq.n	8003d90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f043 0308 	orr.w	r3, r3, #8
 8003da0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003daa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00b      	beq.n	8003dd4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f043 0302 	orr.w	r3, r3, #2
 8003dc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01c      	beq.n	8003e16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff fdc3 	bl	8003968 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6859      	ldr	r1, [r3, #4]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <I2C_IsErrorOccurred+0x1bc>)
 8003dee:	400b      	ands	r3, r1
 8003df0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3728      	adds	r7, #40	; 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	fe00e800 	.word	0xfe00e800

08003e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	607b      	str	r3, [r7, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	817b      	strh	r3, [r7, #10]
 8003e36:	4613      	mov	r3, r2
 8003e38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e3a:	897b      	ldrh	r3, [r7, #10]
 8003e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e40:	7a7b      	ldrb	r3, [r7, #9]
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	0d5b      	lsrs	r3, r3, #21
 8003e62:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <I2C_TransferConfig+0x60>)
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	ea02 0103 	and.w	r1, r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	03ff63ff 	.word	0x03ff63ff

08003e8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d138      	bne.n	8003f14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e032      	b.n	8003f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	; 0x24
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ede:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6819      	ldr	r1, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d139      	bne.n	8003fac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e033      	b.n	8003fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2224      	movs	r2, #36	; 0x24
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e000      	b.n	8003fae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
  }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40007000 	.word	0x40007000

08003fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe6:	d130      	bne.n	800404a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fe8:	4b23      	ldr	r3, [pc, #140]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff4:	d038      	beq.n	8004068 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ff6:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004004:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004006:	4b1d      	ldr	r3, [pc, #116]	; (800407c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2232      	movs	r2, #50	; 0x32
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	0c9b      	lsrs	r3, r3, #18
 8004018:	3301      	adds	r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800401c:	e002      	b.n	8004024 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3b01      	subs	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004024:	4b14      	ldr	r3, [pc, #80]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004030:	d102      	bne.n	8004038 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f2      	bne.n	800401e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004038:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004044:	d110      	bne.n	8004068 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e00f      	b.n	800406a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004056:	d007      	beq.n	8004068 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004058:	4b07      	ldr	r3, [pc, #28]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004060:	4a05      	ldr	r2, [pc, #20]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004066:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40007000 	.word	0x40007000
 800407c:	20000000 	.word	0x20000000
 8004080:	431bde83 	.word	0x431bde83

08004084 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e3ca      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004096:	4b97      	ldr	r3, [pc, #604]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a0:	4b94      	ldr	r3, [pc, #592]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80e4 	beq.w	8004280 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_RCC_OscConfig+0x4a>
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b0c      	cmp	r3, #12
 80040c2:	f040 808b 	bne.w	80041dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	f040 8087 	bne.w	80041dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040ce:	4b89      	ldr	r3, [pc, #548]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_RCC_OscConfig+0x62>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e3a2      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1a      	ldr	r2, [r3, #32]
 80040ea:	4b82      	ldr	r3, [pc, #520]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <HAL_RCC_OscConfig+0x7c>
 80040f6:	4b7f      	ldr	r3, [pc, #508]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040fe:	e005      	b.n	800410c <HAL_RCC_OscConfig+0x88>
 8004100:	4b7c      	ldr	r3, [pc, #496]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410c:	4293      	cmp	r3, r2
 800410e:	d223      	bcs.n	8004158 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fd55 	bl	8004bc4 <RCC_SetFlashLatencyFromMSIRange>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e383      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004124:	4b73      	ldr	r3, [pc, #460]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a72      	ldr	r2, [pc, #456]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 800412a:	f043 0308 	orr.w	r3, r3, #8
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b70      	ldr	r3, [pc, #448]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	496d      	ldr	r1, [pc, #436]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004142:	4b6c      	ldr	r3, [pc, #432]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	4968      	ldr	r1, [pc, #416]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004152:	4313      	orrs	r3, r2
 8004154:	604b      	str	r3, [r1, #4]
 8004156:	e025      	b.n	80041a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004158:	4b66      	ldr	r3, [pc, #408]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a65      	ldr	r2, [pc, #404]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 800415e:	f043 0308 	orr.w	r3, r3, #8
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	4960      	ldr	r1, [pc, #384]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004176:	4b5f      	ldr	r3, [pc, #380]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	495b      	ldr	r1, [pc, #364]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004186:	4313      	orrs	r3, r2
 8004188:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fd15 	bl	8004bc4 <RCC_SetFlashLatencyFromMSIRange>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e343      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041a4:	f000 fc4a 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	4b52      	ldr	r3, [pc, #328]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	4950      	ldr	r1, [pc, #320]	; (80042f8 <HAL_RCC_OscConfig+0x274>)
 80041b6:	5ccb      	ldrb	r3, [r1, r3]
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
 80041c0:	4a4e      	ldr	r2, [pc, #312]	; (80042fc <HAL_RCC_OscConfig+0x278>)
 80041c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041c4:	4b4e      	ldr	r3, [pc, #312]	; (8004300 <HAL_RCC_OscConfig+0x27c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe fb0b 	bl	80027e4 <HAL_InitTick>
 80041ce:	4603      	mov	r3, r0
 80041d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d052      	beq.n	800427e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	e327      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d032      	beq.n	800424a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041e4:	4b43      	ldr	r3, [pc, #268]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a42      	ldr	r2, [pc, #264]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041f0:	f7fe fb48 	bl	8002884 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f8:	f7fe fb44 	bl	8002884 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e310      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800420a:	4b3a      	ldr	r3, [pc, #232]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004216:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a36      	ldr	r2, [pc, #216]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 800421c:	f043 0308 	orr.w	r3, r3, #8
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	4b34      	ldr	r3, [pc, #208]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	4931      	ldr	r1, [pc, #196]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004230:	4313      	orrs	r3, r2
 8004232:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004234:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	492c      	ldr	r1, [pc, #176]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004244:	4313      	orrs	r3, r2
 8004246:	604b      	str	r3, [r1, #4]
 8004248:	e01a      	b.n	8004280 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800424a:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a29      	ldr	r2, [pc, #164]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004256:	f7fe fb15 	bl	8002884 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800425e:	f7fe fb11 	bl	8002884 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e2dd      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004270:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f0      	bne.n	800425e <HAL_RCC_OscConfig+0x1da>
 800427c:	e000      	b.n	8004280 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800427e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d074      	beq.n	8004376 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b08      	cmp	r3, #8
 8004290:	d005      	beq.n	800429e <HAL_RCC_OscConfig+0x21a>
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b0c      	cmp	r3, #12
 8004296:	d10e      	bne.n	80042b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b03      	cmp	r3, #3
 800429c:	d10b      	bne.n	80042b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d064      	beq.n	8004374 <HAL_RCC_OscConfig+0x2f0>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d160      	bne.n	8004374 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e2ba      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042be:	d106      	bne.n	80042ce <HAL_RCC_OscConfig+0x24a>
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0b      	ldr	r2, [pc, #44]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80042c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	e026      	b.n	800431c <HAL_RCC_OscConfig+0x298>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d6:	d115      	bne.n	8004304 <HAL_RCC_OscConfig+0x280>
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a05      	ldr	r2, [pc, #20]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80042de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a02      	ldr	r2, [pc, #8]	; (80042f4 <HAL_RCC_OscConfig+0x270>)
 80042ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	e014      	b.n	800431c <HAL_RCC_OscConfig+0x298>
 80042f2:	bf00      	nop
 80042f4:	40021000 	.word	0x40021000
 80042f8:	08009f00 	.word	0x08009f00
 80042fc:	20000000 	.word	0x20000000
 8004300:	20000004 	.word	0x20000004
 8004304:	4ba0      	ldr	r3, [pc, #640]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a9f      	ldr	r2, [pc, #636]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 800430a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	4b9d      	ldr	r3, [pc, #628]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a9c      	ldr	r2, [pc, #624]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800431a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d013      	beq.n	800434c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fe faae 	bl	8002884 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800432c:	f7fe faaa 	bl	8002884 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	; 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e276      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800433e:	4b92      	ldr	r3, [pc, #584]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x2a8>
 800434a:	e014      	b.n	8004376 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fe fa9a 	bl	8002884 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004354:	f7fe fa96 	bl	8002884 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e262      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004366:	4b88      	ldr	r3, [pc, #544]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0x2d0>
 8004372:	e000      	b.n	8004376 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d060      	beq.n	8004444 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d005      	beq.n	8004394 <HAL_RCC_OscConfig+0x310>
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b0c      	cmp	r3, #12
 800438c:	d119      	bne.n	80043c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d116      	bne.n	80043c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004394:	4b7c      	ldr	r3, [pc, #496]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <HAL_RCC_OscConfig+0x328>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e23f      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ac:	4b76      	ldr	r3, [pc, #472]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	061b      	lsls	r3, r3, #24
 80043ba:	4973      	ldr	r1, [pc, #460]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c0:	e040      	b.n	8004444 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d023      	beq.n	8004412 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ca:	4b6f      	ldr	r3, [pc, #444]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a6e      	ldr	r2, [pc, #440]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 80043d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fe fa55 	bl	8002884 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043de:	f7fe fa51 	bl	8002884 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e21d      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f0:	4b65      	ldr	r3, [pc, #404]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fc:	4b62      	ldr	r3, [pc, #392]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	061b      	lsls	r3, r3, #24
 800440a:	495f      	ldr	r1, [pc, #380]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 800440c:	4313      	orrs	r3, r2
 800440e:	604b      	str	r3, [r1, #4]
 8004410:	e018      	b.n	8004444 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004412:	4b5d      	ldr	r3, [pc, #372]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a5c      	ldr	r2, [pc, #368]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800441c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fe fa31 	bl	8002884 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004426:	f7fe fa2d 	bl	8002884 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1f9      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004438:	4b53      	ldr	r3, [pc, #332]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f0      	bne.n	8004426 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d03c      	beq.n	80044ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01c      	beq.n	8004492 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004458:	4b4b      	ldr	r3, [pc, #300]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 800445a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445e:	4a4a      	ldr	r2, [pc, #296]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7fe fa0c 	bl	8002884 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004470:	f7fe fa08 	bl	8002884 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e1d4      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004482:	4b41      	ldr	r3, [pc, #260]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0ef      	beq.n	8004470 <HAL_RCC_OscConfig+0x3ec>
 8004490:	e01b      	b.n	80044ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004492:	4b3d      	ldr	r3, [pc, #244]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004498:	4a3b      	ldr	r2, [pc, #236]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a2:	f7fe f9ef 	bl	8002884 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044aa:	f7fe f9eb 	bl	8002884 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e1b7      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044bc:	4b32      	ldr	r3, [pc, #200]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1ef      	bne.n	80044aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80a6 	beq.w	8004624 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d8:	2300      	movs	r3, #0
 80044da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044dc:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10d      	bne.n	8004504 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e8:	4b27      	ldr	r3, [pc, #156]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ec:	4a26      	ldr	r2, [pc, #152]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 80044ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f2:	6593      	str	r3, [r2, #88]	; 0x58
 80044f4:	4b24      	ldr	r3, [pc, #144]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004500:	2301      	movs	r3, #1
 8004502:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004504:	4b21      	ldr	r3, [pc, #132]	; (800458c <HAL_RCC_OscConfig+0x508>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d118      	bne.n	8004542 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004510:	4b1e      	ldr	r3, [pc, #120]	; (800458c <HAL_RCC_OscConfig+0x508>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1d      	ldr	r2, [pc, #116]	; (800458c <HAL_RCC_OscConfig+0x508>)
 8004516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800451c:	f7fe f9b2 	bl	8002884 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004524:	f7fe f9ae 	bl	8002884 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e17a      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004536:	4b15      	ldr	r3, [pc, #84]	; (800458c <HAL_RCC_OscConfig+0x508>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d108      	bne.n	800455c <HAL_RCC_OscConfig+0x4d8>
 800454a:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004550:	4a0d      	ldr	r2, [pc, #52]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800455a:	e029      	b.n	80045b0 <HAL_RCC_OscConfig+0x52c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b05      	cmp	r3, #5
 8004562:	d115      	bne.n	8004590 <HAL_RCC_OscConfig+0x50c>
 8004564:	4b08      	ldr	r3, [pc, #32]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	4a07      	ldr	r2, [pc, #28]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	4a03      	ldr	r2, [pc, #12]	; (8004588 <HAL_RCC_OscConfig+0x504>)
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004584:	e014      	b.n	80045b0 <HAL_RCC_OscConfig+0x52c>
 8004586:	bf00      	nop
 8004588:	40021000 	.word	0x40021000
 800458c:	40007000 	.word	0x40007000
 8004590:	4b9c      	ldr	r3, [pc, #624]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	4a9b      	ldr	r2, [pc, #620]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045a0:	4b98      	ldr	r3, [pc, #608]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	4a97      	ldr	r2, [pc, #604]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80045a8:	f023 0304 	bic.w	r3, r3, #4
 80045ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d016      	beq.n	80045e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fe f964 	bl	8002884 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fe f960 	bl	8002884 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e12a      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d6:	4b8b      	ldr	r3, [pc, #556]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ed      	beq.n	80045c0 <HAL_RCC_OscConfig+0x53c>
 80045e4:	e015      	b.n	8004612 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e6:	f7fe f94d 	bl	8002884 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fe f949 	bl	8002884 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e113      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004604:	4b7f      	ldr	r3, [pc, #508]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ed      	bne.n	80045ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004612:	7ffb      	ldrb	r3, [r7, #31]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d105      	bne.n	8004624 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004618:	4b7a      	ldr	r3, [pc, #488]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	4a79      	ldr	r2, [pc, #484]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 800461e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004622:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80fe 	beq.w	800482a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	2b02      	cmp	r3, #2
 8004634:	f040 80d0 	bne.w	80047d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004638:	4b72      	ldr	r3, [pc, #456]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f003 0203 	and.w	r2, r3, #3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	429a      	cmp	r2, r3
 800464a:	d130      	bne.n	80046ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	3b01      	subs	r3, #1
 8004658:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d127      	bne.n	80046ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d11f      	bne.n	80046ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004678:	2a07      	cmp	r2, #7
 800467a:	bf14      	ite	ne
 800467c:	2201      	movne	r2, #1
 800467e:	2200      	moveq	r2, #0
 8004680:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004682:	4293      	cmp	r3, r2
 8004684:	d113      	bne.n	80046ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	3b01      	subs	r3, #1
 8004694:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004696:	429a      	cmp	r2, r3
 8004698:	d109      	bne.n	80046ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	3b01      	subs	r3, #1
 80046a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d06e      	beq.n	800478c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b0c      	cmp	r3, #12
 80046b2:	d069      	beq.n	8004788 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046b4:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d105      	bne.n	80046cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046c0:	4b50      	ldr	r3, [pc, #320]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0ad      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046d0:	4b4c      	ldr	r3, [pc, #304]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a4b      	ldr	r2, [pc, #300]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80046d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046dc:	f7fe f8d2 	bl	8002884 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fe f8ce 	bl	8002884 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e09a      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f6:	4b43      	ldr	r3, [pc, #268]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004702:	4b40      	ldr	r3, [pc, #256]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	4b40      	ldr	r3, [pc, #256]	; (8004808 <HAL_RCC_OscConfig+0x784>)
 8004708:	4013      	ands	r3, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004712:	3a01      	subs	r2, #1
 8004714:	0112      	lsls	r2, r2, #4
 8004716:	4311      	orrs	r1, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800471c:	0212      	lsls	r2, r2, #8
 800471e:	4311      	orrs	r1, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004724:	0852      	lsrs	r2, r2, #1
 8004726:	3a01      	subs	r2, #1
 8004728:	0552      	lsls	r2, r2, #21
 800472a:	4311      	orrs	r1, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004730:	0852      	lsrs	r2, r2, #1
 8004732:	3a01      	subs	r2, #1
 8004734:	0652      	lsls	r2, r2, #25
 8004736:	4311      	orrs	r1, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800473c:	0912      	lsrs	r2, r2, #4
 800473e:	0452      	lsls	r2, r2, #17
 8004740:	430a      	orrs	r2, r1
 8004742:	4930      	ldr	r1, [pc, #192]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 8004744:	4313      	orrs	r3, r2
 8004746:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004748:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 800474e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004752:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004754:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 800475a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800475e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004760:	f7fe f890 	bl	8002884 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004768:	f7fe f88c 	bl	8002884 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e058      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477a:	4b22      	ldr	r3, [pc, #136]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004786:	e050      	b.n	800482a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e04f      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800478c:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d148      	bne.n	800482a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004798:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a19      	ldr	r2, [pc, #100]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 800479e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047a4:	4b17      	ldr	r3, [pc, #92]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4a16      	ldr	r2, [pc, #88]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80047aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047b0:	f7fe f868 	bl	8002884 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fe f864 	bl	8002884 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e030      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ca:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x734>
 80047d6:	e028      	b.n	800482a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d023      	beq.n	8004826 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a08      	ldr	r2, [pc, #32]	; (8004804 <HAL_RCC_OscConfig+0x780>)
 80047e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7fe f84b 	bl	8002884 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f0:	e00c      	b.n	800480c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f2:	f7fe f847 	bl	8002884 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d905      	bls.n	800480c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e013      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
 8004804:	40021000 	.word	0x40021000
 8004808:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800480c:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_RCC_OscConfig+0x7b0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1ec      	bne.n	80047f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCC_OscConfig+0x7b0>)
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	4905      	ldr	r1, [pc, #20]	; (8004834 <HAL_RCC_OscConfig+0x7b0>)
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_OscConfig+0x7b4>)
 8004820:	4013      	ands	r3, r2
 8004822:	60cb      	str	r3, [r1, #12]
 8004824:	e001      	b.n	800482a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	feeefffc 	.word	0xfeeefffc

0800483c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0e7      	b.n	8004a20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004850:	4b75      	ldr	r3, [pc, #468]	; (8004a28 <HAL_RCC_ClockConfig+0x1ec>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d910      	bls.n	8004880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b72      	ldr	r3, [pc, #456]	; (8004a28 <HAL_RCC_ClockConfig+0x1ec>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 0207 	bic.w	r2, r3, #7
 8004866:	4970      	ldr	r1, [pc, #448]	; (8004a28 <HAL_RCC_ClockConfig+0x1ec>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b6e      	ldr	r3, [pc, #440]	; (8004a28 <HAL_RCC_ClockConfig+0x1ec>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0cf      	b.n	8004a20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d010      	beq.n	80048ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	4b66      	ldr	r3, [pc, #408]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004898:	429a      	cmp	r2, r3
 800489a:	d908      	bls.n	80048ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489c:	4b63      	ldr	r3, [pc, #396]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4960      	ldr	r1, [pc, #384]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d04c      	beq.n	8004954 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c2:	4b5a      	ldr	r3, [pc, #360]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d121      	bne.n	8004912 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e0a6      	b.n	8004a20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048da:	4b54      	ldr	r3, [pc, #336]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d115      	bne.n	8004912 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e09a      	b.n	8004a20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d107      	bne.n	8004902 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048f2:	4b4e      	ldr	r3, [pc, #312]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e08e      	b.n	8004a20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004902:	4b4a      	ldr	r3, [pc, #296]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e086      	b.n	8004a20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004912:	4b46      	ldr	r3, [pc, #280]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f023 0203 	bic.w	r2, r3, #3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	4943      	ldr	r1, [pc, #268]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 8004920:	4313      	orrs	r3, r2
 8004922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004924:	f7fd ffae 	bl	8002884 <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	e00a      	b.n	8004942 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492c:	f7fd ffaa 	bl	8002884 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	; 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e06e      	b.n	8004a20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	4b3a      	ldr	r3, [pc, #232]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 020c 	and.w	r2, r3, #12
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	429a      	cmp	r2, r3
 8004952:	d1eb      	bne.n	800492c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d010      	beq.n	8004982 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	4b31      	ldr	r3, [pc, #196]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800496c:	429a      	cmp	r2, r3
 800496e:	d208      	bcs.n	8004982 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004970:	4b2e      	ldr	r3, [pc, #184]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	492b      	ldr	r1, [pc, #172]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004982:	4b29      	ldr	r3, [pc, #164]	; (8004a28 <HAL_RCC_ClockConfig+0x1ec>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d210      	bcs.n	80049b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <HAL_RCC_ClockConfig+0x1ec>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 0207 	bic.w	r2, r3, #7
 8004998:	4923      	ldr	r1, [pc, #140]	; (8004a28 <HAL_RCC_ClockConfig+0x1ec>)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a0:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <HAL_RCC_ClockConfig+0x1ec>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e036      	b.n	8004a20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049be:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	4918      	ldr	r1, [pc, #96]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d009      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049dc:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4910      	ldr	r1, [pc, #64]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049f0:	f000 f824 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <HAL_RCC_ClockConfig+0x1f0>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	490b      	ldr	r1, [pc, #44]	; (8004a30 <HAL_RCC_ClockConfig+0x1f4>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0c:	4a09      	ldr	r2, [pc, #36]	; (8004a34 <HAL_RCC_ClockConfig+0x1f8>)
 8004a0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <HAL_RCC_ClockConfig+0x1fc>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7fd fee5 	bl	80027e4 <HAL_InitTick>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40022000 	.word	0x40022000
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	08009f00 	.word	0x08009f00
 8004a34:	20000000 	.word	0x20000000
 8004a38:	20000004 	.word	0x20000004

08004a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b089      	sub	sp, #36	; 0x24
 8004a40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	2300      	movs	r3, #0
 8004a48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4a:	4b3e      	ldr	r3, [pc, #248]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a54:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_GetSysClockFreq+0x34>
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	d121      	bne.n	8004aae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d11e      	bne.n	8004aae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a70:	4b34      	ldr	r3, [pc, #208]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a7c:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a82:	0a1b      	lsrs	r3, r3, #8
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	e005      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a8c:	4b2d      	ldr	r3, [pc, #180]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a98:	4a2b      	ldr	r2, [pc, #172]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10d      	bne.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aac:	e00a      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d102      	bne.n	8004aba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ab4:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	e004      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ac0:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ac2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b0c      	cmp	r3, #12
 8004ac8:	d134      	bne.n	8004b34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aca:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d003      	beq.n	8004ae2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d003      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0xac>
 8004ae0:	e005      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ae2:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ae4:	617b      	str	r3, [r7, #20]
      break;
 8004ae6:	e005      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ae8:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aea:	617b      	str	r3, [r7, #20]
      break;
 8004aec:	e002      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	617b      	str	r3, [r7, #20]
      break;
 8004af2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	3301      	adds	r3, #1
 8004b00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	fb03 f202 	mul.w	r2, r3, r2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	0e5b      	lsrs	r3, r3, #25
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	3301      	adds	r3, #1
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b34:	69bb      	ldr	r3, [r7, #24]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3724      	adds	r7, #36	; 0x24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	08009f18 	.word	0x08009f18
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	007a1200 	.word	0x007a1200

08004b54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b58:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000000 	.word	0x20000000

08004b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b70:	f7ff fff0 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4904      	ldr	r1, [pc, #16]	; (8004b94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b82:	5ccb      	ldrb	r3, [r1, r3]
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40021000 	.word	0x40021000
 8004b94:	08009f10 	.word	0x08009f10

08004b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b9c:	f7ff ffda 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	0adb      	lsrs	r3, r3, #11
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	4904      	ldr	r1, [pc, #16]	; (8004bc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	08009f10 	.word	0x08009f10

08004bc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bd0:	4b2a      	ldr	r3, [pc, #168]	; (8004c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bdc:	f7ff f9ee 	bl	8003fbc <HAL_PWREx_GetVoltageRange>
 8004be0:	6178      	str	r0, [r7, #20]
 8004be2:	e014      	b.n	8004c0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004be4:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be8:	4a24      	ldr	r2, [pc, #144]	; (8004c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf0:	4b22      	ldr	r3, [pc, #136]	; (8004c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bfc:	f7ff f9de 	bl	8003fbc <HAL_PWREx_GetVoltageRange>
 8004c00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c02:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c06:	4a1d      	ldr	r2, [pc, #116]	; (8004c7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c14:	d10b      	bne.n	8004c2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	d919      	bls.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2ba0      	cmp	r3, #160	; 0xa0
 8004c20:	d902      	bls.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c22:	2302      	movs	r3, #2
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	e013      	b.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c28:	2301      	movs	r3, #1
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	e010      	b.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b80      	cmp	r3, #128	; 0x80
 8004c32:	d902      	bls.n	8004c3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c34:	2303      	movs	r3, #3
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	e00a      	b.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b80      	cmp	r3, #128	; 0x80
 8004c3e:	d102      	bne.n	8004c46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c40:	2302      	movs	r3, #2
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	e004      	b.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b70      	cmp	r3, #112	; 0x70
 8004c4a:	d101      	bne.n	8004c50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f023 0207 	bic.w	r2, r3, #7
 8004c58:	4909      	ldr	r1, [pc, #36]	; (8004c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d001      	beq.n	8004c72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	40022000 	.word	0x40022000

08004c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c90:	2300      	movs	r3, #0
 8004c92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d041      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ca8:	d02a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004caa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cae:	d824      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cb4:	d008      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cba:	d81e      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc4:	d010      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cc6:	e018      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004cc8:	4b86      	ldr	r3, [pc, #536]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a85      	ldr	r2, [pc, #532]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cd4:	e015      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f000 fabb 	bl	8005258 <RCCEx_PLLSAI1_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ce6:	e00c      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3320      	adds	r3, #32
 8004cec:	2100      	movs	r1, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fba6 	bl	8005440 <RCCEx_PLLSAI2_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cf8:	e003      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8004cfe:	e000      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d02:	7cfb      	ldrb	r3, [r7, #19]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d08:	4b76      	ldr	r3, [pc, #472]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d16:	4973      	ldr	r1, [pc, #460]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d1e:	e001      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d041      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d38:	d02a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d3e:	d824      	bhi.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d44:	d008      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d4a:	d81e      	bhi.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d54:	d010      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d56:	e018      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d58:	4b62      	ldr	r3, [pc, #392]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4a61      	ldr	r2, [pc, #388]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d64:	e015      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fa73 	bl	8005258 <RCCEx_PLLSAI1_Config>
 8004d72:	4603      	mov	r3, r0
 8004d74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d76:	e00c      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3320      	adds	r3, #32
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fb5e 	bl	8005440 <RCCEx_PLLSAI2_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004d88:	e003      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d8e:	e000      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d92:	7cfb      	ldrb	r3, [r7, #19]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d98:	4b52      	ldr	r3, [pc, #328]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da6:	494f      	ldr	r1, [pc, #316]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dae:	e001      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	7cfb      	ldrb	r3, [r7, #19]
 8004db2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80a0 	beq.w	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dc6:	4b47      	ldr	r3, [pc, #284]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00d      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ddc:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de0:	4a40      	ldr	r2, [pc, #256]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de6:	6593      	str	r3, [r2, #88]	; 0x58
 8004de8:	4b3e      	ldr	r3, [pc, #248]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df4:	2301      	movs	r3, #1
 8004df6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004df8:	4b3b      	ldr	r3, [pc, #236]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a3a      	ldr	r2, [pc, #232]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e04:	f7fd fd3e 	bl	8002884 <HAL_GetTick>
 8004e08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e0a:	e009      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0c:	f7fd fd3a 	bl	8002884 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d902      	bls.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e1e:	e005      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e20:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0ef      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d15c      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e32:	4b2c      	ldr	r3, [pc, #176]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01f      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d019      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e50:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e5c:	4b21      	ldr	r3, [pc, #132]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e62:	4a20      	ldr	r2, [pc, #128]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e7c:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d016      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8e:	f7fd fcf9 	bl	8002884 <HAL_GetTick>
 8004e92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e94:	e00b      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fd fcf5 	bl	8002884 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d902      	bls.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	74fb      	strb	r3, [r7, #19]
            break;
 8004eac:	e006      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eae:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0ec      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ebc:	7cfb      	ldrb	r3, [r7, #19]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec2:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed2:	4904      	ldr	r1, [pc, #16]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004eda:	e009      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	74bb      	strb	r3, [r7, #18]
 8004ee0:	e006      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ef0:	7c7b      	ldrb	r3, [r7, #17]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d105      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef6:	4b9e      	ldr	r3, [pc, #632]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	4a9d      	ldr	r2, [pc, #628]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f0e:	4b98      	ldr	r3, [pc, #608]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	f023 0203 	bic.w	r2, r3, #3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	4994      	ldr	r1, [pc, #592]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f30:	4b8f      	ldr	r3, [pc, #572]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	f023 020c 	bic.w	r2, r3, #12
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	498c      	ldr	r1, [pc, #560]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f52:	4b87      	ldr	r3, [pc, #540]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	4983      	ldr	r1, [pc, #524]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00a      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f74:	4b7e      	ldr	r3, [pc, #504]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	497b      	ldr	r1, [pc, #492]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f96:	4b76      	ldr	r3, [pc, #472]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa4:	4972      	ldr	r1, [pc, #456]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fb8:	4b6d      	ldr	r3, [pc, #436]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	496a      	ldr	r1, [pc, #424]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fda:	4b65      	ldr	r3, [pc, #404]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe8:	4961      	ldr	r1, [pc, #388]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ffc:	4b5c      	ldr	r3, [pc, #368]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500a:	4959      	ldr	r1, [pc, #356]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800501e:	4b54      	ldr	r3, [pc, #336]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502c:	4950      	ldr	r1, [pc, #320]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005040:	4b4b      	ldr	r3, [pc, #300]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	4948      	ldr	r1, [pc, #288]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005062:	4b43      	ldr	r3, [pc, #268]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005070:	493f      	ldr	r1, [pc, #252]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d028      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005084:	4b3a      	ldr	r3, [pc, #232]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005092:	4937      	ldr	r1, [pc, #220]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800509e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a2:	d106      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050a4:	4b32      	ldr	r3, [pc, #200]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4a31      	ldr	r2, [pc, #196]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ae:	60d3      	str	r3, [r2, #12]
 80050b0:	e011      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ba:	d10c      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	2101      	movs	r1, #1
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 f8c8 	bl	8005258 <RCCEx_PLLSAI1_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80050d2:	7cfb      	ldrb	r3, [r7, #19]
 80050d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d028      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050e2:	4b23      	ldr	r3, [pc, #140]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	491f      	ldr	r1, [pc, #124]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005100:	d106      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005102:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800510c:	60d3      	str	r3, [r2, #12]
 800510e:	e011      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005118:	d10c      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3304      	adds	r3, #4
 800511e:	2101      	movs	r1, #1
 8005120:	4618      	mov	r0, r3
 8005122:	f000 f899 	bl	8005258 <RCCEx_PLLSAI1_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800512a:	7cfb      	ldrb	r3, [r7, #19]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005130:	7cfb      	ldrb	r3, [r7, #19]
 8005132:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d02b      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514e:	4908      	ldr	r1, [pc, #32]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800515e:	d109      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005160:	4b03      	ldr	r3, [pc, #12]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4a02      	ldr	r2, [pc, #8]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800516a:	60d3      	str	r3, [r2, #12]
 800516c:	e014      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800517c:	d10c      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3304      	adds	r3, #4
 8005182:	2101      	movs	r1, #1
 8005184:	4618      	mov	r0, r3
 8005186:	f000 f867 	bl	8005258 <RCCEx_PLLSAI1_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800518e:	7cfb      	ldrb	r3, [r7, #19]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005194:	7cfb      	ldrb	r3, [r7, #19]
 8005196:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d02f      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051a4:	4b2b      	ldr	r3, [pc, #172]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051b2:	4928      	ldr	r1, [pc, #160]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051c2:	d10d      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	2102      	movs	r1, #2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 f844 	bl	8005258 <RCCEx_PLLSAI1_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d014      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80051da:	7cfb      	ldrb	r3, [r7, #19]
 80051dc:	74bb      	strb	r3, [r7, #18]
 80051de:	e011      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e8:	d10c      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3320      	adds	r3, #32
 80051ee:	2102      	movs	r1, #2
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 f925 	bl	8005440 <RCCEx_PLLSAI2_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051fa:	7cfb      	ldrb	r3, [r7, #19]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005210:	4b10      	ldr	r3, [pc, #64]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800521e:	490d      	ldr	r1, [pc, #52]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005242:	4904      	ldr	r1, [pc, #16]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800524a:	7cbb      	ldrb	r3, [r7, #18]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40021000 	.word	0x40021000

08005258 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005266:	4b75      	ldr	r3, [pc, #468]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d018      	beq.n	80052a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005272:	4b72      	ldr	r3, [pc, #456]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f003 0203 	and.w	r2, r3, #3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d10d      	bne.n	800529e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
       ||
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800528a:	4b6c      	ldr	r3, [pc, #432]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
       ||
 800529a:	429a      	cmp	r2, r3
 800529c:	d047      	beq.n	800532e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
 80052a2:	e044      	b.n	800532e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d018      	beq.n	80052de <RCCEx_PLLSAI1_Config+0x86>
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d825      	bhi.n	80052fc <RCCEx_PLLSAI1_Config+0xa4>
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d002      	beq.n	80052ba <RCCEx_PLLSAI1_Config+0x62>
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d009      	beq.n	80052cc <RCCEx_PLLSAI1_Config+0x74>
 80052b8:	e020      	b.n	80052fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052ba:	4b60      	ldr	r3, [pc, #384]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d11d      	bne.n	8005302 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ca:	e01a      	b.n	8005302 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052cc:	4b5b      	ldr	r3, [pc, #364]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d116      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052dc:	e013      	b.n	8005306 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052de:	4b57      	ldr	r3, [pc, #348]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10f      	bne.n	800530a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052ea:	4b54      	ldr	r3, [pc, #336]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052fa:	e006      	b.n	800530a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005300:	e004      	b.n	800530c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005302:	bf00      	nop
 8005304:	e002      	b.n	800530c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005306:	bf00      	nop
 8005308:	e000      	b.n	800530c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800530a:	bf00      	nop
    }

    if(status == HAL_OK)
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10d      	bne.n	800532e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005312:	4b4a      	ldr	r3, [pc, #296]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	3b01      	subs	r3, #1
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	430b      	orrs	r3, r1
 8005328:	4944      	ldr	r1, [pc, #272]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d17d      	bne.n	8005430 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005334:	4b41      	ldr	r3, [pc, #260]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a40      	ldr	r2, [pc, #256]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 800533a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800533e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005340:	f7fd faa0 	bl	8002884 <HAL_GetTick>
 8005344:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005346:	e009      	b.n	800535c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005348:	f7fd fa9c 	bl	8002884 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d902      	bls.n	800535c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	73fb      	strb	r3, [r7, #15]
        break;
 800535a:	e005      	b.n	8005368 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800535c:	4b37      	ldr	r3, [pc, #220]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1ef      	bne.n	8005348 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d160      	bne.n	8005430 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d111      	bne.n	8005398 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005374:	4b31      	ldr	r3, [pc, #196]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800537c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6892      	ldr	r2, [r2, #8]
 8005384:	0211      	lsls	r1, r2, #8
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	68d2      	ldr	r2, [r2, #12]
 800538a:	0912      	lsrs	r2, r2, #4
 800538c:	0452      	lsls	r2, r2, #17
 800538e:	430a      	orrs	r2, r1
 8005390:	492a      	ldr	r1, [pc, #168]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005392:	4313      	orrs	r3, r2
 8005394:	610b      	str	r3, [r1, #16]
 8005396:	e027      	b.n	80053e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d112      	bne.n	80053c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800539e:	4b27      	ldr	r3, [pc, #156]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80053a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6892      	ldr	r2, [r2, #8]
 80053ae:	0211      	lsls	r1, r2, #8
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6912      	ldr	r2, [r2, #16]
 80053b4:	0852      	lsrs	r2, r2, #1
 80053b6:	3a01      	subs	r2, #1
 80053b8:	0552      	lsls	r2, r2, #21
 80053ba:	430a      	orrs	r2, r1
 80053bc:	491f      	ldr	r1, [pc, #124]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	610b      	str	r3, [r1, #16]
 80053c2:	e011      	b.n	80053e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053c4:	4b1d      	ldr	r3, [pc, #116]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6892      	ldr	r2, [r2, #8]
 80053d4:	0211      	lsls	r1, r2, #8
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6952      	ldr	r2, [r2, #20]
 80053da:	0852      	lsrs	r2, r2, #1
 80053dc:	3a01      	subs	r2, #1
 80053de:	0652      	lsls	r2, r2, #25
 80053e0:	430a      	orrs	r2, r1
 80053e2:	4916      	ldr	r1, [pc, #88]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053e8:	4b14      	ldr	r3, [pc, #80]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a13      	ldr	r2, [pc, #76]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fd fa46 	bl	8002884 <HAL_GetTick>
 80053f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053fa:	e009      	b.n	8005410 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053fc:	f7fd fa42 	bl	8002884 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d902      	bls.n	8005410 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	73fb      	strb	r3, [r7, #15]
          break;
 800540e:	e005      	b.n	800541c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0ef      	beq.n	80053fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	4904      	ldr	r1, [pc, #16]	; (800543c <RCCEx_PLLSAI1_Config+0x1e4>)
 800542c:	4313      	orrs	r3, r2
 800542e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40021000 	.word	0x40021000

08005440 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800544e:	4b6a      	ldr	r3, [pc, #424]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d018      	beq.n	800548c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800545a:	4b67      	ldr	r3, [pc, #412]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0203 	and.w	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d10d      	bne.n	8005486 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
       ||
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005472:	4b61      	ldr	r3, [pc, #388]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
       ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d047      	beq.n	8005516 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	73fb      	strb	r3, [r7, #15]
 800548a:	e044      	b.n	8005516 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d018      	beq.n	80054c6 <RCCEx_PLLSAI2_Config+0x86>
 8005494:	2b03      	cmp	r3, #3
 8005496:	d825      	bhi.n	80054e4 <RCCEx_PLLSAI2_Config+0xa4>
 8005498:	2b01      	cmp	r3, #1
 800549a:	d002      	beq.n	80054a2 <RCCEx_PLLSAI2_Config+0x62>
 800549c:	2b02      	cmp	r3, #2
 800549e:	d009      	beq.n	80054b4 <RCCEx_PLLSAI2_Config+0x74>
 80054a0:	e020      	b.n	80054e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054a2:	4b55      	ldr	r3, [pc, #340]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11d      	bne.n	80054ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054b2:	e01a      	b.n	80054ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054b4:	4b50      	ldr	r3, [pc, #320]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d116      	bne.n	80054ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c4:	e013      	b.n	80054ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054c6:	4b4c      	ldr	r3, [pc, #304]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10f      	bne.n	80054f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054d2:	4b49      	ldr	r3, [pc, #292]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054e2:	e006      	b.n	80054f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
      break;
 80054e8:	e004      	b.n	80054f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054ea:	bf00      	nop
 80054ec:	e002      	b.n	80054f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054ee:	bf00      	nop
 80054f0:	e000      	b.n	80054f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80054f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10d      	bne.n	8005516 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054fa:	4b3f      	ldr	r3, [pc, #252]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6819      	ldr	r1, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	3b01      	subs	r3, #1
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	430b      	orrs	r3, r1
 8005510:	4939      	ldr	r1, [pc, #228]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005512:	4313      	orrs	r3, r2
 8005514:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d167      	bne.n	80055ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800551c:	4b36      	ldr	r3, [pc, #216]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a35      	ldr	r2, [pc, #212]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005528:	f7fd f9ac 	bl	8002884 <HAL_GetTick>
 800552c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800552e:	e009      	b.n	8005544 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005530:	f7fd f9a8 	bl	8002884 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d902      	bls.n	8005544 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	73fb      	strb	r3, [r7, #15]
        break;
 8005542:	e005      	b.n	8005550 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005544:	4b2c      	ldr	r3, [pc, #176]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1ef      	bne.n	8005530 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d14a      	bne.n	80055ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d111      	bne.n	8005580 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800555c:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6892      	ldr	r2, [r2, #8]
 800556c:	0211      	lsls	r1, r2, #8
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	68d2      	ldr	r2, [r2, #12]
 8005572:	0912      	lsrs	r2, r2, #4
 8005574:	0452      	lsls	r2, r2, #17
 8005576:	430a      	orrs	r2, r1
 8005578:	491f      	ldr	r1, [pc, #124]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800557a:	4313      	orrs	r3, r2
 800557c:	614b      	str	r3, [r1, #20]
 800557e:	e011      	b.n	80055a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005588:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6892      	ldr	r2, [r2, #8]
 8005590:	0211      	lsls	r1, r2, #8
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6912      	ldr	r2, [r2, #16]
 8005596:	0852      	lsrs	r2, r2, #1
 8005598:	3a01      	subs	r2, #1
 800559a:	0652      	lsls	r2, r2, #25
 800559c:	430a      	orrs	r2, r1
 800559e:	4916      	ldr	r1, [pc, #88]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055a4:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a13      	ldr	r2, [pc, #76]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b0:	f7fd f968 	bl	8002884 <HAL_GetTick>
 80055b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055b6:	e009      	b.n	80055cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055b8:	f7fd f964 	bl	8002884 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d902      	bls.n	80055cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	73fb      	strb	r3, [r7, #15]
          break;
 80055ca:	e005      	b.n	80055d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055cc:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0ef      	beq.n	80055b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	4904      	ldr	r1, [pc, #16]	; (80055f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000

080055fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e040      	b.n	8005690 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fc ff40 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2224      	movs	r2, #36	; 0x24
 8005628:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0201 	bic.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fb6a 	bl	8005d1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f8af 	bl	80057ac <UART_SetConfig>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e01b      	b.n	8005690 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fbe9 	bl	8005e60 <UART_CheckIdleState>
 800568e:	4603      	mov	r3, r0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4613      	mov	r3, r2
 80056a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d178      	bne.n	80057a2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_UART_Transmit+0x24>
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e071      	b.n	80057a4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2221      	movs	r2, #33	; 0x21
 80056cc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ce:	f7fd f8d9 	bl	8002884 <HAL_GetTick>
 80056d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	88fa      	ldrh	r2, [r7, #6]
 80056d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ec:	d108      	bne.n	8005700 <HAL_UART_Transmit+0x68>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d104      	bne.n	8005700 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	e003      	b.n	8005708 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005708:	e030      	b.n	800576c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2200      	movs	r2, #0
 8005712:	2180      	movs	r1, #128	; 0x80
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fc4b 	bl	8005fb0 <UART_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2220      	movs	r2, #32
 8005724:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e03c      	b.n	80057a4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10b      	bne.n	8005748 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800573c:	b292      	uxth	r2, r2
 800573e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	3302      	adds	r3, #2
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	e008      	b.n	800575a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	b292      	uxth	r2, r2
 8005752:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	3301      	adds	r3, #1
 8005758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1c8      	bne.n	800570a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2200      	movs	r2, #0
 8005780:	2140      	movs	r1, #64	; 0x40
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fc14 	bl	8005fb0 <UART_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d004      	beq.n	8005798 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e005      	b.n	80057a4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	e000      	b.n	80057a4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80057a2:	2302      	movs	r3, #2
  }
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3720      	adds	r7, #32
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057b0:	b08a      	sub	sp, #40	; 0x28
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	431a      	orrs	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4ba4      	ldr	r3, [pc, #656]	; (8005a6c <UART_SetConfig+0x2c0>)
 80057dc:	4013      	ands	r3, r2
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057e4:	430b      	orrs	r3, r1
 80057e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a99      	ldr	r2, [pc, #612]	; (8005a70 <UART_SetConfig+0x2c4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d004      	beq.n	8005818 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005814:	4313      	orrs	r3, r2
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005828:	430a      	orrs	r2, r1
 800582a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a90      	ldr	r2, [pc, #576]	; (8005a74 <UART_SetConfig+0x2c8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d126      	bne.n	8005884 <UART_SetConfig+0xd8>
 8005836:	4b90      	ldr	r3, [pc, #576]	; (8005a78 <UART_SetConfig+0x2cc>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	2b03      	cmp	r3, #3
 8005842:	d81b      	bhi.n	800587c <UART_SetConfig+0xd0>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <UART_SetConfig+0xa0>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	0800585d 	.word	0x0800585d
 8005850:	0800586d 	.word	0x0800586d
 8005854:	08005865 	.word	0x08005865
 8005858:	08005875 	.word	0x08005875
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005862:	e116      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005864:	2302      	movs	r3, #2
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800586a:	e112      	b.n	8005a92 <UART_SetConfig+0x2e6>
 800586c:	2304      	movs	r3, #4
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005872:	e10e      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005874:	2308      	movs	r3, #8
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800587a:	e10a      	b.n	8005a92 <UART_SetConfig+0x2e6>
 800587c:	2310      	movs	r3, #16
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005882:	e106      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a7c      	ldr	r2, [pc, #496]	; (8005a7c <UART_SetConfig+0x2d0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d138      	bne.n	8005900 <UART_SetConfig+0x154>
 800588e:	4b7a      	ldr	r3, [pc, #488]	; (8005a78 <UART_SetConfig+0x2cc>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005894:	f003 030c 	and.w	r3, r3, #12
 8005898:	2b0c      	cmp	r3, #12
 800589a:	d82d      	bhi.n	80058f8 <UART_SetConfig+0x14c>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <UART_SetConfig+0xf8>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058d9 	.word	0x080058d9
 80058a8:	080058f9 	.word	0x080058f9
 80058ac:	080058f9 	.word	0x080058f9
 80058b0:	080058f9 	.word	0x080058f9
 80058b4:	080058e9 	.word	0x080058e9
 80058b8:	080058f9 	.word	0x080058f9
 80058bc:	080058f9 	.word	0x080058f9
 80058c0:	080058f9 	.word	0x080058f9
 80058c4:	080058e1 	.word	0x080058e1
 80058c8:	080058f9 	.word	0x080058f9
 80058cc:	080058f9 	.word	0x080058f9
 80058d0:	080058f9 	.word	0x080058f9
 80058d4:	080058f1 	.word	0x080058f1
 80058d8:	2300      	movs	r3, #0
 80058da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058de:	e0d8      	b.n	8005a92 <UART_SetConfig+0x2e6>
 80058e0:	2302      	movs	r3, #2
 80058e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e6:	e0d4      	b.n	8005a92 <UART_SetConfig+0x2e6>
 80058e8:	2304      	movs	r3, #4
 80058ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ee:	e0d0      	b.n	8005a92 <UART_SetConfig+0x2e6>
 80058f0:	2308      	movs	r3, #8
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f6:	e0cc      	b.n	8005a92 <UART_SetConfig+0x2e6>
 80058f8:	2310      	movs	r3, #16
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fe:	e0c8      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a5e      	ldr	r2, [pc, #376]	; (8005a80 <UART_SetConfig+0x2d4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d125      	bne.n	8005956 <UART_SetConfig+0x1aa>
 800590a:	4b5b      	ldr	r3, [pc, #364]	; (8005a78 <UART_SetConfig+0x2cc>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005910:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005914:	2b30      	cmp	r3, #48	; 0x30
 8005916:	d016      	beq.n	8005946 <UART_SetConfig+0x19a>
 8005918:	2b30      	cmp	r3, #48	; 0x30
 800591a:	d818      	bhi.n	800594e <UART_SetConfig+0x1a2>
 800591c:	2b20      	cmp	r3, #32
 800591e:	d00a      	beq.n	8005936 <UART_SetConfig+0x18a>
 8005920:	2b20      	cmp	r3, #32
 8005922:	d814      	bhi.n	800594e <UART_SetConfig+0x1a2>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <UART_SetConfig+0x182>
 8005928:	2b10      	cmp	r3, #16
 800592a:	d008      	beq.n	800593e <UART_SetConfig+0x192>
 800592c:	e00f      	b.n	800594e <UART_SetConfig+0x1a2>
 800592e:	2300      	movs	r3, #0
 8005930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005934:	e0ad      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005936:	2302      	movs	r3, #2
 8005938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800593c:	e0a9      	b.n	8005a92 <UART_SetConfig+0x2e6>
 800593e:	2304      	movs	r3, #4
 8005940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005944:	e0a5      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005946:	2308      	movs	r3, #8
 8005948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800594c:	e0a1      	b.n	8005a92 <UART_SetConfig+0x2e6>
 800594e:	2310      	movs	r3, #16
 8005950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005954:	e09d      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a4a      	ldr	r2, [pc, #296]	; (8005a84 <UART_SetConfig+0x2d8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d125      	bne.n	80059ac <UART_SetConfig+0x200>
 8005960:	4b45      	ldr	r3, [pc, #276]	; (8005a78 <UART_SetConfig+0x2cc>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800596a:	2bc0      	cmp	r3, #192	; 0xc0
 800596c:	d016      	beq.n	800599c <UART_SetConfig+0x1f0>
 800596e:	2bc0      	cmp	r3, #192	; 0xc0
 8005970:	d818      	bhi.n	80059a4 <UART_SetConfig+0x1f8>
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d00a      	beq.n	800598c <UART_SetConfig+0x1e0>
 8005976:	2b80      	cmp	r3, #128	; 0x80
 8005978:	d814      	bhi.n	80059a4 <UART_SetConfig+0x1f8>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <UART_SetConfig+0x1d8>
 800597e:	2b40      	cmp	r3, #64	; 0x40
 8005980:	d008      	beq.n	8005994 <UART_SetConfig+0x1e8>
 8005982:	e00f      	b.n	80059a4 <UART_SetConfig+0x1f8>
 8005984:	2300      	movs	r3, #0
 8005986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598a:	e082      	b.n	8005a92 <UART_SetConfig+0x2e6>
 800598c:	2302      	movs	r3, #2
 800598e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005992:	e07e      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005994:	2304      	movs	r3, #4
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599a:	e07a      	b.n	8005a92 <UART_SetConfig+0x2e6>
 800599c:	2308      	movs	r3, #8
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a2:	e076      	b.n	8005a92 <UART_SetConfig+0x2e6>
 80059a4:	2310      	movs	r3, #16
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059aa:	e072      	b.n	8005a92 <UART_SetConfig+0x2e6>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a35      	ldr	r2, [pc, #212]	; (8005a88 <UART_SetConfig+0x2dc>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d12a      	bne.n	8005a0c <UART_SetConfig+0x260>
 80059b6:	4b30      	ldr	r3, [pc, #192]	; (8005a78 <UART_SetConfig+0x2cc>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c4:	d01a      	beq.n	80059fc <UART_SetConfig+0x250>
 80059c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ca:	d81b      	bhi.n	8005a04 <UART_SetConfig+0x258>
 80059cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d0:	d00c      	beq.n	80059ec <UART_SetConfig+0x240>
 80059d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d6:	d815      	bhi.n	8005a04 <UART_SetConfig+0x258>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <UART_SetConfig+0x238>
 80059dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e0:	d008      	beq.n	80059f4 <UART_SetConfig+0x248>
 80059e2:	e00f      	b.n	8005a04 <UART_SetConfig+0x258>
 80059e4:	2300      	movs	r3, #0
 80059e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ea:	e052      	b.n	8005a92 <UART_SetConfig+0x2e6>
 80059ec:	2302      	movs	r3, #2
 80059ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059f2:	e04e      	b.n	8005a92 <UART_SetConfig+0x2e6>
 80059f4:	2304      	movs	r3, #4
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fa:	e04a      	b.n	8005a92 <UART_SetConfig+0x2e6>
 80059fc:	2308      	movs	r3, #8
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a02:	e046      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005a04:	2310      	movs	r3, #16
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0a:	e042      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a17      	ldr	r2, [pc, #92]	; (8005a70 <UART_SetConfig+0x2c4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d13a      	bne.n	8005a8c <UART_SetConfig+0x2e0>
 8005a16:	4b18      	ldr	r3, [pc, #96]	; (8005a78 <UART_SetConfig+0x2cc>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a24:	d01a      	beq.n	8005a5c <UART_SetConfig+0x2b0>
 8005a26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a2a:	d81b      	bhi.n	8005a64 <UART_SetConfig+0x2b8>
 8005a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a30:	d00c      	beq.n	8005a4c <UART_SetConfig+0x2a0>
 8005a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a36:	d815      	bhi.n	8005a64 <UART_SetConfig+0x2b8>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <UART_SetConfig+0x298>
 8005a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a40:	d008      	beq.n	8005a54 <UART_SetConfig+0x2a8>
 8005a42:	e00f      	b.n	8005a64 <UART_SetConfig+0x2b8>
 8005a44:	2300      	movs	r3, #0
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4a:	e022      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a52:	e01e      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005a54:	2304      	movs	r3, #4
 8005a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a5a:	e01a      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005a5c:	2308      	movs	r3, #8
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a62:	e016      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005a64:	2310      	movs	r3, #16
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6a:	e012      	b.n	8005a92 <UART_SetConfig+0x2e6>
 8005a6c:	efff69f3 	.word	0xefff69f3
 8005a70:	40008000 	.word	0x40008000
 8005a74:	40013800 	.word	0x40013800
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	40004400 	.word	0x40004400
 8005a80:	40004800 	.word	0x40004800
 8005a84:	40004c00 	.word	0x40004c00
 8005a88:	40005000 	.word	0x40005000
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a9f      	ldr	r2, [pc, #636]	; (8005d14 <UART_SetConfig+0x568>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d17a      	bne.n	8005b92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d824      	bhi.n	8005aee <UART_SetConfig+0x342>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <UART_SetConfig+0x300>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005aef 	.word	0x08005aef
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005aef 	.word	0x08005aef
 8005abc:	08005adf 	.word	0x08005adf
 8005ac0:	08005aef 	.word	0x08005aef
 8005ac4:	08005aef 	.word	0x08005aef
 8005ac8:	08005aef 	.word	0x08005aef
 8005acc:	08005ae7 	.word	0x08005ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad0:	f7ff f84c 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8005ad4:	61f8      	str	r0, [r7, #28]
        break;
 8005ad6:	e010      	b.n	8005afa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad8:	4b8f      	ldr	r3, [pc, #572]	; (8005d18 <UART_SetConfig+0x56c>)
 8005ada:	61fb      	str	r3, [r7, #28]
        break;
 8005adc:	e00d      	b.n	8005afa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ade:	f7fe ffad 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8005ae2:	61f8      	str	r0, [r7, #28]
        break;
 8005ae4:	e009      	b.n	8005afa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aea:	61fb      	str	r3, [r7, #28]
        break;
 8005aec:	e005      	b.n	8005afa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005af8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80fb 	beq.w	8005cf8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	4613      	mov	r3, r2
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	4413      	add	r3, r2
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d305      	bcc.n	8005b1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d903      	bls.n	8005b26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b24:	e0e8      	b.n	8005cf8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	461c      	mov	r4, r3
 8005b2c:	4615      	mov	r5, r2
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	022b      	lsls	r3, r5, #8
 8005b38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b3c:	0222      	lsls	r2, r4, #8
 8005b3e:	68f9      	ldr	r1, [r7, #12]
 8005b40:	6849      	ldr	r1, [r1, #4]
 8005b42:	0849      	lsrs	r1, r1, #1
 8005b44:	2000      	movs	r0, #0
 8005b46:	4688      	mov	r8, r1
 8005b48:	4681      	mov	r9, r0
 8005b4a:	eb12 0a08 	adds.w	sl, r2, r8
 8005b4e:	eb43 0b09 	adc.w	fp, r3, r9
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	603b      	str	r3, [r7, #0]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b60:	4650      	mov	r0, sl
 8005b62:	4659      	mov	r1, fp
 8005b64:	f7fb f8c0 	bl	8000ce8 <__aeabi_uldivmod>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b76:	d308      	bcc.n	8005b8a <UART_SetConfig+0x3de>
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b7e:	d204      	bcs.n	8005b8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	60da      	str	r2, [r3, #12]
 8005b88:	e0b6      	b.n	8005cf8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b90:	e0b2      	b.n	8005cf8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9a:	d15e      	bne.n	8005c5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d828      	bhi.n	8005bf6 <UART_SetConfig+0x44a>
 8005ba4:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <UART_SetConfig+0x400>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bd9 	.word	0x08005bd9
 8005bb4:	08005be1 	.word	0x08005be1
 8005bb8:	08005bf7 	.word	0x08005bf7
 8005bbc:	08005be7 	.word	0x08005be7
 8005bc0:	08005bf7 	.word	0x08005bf7
 8005bc4:	08005bf7 	.word	0x08005bf7
 8005bc8:	08005bf7 	.word	0x08005bf7
 8005bcc:	08005bef 	.word	0x08005bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bd0:	f7fe ffcc 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8005bd4:	61f8      	str	r0, [r7, #28]
        break;
 8005bd6:	e014      	b.n	8005c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bd8:	f7fe ffde 	bl	8004b98 <HAL_RCC_GetPCLK2Freq>
 8005bdc:	61f8      	str	r0, [r7, #28]
        break;
 8005bde:	e010      	b.n	8005c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005be0:	4b4d      	ldr	r3, [pc, #308]	; (8005d18 <UART_SetConfig+0x56c>)
 8005be2:	61fb      	str	r3, [r7, #28]
        break;
 8005be4:	e00d      	b.n	8005c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005be6:	f7fe ff29 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8005bea:	61f8      	str	r0, [r7, #28]
        break;
 8005bec:	e009      	b.n	8005c02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bf2:	61fb      	str	r3, [r7, #28]
        break;
 8005bf4:	e005      	b.n	8005c02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d077      	beq.n	8005cf8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	005a      	lsls	r2, r3, #1
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	441a      	add	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	2b0f      	cmp	r3, #15
 8005c22:	d916      	bls.n	8005c52 <UART_SetConfig+0x4a6>
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2a:	d212      	bcs.n	8005c52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f023 030f 	bic.w	r3, r3, #15
 8005c34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	8afb      	ldrh	r3, [r7, #22]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	8afa      	ldrh	r2, [r7, #22]
 8005c4e:	60da      	str	r2, [r3, #12]
 8005c50:	e052      	b.n	8005cf8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c58:	e04e      	b.n	8005cf8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d827      	bhi.n	8005cb2 <UART_SetConfig+0x506>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0x4bc>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c8d 	.word	0x08005c8d
 8005c6c:	08005c95 	.word	0x08005c95
 8005c70:	08005c9d 	.word	0x08005c9d
 8005c74:	08005cb3 	.word	0x08005cb3
 8005c78:	08005ca3 	.word	0x08005ca3
 8005c7c:	08005cb3 	.word	0x08005cb3
 8005c80:	08005cb3 	.word	0x08005cb3
 8005c84:	08005cb3 	.word	0x08005cb3
 8005c88:	08005cab 	.word	0x08005cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c8c:	f7fe ff6e 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8005c90:	61f8      	str	r0, [r7, #28]
        break;
 8005c92:	e014      	b.n	8005cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c94:	f7fe ff80 	bl	8004b98 <HAL_RCC_GetPCLK2Freq>
 8005c98:	61f8      	str	r0, [r7, #28]
        break;
 8005c9a:	e010      	b.n	8005cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c9c:	4b1e      	ldr	r3, [pc, #120]	; (8005d18 <UART_SetConfig+0x56c>)
 8005c9e:	61fb      	str	r3, [r7, #28]
        break;
 8005ca0:	e00d      	b.n	8005cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca2:	f7fe fecb 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 8005ca6:	61f8      	str	r0, [r7, #28]
        break;
 8005ca8:	e009      	b.n	8005cbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cae:	61fb      	str	r3, [r7, #28]
        break;
 8005cb0:	e005      	b.n	8005cbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005cbc:	bf00      	nop
    }

    if (pclk != 0U)
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d019      	beq.n	8005cf8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	085a      	lsrs	r2, r3, #1
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	441a      	add	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	2b0f      	cmp	r3, #15
 8005cdc:	d909      	bls.n	8005cf2 <UART_SetConfig+0x546>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce4:	d205      	bcs.n	8005cf2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60da      	str	r2, [r3, #12]
 8005cf0:	e002      	b.n	8005cf8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3728      	adds	r7, #40	; 0x28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d12:	bf00      	nop
 8005d14:	40008000 	.word	0x40008000
 8005d18:	00f42400 	.word	0x00f42400

08005d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01a      	beq.n	8005e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e1a:	d10a      	bne.n	8005e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]
  }
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b098      	sub	sp, #96	; 0x60
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e70:	f7fc fd08 	bl	8002884 <HAL_GetTick>
 8005e74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d12e      	bne.n	8005ee2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f88c 	bl	8005fb0 <UART_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d021      	beq.n	8005ee2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e6      	bne.n	8005e9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e062      	b.n	8005fa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d149      	bne.n	8005f84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f856 	bl	8005fb0 <UART_WaitOnFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d03c      	beq.n	8005f84 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	623b      	str	r3, [r7, #32]
   return(result);
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f28:	633b      	str	r3, [r7, #48]	; 0x30
 8005f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3308      	adds	r3, #8
 8005f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f5c:	61fa      	str	r2, [r7, #28]
 8005f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	69b9      	ldr	r1, [r7, #24]
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	617b      	str	r3, [r7, #20]
   return(result);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e011      	b.n	8005fa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3758      	adds	r7, #88	; 0x58
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc0:	e049      	b.n	8006056 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d045      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fca:	f7fc fc5b 	bl	8002884 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d302      	bcc.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e048      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d031      	beq.n	8006056 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d110      	bne.n	8006022 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2208      	movs	r2, #8
 8006006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f838 	bl	800607e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2208      	movs	r2, #8
 8006012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e029      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800602c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006030:	d111      	bne.n	8006056 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800603a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f81e 	bl	800607e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e00f      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	4013      	ands	r3, r2
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	bf0c      	ite	eq
 8006066:	2301      	moveq	r3, #1
 8006068:	2300      	movne	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	429a      	cmp	r2, r3
 8006072:	d0a6      	beq.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800607e:	b480      	push	{r7}
 8006080:	b095      	sub	sp, #84	; 0x54
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800609a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a4:	643b      	str	r3, [r7, #64]	; 0x40
 80060a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e6      	bne.n	8006086 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3308      	adds	r3, #8
 80060be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3308      	adds	r3, #8
 80060d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e5      	bne.n	80060b8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d118      	bne.n	8006126 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	60bb      	str	r3, [r7, #8]
   return(result);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f023 0310 	bic.w	r3, r3, #16
 8006108:	647b      	str	r3, [r7, #68]	; 0x44
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006112:	61bb      	str	r3, [r7, #24]
 8006114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6979      	ldr	r1, [r7, #20]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	613b      	str	r3, [r7, #16]
   return(result);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e6      	bne.n	80060f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	669a      	str	r2, [r3, #104]	; 0x68
}
 800613a:	bf00      	nop
 800613c:	3754      	adds	r7, #84	; 0x54
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <__cvt>:
 8006146:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800614a:	ec55 4b10 	vmov	r4, r5, d0
 800614e:	2d00      	cmp	r5, #0
 8006150:	460e      	mov	r6, r1
 8006152:	4619      	mov	r1, r3
 8006154:	462b      	mov	r3, r5
 8006156:	bfbb      	ittet	lt
 8006158:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800615c:	461d      	movlt	r5, r3
 800615e:	2300      	movge	r3, #0
 8006160:	232d      	movlt	r3, #45	; 0x2d
 8006162:	700b      	strb	r3, [r1, #0]
 8006164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006166:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800616a:	4691      	mov	r9, r2
 800616c:	f023 0820 	bic.w	r8, r3, #32
 8006170:	bfbc      	itt	lt
 8006172:	4622      	movlt	r2, r4
 8006174:	4614      	movlt	r4, r2
 8006176:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800617a:	d005      	beq.n	8006188 <__cvt+0x42>
 800617c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006180:	d100      	bne.n	8006184 <__cvt+0x3e>
 8006182:	3601      	adds	r6, #1
 8006184:	2102      	movs	r1, #2
 8006186:	e000      	b.n	800618a <__cvt+0x44>
 8006188:	2103      	movs	r1, #3
 800618a:	ab03      	add	r3, sp, #12
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	ab02      	add	r3, sp, #8
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	ec45 4b10 	vmov	d0, r4, r5
 8006196:	4653      	mov	r3, sl
 8006198:	4632      	mov	r2, r6
 800619a:	f000 ff6d 	bl	8007078 <_dtoa_r>
 800619e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061a2:	4607      	mov	r7, r0
 80061a4:	d102      	bne.n	80061ac <__cvt+0x66>
 80061a6:	f019 0f01 	tst.w	r9, #1
 80061aa:	d022      	beq.n	80061f2 <__cvt+0xac>
 80061ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061b0:	eb07 0906 	add.w	r9, r7, r6
 80061b4:	d110      	bne.n	80061d8 <__cvt+0x92>
 80061b6:	783b      	ldrb	r3, [r7, #0]
 80061b8:	2b30      	cmp	r3, #48	; 0x30
 80061ba:	d10a      	bne.n	80061d2 <__cvt+0x8c>
 80061bc:	2200      	movs	r2, #0
 80061be:	2300      	movs	r3, #0
 80061c0:	4620      	mov	r0, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	f7fa fc80 	bl	8000ac8 <__aeabi_dcmpeq>
 80061c8:	b918      	cbnz	r0, 80061d2 <__cvt+0x8c>
 80061ca:	f1c6 0601 	rsb	r6, r6, #1
 80061ce:	f8ca 6000 	str.w	r6, [sl]
 80061d2:	f8da 3000 	ldr.w	r3, [sl]
 80061d6:	4499      	add	r9, r3
 80061d8:	2200      	movs	r2, #0
 80061da:	2300      	movs	r3, #0
 80061dc:	4620      	mov	r0, r4
 80061de:	4629      	mov	r1, r5
 80061e0:	f7fa fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 80061e4:	b108      	cbz	r0, 80061ea <__cvt+0xa4>
 80061e6:	f8cd 900c 	str.w	r9, [sp, #12]
 80061ea:	2230      	movs	r2, #48	; 0x30
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	454b      	cmp	r3, r9
 80061f0:	d307      	bcc.n	8006202 <__cvt+0xbc>
 80061f2:	9b03      	ldr	r3, [sp, #12]
 80061f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f6:	1bdb      	subs	r3, r3, r7
 80061f8:	4638      	mov	r0, r7
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	b004      	add	sp, #16
 80061fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006202:	1c59      	adds	r1, r3, #1
 8006204:	9103      	str	r1, [sp, #12]
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	e7f0      	b.n	80061ec <__cvt+0xa6>

0800620a <__exponent>:
 800620a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800620c:	4603      	mov	r3, r0
 800620e:	2900      	cmp	r1, #0
 8006210:	bfb8      	it	lt
 8006212:	4249      	neglt	r1, r1
 8006214:	f803 2b02 	strb.w	r2, [r3], #2
 8006218:	bfb4      	ite	lt
 800621a:	222d      	movlt	r2, #45	; 0x2d
 800621c:	222b      	movge	r2, #43	; 0x2b
 800621e:	2909      	cmp	r1, #9
 8006220:	7042      	strb	r2, [r0, #1]
 8006222:	dd2a      	ble.n	800627a <__exponent+0x70>
 8006224:	f10d 0207 	add.w	r2, sp, #7
 8006228:	4617      	mov	r7, r2
 800622a:	260a      	movs	r6, #10
 800622c:	4694      	mov	ip, r2
 800622e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006232:	fb06 1415 	mls	r4, r6, r5, r1
 8006236:	3430      	adds	r4, #48	; 0x30
 8006238:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800623c:	460c      	mov	r4, r1
 800623e:	2c63      	cmp	r4, #99	; 0x63
 8006240:	f102 32ff 	add.w	r2, r2, #4294967295
 8006244:	4629      	mov	r1, r5
 8006246:	dcf1      	bgt.n	800622c <__exponent+0x22>
 8006248:	3130      	adds	r1, #48	; 0x30
 800624a:	f1ac 0402 	sub.w	r4, ip, #2
 800624e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006252:	1c41      	adds	r1, r0, #1
 8006254:	4622      	mov	r2, r4
 8006256:	42ba      	cmp	r2, r7
 8006258:	d30a      	bcc.n	8006270 <__exponent+0x66>
 800625a:	f10d 0209 	add.w	r2, sp, #9
 800625e:	eba2 020c 	sub.w	r2, r2, ip
 8006262:	42bc      	cmp	r4, r7
 8006264:	bf88      	it	hi
 8006266:	2200      	movhi	r2, #0
 8006268:	4413      	add	r3, r2
 800626a:	1a18      	subs	r0, r3, r0
 800626c:	b003      	add	sp, #12
 800626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006270:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006274:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006278:	e7ed      	b.n	8006256 <__exponent+0x4c>
 800627a:	2330      	movs	r3, #48	; 0x30
 800627c:	3130      	adds	r1, #48	; 0x30
 800627e:	7083      	strb	r3, [r0, #2]
 8006280:	70c1      	strb	r1, [r0, #3]
 8006282:	1d03      	adds	r3, r0, #4
 8006284:	e7f1      	b.n	800626a <__exponent+0x60>
	...

08006288 <_printf_float>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	ed2d 8b02 	vpush	{d8}
 8006290:	b08d      	sub	sp, #52	; 0x34
 8006292:	460c      	mov	r4, r1
 8006294:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006298:	4616      	mov	r6, r2
 800629a:	461f      	mov	r7, r3
 800629c:	4605      	mov	r5, r0
 800629e:	f000 fde9 	bl	8006e74 <_localeconv_r>
 80062a2:	f8d0 a000 	ldr.w	sl, [r0]
 80062a6:	4650      	mov	r0, sl
 80062a8:	f7f9 ffe2 	bl	8000270 <strlen>
 80062ac:	2300      	movs	r3, #0
 80062ae:	930a      	str	r3, [sp, #40]	; 0x28
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	9305      	str	r3, [sp, #20]
 80062b4:	f8d8 3000 	ldr.w	r3, [r8]
 80062b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062bc:	3307      	adds	r3, #7
 80062be:	f023 0307 	bic.w	r3, r3, #7
 80062c2:	f103 0208 	add.w	r2, r3, #8
 80062c6:	f8c8 2000 	str.w	r2, [r8]
 80062ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062d2:	9307      	str	r3, [sp, #28]
 80062d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80062d8:	ee08 0a10 	vmov	s16, r0
 80062dc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80062e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062e4:	4b9e      	ldr	r3, [pc, #632]	; (8006560 <_printf_float+0x2d8>)
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	f7fa fc1f 	bl	8000b2c <__aeabi_dcmpun>
 80062ee:	bb88      	cbnz	r0, 8006354 <_printf_float+0xcc>
 80062f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062f4:	4b9a      	ldr	r3, [pc, #616]	; (8006560 <_printf_float+0x2d8>)
 80062f6:	f04f 32ff 	mov.w	r2, #4294967295
 80062fa:	f7fa fbf9 	bl	8000af0 <__aeabi_dcmple>
 80062fe:	bb48      	cbnz	r0, 8006354 <_printf_float+0xcc>
 8006300:	2200      	movs	r2, #0
 8006302:	2300      	movs	r3, #0
 8006304:	4640      	mov	r0, r8
 8006306:	4649      	mov	r1, r9
 8006308:	f7fa fbe8 	bl	8000adc <__aeabi_dcmplt>
 800630c:	b110      	cbz	r0, 8006314 <_printf_float+0x8c>
 800630e:	232d      	movs	r3, #45	; 0x2d
 8006310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006314:	4a93      	ldr	r2, [pc, #588]	; (8006564 <_printf_float+0x2dc>)
 8006316:	4b94      	ldr	r3, [pc, #592]	; (8006568 <_printf_float+0x2e0>)
 8006318:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800631c:	bf94      	ite	ls
 800631e:	4690      	movls	r8, r2
 8006320:	4698      	movhi	r8, r3
 8006322:	2303      	movs	r3, #3
 8006324:	6123      	str	r3, [r4, #16]
 8006326:	9b05      	ldr	r3, [sp, #20]
 8006328:	f023 0304 	bic.w	r3, r3, #4
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	f04f 0900 	mov.w	r9, #0
 8006332:	9700      	str	r7, [sp, #0]
 8006334:	4633      	mov	r3, r6
 8006336:	aa0b      	add	r2, sp, #44	; 0x2c
 8006338:	4621      	mov	r1, r4
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f9da 	bl	80066f4 <_printf_common>
 8006340:	3001      	adds	r0, #1
 8006342:	f040 8090 	bne.w	8006466 <_printf_float+0x1de>
 8006346:	f04f 30ff 	mov.w	r0, #4294967295
 800634a:	b00d      	add	sp, #52	; 0x34
 800634c:	ecbd 8b02 	vpop	{d8}
 8006350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006354:	4642      	mov	r2, r8
 8006356:	464b      	mov	r3, r9
 8006358:	4640      	mov	r0, r8
 800635a:	4649      	mov	r1, r9
 800635c:	f7fa fbe6 	bl	8000b2c <__aeabi_dcmpun>
 8006360:	b140      	cbz	r0, 8006374 <_printf_float+0xec>
 8006362:	464b      	mov	r3, r9
 8006364:	2b00      	cmp	r3, #0
 8006366:	bfbc      	itt	lt
 8006368:	232d      	movlt	r3, #45	; 0x2d
 800636a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800636e:	4a7f      	ldr	r2, [pc, #508]	; (800656c <_printf_float+0x2e4>)
 8006370:	4b7f      	ldr	r3, [pc, #508]	; (8006570 <_printf_float+0x2e8>)
 8006372:	e7d1      	b.n	8006318 <_printf_float+0x90>
 8006374:	6863      	ldr	r3, [r4, #4]
 8006376:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800637a:	9206      	str	r2, [sp, #24]
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	d13f      	bne.n	8006400 <_printf_float+0x178>
 8006380:	2306      	movs	r3, #6
 8006382:	6063      	str	r3, [r4, #4]
 8006384:	9b05      	ldr	r3, [sp, #20]
 8006386:	6861      	ldr	r1, [r4, #4]
 8006388:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800638c:	2300      	movs	r3, #0
 800638e:	9303      	str	r3, [sp, #12]
 8006390:	ab0a      	add	r3, sp, #40	; 0x28
 8006392:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006396:	ab09      	add	r3, sp, #36	; 0x24
 8006398:	ec49 8b10 	vmov	d0, r8, r9
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	6022      	str	r2, [r4, #0]
 80063a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063a4:	4628      	mov	r0, r5
 80063a6:	f7ff fece 	bl	8006146 <__cvt>
 80063aa:	9b06      	ldr	r3, [sp, #24]
 80063ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063ae:	2b47      	cmp	r3, #71	; 0x47
 80063b0:	4680      	mov	r8, r0
 80063b2:	d108      	bne.n	80063c6 <_printf_float+0x13e>
 80063b4:	1cc8      	adds	r0, r1, #3
 80063b6:	db02      	blt.n	80063be <_printf_float+0x136>
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	4299      	cmp	r1, r3
 80063bc:	dd41      	ble.n	8006442 <_printf_float+0x1ba>
 80063be:	f1ab 0302 	sub.w	r3, fp, #2
 80063c2:	fa5f fb83 	uxtb.w	fp, r3
 80063c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063ca:	d820      	bhi.n	800640e <_printf_float+0x186>
 80063cc:	3901      	subs	r1, #1
 80063ce:	465a      	mov	r2, fp
 80063d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063d4:	9109      	str	r1, [sp, #36]	; 0x24
 80063d6:	f7ff ff18 	bl	800620a <__exponent>
 80063da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063dc:	1813      	adds	r3, r2, r0
 80063de:	2a01      	cmp	r2, #1
 80063e0:	4681      	mov	r9, r0
 80063e2:	6123      	str	r3, [r4, #16]
 80063e4:	dc02      	bgt.n	80063ec <_printf_float+0x164>
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	07d2      	lsls	r2, r2, #31
 80063ea:	d501      	bpl.n	80063f0 <_printf_float+0x168>
 80063ec:	3301      	adds	r3, #1
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d09c      	beq.n	8006332 <_printf_float+0xaa>
 80063f8:	232d      	movs	r3, #45	; 0x2d
 80063fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063fe:	e798      	b.n	8006332 <_printf_float+0xaa>
 8006400:	9a06      	ldr	r2, [sp, #24]
 8006402:	2a47      	cmp	r2, #71	; 0x47
 8006404:	d1be      	bne.n	8006384 <_printf_float+0xfc>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1bc      	bne.n	8006384 <_printf_float+0xfc>
 800640a:	2301      	movs	r3, #1
 800640c:	e7b9      	b.n	8006382 <_printf_float+0xfa>
 800640e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006412:	d118      	bne.n	8006446 <_printf_float+0x1be>
 8006414:	2900      	cmp	r1, #0
 8006416:	6863      	ldr	r3, [r4, #4]
 8006418:	dd0b      	ble.n	8006432 <_printf_float+0x1aa>
 800641a:	6121      	str	r1, [r4, #16]
 800641c:	b913      	cbnz	r3, 8006424 <_printf_float+0x19c>
 800641e:	6822      	ldr	r2, [r4, #0]
 8006420:	07d0      	lsls	r0, r2, #31
 8006422:	d502      	bpl.n	800642a <_printf_float+0x1a2>
 8006424:	3301      	adds	r3, #1
 8006426:	440b      	add	r3, r1
 8006428:	6123      	str	r3, [r4, #16]
 800642a:	65a1      	str	r1, [r4, #88]	; 0x58
 800642c:	f04f 0900 	mov.w	r9, #0
 8006430:	e7de      	b.n	80063f0 <_printf_float+0x168>
 8006432:	b913      	cbnz	r3, 800643a <_printf_float+0x1b2>
 8006434:	6822      	ldr	r2, [r4, #0]
 8006436:	07d2      	lsls	r2, r2, #31
 8006438:	d501      	bpl.n	800643e <_printf_float+0x1b6>
 800643a:	3302      	adds	r3, #2
 800643c:	e7f4      	b.n	8006428 <_printf_float+0x1a0>
 800643e:	2301      	movs	r3, #1
 8006440:	e7f2      	b.n	8006428 <_printf_float+0x1a0>
 8006442:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006448:	4299      	cmp	r1, r3
 800644a:	db05      	blt.n	8006458 <_printf_float+0x1d0>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	6121      	str	r1, [r4, #16]
 8006450:	07d8      	lsls	r0, r3, #31
 8006452:	d5ea      	bpl.n	800642a <_printf_float+0x1a2>
 8006454:	1c4b      	adds	r3, r1, #1
 8006456:	e7e7      	b.n	8006428 <_printf_float+0x1a0>
 8006458:	2900      	cmp	r1, #0
 800645a:	bfd4      	ite	le
 800645c:	f1c1 0202 	rsble	r2, r1, #2
 8006460:	2201      	movgt	r2, #1
 8006462:	4413      	add	r3, r2
 8006464:	e7e0      	b.n	8006428 <_printf_float+0x1a0>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	055a      	lsls	r2, r3, #21
 800646a:	d407      	bmi.n	800647c <_printf_float+0x1f4>
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	4642      	mov	r2, r8
 8006470:	4631      	mov	r1, r6
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	d12c      	bne.n	80064d4 <_printf_float+0x24c>
 800647a:	e764      	b.n	8006346 <_printf_float+0xbe>
 800647c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006480:	f240 80e0 	bls.w	8006644 <_printf_float+0x3bc>
 8006484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006488:	2200      	movs	r2, #0
 800648a:	2300      	movs	r3, #0
 800648c:	f7fa fb1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006490:	2800      	cmp	r0, #0
 8006492:	d034      	beq.n	80064fe <_printf_float+0x276>
 8006494:	4a37      	ldr	r2, [pc, #220]	; (8006574 <_printf_float+0x2ec>)
 8006496:	2301      	movs	r3, #1
 8006498:	4631      	mov	r1, r6
 800649a:	4628      	mov	r0, r5
 800649c:	47b8      	blx	r7
 800649e:	3001      	adds	r0, #1
 80064a0:	f43f af51 	beq.w	8006346 <_printf_float+0xbe>
 80064a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064a8:	429a      	cmp	r2, r3
 80064aa:	db02      	blt.n	80064b2 <_printf_float+0x22a>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	07d8      	lsls	r0, r3, #31
 80064b0:	d510      	bpl.n	80064d4 <_printf_float+0x24c>
 80064b2:	ee18 3a10 	vmov	r3, s16
 80064b6:	4652      	mov	r2, sl
 80064b8:	4631      	mov	r1, r6
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b8      	blx	r7
 80064be:	3001      	adds	r0, #1
 80064c0:	f43f af41 	beq.w	8006346 <_printf_float+0xbe>
 80064c4:	f04f 0800 	mov.w	r8, #0
 80064c8:	f104 091a 	add.w	r9, r4, #26
 80064cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ce:	3b01      	subs	r3, #1
 80064d0:	4543      	cmp	r3, r8
 80064d2:	dc09      	bgt.n	80064e8 <_printf_float+0x260>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	079b      	lsls	r3, r3, #30
 80064d8:	f100 8107 	bmi.w	80066ea <_printf_float+0x462>
 80064dc:	68e0      	ldr	r0, [r4, #12]
 80064de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e0:	4298      	cmp	r0, r3
 80064e2:	bfb8      	it	lt
 80064e4:	4618      	movlt	r0, r3
 80064e6:	e730      	b.n	800634a <_printf_float+0xc2>
 80064e8:	2301      	movs	r3, #1
 80064ea:	464a      	mov	r2, r9
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b8      	blx	r7
 80064f2:	3001      	adds	r0, #1
 80064f4:	f43f af27 	beq.w	8006346 <_printf_float+0xbe>
 80064f8:	f108 0801 	add.w	r8, r8, #1
 80064fc:	e7e6      	b.n	80064cc <_printf_float+0x244>
 80064fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	dc39      	bgt.n	8006578 <_printf_float+0x2f0>
 8006504:	4a1b      	ldr	r2, [pc, #108]	; (8006574 <_printf_float+0x2ec>)
 8006506:	2301      	movs	r3, #1
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	47b8      	blx	r7
 800650e:	3001      	adds	r0, #1
 8006510:	f43f af19 	beq.w	8006346 <_printf_float+0xbe>
 8006514:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006518:	4313      	orrs	r3, r2
 800651a:	d102      	bne.n	8006522 <_printf_float+0x29a>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	07d9      	lsls	r1, r3, #31
 8006520:	d5d8      	bpl.n	80064d4 <_printf_float+0x24c>
 8006522:	ee18 3a10 	vmov	r3, s16
 8006526:	4652      	mov	r2, sl
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	47b8      	blx	r7
 800652e:	3001      	adds	r0, #1
 8006530:	f43f af09 	beq.w	8006346 <_printf_float+0xbe>
 8006534:	f04f 0900 	mov.w	r9, #0
 8006538:	f104 0a1a 	add.w	sl, r4, #26
 800653c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653e:	425b      	negs	r3, r3
 8006540:	454b      	cmp	r3, r9
 8006542:	dc01      	bgt.n	8006548 <_printf_float+0x2c0>
 8006544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006546:	e792      	b.n	800646e <_printf_float+0x1e6>
 8006548:	2301      	movs	r3, #1
 800654a:	4652      	mov	r2, sl
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f aef7 	beq.w	8006346 <_printf_float+0xbe>
 8006558:	f109 0901 	add.w	r9, r9, #1
 800655c:	e7ee      	b.n	800653c <_printf_float+0x2b4>
 800655e:	bf00      	nop
 8006560:	7fefffff 	.word	0x7fefffff
 8006564:	08009f48 	.word	0x08009f48
 8006568:	08009f4c 	.word	0x08009f4c
 800656c:	08009f50 	.word	0x08009f50
 8006570:	08009f54 	.word	0x08009f54
 8006574:	08009f58 	.word	0x08009f58
 8006578:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800657a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800657c:	429a      	cmp	r2, r3
 800657e:	bfa8      	it	ge
 8006580:	461a      	movge	r2, r3
 8006582:	2a00      	cmp	r2, #0
 8006584:	4691      	mov	r9, r2
 8006586:	dc37      	bgt.n	80065f8 <_printf_float+0x370>
 8006588:	f04f 0b00 	mov.w	fp, #0
 800658c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006590:	f104 021a 	add.w	r2, r4, #26
 8006594:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006596:	9305      	str	r3, [sp, #20]
 8006598:	eba3 0309 	sub.w	r3, r3, r9
 800659c:	455b      	cmp	r3, fp
 800659e:	dc33      	bgt.n	8006608 <_printf_float+0x380>
 80065a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a4:	429a      	cmp	r2, r3
 80065a6:	db3b      	blt.n	8006620 <_printf_float+0x398>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	07da      	lsls	r2, r3, #31
 80065ac:	d438      	bmi.n	8006620 <_printf_float+0x398>
 80065ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80065b2:	eba2 0903 	sub.w	r9, r2, r3
 80065b6:	9b05      	ldr	r3, [sp, #20]
 80065b8:	1ad2      	subs	r2, r2, r3
 80065ba:	4591      	cmp	r9, r2
 80065bc:	bfa8      	it	ge
 80065be:	4691      	movge	r9, r2
 80065c0:	f1b9 0f00 	cmp.w	r9, #0
 80065c4:	dc35      	bgt.n	8006632 <_printf_float+0x3aa>
 80065c6:	f04f 0800 	mov.w	r8, #0
 80065ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ce:	f104 0a1a 	add.w	sl, r4, #26
 80065d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065d6:	1a9b      	subs	r3, r3, r2
 80065d8:	eba3 0309 	sub.w	r3, r3, r9
 80065dc:	4543      	cmp	r3, r8
 80065de:	f77f af79 	ble.w	80064d4 <_printf_float+0x24c>
 80065e2:	2301      	movs	r3, #1
 80065e4:	4652      	mov	r2, sl
 80065e6:	4631      	mov	r1, r6
 80065e8:	4628      	mov	r0, r5
 80065ea:	47b8      	blx	r7
 80065ec:	3001      	adds	r0, #1
 80065ee:	f43f aeaa 	beq.w	8006346 <_printf_float+0xbe>
 80065f2:	f108 0801 	add.w	r8, r8, #1
 80065f6:	e7ec      	b.n	80065d2 <_printf_float+0x34a>
 80065f8:	4613      	mov	r3, r2
 80065fa:	4631      	mov	r1, r6
 80065fc:	4642      	mov	r2, r8
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	d1c0      	bne.n	8006588 <_printf_float+0x300>
 8006606:	e69e      	b.n	8006346 <_printf_float+0xbe>
 8006608:	2301      	movs	r3, #1
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	9205      	str	r2, [sp, #20]
 8006610:	47b8      	blx	r7
 8006612:	3001      	adds	r0, #1
 8006614:	f43f ae97 	beq.w	8006346 <_printf_float+0xbe>
 8006618:	9a05      	ldr	r2, [sp, #20]
 800661a:	f10b 0b01 	add.w	fp, fp, #1
 800661e:	e7b9      	b.n	8006594 <_printf_float+0x30c>
 8006620:	ee18 3a10 	vmov	r3, s16
 8006624:	4652      	mov	r2, sl
 8006626:	4631      	mov	r1, r6
 8006628:	4628      	mov	r0, r5
 800662a:	47b8      	blx	r7
 800662c:	3001      	adds	r0, #1
 800662e:	d1be      	bne.n	80065ae <_printf_float+0x326>
 8006630:	e689      	b.n	8006346 <_printf_float+0xbe>
 8006632:	9a05      	ldr	r2, [sp, #20]
 8006634:	464b      	mov	r3, r9
 8006636:	4442      	add	r2, r8
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	d1c1      	bne.n	80065c6 <_printf_float+0x33e>
 8006642:	e680      	b.n	8006346 <_printf_float+0xbe>
 8006644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006646:	2a01      	cmp	r2, #1
 8006648:	dc01      	bgt.n	800664e <_printf_float+0x3c6>
 800664a:	07db      	lsls	r3, r3, #31
 800664c:	d53a      	bpl.n	80066c4 <_printf_float+0x43c>
 800664e:	2301      	movs	r3, #1
 8006650:	4642      	mov	r2, r8
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	f43f ae74 	beq.w	8006346 <_printf_float+0xbe>
 800665e:	ee18 3a10 	vmov	r3, s16
 8006662:	4652      	mov	r2, sl
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f ae6b 	beq.w	8006346 <_printf_float+0xbe>
 8006670:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006674:	2200      	movs	r2, #0
 8006676:	2300      	movs	r3, #0
 8006678:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800667c:	f7fa fa24 	bl	8000ac8 <__aeabi_dcmpeq>
 8006680:	b9d8      	cbnz	r0, 80066ba <_printf_float+0x432>
 8006682:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006686:	f108 0201 	add.w	r2, r8, #1
 800668a:	4631      	mov	r1, r6
 800668c:	4628      	mov	r0, r5
 800668e:	47b8      	blx	r7
 8006690:	3001      	adds	r0, #1
 8006692:	d10e      	bne.n	80066b2 <_printf_float+0x42a>
 8006694:	e657      	b.n	8006346 <_printf_float+0xbe>
 8006696:	2301      	movs	r3, #1
 8006698:	4652      	mov	r2, sl
 800669a:	4631      	mov	r1, r6
 800669c:	4628      	mov	r0, r5
 800669e:	47b8      	blx	r7
 80066a0:	3001      	adds	r0, #1
 80066a2:	f43f ae50 	beq.w	8006346 <_printf_float+0xbe>
 80066a6:	f108 0801 	add.w	r8, r8, #1
 80066aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ac:	3b01      	subs	r3, #1
 80066ae:	4543      	cmp	r3, r8
 80066b0:	dcf1      	bgt.n	8006696 <_printf_float+0x40e>
 80066b2:	464b      	mov	r3, r9
 80066b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066b8:	e6da      	b.n	8006470 <_printf_float+0x1e8>
 80066ba:	f04f 0800 	mov.w	r8, #0
 80066be:	f104 0a1a 	add.w	sl, r4, #26
 80066c2:	e7f2      	b.n	80066aa <_printf_float+0x422>
 80066c4:	2301      	movs	r3, #1
 80066c6:	4642      	mov	r2, r8
 80066c8:	e7df      	b.n	800668a <_printf_float+0x402>
 80066ca:	2301      	movs	r3, #1
 80066cc:	464a      	mov	r2, r9
 80066ce:	4631      	mov	r1, r6
 80066d0:	4628      	mov	r0, r5
 80066d2:	47b8      	blx	r7
 80066d4:	3001      	adds	r0, #1
 80066d6:	f43f ae36 	beq.w	8006346 <_printf_float+0xbe>
 80066da:	f108 0801 	add.w	r8, r8, #1
 80066de:	68e3      	ldr	r3, [r4, #12]
 80066e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066e2:	1a5b      	subs	r3, r3, r1
 80066e4:	4543      	cmp	r3, r8
 80066e6:	dcf0      	bgt.n	80066ca <_printf_float+0x442>
 80066e8:	e6f8      	b.n	80064dc <_printf_float+0x254>
 80066ea:	f04f 0800 	mov.w	r8, #0
 80066ee:	f104 0919 	add.w	r9, r4, #25
 80066f2:	e7f4      	b.n	80066de <_printf_float+0x456>

080066f4 <_printf_common>:
 80066f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f8:	4616      	mov	r6, r2
 80066fa:	4699      	mov	r9, r3
 80066fc:	688a      	ldr	r2, [r1, #8]
 80066fe:	690b      	ldr	r3, [r1, #16]
 8006700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006704:	4293      	cmp	r3, r2
 8006706:	bfb8      	it	lt
 8006708:	4613      	movlt	r3, r2
 800670a:	6033      	str	r3, [r6, #0]
 800670c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006710:	4607      	mov	r7, r0
 8006712:	460c      	mov	r4, r1
 8006714:	b10a      	cbz	r2, 800671a <_printf_common+0x26>
 8006716:	3301      	adds	r3, #1
 8006718:	6033      	str	r3, [r6, #0]
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	0699      	lsls	r1, r3, #26
 800671e:	bf42      	ittt	mi
 8006720:	6833      	ldrmi	r3, [r6, #0]
 8006722:	3302      	addmi	r3, #2
 8006724:	6033      	strmi	r3, [r6, #0]
 8006726:	6825      	ldr	r5, [r4, #0]
 8006728:	f015 0506 	ands.w	r5, r5, #6
 800672c:	d106      	bne.n	800673c <_printf_common+0x48>
 800672e:	f104 0a19 	add.w	sl, r4, #25
 8006732:	68e3      	ldr	r3, [r4, #12]
 8006734:	6832      	ldr	r2, [r6, #0]
 8006736:	1a9b      	subs	r3, r3, r2
 8006738:	42ab      	cmp	r3, r5
 800673a:	dc26      	bgt.n	800678a <_printf_common+0x96>
 800673c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006740:	1e13      	subs	r3, r2, #0
 8006742:	6822      	ldr	r2, [r4, #0]
 8006744:	bf18      	it	ne
 8006746:	2301      	movne	r3, #1
 8006748:	0692      	lsls	r2, r2, #26
 800674a:	d42b      	bmi.n	80067a4 <_printf_common+0xb0>
 800674c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006750:	4649      	mov	r1, r9
 8006752:	4638      	mov	r0, r7
 8006754:	47c0      	blx	r8
 8006756:	3001      	adds	r0, #1
 8006758:	d01e      	beq.n	8006798 <_printf_common+0xa4>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	6922      	ldr	r2, [r4, #16]
 800675e:	f003 0306 	and.w	r3, r3, #6
 8006762:	2b04      	cmp	r3, #4
 8006764:	bf02      	ittt	eq
 8006766:	68e5      	ldreq	r5, [r4, #12]
 8006768:	6833      	ldreq	r3, [r6, #0]
 800676a:	1aed      	subeq	r5, r5, r3
 800676c:	68a3      	ldr	r3, [r4, #8]
 800676e:	bf0c      	ite	eq
 8006770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006774:	2500      	movne	r5, #0
 8006776:	4293      	cmp	r3, r2
 8006778:	bfc4      	itt	gt
 800677a:	1a9b      	subgt	r3, r3, r2
 800677c:	18ed      	addgt	r5, r5, r3
 800677e:	2600      	movs	r6, #0
 8006780:	341a      	adds	r4, #26
 8006782:	42b5      	cmp	r5, r6
 8006784:	d11a      	bne.n	80067bc <_printf_common+0xc8>
 8006786:	2000      	movs	r0, #0
 8006788:	e008      	b.n	800679c <_printf_common+0xa8>
 800678a:	2301      	movs	r3, #1
 800678c:	4652      	mov	r2, sl
 800678e:	4649      	mov	r1, r9
 8006790:	4638      	mov	r0, r7
 8006792:	47c0      	blx	r8
 8006794:	3001      	adds	r0, #1
 8006796:	d103      	bne.n	80067a0 <_printf_common+0xac>
 8006798:	f04f 30ff 	mov.w	r0, #4294967295
 800679c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a0:	3501      	adds	r5, #1
 80067a2:	e7c6      	b.n	8006732 <_printf_common+0x3e>
 80067a4:	18e1      	adds	r1, r4, r3
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	2030      	movs	r0, #48	; 0x30
 80067aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ae:	4422      	add	r2, r4
 80067b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067b8:	3302      	adds	r3, #2
 80067ba:	e7c7      	b.n	800674c <_printf_common+0x58>
 80067bc:	2301      	movs	r3, #1
 80067be:	4622      	mov	r2, r4
 80067c0:	4649      	mov	r1, r9
 80067c2:	4638      	mov	r0, r7
 80067c4:	47c0      	blx	r8
 80067c6:	3001      	adds	r0, #1
 80067c8:	d0e6      	beq.n	8006798 <_printf_common+0xa4>
 80067ca:	3601      	adds	r6, #1
 80067cc:	e7d9      	b.n	8006782 <_printf_common+0x8e>
	...

080067d0 <_printf_i>:
 80067d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d4:	7e0f      	ldrb	r7, [r1, #24]
 80067d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067d8:	2f78      	cmp	r7, #120	; 0x78
 80067da:	4691      	mov	r9, r2
 80067dc:	4680      	mov	r8, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	469a      	mov	sl, r3
 80067e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067e6:	d807      	bhi.n	80067f8 <_printf_i+0x28>
 80067e8:	2f62      	cmp	r7, #98	; 0x62
 80067ea:	d80a      	bhi.n	8006802 <_printf_i+0x32>
 80067ec:	2f00      	cmp	r7, #0
 80067ee:	f000 80d4 	beq.w	800699a <_printf_i+0x1ca>
 80067f2:	2f58      	cmp	r7, #88	; 0x58
 80067f4:	f000 80c0 	beq.w	8006978 <_printf_i+0x1a8>
 80067f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006800:	e03a      	b.n	8006878 <_printf_i+0xa8>
 8006802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006806:	2b15      	cmp	r3, #21
 8006808:	d8f6      	bhi.n	80067f8 <_printf_i+0x28>
 800680a:	a101      	add	r1, pc, #4	; (adr r1, 8006810 <_printf_i+0x40>)
 800680c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006810:	08006869 	.word	0x08006869
 8006814:	0800687d 	.word	0x0800687d
 8006818:	080067f9 	.word	0x080067f9
 800681c:	080067f9 	.word	0x080067f9
 8006820:	080067f9 	.word	0x080067f9
 8006824:	080067f9 	.word	0x080067f9
 8006828:	0800687d 	.word	0x0800687d
 800682c:	080067f9 	.word	0x080067f9
 8006830:	080067f9 	.word	0x080067f9
 8006834:	080067f9 	.word	0x080067f9
 8006838:	080067f9 	.word	0x080067f9
 800683c:	08006981 	.word	0x08006981
 8006840:	080068a9 	.word	0x080068a9
 8006844:	0800693b 	.word	0x0800693b
 8006848:	080067f9 	.word	0x080067f9
 800684c:	080067f9 	.word	0x080067f9
 8006850:	080069a3 	.word	0x080069a3
 8006854:	080067f9 	.word	0x080067f9
 8006858:	080068a9 	.word	0x080068a9
 800685c:	080067f9 	.word	0x080067f9
 8006860:	080067f9 	.word	0x080067f9
 8006864:	08006943 	.word	0x08006943
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	1d1a      	adds	r2, r3, #4
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	602a      	str	r2, [r5, #0]
 8006870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006878:	2301      	movs	r3, #1
 800687a:	e09f      	b.n	80069bc <_printf_i+0x1ec>
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	0607      	lsls	r7, r0, #24
 8006882:	f103 0104 	add.w	r1, r3, #4
 8006886:	6029      	str	r1, [r5, #0]
 8006888:	d501      	bpl.n	800688e <_printf_i+0xbe>
 800688a:	681e      	ldr	r6, [r3, #0]
 800688c:	e003      	b.n	8006896 <_printf_i+0xc6>
 800688e:	0646      	lsls	r6, r0, #25
 8006890:	d5fb      	bpl.n	800688a <_printf_i+0xba>
 8006892:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006896:	2e00      	cmp	r6, #0
 8006898:	da03      	bge.n	80068a2 <_printf_i+0xd2>
 800689a:	232d      	movs	r3, #45	; 0x2d
 800689c:	4276      	negs	r6, r6
 800689e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068a2:	485a      	ldr	r0, [pc, #360]	; (8006a0c <_printf_i+0x23c>)
 80068a4:	230a      	movs	r3, #10
 80068a6:	e012      	b.n	80068ce <_printf_i+0xfe>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	6820      	ldr	r0, [r4, #0]
 80068ac:	1d19      	adds	r1, r3, #4
 80068ae:	6029      	str	r1, [r5, #0]
 80068b0:	0605      	lsls	r5, r0, #24
 80068b2:	d501      	bpl.n	80068b8 <_printf_i+0xe8>
 80068b4:	681e      	ldr	r6, [r3, #0]
 80068b6:	e002      	b.n	80068be <_printf_i+0xee>
 80068b8:	0641      	lsls	r1, r0, #25
 80068ba:	d5fb      	bpl.n	80068b4 <_printf_i+0xe4>
 80068bc:	881e      	ldrh	r6, [r3, #0]
 80068be:	4853      	ldr	r0, [pc, #332]	; (8006a0c <_printf_i+0x23c>)
 80068c0:	2f6f      	cmp	r7, #111	; 0x6f
 80068c2:	bf0c      	ite	eq
 80068c4:	2308      	moveq	r3, #8
 80068c6:	230a      	movne	r3, #10
 80068c8:	2100      	movs	r1, #0
 80068ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ce:	6865      	ldr	r5, [r4, #4]
 80068d0:	60a5      	str	r5, [r4, #8]
 80068d2:	2d00      	cmp	r5, #0
 80068d4:	bfa2      	ittt	ge
 80068d6:	6821      	ldrge	r1, [r4, #0]
 80068d8:	f021 0104 	bicge.w	r1, r1, #4
 80068dc:	6021      	strge	r1, [r4, #0]
 80068de:	b90e      	cbnz	r6, 80068e4 <_printf_i+0x114>
 80068e0:	2d00      	cmp	r5, #0
 80068e2:	d04b      	beq.n	800697c <_printf_i+0x1ac>
 80068e4:	4615      	mov	r5, r2
 80068e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80068ea:	fb03 6711 	mls	r7, r3, r1, r6
 80068ee:	5dc7      	ldrb	r7, [r0, r7]
 80068f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068f4:	4637      	mov	r7, r6
 80068f6:	42bb      	cmp	r3, r7
 80068f8:	460e      	mov	r6, r1
 80068fa:	d9f4      	bls.n	80068e6 <_printf_i+0x116>
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d10b      	bne.n	8006918 <_printf_i+0x148>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	07de      	lsls	r6, r3, #31
 8006904:	d508      	bpl.n	8006918 <_printf_i+0x148>
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	6861      	ldr	r1, [r4, #4]
 800690a:	4299      	cmp	r1, r3
 800690c:	bfde      	ittt	le
 800690e:	2330      	movle	r3, #48	; 0x30
 8006910:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006914:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006918:	1b52      	subs	r2, r2, r5
 800691a:	6122      	str	r2, [r4, #16]
 800691c:	f8cd a000 	str.w	sl, [sp]
 8006920:	464b      	mov	r3, r9
 8006922:	aa03      	add	r2, sp, #12
 8006924:	4621      	mov	r1, r4
 8006926:	4640      	mov	r0, r8
 8006928:	f7ff fee4 	bl	80066f4 <_printf_common>
 800692c:	3001      	adds	r0, #1
 800692e:	d14a      	bne.n	80069c6 <_printf_i+0x1f6>
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	b004      	add	sp, #16
 8006936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	f043 0320 	orr.w	r3, r3, #32
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	4833      	ldr	r0, [pc, #204]	; (8006a10 <_printf_i+0x240>)
 8006944:	2778      	movs	r7, #120	; 0x78
 8006946:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	6829      	ldr	r1, [r5, #0]
 800694e:	061f      	lsls	r7, r3, #24
 8006950:	f851 6b04 	ldr.w	r6, [r1], #4
 8006954:	d402      	bmi.n	800695c <_printf_i+0x18c>
 8006956:	065f      	lsls	r7, r3, #25
 8006958:	bf48      	it	mi
 800695a:	b2b6      	uxthmi	r6, r6
 800695c:	07df      	lsls	r7, r3, #31
 800695e:	bf48      	it	mi
 8006960:	f043 0320 	orrmi.w	r3, r3, #32
 8006964:	6029      	str	r1, [r5, #0]
 8006966:	bf48      	it	mi
 8006968:	6023      	strmi	r3, [r4, #0]
 800696a:	b91e      	cbnz	r6, 8006974 <_printf_i+0x1a4>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	f023 0320 	bic.w	r3, r3, #32
 8006972:	6023      	str	r3, [r4, #0]
 8006974:	2310      	movs	r3, #16
 8006976:	e7a7      	b.n	80068c8 <_printf_i+0xf8>
 8006978:	4824      	ldr	r0, [pc, #144]	; (8006a0c <_printf_i+0x23c>)
 800697a:	e7e4      	b.n	8006946 <_printf_i+0x176>
 800697c:	4615      	mov	r5, r2
 800697e:	e7bd      	b.n	80068fc <_printf_i+0x12c>
 8006980:	682b      	ldr	r3, [r5, #0]
 8006982:	6826      	ldr	r6, [r4, #0]
 8006984:	6961      	ldr	r1, [r4, #20]
 8006986:	1d18      	adds	r0, r3, #4
 8006988:	6028      	str	r0, [r5, #0]
 800698a:	0635      	lsls	r5, r6, #24
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	d501      	bpl.n	8006994 <_printf_i+0x1c4>
 8006990:	6019      	str	r1, [r3, #0]
 8006992:	e002      	b.n	800699a <_printf_i+0x1ca>
 8006994:	0670      	lsls	r0, r6, #25
 8006996:	d5fb      	bpl.n	8006990 <_printf_i+0x1c0>
 8006998:	8019      	strh	r1, [r3, #0]
 800699a:	2300      	movs	r3, #0
 800699c:	6123      	str	r3, [r4, #16]
 800699e:	4615      	mov	r5, r2
 80069a0:	e7bc      	b.n	800691c <_printf_i+0x14c>
 80069a2:	682b      	ldr	r3, [r5, #0]
 80069a4:	1d1a      	adds	r2, r3, #4
 80069a6:	602a      	str	r2, [r5, #0]
 80069a8:	681d      	ldr	r5, [r3, #0]
 80069aa:	6862      	ldr	r2, [r4, #4]
 80069ac:	2100      	movs	r1, #0
 80069ae:	4628      	mov	r0, r5
 80069b0:	f7f9 fc0e 	bl	80001d0 <memchr>
 80069b4:	b108      	cbz	r0, 80069ba <_printf_i+0x1ea>
 80069b6:	1b40      	subs	r0, r0, r5
 80069b8:	6060      	str	r0, [r4, #4]
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	6123      	str	r3, [r4, #16]
 80069be:	2300      	movs	r3, #0
 80069c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c4:	e7aa      	b.n	800691c <_printf_i+0x14c>
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	462a      	mov	r2, r5
 80069ca:	4649      	mov	r1, r9
 80069cc:	4640      	mov	r0, r8
 80069ce:	47d0      	blx	sl
 80069d0:	3001      	adds	r0, #1
 80069d2:	d0ad      	beq.n	8006930 <_printf_i+0x160>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	079b      	lsls	r3, r3, #30
 80069d8:	d413      	bmi.n	8006a02 <_printf_i+0x232>
 80069da:	68e0      	ldr	r0, [r4, #12]
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	4298      	cmp	r0, r3
 80069e0:	bfb8      	it	lt
 80069e2:	4618      	movlt	r0, r3
 80069e4:	e7a6      	b.n	8006934 <_printf_i+0x164>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4632      	mov	r2, r6
 80069ea:	4649      	mov	r1, r9
 80069ec:	4640      	mov	r0, r8
 80069ee:	47d0      	blx	sl
 80069f0:	3001      	adds	r0, #1
 80069f2:	d09d      	beq.n	8006930 <_printf_i+0x160>
 80069f4:	3501      	adds	r5, #1
 80069f6:	68e3      	ldr	r3, [r4, #12]
 80069f8:	9903      	ldr	r1, [sp, #12]
 80069fa:	1a5b      	subs	r3, r3, r1
 80069fc:	42ab      	cmp	r3, r5
 80069fe:	dcf2      	bgt.n	80069e6 <_printf_i+0x216>
 8006a00:	e7eb      	b.n	80069da <_printf_i+0x20a>
 8006a02:	2500      	movs	r5, #0
 8006a04:	f104 0619 	add.w	r6, r4, #25
 8006a08:	e7f5      	b.n	80069f6 <_printf_i+0x226>
 8006a0a:	bf00      	nop
 8006a0c:	08009f5a 	.word	0x08009f5a
 8006a10:	08009f6b 	.word	0x08009f6b

08006a14 <std>:
 8006a14:	2300      	movs	r3, #0
 8006a16:	b510      	push	{r4, lr}
 8006a18:	4604      	mov	r4, r0
 8006a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a22:	6083      	str	r3, [r0, #8]
 8006a24:	8181      	strh	r1, [r0, #12]
 8006a26:	6643      	str	r3, [r0, #100]	; 0x64
 8006a28:	81c2      	strh	r2, [r0, #14]
 8006a2a:	6183      	str	r3, [r0, #24]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	2208      	movs	r2, #8
 8006a30:	305c      	adds	r0, #92	; 0x5c
 8006a32:	f000 fa17 	bl	8006e64 <memset>
 8006a36:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <std+0x58>)
 8006a38:	6263      	str	r3, [r4, #36]	; 0x24
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <std+0x5c>)
 8006a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <std+0x60>)
 8006a40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a42:	4b0d      	ldr	r3, [pc, #52]	; (8006a78 <std+0x64>)
 8006a44:	6323      	str	r3, [r4, #48]	; 0x30
 8006a46:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <std+0x68>)
 8006a48:	6224      	str	r4, [r4, #32]
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	d006      	beq.n	8006a5c <std+0x48>
 8006a4e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006a52:	4294      	cmp	r4, r2
 8006a54:	d002      	beq.n	8006a5c <std+0x48>
 8006a56:	33d0      	adds	r3, #208	; 0xd0
 8006a58:	429c      	cmp	r4, r3
 8006a5a:	d105      	bne.n	8006a68 <std+0x54>
 8006a5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a64:	f000 ba7a 	b.w	8006f5c <__retarget_lock_init_recursive>
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	bf00      	nop
 8006a6c:	08006cb5 	.word	0x08006cb5
 8006a70:	08006cd7 	.word	0x08006cd7
 8006a74:	08006d0f 	.word	0x08006d0f
 8006a78:	08006d33 	.word	0x08006d33
 8006a7c:	20000434 	.word	0x20000434

08006a80 <stdio_exit_handler>:
 8006a80:	4a02      	ldr	r2, [pc, #8]	; (8006a8c <stdio_exit_handler+0xc>)
 8006a82:	4903      	ldr	r1, [pc, #12]	; (8006a90 <stdio_exit_handler+0x10>)
 8006a84:	4803      	ldr	r0, [pc, #12]	; (8006a94 <stdio_exit_handler+0x14>)
 8006a86:	f000 b869 	b.w	8006b5c <_fwalk_sglue>
 8006a8a:	bf00      	nop
 8006a8c:	2000000c 	.word	0x2000000c
 8006a90:	08008b99 	.word	0x08008b99
 8006a94:	20000018 	.word	0x20000018

08006a98 <cleanup_stdio>:
 8006a98:	6841      	ldr	r1, [r0, #4]
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <cleanup_stdio+0x34>)
 8006a9c:	4299      	cmp	r1, r3
 8006a9e:	b510      	push	{r4, lr}
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	d001      	beq.n	8006aa8 <cleanup_stdio+0x10>
 8006aa4:	f002 f878 	bl	8008b98 <_fflush_r>
 8006aa8:	68a1      	ldr	r1, [r4, #8]
 8006aaa:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <cleanup_stdio+0x38>)
 8006aac:	4299      	cmp	r1, r3
 8006aae:	d002      	beq.n	8006ab6 <cleanup_stdio+0x1e>
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f002 f871 	bl	8008b98 <_fflush_r>
 8006ab6:	68e1      	ldr	r1, [r4, #12]
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <cleanup_stdio+0x3c>)
 8006aba:	4299      	cmp	r1, r3
 8006abc:	d004      	beq.n	8006ac8 <cleanup_stdio+0x30>
 8006abe:	4620      	mov	r0, r4
 8006ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac4:	f002 b868 	b.w	8008b98 <_fflush_r>
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	bf00      	nop
 8006acc:	20000434 	.word	0x20000434
 8006ad0:	2000049c 	.word	0x2000049c
 8006ad4:	20000504 	.word	0x20000504

08006ad8 <global_stdio_init.part.0>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <global_stdio_init.part.0+0x30>)
 8006adc:	4c0b      	ldr	r4, [pc, #44]	; (8006b0c <global_stdio_init.part.0+0x34>)
 8006ade:	4a0c      	ldr	r2, [pc, #48]	; (8006b10 <global_stdio_init.part.0+0x38>)
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	f7ff ff94 	bl	8006a14 <std>
 8006aec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006af0:	2201      	movs	r2, #1
 8006af2:	2109      	movs	r1, #9
 8006af4:	f7ff ff8e 	bl	8006a14 <std>
 8006af8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006afc:	2202      	movs	r2, #2
 8006afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b02:	2112      	movs	r1, #18
 8006b04:	f7ff bf86 	b.w	8006a14 <std>
 8006b08:	2000056c 	.word	0x2000056c
 8006b0c:	20000434 	.word	0x20000434
 8006b10:	08006a81 	.word	0x08006a81

08006b14 <__sfp_lock_acquire>:
 8006b14:	4801      	ldr	r0, [pc, #4]	; (8006b1c <__sfp_lock_acquire+0x8>)
 8006b16:	f000 ba22 	b.w	8006f5e <__retarget_lock_acquire_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	20000575 	.word	0x20000575

08006b20 <__sfp_lock_release>:
 8006b20:	4801      	ldr	r0, [pc, #4]	; (8006b28 <__sfp_lock_release+0x8>)
 8006b22:	f000 ba1d 	b.w	8006f60 <__retarget_lock_release_recursive>
 8006b26:	bf00      	nop
 8006b28:	20000575 	.word	0x20000575

08006b2c <__sinit>:
 8006b2c:	b510      	push	{r4, lr}
 8006b2e:	4604      	mov	r4, r0
 8006b30:	f7ff fff0 	bl	8006b14 <__sfp_lock_acquire>
 8006b34:	6a23      	ldr	r3, [r4, #32]
 8006b36:	b11b      	cbz	r3, 8006b40 <__sinit+0x14>
 8006b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b3c:	f7ff bff0 	b.w	8006b20 <__sfp_lock_release>
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <__sinit+0x28>)
 8006b42:	6223      	str	r3, [r4, #32]
 8006b44:	4b04      	ldr	r3, [pc, #16]	; (8006b58 <__sinit+0x2c>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f5      	bne.n	8006b38 <__sinit+0xc>
 8006b4c:	f7ff ffc4 	bl	8006ad8 <global_stdio_init.part.0>
 8006b50:	e7f2      	b.n	8006b38 <__sinit+0xc>
 8006b52:	bf00      	nop
 8006b54:	08006a99 	.word	0x08006a99
 8006b58:	2000056c 	.word	0x2000056c

08006b5c <_fwalk_sglue>:
 8006b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b60:	4607      	mov	r7, r0
 8006b62:	4688      	mov	r8, r1
 8006b64:	4614      	mov	r4, r2
 8006b66:	2600      	movs	r6, #0
 8006b68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b6c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b70:	d505      	bpl.n	8006b7e <_fwalk_sglue+0x22>
 8006b72:	6824      	ldr	r4, [r4, #0]
 8006b74:	2c00      	cmp	r4, #0
 8006b76:	d1f7      	bne.n	8006b68 <_fwalk_sglue+0xc>
 8006b78:	4630      	mov	r0, r6
 8006b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b7e:	89ab      	ldrh	r3, [r5, #12]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d907      	bls.n	8006b94 <_fwalk_sglue+0x38>
 8006b84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	d003      	beq.n	8006b94 <_fwalk_sglue+0x38>
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	4638      	mov	r0, r7
 8006b90:	47c0      	blx	r8
 8006b92:	4306      	orrs	r6, r0
 8006b94:	3568      	adds	r5, #104	; 0x68
 8006b96:	e7e9      	b.n	8006b6c <_fwalk_sglue+0x10>

08006b98 <iprintf>:
 8006b98:	b40f      	push	{r0, r1, r2, r3}
 8006b9a:	b507      	push	{r0, r1, r2, lr}
 8006b9c:	4906      	ldr	r1, [pc, #24]	; (8006bb8 <iprintf+0x20>)
 8006b9e:	ab04      	add	r3, sp, #16
 8006ba0:	6808      	ldr	r0, [r1, #0]
 8006ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba6:	6881      	ldr	r1, [r0, #8]
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	f001 fe55 	bl	8008858 <_vfiprintf_r>
 8006bae:	b003      	add	sp, #12
 8006bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bb4:	b004      	add	sp, #16
 8006bb6:	4770      	bx	lr
 8006bb8:	20000064 	.word	0x20000064

08006bbc <_puts_r>:
 8006bbc:	6a03      	ldr	r3, [r0, #32]
 8006bbe:	b570      	push	{r4, r5, r6, lr}
 8006bc0:	6884      	ldr	r4, [r0, #8]
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	460e      	mov	r6, r1
 8006bc6:	b90b      	cbnz	r3, 8006bcc <_puts_r+0x10>
 8006bc8:	f7ff ffb0 	bl	8006b2c <__sinit>
 8006bcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bce:	07db      	lsls	r3, r3, #31
 8006bd0:	d405      	bmi.n	8006bde <_puts_r+0x22>
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	0598      	lsls	r0, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_puts_r+0x22>
 8006bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bda:	f000 f9c0 	bl	8006f5e <__retarget_lock_acquire_recursive>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	0719      	lsls	r1, r3, #28
 8006be2:	d513      	bpl.n	8006c0c <_puts_r+0x50>
 8006be4:	6923      	ldr	r3, [r4, #16]
 8006be6:	b18b      	cbz	r3, 8006c0c <_puts_r+0x50>
 8006be8:	3e01      	subs	r6, #1
 8006bea:	68a3      	ldr	r3, [r4, #8]
 8006bec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	60a3      	str	r3, [r4, #8]
 8006bf4:	b9e9      	cbnz	r1, 8006c32 <_puts_r+0x76>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	da2e      	bge.n	8006c58 <_puts_r+0x9c>
 8006bfa:	4622      	mov	r2, r4
 8006bfc:	210a      	movs	r1, #10
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f000 f89b 	bl	8006d3a <__swbuf_r>
 8006c04:	3001      	adds	r0, #1
 8006c06:	d007      	beq.n	8006c18 <_puts_r+0x5c>
 8006c08:	250a      	movs	r5, #10
 8006c0a:	e007      	b.n	8006c1c <_puts_r+0x60>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 f8d0 	bl	8006db4 <__swsetup_r>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d0e7      	beq.n	8006be8 <_puts_r+0x2c>
 8006c18:	f04f 35ff 	mov.w	r5, #4294967295
 8006c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c1e:	07da      	lsls	r2, r3, #31
 8006c20:	d405      	bmi.n	8006c2e <_puts_r+0x72>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	059b      	lsls	r3, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_puts_r+0x72>
 8006c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c2a:	f000 f999 	bl	8006f60 <__retarget_lock_release_recursive>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da04      	bge.n	8006c40 <_puts_r+0x84>
 8006c36:	69a2      	ldr	r2, [r4, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	dc06      	bgt.n	8006c4a <_puts_r+0x8e>
 8006c3c:	290a      	cmp	r1, #10
 8006c3e:	d004      	beq.n	8006c4a <_puts_r+0x8e>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	7019      	strb	r1, [r3, #0]
 8006c48:	e7cf      	b.n	8006bea <_puts_r+0x2e>
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f000 f874 	bl	8006d3a <__swbuf_r>
 8006c52:	3001      	adds	r0, #1
 8006c54:	d1c9      	bne.n	8006bea <_puts_r+0x2e>
 8006c56:	e7df      	b.n	8006c18 <_puts_r+0x5c>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	250a      	movs	r5, #10
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	6022      	str	r2, [r4, #0]
 8006c60:	701d      	strb	r5, [r3, #0]
 8006c62:	e7db      	b.n	8006c1c <_puts_r+0x60>

08006c64 <puts>:
 8006c64:	4b02      	ldr	r3, [pc, #8]	; (8006c70 <puts+0xc>)
 8006c66:	4601      	mov	r1, r0
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	f7ff bfa7 	b.w	8006bbc <_puts_r>
 8006c6e:	bf00      	nop
 8006c70:	20000064 	.word	0x20000064

08006c74 <siprintf>:
 8006c74:	b40e      	push	{r1, r2, r3}
 8006c76:	b500      	push	{lr}
 8006c78:	b09c      	sub	sp, #112	; 0x70
 8006c7a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c7c:	9002      	str	r0, [sp, #8]
 8006c7e:	9006      	str	r0, [sp, #24]
 8006c80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c84:	4809      	ldr	r0, [pc, #36]	; (8006cac <siprintf+0x38>)
 8006c86:	9107      	str	r1, [sp, #28]
 8006c88:	9104      	str	r1, [sp, #16]
 8006c8a:	4909      	ldr	r1, [pc, #36]	; (8006cb0 <siprintf+0x3c>)
 8006c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c90:	9105      	str	r1, [sp, #20]
 8006c92:	6800      	ldr	r0, [r0, #0]
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	a902      	add	r1, sp, #8
 8006c98:	f001 fcb6 	bl	8008608 <_svfiprintf_r>
 8006c9c:	9b02      	ldr	r3, [sp, #8]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	b01c      	add	sp, #112	; 0x70
 8006ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca8:	b003      	add	sp, #12
 8006caa:	4770      	bx	lr
 8006cac:	20000064 	.word	0x20000064
 8006cb0:	ffff0208 	.word	0xffff0208

08006cb4 <__sread>:
 8006cb4:	b510      	push	{r4, lr}
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbc:	f000 f900 	bl	8006ec0 <_read_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	bfab      	itete	ge
 8006cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006cc8:	181b      	addge	r3, r3, r0
 8006cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cce:	bfac      	ite	ge
 8006cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cd2:	81a3      	strhlt	r3, [r4, #12]
 8006cd4:	bd10      	pop	{r4, pc}

08006cd6 <__swrite>:
 8006cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cda:	461f      	mov	r7, r3
 8006cdc:	898b      	ldrh	r3, [r1, #12]
 8006cde:	05db      	lsls	r3, r3, #23
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	4616      	mov	r6, r2
 8006ce6:	d505      	bpl.n	8006cf4 <__swrite+0x1e>
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	2302      	movs	r3, #2
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f000 f8d4 	bl	8006e9c <_lseek_r>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	4632      	mov	r2, r6
 8006d02:	463b      	mov	r3, r7
 8006d04:	4628      	mov	r0, r5
 8006d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	f000 b8eb 	b.w	8006ee4 <_write_r>

08006d0e <__sseek>:
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	460c      	mov	r4, r1
 8006d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d16:	f000 f8c1 	bl	8006e9c <_lseek_r>
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	bf15      	itete	ne
 8006d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d2a:	81a3      	strheq	r3, [r4, #12]
 8006d2c:	bf18      	it	ne
 8006d2e:	81a3      	strhne	r3, [r4, #12]
 8006d30:	bd10      	pop	{r4, pc}

08006d32 <__sclose>:
 8006d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d36:	f000 b8a1 	b.w	8006e7c <_close_r>

08006d3a <__swbuf_r>:
 8006d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3c:	460e      	mov	r6, r1
 8006d3e:	4614      	mov	r4, r2
 8006d40:	4605      	mov	r5, r0
 8006d42:	b118      	cbz	r0, 8006d4c <__swbuf_r+0x12>
 8006d44:	6a03      	ldr	r3, [r0, #32]
 8006d46:	b90b      	cbnz	r3, 8006d4c <__swbuf_r+0x12>
 8006d48:	f7ff fef0 	bl	8006b2c <__sinit>
 8006d4c:	69a3      	ldr	r3, [r4, #24]
 8006d4e:	60a3      	str	r3, [r4, #8]
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	071a      	lsls	r2, r3, #28
 8006d54:	d525      	bpl.n	8006da2 <__swbuf_r+0x68>
 8006d56:	6923      	ldr	r3, [r4, #16]
 8006d58:	b31b      	cbz	r3, 8006da2 <__swbuf_r+0x68>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	6922      	ldr	r2, [r4, #16]
 8006d5e:	1a98      	subs	r0, r3, r2
 8006d60:	6963      	ldr	r3, [r4, #20]
 8006d62:	b2f6      	uxtb	r6, r6
 8006d64:	4283      	cmp	r3, r0
 8006d66:	4637      	mov	r7, r6
 8006d68:	dc04      	bgt.n	8006d74 <__swbuf_r+0x3a>
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f001 ff13 	bl	8008b98 <_fflush_r>
 8006d72:	b9e0      	cbnz	r0, 8006dae <__swbuf_r+0x74>
 8006d74:	68a3      	ldr	r3, [r4, #8]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	60a3      	str	r3, [r4, #8]
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	6022      	str	r2, [r4, #0]
 8006d80:	701e      	strb	r6, [r3, #0]
 8006d82:	6962      	ldr	r2, [r4, #20]
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d004      	beq.n	8006d94 <__swbuf_r+0x5a>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	07db      	lsls	r3, r3, #31
 8006d8e:	d506      	bpl.n	8006d9e <__swbuf_r+0x64>
 8006d90:	2e0a      	cmp	r6, #10
 8006d92:	d104      	bne.n	8006d9e <__swbuf_r+0x64>
 8006d94:	4621      	mov	r1, r4
 8006d96:	4628      	mov	r0, r5
 8006d98:	f001 fefe 	bl	8008b98 <_fflush_r>
 8006d9c:	b938      	cbnz	r0, 8006dae <__swbuf_r+0x74>
 8006d9e:	4638      	mov	r0, r7
 8006da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da2:	4621      	mov	r1, r4
 8006da4:	4628      	mov	r0, r5
 8006da6:	f000 f805 	bl	8006db4 <__swsetup_r>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d0d5      	beq.n	8006d5a <__swbuf_r+0x20>
 8006dae:	f04f 37ff 	mov.w	r7, #4294967295
 8006db2:	e7f4      	b.n	8006d9e <__swbuf_r+0x64>

08006db4 <__swsetup_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4b2a      	ldr	r3, [pc, #168]	; (8006e60 <__swsetup_r+0xac>)
 8006db8:	4605      	mov	r5, r0
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	b118      	cbz	r0, 8006dc8 <__swsetup_r+0x14>
 8006dc0:	6a03      	ldr	r3, [r0, #32]
 8006dc2:	b90b      	cbnz	r3, 8006dc8 <__swsetup_r+0x14>
 8006dc4:	f7ff feb2 	bl	8006b2c <__sinit>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dce:	0718      	lsls	r0, r3, #28
 8006dd0:	d422      	bmi.n	8006e18 <__swsetup_r+0x64>
 8006dd2:	06d9      	lsls	r1, r3, #27
 8006dd4:	d407      	bmi.n	8006de6 <__swsetup_r+0x32>
 8006dd6:	2309      	movs	r3, #9
 8006dd8:	602b      	str	r3, [r5, #0]
 8006dda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006dde:	81a3      	strh	r3, [r4, #12]
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	e034      	b.n	8006e50 <__swsetup_r+0x9c>
 8006de6:	0758      	lsls	r0, r3, #29
 8006de8:	d512      	bpl.n	8006e10 <__swsetup_r+0x5c>
 8006dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dec:	b141      	cbz	r1, 8006e00 <__swsetup_r+0x4c>
 8006dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006df2:	4299      	cmp	r1, r3
 8006df4:	d002      	beq.n	8006dfc <__swsetup_r+0x48>
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 ff30 	bl	8007c5c <_free_r>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	6363      	str	r3, [r4, #52]	; 0x34
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e06:	81a3      	strh	r3, [r4, #12]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	6063      	str	r3, [r4, #4]
 8006e0c:	6923      	ldr	r3, [r4, #16]
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	f043 0308 	orr.w	r3, r3, #8
 8006e16:	81a3      	strh	r3, [r4, #12]
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	b94b      	cbnz	r3, 8006e30 <__swsetup_r+0x7c>
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e26:	d003      	beq.n	8006e30 <__swsetup_r+0x7c>
 8006e28:	4621      	mov	r1, r4
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f001 ff02 	bl	8008c34 <__smakebuf_r>
 8006e30:	89a0      	ldrh	r0, [r4, #12]
 8006e32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e36:	f010 0301 	ands.w	r3, r0, #1
 8006e3a:	d00a      	beq.n	8006e52 <__swsetup_r+0x9e>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60a3      	str	r3, [r4, #8]
 8006e40:	6963      	ldr	r3, [r4, #20]
 8006e42:	425b      	negs	r3, r3
 8006e44:	61a3      	str	r3, [r4, #24]
 8006e46:	6923      	ldr	r3, [r4, #16]
 8006e48:	b943      	cbnz	r3, 8006e5c <__swsetup_r+0xa8>
 8006e4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e4e:	d1c4      	bne.n	8006dda <__swsetup_r+0x26>
 8006e50:	bd38      	pop	{r3, r4, r5, pc}
 8006e52:	0781      	lsls	r1, r0, #30
 8006e54:	bf58      	it	pl
 8006e56:	6963      	ldrpl	r3, [r4, #20]
 8006e58:	60a3      	str	r3, [r4, #8]
 8006e5a:	e7f4      	b.n	8006e46 <__swsetup_r+0x92>
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e7f7      	b.n	8006e50 <__swsetup_r+0x9c>
 8006e60:	20000064 	.word	0x20000064

08006e64 <memset>:
 8006e64:	4402      	add	r2, r0
 8006e66:	4603      	mov	r3, r0
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d100      	bne.n	8006e6e <memset+0xa>
 8006e6c:	4770      	bx	lr
 8006e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e72:	e7f9      	b.n	8006e68 <memset+0x4>

08006e74 <_localeconv_r>:
 8006e74:	4800      	ldr	r0, [pc, #0]	; (8006e78 <_localeconv_r+0x4>)
 8006e76:	4770      	bx	lr
 8006e78:	20000158 	.word	0x20000158

08006e7c <_close_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d06      	ldr	r5, [pc, #24]	; (8006e98 <_close_r+0x1c>)
 8006e80:	2300      	movs	r3, #0
 8006e82:	4604      	mov	r4, r0
 8006e84:	4608      	mov	r0, r1
 8006e86:	602b      	str	r3, [r5, #0]
 8006e88:	f7fb fbed 	bl	8002666 <_close>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_close_r+0x1a>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_close_r+0x1a>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	20000570 	.word	0x20000570

08006e9c <_lseek_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d07      	ldr	r5, [pc, #28]	; (8006ebc <_lseek_r+0x20>)
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	4608      	mov	r0, r1
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	602a      	str	r2, [r5, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f7fb fc02 	bl	80026b4 <_lseek>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_lseek_r+0x1e>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_lseek_r+0x1e>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	20000570 	.word	0x20000570

08006ec0 <_read_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d07      	ldr	r5, [pc, #28]	; (8006ee0 <_read_r+0x20>)
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	4608      	mov	r0, r1
 8006ec8:	4611      	mov	r1, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	602a      	str	r2, [r5, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f7fb fb90 	bl	80025f4 <_read>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d102      	bne.n	8006ede <_read_r+0x1e>
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	b103      	cbz	r3, 8006ede <_read_r+0x1e>
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	20000570 	.word	0x20000570

08006ee4 <_write_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d07      	ldr	r5, [pc, #28]	; (8006f04 <_write_r+0x20>)
 8006ee8:	4604      	mov	r4, r0
 8006eea:	4608      	mov	r0, r1
 8006eec:	4611      	mov	r1, r2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	602a      	str	r2, [r5, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f7fb fb9b 	bl	800262e <_write>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_write_r+0x1e>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_write_r+0x1e>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	20000570 	.word	0x20000570

08006f08 <__errno>:
 8006f08:	4b01      	ldr	r3, [pc, #4]	; (8006f10 <__errno+0x8>)
 8006f0a:	6818      	ldr	r0, [r3, #0]
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20000064 	.word	0x20000064

08006f14 <__libc_init_array>:
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	4d0d      	ldr	r5, [pc, #52]	; (8006f4c <__libc_init_array+0x38>)
 8006f18:	4c0d      	ldr	r4, [pc, #52]	; (8006f50 <__libc_init_array+0x3c>)
 8006f1a:	1b64      	subs	r4, r4, r5
 8006f1c:	10a4      	asrs	r4, r4, #2
 8006f1e:	2600      	movs	r6, #0
 8006f20:	42a6      	cmp	r6, r4
 8006f22:	d109      	bne.n	8006f38 <__libc_init_array+0x24>
 8006f24:	4d0b      	ldr	r5, [pc, #44]	; (8006f54 <__libc_init_array+0x40>)
 8006f26:	4c0c      	ldr	r4, [pc, #48]	; (8006f58 <__libc_init_array+0x44>)
 8006f28:	f002 ff3a 	bl	8009da0 <_init>
 8006f2c:	1b64      	subs	r4, r4, r5
 8006f2e:	10a4      	asrs	r4, r4, #2
 8006f30:	2600      	movs	r6, #0
 8006f32:	42a6      	cmp	r6, r4
 8006f34:	d105      	bne.n	8006f42 <__libc_init_array+0x2e>
 8006f36:	bd70      	pop	{r4, r5, r6, pc}
 8006f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f3c:	4798      	blx	r3
 8006f3e:	3601      	adds	r6, #1
 8006f40:	e7ee      	b.n	8006f20 <__libc_init_array+0xc>
 8006f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f46:	4798      	blx	r3
 8006f48:	3601      	adds	r6, #1
 8006f4a:	e7f2      	b.n	8006f32 <__libc_init_array+0x1e>
 8006f4c:	0800a2f8 	.word	0x0800a2f8
 8006f50:	0800a2f8 	.word	0x0800a2f8
 8006f54:	0800a2f8 	.word	0x0800a2f8
 8006f58:	0800a2fc 	.word	0x0800a2fc

08006f5c <__retarget_lock_init_recursive>:
 8006f5c:	4770      	bx	lr

08006f5e <__retarget_lock_acquire_recursive>:
 8006f5e:	4770      	bx	lr

08006f60 <__retarget_lock_release_recursive>:
 8006f60:	4770      	bx	lr

08006f62 <quorem>:
 8006f62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f66:	6903      	ldr	r3, [r0, #16]
 8006f68:	690c      	ldr	r4, [r1, #16]
 8006f6a:	42a3      	cmp	r3, r4
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	db7e      	blt.n	800706e <quorem+0x10c>
 8006f70:	3c01      	subs	r4, #1
 8006f72:	f101 0814 	add.w	r8, r1, #20
 8006f76:	f100 0514 	add.w	r5, r0, #20
 8006f7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f94:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f98:	d331      	bcc.n	8006ffe <quorem+0x9c>
 8006f9a:	f04f 0e00 	mov.w	lr, #0
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	46ac      	mov	ip, r5
 8006fa2:	46f2      	mov	sl, lr
 8006fa4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fa8:	b293      	uxth	r3, r2
 8006faa:	fb06 e303 	mla	r3, r6, r3, lr
 8006fae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fb2:	0c1a      	lsrs	r2, r3, #16
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	ebaa 0303 	sub.w	r3, sl, r3
 8006fba:	f8dc a000 	ldr.w	sl, [ip]
 8006fbe:	fa13 f38a 	uxtah	r3, r3, sl
 8006fc2:	fb06 220e 	mla	r2, r6, lr, r2
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	9b00      	ldr	r3, [sp, #0]
 8006fca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006fce:	b292      	uxth	r2, r2
 8006fd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006fd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fd8:	f8bd 3000 	ldrh.w	r3, [sp]
 8006fdc:	4581      	cmp	r9, r0
 8006fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fe2:	f84c 3b04 	str.w	r3, [ip], #4
 8006fe6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006fea:	d2db      	bcs.n	8006fa4 <quorem+0x42>
 8006fec:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ff0:	b92b      	cbnz	r3, 8006ffe <quorem+0x9c>
 8006ff2:	9b01      	ldr	r3, [sp, #4]
 8006ff4:	3b04      	subs	r3, #4
 8006ff6:	429d      	cmp	r5, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	d32c      	bcc.n	8007056 <quorem+0xf4>
 8006ffc:	613c      	str	r4, [r7, #16]
 8006ffe:	4638      	mov	r0, r7
 8007000:	f001 f9a8 	bl	8008354 <__mcmp>
 8007004:	2800      	cmp	r0, #0
 8007006:	db22      	blt.n	800704e <quorem+0xec>
 8007008:	3601      	adds	r6, #1
 800700a:	4629      	mov	r1, r5
 800700c:	2000      	movs	r0, #0
 800700e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007012:	f8d1 c000 	ldr.w	ip, [r1]
 8007016:	b293      	uxth	r3, r2
 8007018:	1ac3      	subs	r3, r0, r3
 800701a:	0c12      	lsrs	r2, r2, #16
 800701c:	fa13 f38c 	uxtah	r3, r3, ip
 8007020:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007024:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007028:	b29b      	uxth	r3, r3
 800702a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800702e:	45c1      	cmp	r9, r8
 8007030:	f841 3b04 	str.w	r3, [r1], #4
 8007034:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007038:	d2e9      	bcs.n	800700e <quorem+0xac>
 800703a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800703e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007042:	b922      	cbnz	r2, 800704e <quorem+0xec>
 8007044:	3b04      	subs	r3, #4
 8007046:	429d      	cmp	r5, r3
 8007048:	461a      	mov	r2, r3
 800704a:	d30a      	bcc.n	8007062 <quorem+0x100>
 800704c:	613c      	str	r4, [r7, #16]
 800704e:	4630      	mov	r0, r6
 8007050:	b003      	add	sp, #12
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	3b04      	subs	r3, #4
 800705a:	2a00      	cmp	r2, #0
 800705c:	d1ce      	bne.n	8006ffc <quorem+0x9a>
 800705e:	3c01      	subs	r4, #1
 8007060:	e7c9      	b.n	8006ff6 <quorem+0x94>
 8007062:	6812      	ldr	r2, [r2, #0]
 8007064:	3b04      	subs	r3, #4
 8007066:	2a00      	cmp	r2, #0
 8007068:	d1f0      	bne.n	800704c <quorem+0xea>
 800706a:	3c01      	subs	r4, #1
 800706c:	e7eb      	b.n	8007046 <quorem+0xe4>
 800706e:	2000      	movs	r0, #0
 8007070:	e7ee      	b.n	8007050 <quorem+0xee>
 8007072:	0000      	movs	r0, r0
 8007074:	0000      	movs	r0, r0
	...

08007078 <_dtoa_r>:
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	ed2d 8b04 	vpush	{d8-d9}
 8007080:	69c5      	ldr	r5, [r0, #28]
 8007082:	b093      	sub	sp, #76	; 0x4c
 8007084:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007088:	ec57 6b10 	vmov	r6, r7, d0
 800708c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007090:	9107      	str	r1, [sp, #28]
 8007092:	4604      	mov	r4, r0
 8007094:	920a      	str	r2, [sp, #40]	; 0x28
 8007096:	930d      	str	r3, [sp, #52]	; 0x34
 8007098:	b975      	cbnz	r5, 80070b8 <_dtoa_r+0x40>
 800709a:	2010      	movs	r0, #16
 800709c:	f000 fe2a 	bl	8007cf4 <malloc>
 80070a0:	4602      	mov	r2, r0
 80070a2:	61e0      	str	r0, [r4, #28]
 80070a4:	b920      	cbnz	r0, 80070b0 <_dtoa_r+0x38>
 80070a6:	4bae      	ldr	r3, [pc, #696]	; (8007360 <_dtoa_r+0x2e8>)
 80070a8:	21ef      	movs	r1, #239	; 0xef
 80070aa:	48ae      	ldr	r0, [pc, #696]	; (8007364 <_dtoa_r+0x2ec>)
 80070ac:	f001 fe58 	bl	8008d60 <__assert_func>
 80070b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070b4:	6005      	str	r5, [r0, #0]
 80070b6:	60c5      	str	r5, [r0, #12]
 80070b8:	69e3      	ldr	r3, [r4, #28]
 80070ba:	6819      	ldr	r1, [r3, #0]
 80070bc:	b151      	cbz	r1, 80070d4 <_dtoa_r+0x5c>
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	604a      	str	r2, [r1, #4]
 80070c2:	2301      	movs	r3, #1
 80070c4:	4093      	lsls	r3, r2
 80070c6:	608b      	str	r3, [r1, #8]
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 ff07 	bl	8007edc <_Bfree>
 80070ce:	69e3      	ldr	r3, [r4, #28]
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	1e3b      	subs	r3, r7, #0
 80070d6:	bfbb      	ittet	lt
 80070d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80070dc:	9303      	strlt	r3, [sp, #12]
 80070de:	2300      	movge	r3, #0
 80070e0:	2201      	movlt	r2, #1
 80070e2:	bfac      	ite	ge
 80070e4:	f8c8 3000 	strge.w	r3, [r8]
 80070e8:	f8c8 2000 	strlt.w	r2, [r8]
 80070ec:	4b9e      	ldr	r3, [pc, #632]	; (8007368 <_dtoa_r+0x2f0>)
 80070ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80070f2:	ea33 0308 	bics.w	r3, r3, r8
 80070f6:	d11b      	bne.n	8007130 <_dtoa_r+0xb8>
 80070f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007104:	4333      	orrs	r3, r6
 8007106:	f000 8593 	beq.w	8007c30 <_dtoa_r+0xbb8>
 800710a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800710c:	b963      	cbnz	r3, 8007128 <_dtoa_r+0xb0>
 800710e:	4b97      	ldr	r3, [pc, #604]	; (800736c <_dtoa_r+0x2f4>)
 8007110:	e027      	b.n	8007162 <_dtoa_r+0xea>
 8007112:	4b97      	ldr	r3, [pc, #604]	; (8007370 <_dtoa_r+0x2f8>)
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	3308      	adds	r3, #8
 8007118:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	9800      	ldr	r0, [sp, #0]
 800711e:	b013      	add	sp, #76	; 0x4c
 8007120:	ecbd 8b04 	vpop	{d8-d9}
 8007124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007128:	4b90      	ldr	r3, [pc, #576]	; (800736c <_dtoa_r+0x2f4>)
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	3303      	adds	r3, #3
 800712e:	e7f3      	b.n	8007118 <_dtoa_r+0xa0>
 8007130:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007134:	2200      	movs	r2, #0
 8007136:	ec51 0b17 	vmov	r0, r1, d7
 800713a:	eeb0 8a47 	vmov.f32	s16, s14
 800713e:	eef0 8a67 	vmov.f32	s17, s15
 8007142:	2300      	movs	r3, #0
 8007144:	f7f9 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007148:	4681      	mov	r9, r0
 800714a:	b160      	cbz	r0, 8007166 <_dtoa_r+0xee>
 800714c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800714e:	2301      	movs	r3, #1
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 8568 	beq.w	8007c2a <_dtoa_r+0xbb2>
 800715a:	4b86      	ldr	r3, [pc, #536]	; (8007374 <_dtoa_r+0x2fc>)
 800715c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	3b01      	subs	r3, #1
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	e7da      	b.n	800711c <_dtoa_r+0xa4>
 8007166:	aa10      	add	r2, sp, #64	; 0x40
 8007168:	a911      	add	r1, sp, #68	; 0x44
 800716a:	4620      	mov	r0, r4
 800716c:	eeb0 0a48 	vmov.f32	s0, s16
 8007170:	eef0 0a68 	vmov.f32	s1, s17
 8007174:	f001 f994 	bl	80084a0 <__d2b>
 8007178:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800717c:	4682      	mov	sl, r0
 800717e:	2d00      	cmp	r5, #0
 8007180:	d07f      	beq.n	8007282 <_dtoa_r+0x20a>
 8007182:	ee18 3a90 	vmov	r3, s17
 8007186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800718a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800718e:	ec51 0b18 	vmov	r0, r1, d8
 8007192:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007196:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800719a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800719e:	4619      	mov	r1, r3
 80071a0:	2200      	movs	r2, #0
 80071a2:	4b75      	ldr	r3, [pc, #468]	; (8007378 <_dtoa_r+0x300>)
 80071a4:	f7f9 f870 	bl	8000288 <__aeabi_dsub>
 80071a8:	a367      	add	r3, pc, #412	; (adr r3, 8007348 <_dtoa_r+0x2d0>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f7f9 fa23 	bl	80005f8 <__aeabi_dmul>
 80071b2:	a367      	add	r3, pc, #412	; (adr r3, 8007350 <_dtoa_r+0x2d8>)
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	f7f9 f868 	bl	800028c <__adddf3>
 80071bc:	4606      	mov	r6, r0
 80071be:	4628      	mov	r0, r5
 80071c0:	460f      	mov	r7, r1
 80071c2:	f7f9 f9af 	bl	8000524 <__aeabi_i2d>
 80071c6:	a364      	add	r3, pc, #400	; (adr r3, 8007358 <_dtoa_r+0x2e0>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f7f9 fa14 	bl	80005f8 <__aeabi_dmul>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4630      	mov	r0, r6
 80071d6:	4639      	mov	r1, r7
 80071d8:	f7f9 f858 	bl	800028c <__adddf3>
 80071dc:	4606      	mov	r6, r0
 80071de:	460f      	mov	r7, r1
 80071e0:	f7f9 fcba 	bl	8000b58 <__aeabi_d2iz>
 80071e4:	2200      	movs	r2, #0
 80071e6:	4683      	mov	fp, r0
 80071e8:	2300      	movs	r3, #0
 80071ea:	4630      	mov	r0, r6
 80071ec:	4639      	mov	r1, r7
 80071ee:	f7f9 fc75 	bl	8000adc <__aeabi_dcmplt>
 80071f2:	b148      	cbz	r0, 8007208 <_dtoa_r+0x190>
 80071f4:	4658      	mov	r0, fp
 80071f6:	f7f9 f995 	bl	8000524 <__aeabi_i2d>
 80071fa:	4632      	mov	r2, r6
 80071fc:	463b      	mov	r3, r7
 80071fe:	f7f9 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 8007202:	b908      	cbnz	r0, 8007208 <_dtoa_r+0x190>
 8007204:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007208:	f1bb 0f16 	cmp.w	fp, #22
 800720c:	d857      	bhi.n	80072be <_dtoa_r+0x246>
 800720e:	4b5b      	ldr	r3, [pc, #364]	; (800737c <_dtoa_r+0x304>)
 8007210:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	ec51 0b18 	vmov	r0, r1, d8
 800721c:	f7f9 fc5e 	bl	8000adc <__aeabi_dcmplt>
 8007220:	2800      	cmp	r0, #0
 8007222:	d04e      	beq.n	80072c2 <_dtoa_r+0x24a>
 8007224:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007228:	2300      	movs	r3, #0
 800722a:	930c      	str	r3, [sp, #48]	; 0x30
 800722c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800722e:	1b5b      	subs	r3, r3, r5
 8007230:	1e5a      	subs	r2, r3, #1
 8007232:	bf45      	ittet	mi
 8007234:	f1c3 0301 	rsbmi	r3, r3, #1
 8007238:	9305      	strmi	r3, [sp, #20]
 800723a:	2300      	movpl	r3, #0
 800723c:	2300      	movmi	r3, #0
 800723e:	9206      	str	r2, [sp, #24]
 8007240:	bf54      	ite	pl
 8007242:	9305      	strpl	r3, [sp, #20]
 8007244:	9306      	strmi	r3, [sp, #24]
 8007246:	f1bb 0f00 	cmp.w	fp, #0
 800724a:	db3c      	blt.n	80072c6 <_dtoa_r+0x24e>
 800724c:	9b06      	ldr	r3, [sp, #24]
 800724e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007252:	445b      	add	r3, fp
 8007254:	9306      	str	r3, [sp, #24]
 8007256:	2300      	movs	r3, #0
 8007258:	9308      	str	r3, [sp, #32]
 800725a:	9b07      	ldr	r3, [sp, #28]
 800725c:	2b09      	cmp	r3, #9
 800725e:	d868      	bhi.n	8007332 <_dtoa_r+0x2ba>
 8007260:	2b05      	cmp	r3, #5
 8007262:	bfc4      	itt	gt
 8007264:	3b04      	subgt	r3, #4
 8007266:	9307      	strgt	r3, [sp, #28]
 8007268:	9b07      	ldr	r3, [sp, #28]
 800726a:	f1a3 0302 	sub.w	r3, r3, #2
 800726e:	bfcc      	ite	gt
 8007270:	2500      	movgt	r5, #0
 8007272:	2501      	movle	r5, #1
 8007274:	2b03      	cmp	r3, #3
 8007276:	f200 8085 	bhi.w	8007384 <_dtoa_r+0x30c>
 800727a:	e8df f003 	tbb	[pc, r3]
 800727e:	3b2e      	.short	0x3b2e
 8007280:	5839      	.short	0x5839
 8007282:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007286:	441d      	add	r5, r3
 8007288:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800728c:	2b20      	cmp	r3, #32
 800728e:	bfc1      	itttt	gt
 8007290:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007294:	fa08 f803 	lslgt.w	r8, r8, r3
 8007298:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800729c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80072a0:	bfd6      	itet	le
 80072a2:	f1c3 0320 	rsble	r3, r3, #32
 80072a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80072aa:	fa06 f003 	lslle.w	r0, r6, r3
 80072ae:	f7f9 f929 	bl	8000504 <__aeabi_ui2d>
 80072b2:	2201      	movs	r2, #1
 80072b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80072b8:	3d01      	subs	r5, #1
 80072ba:	920e      	str	r2, [sp, #56]	; 0x38
 80072bc:	e76f      	b.n	800719e <_dtoa_r+0x126>
 80072be:	2301      	movs	r3, #1
 80072c0:	e7b3      	b.n	800722a <_dtoa_r+0x1b2>
 80072c2:	900c      	str	r0, [sp, #48]	; 0x30
 80072c4:	e7b2      	b.n	800722c <_dtoa_r+0x1b4>
 80072c6:	9b05      	ldr	r3, [sp, #20]
 80072c8:	eba3 030b 	sub.w	r3, r3, fp
 80072cc:	9305      	str	r3, [sp, #20]
 80072ce:	f1cb 0300 	rsb	r3, fp, #0
 80072d2:	9308      	str	r3, [sp, #32]
 80072d4:	2300      	movs	r3, #0
 80072d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80072d8:	e7bf      	b.n	800725a <_dtoa_r+0x1e2>
 80072da:	2300      	movs	r3, #0
 80072dc:	9309      	str	r3, [sp, #36]	; 0x24
 80072de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dc52      	bgt.n	800738a <_dtoa_r+0x312>
 80072e4:	2301      	movs	r3, #1
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	9304      	str	r3, [sp, #16]
 80072ea:	461a      	mov	r2, r3
 80072ec:	920a      	str	r2, [sp, #40]	; 0x28
 80072ee:	e00b      	b.n	8007308 <_dtoa_r+0x290>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e7f3      	b.n	80072dc <_dtoa_r+0x264>
 80072f4:	2300      	movs	r3, #0
 80072f6:	9309      	str	r3, [sp, #36]	; 0x24
 80072f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fa:	445b      	add	r3, fp
 80072fc:	9301      	str	r3, [sp, #4]
 80072fe:	3301      	adds	r3, #1
 8007300:	2b01      	cmp	r3, #1
 8007302:	9304      	str	r3, [sp, #16]
 8007304:	bfb8      	it	lt
 8007306:	2301      	movlt	r3, #1
 8007308:	69e0      	ldr	r0, [r4, #28]
 800730a:	2100      	movs	r1, #0
 800730c:	2204      	movs	r2, #4
 800730e:	f102 0614 	add.w	r6, r2, #20
 8007312:	429e      	cmp	r6, r3
 8007314:	d93d      	bls.n	8007392 <_dtoa_r+0x31a>
 8007316:	6041      	str	r1, [r0, #4]
 8007318:	4620      	mov	r0, r4
 800731a:	f000 fd9f 	bl	8007e5c <_Balloc>
 800731e:	9000      	str	r0, [sp, #0]
 8007320:	2800      	cmp	r0, #0
 8007322:	d139      	bne.n	8007398 <_dtoa_r+0x320>
 8007324:	4b16      	ldr	r3, [pc, #88]	; (8007380 <_dtoa_r+0x308>)
 8007326:	4602      	mov	r2, r0
 8007328:	f240 11af 	movw	r1, #431	; 0x1af
 800732c:	e6bd      	b.n	80070aa <_dtoa_r+0x32>
 800732e:	2301      	movs	r3, #1
 8007330:	e7e1      	b.n	80072f6 <_dtoa_r+0x27e>
 8007332:	2501      	movs	r5, #1
 8007334:	2300      	movs	r3, #0
 8007336:	9307      	str	r3, [sp, #28]
 8007338:	9509      	str	r5, [sp, #36]	; 0x24
 800733a:	f04f 33ff 	mov.w	r3, #4294967295
 800733e:	9301      	str	r3, [sp, #4]
 8007340:	9304      	str	r3, [sp, #16]
 8007342:	2200      	movs	r2, #0
 8007344:	2312      	movs	r3, #18
 8007346:	e7d1      	b.n	80072ec <_dtoa_r+0x274>
 8007348:	636f4361 	.word	0x636f4361
 800734c:	3fd287a7 	.word	0x3fd287a7
 8007350:	8b60c8b3 	.word	0x8b60c8b3
 8007354:	3fc68a28 	.word	0x3fc68a28
 8007358:	509f79fb 	.word	0x509f79fb
 800735c:	3fd34413 	.word	0x3fd34413
 8007360:	08009f89 	.word	0x08009f89
 8007364:	08009fa0 	.word	0x08009fa0
 8007368:	7ff00000 	.word	0x7ff00000
 800736c:	08009f85 	.word	0x08009f85
 8007370:	08009f7c 	.word	0x08009f7c
 8007374:	08009f59 	.word	0x08009f59
 8007378:	3ff80000 	.word	0x3ff80000
 800737c:	0800a090 	.word	0x0800a090
 8007380:	08009ff8 	.word	0x08009ff8
 8007384:	2301      	movs	r3, #1
 8007386:	9309      	str	r3, [sp, #36]	; 0x24
 8007388:	e7d7      	b.n	800733a <_dtoa_r+0x2c2>
 800738a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	9304      	str	r3, [sp, #16]
 8007390:	e7ba      	b.n	8007308 <_dtoa_r+0x290>
 8007392:	3101      	adds	r1, #1
 8007394:	0052      	lsls	r2, r2, #1
 8007396:	e7ba      	b.n	800730e <_dtoa_r+0x296>
 8007398:	69e3      	ldr	r3, [r4, #28]
 800739a:	9a00      	ldr	r2, [sp, #0]
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	2b0e      	cmp	r3, #14
 80073a2:	f200 80a8 	bhi.w	80074f6 <_dtoa_r+0x47e>
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	f000 80a5 	beq.w	80074f6 <_dtoa_r+0x47e>
 80073ac:	f1bb 0f00 	cmp.w	fp, #0
 80073b0:	dd38      	ble.n	8007424 <_dtoa_r+0x3ac>
 80073b2:	4bc0      	ldr	r3, [pc, #768]	; (80076b4 <_dtoa_r+0x63c>)
 80073b4:	f00b 020f 	and.w	r2, fp, #15
 80073b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80073c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80073c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80073c8:	d019      	beq.n	80073fe <_dtoa_r+0x386>
 80073ca:	4bbb      	ldr	r3, [pc, #748]	; (80076b8 <_dtoa_r+0x640>)
 80073cc:	ec51 0b18 	vmov	r0, r1, d8
 80073d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073d4:	f7f9 fa3a 	bl	800084c <__aeabi_ddiv>
 80073d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073dc:	f008 080f 	and.w	r8, r8, #15
 80073e0:	2503      	movs	r5, #3
 80073e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80076b8 <_dtoa_r+0x640>
 80073e6:	f1b8 0f00 	cmp.w	r8, #0
 80073ea:	d10a      	bne.n	8007402 <_dtoa_r+0x38a>
 80073ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073f0:	4632      	mov	r2, r6
 80073f2:	463b      	mov	r3, r7
 80073f4:	f7f9 fa2a 	bl	800084c <__aeabi_ddiv>
 80073f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073fc:	e02b      	b.n	8007456 <_dtoa_r+0x3de>
 80073fe:	2502      	movs	r5, #2
 8007400:	e7ef      	b.n	80073e2 <_dtoa_r+0x36a>
 8007402:	f018 0f01 	tst.w	r8, #1
 8007406:	d008      	beq.n	800741a <_dtoa_r+0x3a2>
 8007408:	4630      	mov	r0, r6
 800740a:	4639      	mov	r1, r7
 800740c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007410:	f7f9 f8f2 	bl	80005f8 <__aeabi_dmul>
 8007414:	3501      	adds	r5, #1
 8007416:	4606      	mov	r6, r0
 8007418:	460f      	mov	r7, r1
 800741a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800741e:	f109 0908 	add.w	r9, r9, #8
 8007422:	e7e0      	b.n	80073e6 <_dtoa_r+0x36e>
 8007424:	f000 809f 	beq.w	8007566 <_dtoa_r+0x4ee>
 8007428:	f1cb 0600 	rsb	r6, fp, #0
 800742c:	4ba1      	ldr	r3, [pc, #644]	; (80076b4 <_dtoa_r+0x63c>)
 800742e:	4fa2      	ldr	r7, [pc, #648]	; (80076b8 <_dtoa_r+0x640>)
 8007430:	f006 020f 	and.w	r2, r6, #15
 8007434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	ec51 0b18 	vmov	r0, r1, d8
 8007440:	f7f9 f8da 	bl	80005f8 <__aeabi_dmul>
 8007444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007448:	1136      	asrs	r6, r6, #4
 800744a:	2300      	movs	r3, #0
 800744c:	2502      	movs	r5, #2
 800744e:	2e00      	cmp	r6, #0
 8007450:	d17e      	bne.n	8007550 <_dtoa_r+0x4d8>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1d0      	bne.n	80073f8 <_dtoa_r+0x380>
 8007456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007458:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8084 	beq.w	800756a <_dtoa_r+0x4f2>
 8007462:	4b96      	ldr	r3, [pc, #600]	; (80076bc <_dtoa_r+0x644>)
 8007464:	2200      	movs	r2, #0
 8007466:	4640      	mov	r0, r8
 8007468:	4649      	mov	r1, r9
 800746a:	f7f9 fb37 	bl	8000adc <__aeabi_dcmplt>
 800746e:	2800      	cmp	r0, #0
 8007470:	d07b      	beq.n	800756a <_dtoa_r+0x4f2>
 8007472:	9b04      	ldr	r3, [sp, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d078      	beq.n	800756a <_dtoa_r+0x4f2>
 8007478:	9b01      	ldr	r3, [sp, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	dd39      	ble.n	80074f2 <_dtoa_r+0x47a>
 800747e:	4b90      	ldr	r3, [pc, #576]	; (80076c0 <_dtoa_r+0x648>)
 8007480:	2200      	movs	r2, #0
 8007482:	4640      	mov	r0, r8
 8007484:	4649      	mov	r1, r9
 8007486:	f7f9 f8b7 	bl	80005f8 <__aeabi_dmul>
 800748a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800748e:	9e01      	ldr	r6, [sp, #4]
 8007490:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007494:	3501      	adds	r5, #1
 8007496:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800749a:	4628      	mov	r0, r5
 800749c:	f7f9 f842 	bl	8000524 <__aeabi_i2d>
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	f7f9 f8a8 	bl	80005f8 <__aeabi_dmul>
 80074a8:	4b86      	ldr	r3, [pc, #536]	; (80076c4 <_dtoa_r+0x64c>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	f7f8 feee 	bl	800028c <__adddf3>
 80074b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80074b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074b8:	9303      	str	r3, [sp, #12]
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	d158      	bne.n	8007570 <_dtoa_r+0x4f8>
 80074be:	4b82      	ldr	r3, [pc, #520]	; (80076c8 <_dtoa_r+0x650>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f8 fedf 	bl	8000288 <__aeabi_dsub>
 80074ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074ce:	4680      	mov	r8, r0
 80074d0:	4689      	mov	r9, r1
 80074d2:	f7f9 fb21 	bl	8000b18 <__aeabi_dcmpgt>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f040 8296 	bne.w	8007a08 <_dtoa_r+0x990>
 80074dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80074e0:	4640      	mov	r0, r8
 80074e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074e6:	4649      	mov	r1, r9
 80074e8:	f7f9 faf8 	bl	8000adc <__aeabi_dcmplt>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f040 8289 	bne.w	8007a04 <_dtoa_r+0x98c>
 80074f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80074f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f2c0 814e 	blt.w	800779a <_dtoa_r+0x722>
 80074fe:	f1bb 0f0e 	cmp.w	fp, #14
 8007502:	f300 814a 	bgt.w	800779a <_dtoa_r+0x722>
 8007506:	4b6b      	ldr	r3, [pc, #428]	; (80076b4 <_dtoa_r+0x63c>)
 8007508:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800750c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	f280 80dc 	bge.w	80076d0 <_dtoa_r+0x658>
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	f300 80d8 	bgt.w	80076d0 <_dtoa_r+0x658>
 8007520:	f040 826f 	bne.w	8007a02 <_dtoa_r+0x98a>
 8007524:	4b68      	ldr	r3, [pc, #416]	; (80076c8 <_dtoa_r+0x650>)
 8007526:	2200      	movs	r2, #0
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f9 f864 	bl	80005f8 <__aeabi_dmul>
 8007530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007534:	f7f9 fae6 	bl	8000b04 <__aeabi_dcmpge>
 8007538:	9e04      	ldr	r6, [sp, #16]
 800753a:	4637      	mov	r7, r6
 800753c:	2800      	cmp	r0, #0
 800753e:	f040 8245 	bne.w	80079cc <_dtoa_r+0x954>
 8007542:	9d00      	ldr	r5, [sp, #0]
 8007544:	2331      	movs	r3, #49	; 0x31
 8007546:	f805 3b01 	strb.w	r3, [r5], #1
 800754a:	f10b 0b01 	add.w	fp, fp, #1
 800754e:	e241      	b.n	80079d4 <_dtoa_r+0x95c>
 8007550:	07f2      	lsls	r2, r6, #31
 8007552:	d505      	bpl.n	8007560 <_dtoa_r+0x4e8>
 8007554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007558:	f7f9 f84e 	bl	80005f8 <__aeabi_dmul>
 800755c:	3501      	adds	r5, #1
 800755e:	2301      	movs	r3, #1
 8007560:	1076      	asrs	r6, r6, #1
 8007562:	3708      	adds	r7, #8
 8007564:	e773      	b.n	800744e <_dtoa_r+0x3d6>
 8007566:	2502      	movs	r5, #2
 8007568:	e775      	b.n	8007456 <_dtoa_r+0x3de>
 800756a:	9e04      	ldr	r6, [sp, #16]
 800756c:	465f      	mov	r7, fp
 800756e:	e792      	b.n	8007496 <_dtoa_r+0x41e>
 8007570:	9900      	ldr	r1, [sp, #0]
 8007572:	4b50      	ldr	r3, [pc, #320]	; (80076b4 <_dtoa_r+0x63c>)
 8007574:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007578:	4431      	add	r1, r6
 800757a:	9102      	str	r1, [sp, #8]
 800757c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800757e:	eeb0 9a47 	vmov.f32	s18, s14
 8007582:	eef0 9a67 	vmov.f32	s19, s15
 8007586:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800758a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800758e:	2900      	cmp	r1, #0
 8007590:	d044      	beq.n	800761c <_dtoa_r+0x5a4>
 8007592:	494e      	ldr	r1, [pc, #312]	; (80076cc <_dtoa_r+0x654>)
 8007594:	2000      	movs	r0, #0
 8007596:	f7f9 f959 	bl	800084c <__aeabi_ddiv>
 800759a:	ec53 2b19 	vmov	r2, r3, d9
 800759e:	f7f8 fe73 	bl	8000288 <__aeabi_dsub>
 80075a2:	9d00      	ldr	r5, [sp, #0]
 80075a4:	ec41 0b19 	vmov	d9, r0, r1
 80075a8:	4649      	mov	r1, r9
 80075aa:	4640      	mov	r0, r8
 80075ac:	f7f9 fad4 	bl	8000b58 <__aeabi_d2iz>
 80075b0:	4606      	mov	r6, r0
 80075b2:	f7f8 ffb7 	bl	8000524 <__aeabi_i2d>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	4640      	mov	r0, r8
 80075bc:	4649      	mov	r1, r9
 80075be:	f7f8 fe63 	bl	8000288 <__aeabi_dsub>
 80075c2:	3630      	adds	r6, #48	; 0x30
 80075c4:	f805 6b01 	strb.w	r6, [r5], #1
 80075c8:	ec53 2b19 	vmov	r2, r3, d9
 80075cc:	4680      	mov	r8, r0
 80075ce:	4689      	mov	r9, r1
 80075d0:	f7f9 fa84 	bl	8000adc <__aeabi_dcmplt>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d164      	bne.n	80076a2 <_dtoa_r+0x62a>
 80075d8:	4642      	mov	r2, r8
 80075da:	464b      	mov	r3, r9
 80075dc:	4937      	ldr	r1, [pc, #220]	; (80076bc <_dtoa_r+0x644>)
 80075de:	2000      	movs	r0, #0
 80075e0:	f7f8 fe52 	bl	8000288 <__aeabi_dsub>
 80075e4:	ec53 2b19 	vmov	r2, r3, d9
 80075e8:	f7f9 fa78 	bl	8000adc <__aeabi_dcmplt>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	f040 80b6 	bne.w	800775e <_dtoa_r+0x6e6>
 80075f2:	9b02      	ldr	r3, [sp, #8]
 80075f4:	429d      	cmp	r5, r3
 80075f6:	f43f af7c 	beq.w	80074f2 <_dtoa_r+0x47a>
 80075fa:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <_dtoa_r+0x648>)
 80075fc:	ec51 0b19 	vmov	r0, r1, d9
 8007600:	2200      	movs	r2, #0
 8007602:	f7f8 fff9 	bl	80005f8 <__aeabi_dmul>
 8007606:	4b2e      	ldr	r3, [pc, #184]	; (80076c0 <_dtoa_r+0x648>)
 8007608:	ec41 0b19 	vmov	d9, r0, r1
 800760c:	2200      	movs	r2, #0
 800760e:	4640      	mov	r0, r8
 8007610:	4649      	mov	r1, r9
 8007612:	f7f8 fff1 	bl	80005f8 <__aeabi_dmul>
 8007616:	4680      	mov	r8, r0
 8007618:	4689      	mov	r9, r1
 800761a:	e7c5      	b.n	80075a8 <_dtoa_r+0x530>
 800761c:	ec51 0b17 	vmov	r0, r1, d7
 8007620:	f7f8 ffea 	bl	80005f8 <__aeabi_dmul>
 8007624:	9b02      	ldr	r3, [sp, #8]
 8007626:	9d00      	ldr	r5, [sp, #0]
 8007628:	930f      	str	r3, [sp, #60]	; 0x3c
 800762a:	ec41 0b19 	vmov	d9, r0, r1
 800762e:	4649      	mov	r1, r9
 8007630:	4640      	mov	r0, r8
 8007632:	f7f9 fa91 	bl	8000b58 <__aeabi_d2iz>
 8007636:	4606      	mov	r6, r0
 8007638:	f7f8 ff74 	bl	8000524 <__aeabi_i2d>
 800763c:	3630      	adds	r6, #48	; 0x30
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4640      	mov	r0, r8
 8007644:	4649      	mov	r1, r9
 8007646:	f7f8 fe1f 	bl	8000288 <__aeabi_dsub>
 800764a:	f805 6b01 	strb.w	r6, [r5], #1
 800764e:	9b02      	ldr	r3, [sp, #8]
 8007650:	429d      	cmp	r5, r3
 8007652:	4680      	mov	r8, r0
 8007654:	4689      	mov	r9, r1
 8007656:	f04f 0200 	mov.w	r2, #0
 800765a:	d124      	bne.n	80076a6 <_dtoa_r+0x62e>
 800765c:	4b1b      	ldr	r3, [pc, #108]	; (80076cc <_dtoa_r+0x654>)
 800765e:	ec51 0b19 	vmov	r0, r1, d9
 8007662:	f7f8 fe13 	bl	800028c <__adddf3>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4640      	mov	r0, r8
 800766c:	4649      	mov	r1, r9
 800766e:	f7f9 fa53 	bl	8000b18 <__aeabi_dcmpgt>
 8007672:	2800      	cmp	r0, #0
 8007674:	d173      	bne.n	800775e <_dtoa_r+0x6e6>
 8007676:	ec53 2b19 	vmov	r2, r3, d9
 800767a:	4914      	ldr	r1, [pc, #80]	; (80076cc <_dtoa_r+0x654>)
 800767c:	2000      	movs	r0, #0
 800767e:	f7f8 fe03 	bl	8000288 <__aeabi_dsub>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	4640      	mov	r0, r8
 8007688:	4649      	mov	r1, r9
 800768a:	f7f9 fa27 	bl	8000adc <__aeabi_dcmplt>
 800768e:	2800      	cmp	r0, #0
 8007690:	f43f af2f 	beq.w	80074f2 <_dtoa_r+0x47a>
 8007694:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007696:	1e6b      	subs	r3, r5, #1
 8007698:	930f      	str	r3, [sp, #60]	; 0x3c
 800769a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800769e:	2b30      	cmp	r3, #48	; 0x30
 80076a0:	d0f8      	beq.n	8007694 <_dtoa_r+0x61c>
 80076a2:	46bb      	mov	fp, r7
 80076a4:	e04a      	b.n	800773c <_dtoa_r+0x6c4>
 80076a6:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <_dtoa_r+0x648>)
 80076a8:	f7f8 ffa6 	bl	80005f8 <__aeabi_dmul>
 80076ac:	4680      	mov	r8, r0
 80076ae:	4689      	mov	r9, r1
 80076b0:	e7bd      	b.n	800762e <_dtoa_r+0x5b6>
 80076b2:	bf00      	nop
 80076b4:	0800a090 	.word	0x0800a090
 80076b8:	0800a068 	.word	0x0800a068
 80076bc:	3ff00000 	.word	0x3ff00000
 80076c0:	40240000 	.word	0x40240000
 80076c4:	401c0000 	.word	0x401c0000
 80076c8:	40140000 	.word	0x40140000
 80076cc:	3fe00000 	.word	0x3fe00000
 80076d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80076d4:	9d00      	ldr	r5, [sp, #0]
 80076d6:	4642      	mov	r2, r8
 80076d8:	464b      	mov	r3, r9
 80076da:	4630      	mov	r0, r6
 80076dc:	4639      	mov	r1, r7
 80076de:	f7f9 f8b5 	bl	800084c <__aeabi_ddiv>
 80076e2:	f7f9 fa39 	bl	8000b58 <__aeabi_d2iz>
 80076e6:	9001      	str	r0, [sp, #4]
 80076e8:	f7f8 ff1c 	bl	8000524 <__aeabi_i2d>
 80076ec:	4642      	mov	r2, r8
 80076ee:	464b      	mov	r3, r9
 80076f0:	f7f8 ff82 	bl	80005f8 <__aeabi_dmul>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4630      	mov	r0, r6
 80076fa:	4639      	mov	r1, r7
 80076fc:	f7f8 fdc4 	bl	8000288 <__aeabi_dsub>
 8007700:	9e01      	ldr	r6, [sp, #4]
 8007702:	9f04      	ldr	r7, [sp, #16]
 8007704:	3630      	adds	r6, #48	; 0x30
 8007706:	f805 6b01 	strb.w	r6, [r5], #1
 800770a:	9e00      	ldr	r6, [sp, #0]
 800770c:	1bae      	subs	r6, r5, r6
 800770e:	42b7      	cmp	r7, r6
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	d134      	bne.n	8007780 <_dtoa_r+0x708>
 8007716:	f7f8 fdb9 	bl	800028c <__adddf3>
 800771a:	4642      	mov	r2, r8
 800771c:	464b      	mov	r3, r9
 800771e:	4606      	mov	r6, r0
 8007720:	460f      	mov	r7, r1
 8007722:	f7f9 f9f9 	bl	8000b18 <__aeabi_dcmpgt>
 8007726:	b9c8      	cbnz	r0, 800775c <_dtoa_r+0x6e4>
 8007728:	4642      	mov	r2, r8
 800772a:	464b      	mov	r3, r9
 800772c:	4630      	mov	r0, r6
 800772e:	4639      	mov	r1, r7
 8007730:	f7f9 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8007734:	b110      	cbz	r0, 800773c <_dtoa_r+0x6c4>
 8007736:	9b01      	ldr	r3, [sp, #4]
 8007738:	07db      	lsls	r3, r3, #31
 800773a:	d40f      	bmi.n	800775c <_dtoa_r+0x6e4>
 800773c:	4651      	mov	r1, sl
 800773e:	4620      	mov	r0, r4
 8007740:	f000 fbcc 	bl	8007edc <_Bfree>
 8007744:	2300      	movs	r3, #0
 8007746:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007748:	702b      	strb	r3, [r5, #0]
 800774a:	f10b 0301 	add.w	r3, fp, #1
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007752:	2b00      	cmp	r3, #0
 8007754:	f43f ace2 	beq.w	800711c <_dtoa_r+0xa4>
 8007758:	601d      	str	r5, [r3, #0]
 800775a:	e4df      	b.n	800711c <_dtoa_r+0xa4>
 800775c:	465f      	mov	r7, fp
 800775e:	462b      	mov	r3, r5
 8007760:	461d      	mov	r5, r3
 8007762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007766:	2a39      	cmp	r2, #57	; 0x39
 8007768:	d106      	bne.n	8007778 <_dtoa_r+0x700>
 800776a:	9a00      	ldr	r2, [sp, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d1f7      	bne.n	8007760 <_dtoa_r+0x6e8>
 8007770:	9900      	ldr	r1, [sp, #0]
 8007772:	2230      	movs	r2, #48	; 0x30
 8007774:	3701      	adds	r7, #1
 8007776:	700a      	strb	r2, [r1, #0]
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	3201      	adds	r2, #1
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	e790      	b.n	80076a2 <_dtoa_r+0x62a>
 8007780:	4ba3      	ldr	r3, [pc, #652]	; (8007a10 <_dtoa_r+0x998>)
 8007782:	2200      	movs	r2, #0
 8007784:	f7f8 ff38 	bl	80005f8 <__aeabi_dmul>
 8007788:	2200      	movs	r2, #0
 800778a:	2300      	movs	r3, #0
 800778c:	4606      	mov	r6, r0
 800778e:	460f      	mov	r7, r1
 8007790:	f7f9 f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007794:	2800      	cmp	r0, #0
 8007796:	d09e      	beq.n	80076d6 <_dtoa_r+0x65e>
 8007798:	e7d0      	b.n	800773c <_dtoa_r+0x6c4>
 800779a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800779c:	2a00      	cmp	r2, #0
 800779e:	f000 80ca 	beq.w	8007936 <_dtoa_r+0x8be>
 80077a2:	9a07      	ldr	r2, [sp, #28]
 80077a4:	2a01      	cmp	r2, #1
 80077a6:	f300 80ad 	bgt.w	8007904 <_dtoa_r+0x88c>
 80077aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077ac:	2a00      	cmp	r2, #0
 80077ae:	f000 80a5 	beq.w	80078fc <_dtoa_r+0x884>
 80077b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077b6:	9e08      	ldr	r6, [sp, #32]
 80077b8:	9d05      	ldr	r5, [sp, #20]
 80077ba:	9a05      	ldr	r2, [sp, #20]
 80077bc:	441a      	add	r2, r3
 80077be:	9205      	str	r2, [sp, #20]
 80077c0:	9a06      	ldr	r2, [sp, #24]
 80077c2:	2101      	movs	r1, #1
 80077c4:	441a      	add	r2, r3
 80077c6:	4620      	mov	r0, r4
 80077c8:	9206      	str	r2, [sp, #24]
 80077ca:	f000 fc3d 	bl	8008048 <__i2b>
 80077ce:	4607      	mov	r7, r0
 80077d0:	b165      	cbz	r5, 80077ec <_dtoa_r+0x774>
 80077d2:	9b06      	ldr	r3, [sp, #24]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	dd09      	ble.n	80077ec <_dtoa_r+0x774>
 80077d8:	42ab      	cmp	r3, r5
 80077da:	9a05      	ldr	r2, [sp, #20]
 80077dc:	bfa8      	it	ge
 80077de:	462b      	movge	r3, r5
 80077e0:	1ad2      	subs	r2, r2, r3
 80077e2:	9205      	str	r2, [sp, #20]
 80077e4:	9a06      	ldr	r2, [sp, #24]
 80077e6:	1aed      	subs	r5, r5, r3
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	9306      	str	r3, [sp, #24]
 80077ec:	9b08      	ldr	r3, [sp, #32]
 80077ee:	b1f3      	cbz	r3, 800782e <_dtoa_r+0x7b6>
 80077f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80a3 	beq.w	800793e <_dtoa_r+0x8c6>
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	dd10      	ble.n	800781e <_dtoa_r+0x7a6>
 80077fc:	4639      	mov	r1, r7
 80077fe:	4632      	mov	r2, r6
 8007800:	4620      	mov	r0, r4
 8007802:	f000 fce1 	bl	80081c8 <__pow5mult>
 8007806:	4652      	mov	r2, sl
 8007808:	4601      	mov	r1, r0
 800780a:	4607      	mov	r7, r0
 800780c:	4620      	mov	r0, r4
 800780e:	f000 fc31 	bl	8008074 <__multiply>
 8007812:	4651      	mov	r1, sl
 8007814:	4680      	mov	r8, r0
 8007816:	4620      	mov	r0, r4
 8007818:	f000 fb60 	bl	8007edc <_Bfree>
 800781c:	46c2      	mov	sl, r8
 800781e:	9b08      	ldr	r3, [sp, #32]
 8007820:	1b9a      	subs	r2, r3, r6
 8007822:	d004      	beq.n	800782e <_dtoa_r+0x7b6>
 8007824:	4651      	mov	r1, sl
 8007826:	4620      	mov	r0, r4
 8007828:	f000 fcce 	bl	80081c8 <__pow5mult>
 800782c:	4682      	mov	sl, r0
 800782e:	2101      	movs	r1, #1
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fc09 	bl	8008048 <__i2b>
 8007836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007838:	2b00      	cmp	r3, #0
 800783a:	4606      	mov	r6, r0
 800783c:	f340 8081 	ble.w	8007942 <_dtoa_r+0x8ca>
 8007840:	461a      	mov	r2, r3
 8007842:	4601      	mov	r1, r0
 8007844:	4620      	mov	r0, r4
 8007846:	f000 fcbf 	bl	80081c8 <__pow5mult>
 800784a:	9b07      	ldr	r3, [sp, #28]
 800784c:	2b01      	cmp	r3, #1
 800784e:	4606      	mov	r6, r0
 8007850:	dd7a      	ble.n	8007948 <_dtoa_r+0x8d0>
 8007852:	f04f 0800 	mov.w	r8, #0
 8007856:	6933      	ldr	r3, [r6, #16]
 8007858:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800785c:	6918      	ldr	r0, [r3, #16]
 800785e:	f000 fba5 	bl	8007fac <__hi0bits>
 8007862:	f1c0 0020 	rsb	r0, r0, #32
 8007866:	9b06      	ldr	r3, [sp, #24]
 8007868:	4418      	add	r0, r3
 800786a:	f010 001f 	ands.w	r0, r0, #31
 800786e:	f000 8094 	beq.w	800799a <_dtoa_r+0x922>
 8007872:	f1c0 0320 	rsb	r3, r0, #32
 8007876:	2b04      	cmp	r3, #4
 8007878:	f340 8085 	ble.w	8007986 <_dtoa_r+0x90e>
 800787c:	9b05      	ldr	r3, [sp, #20]
 800787e:	f1c0 001c 	rsb	r0, r0, #28
 8007882:	4403      	add	r3, r0
 8007884:	9305      	str	r3, [sp, #20]
 8007886:	9b06      	ldr	r3, [sp, #24]
 8007888:	4403      	add	r3, r0
 800788a:	4405      	add	r5, r0
 800788c:	9306      	str	r3, [sp, #24]
 800788e:	9b05      	ldr	r3, [sp, #20]
 8007890:	2b00      	cmp	r3, #0
 8007892:	dd05      	ble.n	80078a0 <_dtoa_r+0x828>
 8007894:	4651      	mov	r1, sl
 8007896:	461a      	mov	r2, r3
 8007898:	4620      	mov	r0, r4
 800789a:	f000 fcef 	bl	800827c <__lshift>
 800789e:	4682      	mov	sl, r0
 80078a0:	9b06      	ldr	r3, [sp, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	dd05      	ble.n	80078b2 <_dtoa_r+0x83a>
 80078a6:	4631      	mov	r1, r6
 80078a8:	461a      	mov	r2, r3
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 fce6 	bl	800827c <__lshift>
 80078b0:	4606      	mov	r6, r0
 80078b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d072      	beq.n	800799e <_dtoa_r+0x926>
 80078b8:	4631      	mov	r1, r6
 80078ba:	4650      	mov	r0, sl
 80078bc:	f000 fd4a 	bl	8008354 <__mcmp>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	da6c      	bge.n	800799e <_dtoa_r+0x926>
 80078c4:	2300      	movs	r3, #0
 80078c6:	4651      	mov	r1, sl
 80078c8:	220a      	movs	r2, #10
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 fb28 	bl	8007f20 <__multadd>
 80078d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078d6:	4682      	mov	sl, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 81b0 	beq.w	8007c3e <_dtoa_r+0xbc6>
 80078de:	2300      	movs	r3, #0
 80078e0:	4639      	mov	r1, r7
 80078e2:	220a      	movs	r2, #10
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 fb1b 	bl	8007f20 <__multadd>
 80078ea:	9b01      	ldr	r3, [sp, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	4607      	mov	r7, r0
 80078f0:	f300 8096 	bgt.w	8007a20 <_dtoa_r+0x9a8>
 80078f4:	9b07      	ldr	r3, [sp, #28]
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	dc59      	bgt.n	80079ae <_dtoa_r+0x936>
 80078fa:	e091      	b.n	8007a20 <_dtoa_r+0x9a8>
 80078fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007902:	e758      	b.n	80077b6 <_dtoa_r+0x73e>
 8007904:	9b04      	ldr	r3, [sp, #16]
 8007906:	1e5e      	subs	r6, r3, #1
 8007908:	9b08      	ldr	r3, [sp, #32]
 800790a:	42b3      	cmp	r3, r6
 800790c:	bfbf      	itttt	lt
 800790e:	9b08      	ldrlt	r3, [sp, #32]
 8007910:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007912:	9608      	strlt	r6, [sp, #32]
 8007914:	1af3      	sublt	r3, r6, r3
 8007916:	bfb4      	ite	lt
 8007918:	18d2      	addlt	r2, r2, r3
 800791a:	1b9e      	subge	r6, r3, r6
 800791c:	9b04      	ldr	r3, [sp, #16]
 800791e:	bfbc      	itt	lt
 8007920:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007922:	2600      	movlt	r6, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	bfb7      	itett	lt
 8007928:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800792c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007930:	1a9d      	sublt	r5, r3, r2
 8007932:	2300      	movlt	r3, #0
 8007934:	e741      	b.n	80077ba <_dtoa_r+0x742>
 8007936:	9e08      	ldr	r6, [sp, #32]
 8007938:	9d05      	ldr	r5, [sp, #20]
 800793a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800793c:	e748      	b.n	80077d0 <_dtoa_r+0x758>
 800793e:	9a08      	ldr	r2, [sp, #32]
 8007940:	e770      	b.n	8007824 <_dtoa_r+0x7ac>
 8007942:	9b07      	ldr	r3, [sp, #28]
 8007944:	2b01      	cmp	r3, #1
 8007946:	dc19      	bgt.n	800797c <_dtoa_r+0x904>
 8007948:	9b02      	ldr	r3, [sp, #8]
 800794a:	b9bb      	cbnz	r3, 800797c <_dtoa_r+0x904>
 800794c:	9b03      	ldr	r3, [sp, #12]
 800794e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007952:	b99b      	cbnz	r3, 800797c <_dtoa_r+0x904>
 8007954:	9b03      	ldr	r3, [sp, #12]
 8007956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800795a:	0d1b      	lsrs	r3, r3, #20
 800795c:	051b      	lsls	r3, r3, #20
 800795e:	b183      	cbz	r3, 8007982 <_dtoa_r+0x90a>
 8007960:	9b05      	ldr	r3, [sp, #20]
 8007962:	3301      	adds	r3, #1
 8007964:	9305      	str	r3, [sp, #20]
 8007966:	9b06      	ldr	r3, [sp, #24]
 8007968:	3301      	adds	r3, #1
 800796a:	9306      	str	r3, [sp, #24]
 800796c:	f04f 0801 	mov.w	r8, #1
 8007970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007972:	2b00      	cmp	r3, #0
 8007974:	f47f af6f 	bne.w	8007856 <_dtoa_r+0x7de>
 8007978:	2001      	movs	r0, #1
 800797a:	e774      	b.n	8007866 <_dtoa_r+0x7ee>
 800797c:	f04f 0800 	mov.w	r8, #0
 8007980:	e7f6      	b.n	8007970 <_dtoa_r+0x8f8>
 8007982:	4698      	mov	r8, r3
 8007984:	e7f4      	b.n	8007970 <_dtoa_r+0x8f8>
 8007986:	d082      	beq.n	800788e <_dtoa_r+0x816>
 8007988:	9a05      	ldr	r2, [sp, #20]
 800798a:	331c      	adds	r3, #28
 800798c:	441a      	add	r2, r3
 800798e:	9205      	str	r2, [sp, #20]
 8007990:	9a06      	ldr	r2, [sp, #24]
 8007992:	441a      	add	r2, r3
 8007994:	441d      	add	r5, r3
 8007996:	9206      	str	r2, [sp, #24]
 8007998:	e779      	b.n	800788e <_dtoa_r+0x816>
 800799a:	4603      	mov	r3, r0
 800799c:	e7f4      	b.n	8007988 <_dtoa_r+0x910>
 800799e:	9b04      	ldr	r3, [sp, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	dc37      	bgt.n	8007a14 <_dtoa_r+0x99c>
 80079a4:	9b07      	ldr	r3, [sp, #28]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	dd34      	ble.n	8007a14 <_dtoa_r+0x99c>
 80079aa:	9b04      	ldr	r3, [sp, #16]
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	9b01      	ldr	r3, [sp, #4]
 80079b0:	b963      	cbnz	r3, 80079cc <_dtoa_r+0x954>
 80079b2:	4631      	mov	r1, r6
 80079b4:	2205      	movs	r2, #5
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 fab2 	bl	8007f20 <__multadd>
 80079bc:	4601      	mov	r1, r0
 80079be:	4606      	mov	r6, r0
 80079c0:	4650      	mov	r0, sl
 80079c2:	f000 fcc7 	bl	8008354 <__mcmp>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f73f adbb 	bgt.w	8007542 <_dtoa_r+0x4ca>
 80079cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ce:	9d00      	ldr	r5, [sp, #0]
 80079d0:	ea6f 0b03 	mvn.w	fp, r3
 80079d4:	f04f 0800 	mov.w	r8, #0
 80079d8:	4631      	mov	r1, r6
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 fa7e 	bl	8007edc <_Bfree>
 80079e0:	2f00      	cmp	r7, #0
 80079e2:	f43f aeab 	beq.w	800773c <_dtoa_r+0x6c4>
 80079e6:	f1b8 0f00 	cmp.w	r8, #0
 80079ea:	d005      	beq.n	80079f8 <_dtoa_r+0x980>
 80079ec:	45b8      	cmp	r8, r7
 80079ee:	d003      	beq.n	80079f8 <_dtoa_r+0x980>
 80079f0:	4641      	mov	r1, r8
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 fa72 	bl	8007edc <_Bfree>
 80079f8:	4639      	mov	r1, r7
 80079fa:	4620      	mov	r0, r4
 80079fc:	f000 fa6e 	bl	8007edc <_Bfree>
 8007a00:	e69c      	b.n	800773c <_dtoa_r+0x6c4>
 8007a02:	2600      	movs	r6, #0
 8007a04:	4637      	mov	r7, r6
 8007a06:	e7e1      	b.n	80079cc <_dtoa_r+0x954>
 8007a08:	46bb      	mov	fp, r7
 8007a0a:	4637      	mov	r7, r6
 8007a0c:	e599      	b.n	8007542 <_dtoa_r+0x4ca>
 8007a0e:	bf00      	nop
 8007a10:	40240000 	.word	0x40240000
 8007a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 80c8 	beq.w	8007bac <_dtoa_r+0xb34>
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	2d00      	cmp	r5, #0
 8007a22:	dd05      	ble.n	8007a30 <_dtoa_r+0x9b8>
 8007a24:	4639      	mov	r1, r7
 8007a26:	462a      	mov	r2, r5
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fc27 	bl	800827c <__lshift>
 8007a2e:	4607      	mov	r7, r0
 8007a30:	f1b8 0f00 	cmp.w	r8, #0
 8007a34:	d05b      	beq.n	8007aee <_dtoa_r+0xa76>
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 fa0f 	bl	8007e5c <_Balloc>
 8007a3e:	4605      	mov	r5, r0
 8007a40:	b928      	cbnz	r0, 8007a4e <_dtoa_r+0x9d6>
 8007a42:	4b83      	ldr	r3, [pc, #524]	; (8007c50 <_dtoa_r+0xbd8>)
 8007a44:	4602      	mov	r2, r0
 8007a46:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007a4a:	f7ff bb2e 	b.w	80070aa <_dtoa_r+0x32>
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	3202      	adds	r2, #2
 8007a52:	0092      	lsls	r2, r2, #2
 8007a54:	f107 010c 	add.w	r1, r7, #12
 8007a58:	300c      	adds	r0, #12
 8007a5a:	f001 f973 	bl	8008d44 <memcpy>
 8007a5e:	2201      	movs	r2, #1
 8007a60:	4629      	mov	r1, r5
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 fc0a 	bl	800827c <__lshift>
 8007a68:	9b00      	ldr	r3, [sp, #0]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a72:	4413      	add	r3, r2
 8007a74:	9308      	str	r3, [sp, #32]
 8007a76:	9b02      	ldr	r3, [sp, #8]
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	46b8      	mov	r8, r7
 8007a7e:	9306      	str	r3, [sp, #24]
 8007a80:	4607      	mov	r7, r0
 8007a82:	9b04      	ldr	r3, [sp, #16]
 8007a84:	4631      	mov	r1, r6
 8007a86:	3b01      	subs	r3, #1
 8007a88:	4650      	mov	r0, sl
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	f7ff fa69 	bl	8006f62 <quorem>
 8007a90:	4641      	mov	r1, r8
 8007a92:	9002      	str	r0, [sp, #8]
 8007a94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007a98:	4650      	mov	r0, sl
 8007a9a:	f000 fc5b 	bl	8008354 <__mcmp>
 8007a9e:	463a      	mov	r2, r7
 8007aa0:	9005      	str	r0, [sp, #20]
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f000 fc71 	bl	800838c <__mdiff>
 8007aaa:	68c2      	ldr	r2, [r0, #12]
 8007aac:	4605      	mov	r5, r0
 8007aae:	bb02      	cbnz	r2, 8007af2 <_dtoa_r+0xa7a>
 8007ab0:	4601      	mov	r1, r0
 8007ab2:	4650      	mov	r0, sl
 8007ab4:	f000 fc4e 	bl	8008354 <__mcmp>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	4629      	mov	r1, r5
 8007abc:	4620      	mov	r0, r4
 8007abe:	9209      	str	r2, [sp, #36]	; 0x24
 8007ac0:	f000 fa0c 	bl	8007edc <_Bfree>
 8007ac4:	9b07      	ldr	r3, [sp, #28]
 8007ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ac8:	9d04      	ldr	r5, [sp, #16]
 8007aca:	ea43 0102 	orr.w	r1, r3, r2
 8007ace:	9b06      	ldr	r3, [sp, #24]
 8007ad0:	4319      	orrs	r1, r3
 8007ad2:	d110      	bne.n	8007af6 <_dtoa_r+0xa7e>
 8007ad4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ad8:	d029      	beq.n	8007b2e <_dtoa_r+0xab6>
 8007ada:	9b05      	ldr	r3, [sp, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dd02      	ble.n	8007ae6 <_dtoa_r+0xa6e>
 8007ae0:	9b02      	ldr	r3, [sp, #8]
 8007ae2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007ae6:	9b01      	ldr	r3, [sp, #4]
 8007ae8:	f883 9000 	strb.w	r9, [r3]
 8007aec:	e774      	b.n	80079d8 <_dtoa_r+0x960>
 8007aee:	4638      	mov	r0, r7
 8007af0:	e7ba      	b.n	8007a68 <_dtoa_r+0x9f0>
 8007af2:	2201      	movs	r2, #1
 8007af4:	e7e1      	b.n	8007aba <_dtoa_r+0xa42>
 8007af6:	9b05      	ldr	r3, [sp, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	db04      	blt.n	8007b06 <_dtoa_r+0xa8e>
 8007afc:	9907      	ldr	r1, [sp, #28]
 8007afe:	430b      	orrs	r3, r1
 8007b00:	9906      	ldr	r1, [sp, #24]
 8007b02:	430b      	orrs	r3, r1
 8007b04:	d120      	bne.n	8007b48 <_dtoa_r+0xad0>
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	dded      	ble.n	8007ae6 <_dtoa_r+0xa6e>
 8007b0a:	4651      	mov	r1, sl
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f000 fbb4 	bl	800827c <__lshift>
 8007b14:	4631      	mov	r1, r6
 8007b16:	4682      	mov	sl, r0
 8007b18:	f000 fc1c 	bl	8008354 <__mcmp>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	dc03      	bgt.n	8007b28 <_dtoa_r+0xab0>
 8007b20:	d1e1      	bne.n	8007ae6 <_dtoa_r+0xa6e>
 8007b22:	f019 0f01 	tst.w	r9, #1
 8007b26:	d0de      	beq.n	8007ae6 <_dtoa_r+0xa6e>
 8007b28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b2c:	d1d8      	bne.n	8007ae0 <_dtoa_r+0xa68>
 8007b2e:	9a01      	ldr	r2, [sp, #4]
 8007b30:	2339      	movs	r3, #57	; 0x39
 8007b32:	7013      	strb	r3, [r2, #0]
 8007b34:	462b      	mov	r3, r5
 8007b36:	461d      	mov	r5, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b3e:	2a39      	cmp	r2, #57	; 0x39
 8007b40:	d06c      	beq.n	8007c1c <_dtoa_r+0xba4>
 8007b42:	3201      	adds	r2, #1
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	e747      	b.n	80079d8 <_dtoa_r+0x960>
 8007b48:	2a00      	cmp	r2, #0
 8007b4a:	dd07      	ble.n	8007b5c <_dtoa_r+0xae4>
 8007b4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b50:	d0ed      	beq.n	8007b2e <_dtoa_r+0xab6>
 8007b52:	9a01      	ldr	r2, [sp, #4]
 8007b54:	f109 0301 	add.w	r3, r9, #1
 8007b58:	7013      	strb	r3, [r2, #0]
 8007b5a:	e73d      	b.n	80079d8 <_dtoa_r+0x960>
 8007b5c:	9b04      	ldr	r3, [sp, #16]
 8007b5e:	9a08      	ldr	r2, [sp, #32]
 8007b60:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d043      	beq.n	8007bf0 <_dtoa_r+0xb78>
 8007b68:	4651      	mov	r1, sl
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 f9d6 	bl	8007f20 <__multadd>
 8007b74:	45b8      	cmp	r8, r7
 8007b76:	4682      	mov	sl, r0
 8007b78:	f04f 0300 	mov.w	r3, #0
 8007b7c:	f04f 020a 	mov.w	r2, #10
 8007b80:	4641      	mov	r1, r8
 8007b82:	4620      	mov	r0, r4
 8007b84:	d107      	bne.n	8007b96 <_dtoa_r+0xb1e>
 8007b86:	f000 f9cb 	bl	8007f20 <__multadd>
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	9b04      	ldr	r3, [sp, #16]
 8007b90:	3301      	adds	r3, #1
 8007b92:	9304      	str	r3, [sp, #16]
 8007b94:	e775      	b.n	8007a82 <_dtoa_r+0xa0a>
 8007b96:	f000 f9c3 	bl	8007f20 <__multadd>
 8007b9a:	4639      	mov	r1, r7
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	220a      	movs	r2, #10
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 f9bc 	bl	8007f20 <__multadd>
 8007ba8:	4607      	mov	r7, r0
 8007baa:	e7f0      	b.n	8007b8e <_dtoa_r+0xb16>
 8007bac:	9b04      	ldr	r3, [sp, #16]
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	9d00      	ldr	r5, [sp, #0]
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4650      	mov	r0, sl
 8007bb6:	f7ff f9d4 	bl	8006f62 <quorem>
 8007bba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007bbe:	9b00      	ldr	r3, [sp, #0]
 8007bc0:	f805 9b01 	strb.w	r9, [r5], #1
 8007bc4:	1aea      	subs	r2, r5, r3
 8007bc6:	9b01      	ldr	r3, [sp, #4]
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	dd07      	ble.n	8007bdc <_dtoa_r+0xb64>
 8007bcc:	4651      	mov	r1, sl
 8007bce:	2300      	movs	r3, #0
 8007bd0:	220a      	movs	r2, #10
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 f9a4 	bl	8007f20 <__multadd>
 8007bd8:	4682      	mov	sl, r0
 8007bda:	e7ea      	b.n	8007bb2 <_dtoa_r+0xb3a>
 8007bdc:	9b01      	ldr	r3, [sp, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfc8      	it	gt
 8007be2:	461d      	movgt	r5, r3
 8007be4:	9b00      	ldr	r3, [sp, #0]
 8007be6:	bfd8      	it	le
 8007be8:	2501      	movle	r5, #1
 8007bea:	441d      	add	r5, r3
 8007bec:	f04f 0800 	mov.w	r8, #0
 8007bf0:	4651      	mov	r1, sl
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f000 fb41 	bl	800827c <__lshift>
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4682      	mov	sl, r0
 8007bfe:	f000 fba9 	bl	8008354 <__mcmp>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	dc96      	bgt.n	8007b34 <_dtoa_r+0xabc>
 8007c06:	d102      	bne.n	8007c0e <_dtoa_r+0xb96>
 8007c08:	f019 0f01 	tst.w	r9, #1
 8007c0c:	d192      	bne.n	8007b34 <_dtoa_r+0xabc>
 8007c0e:	462b      	mov	r3, r5
 8007c10:	461d      	mov	r5, r3
 8007c12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c16:	2a30      	cmp	r2, #48	; 0x30
 8007c18:	d0fa      	beq.n	8007c10 <_dtoa_r+0xb98>
 8007c1a:	e6dd      	b.n	80079d8 <_dtoa_r+0x960>
 8007c1c:	9a00      	ldr	r2, [sp, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d189      	bne.n	8007b36 <_dtoa_r+0xabe>
 8007c22:	f10b 0b01 	add.w	fp, fp, #1
 8007c26:	2331      	movs	r3, #49	; 0x31
 8007c28:	e796      	b.n	8007b58 <_dtoa_r+0xae0>
 8007c2a:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <_dtoa_r+0xbdc>)
 8007c2c:	f7ff ba99 	b.w	8007162 <_dtoa_r+0xea>
 8007c30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f47f aa6d 	bne.w	8007112 <_dtoa_r+0x9a>
 8007c38:	4b07      	ldr	r3, [pc, #28]	; (8007c58 <_dtoa_r+0xbe0>)
 8007c3a:	f7ff ba92 	b.w	8007162 <_dtoa_r+0xea>
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dcb5      	bgt.n	8007bb0 <_dtoa_r+0xb38>
 8007c44:	9b07      	ldr	r3, [sp, #28]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	f73f aeb1 	bgt.w	80079ae <_dtoa_r+0x936>
 8007c4c:	e7b0      	b.n	8007bb0 <_dtoa_r+0xb38>
 8007c4e:	bf00      	nop
 8007c50:	08009ff8 	.word	0x08009ff8
 8007c54:	08009f58 	.word	0x08009f58
 8007c58:	08009f7c 	.word	0x08009f7c

08007c5c <_free_r>:
 8007c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c5e:	2900      	cmp	r1, #0
 8007c60:	d044      	beq.n	8007cec <_free_r+0x90>
 8007c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c66:	9001      	str	r0, [sp, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c6e:	bfb8      	it	lt
 8007c70:	18e4      	addlt	r4, r4, r3
 8007c72:	f000 f8e7 	bl	8007e44 <__malloc_lock>
 8007c76:	4a1e      	ldr	r2, [pc, #120]	; (8007cf0 <_free_r+0x94>)
 8007c78:	9801      	ldr	r0, [sp, #4]
 8007c7a:	6813      	ldr	r3, [r2, #0]
 8007c7c:	b933      	cbnz	r3, 8007c8c <_free_r+0x30>
 8007c7e:	6063      	str	r3, [r4, #4]
 8007c80:	6014      	str	r4, [r2, #0]
 8007c82:	b003      	add	sp, #12
 8007c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c88:	f000 b8e2 	b.w	8007e50 <__malloc_unlock>
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d908      	bls.n	8007ca2 <_free_r+0x46>
 8007c90:	6825      	ldr	r5, [r4, #0]
 8007c92:	1961      	adds	r1, r4, r5
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf01      	itttt	eq
 8007c98:	6819      	ldreq	r1, [r3, #0]
 8007c9a:	685b      	ldreq	r3, [r3, #4]
 8007c9c:	1949      	addeq	r1, r1, r5
 8007c9e:	6021      	streq	r1, [r4, #0]
 8007ca0:	e7ed      	b.n	8007c7e <_free_r+0x22>
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b10b      	cbz	r3, 8007cac <_free_r+0x50>
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d9fa      	bls.n	8007ca2 <_free_r+0x46>
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	1855      	adds	r5, r2, r1
 8007cb0:	42a5      	cmp	r5, r4
 8007cb2:	d10b      	bne.n	8007ccc <_free_r+0x70>
 8007cb4:	6824      	ldr	r4, [r4, #0]
 8007cb6:	4421      	add	r1, r4
 8007cb8:	1854      	adds	r4, r2, r1
 8007cba:	42a3      	cmp	r3, r4
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	d1e0      	bne.n	8007c82 <_free_r+0x26>
 8007cc0:	681c      	ldr	r4, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	6053      	str	r3, [r2, #4]
 8007cc6:	440c      	add	r4, r1
 8007cc8:	6014      	str	r4, [r2, #0]
 8007cca:	e7da      	b.n	8007c82 <_free_r+0x26>
 8007ccc:	d902      	bls.n	8007cd4 <_free_r+0x78>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	6003      	str	r3, [r0, #0]
 8007cd2:	e7d6      	b.n	8007c82 <_free_r+0x26>
 8007cd4:	6825      	ldr	r5, [r4, #0]
 8007cd6:	1961      	adds	r1, r4, r5
 8007cd8:	428b      	cmp	r3, r1
 8007cda:	bf04      	itt	eq
 8007cdc:	6819      	ldreq	r1, [r3, #0]
 8007cde:	685b      	ldreq	r3, [r3, #4]
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	bf04      	itt	eq
 8007ce4:	1949      	addeq	r1, r1, r5
 8007ce6:	6021      	streq	r1, [r4, #0]
 8007ce8:	6054      	str	r4, [r2, #4]
 8007cea:	e7ca      	b.n	8007c82 <_free_r+0x26>
 8007cec:	b003      	add	sp, #12
 8007cee:	bd30      	pop	{r4, r5, pc}
 8007cf0:	20000578 	.word	0x20000578

08007cf4 <malloc>:
 8007cf4:	4b02      	ldr	r3, [pc, #8]	; (8007d00 <malloc+0xc>)
 8007cf6:	4601      	mov	r1, r0
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	f000 b823 	b.w	8007d44 <_malloc_r>
 8007cfe:	bf00      	nop
 8007d00:	20000064 	.word	0x20000064

08007d04 <sbrk_aligned>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	4e0e      	ldr	r6, [pc, #56]	; (8007d40 <sbrk_aligned+0x3c>)
 8007d08:	460c      	mov	r4, r1
 8007d0a:	6831      	ldr	r1, [r6, #0]
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	b911      	cbnz	r1, 8007d16 <sbrk_aligned+0x12>
 8007d10:	f001 f808 	bl	8008d24 <_sbrk_r>
 8007d14:	6030      	str	r0, [r6, #0]
 8007d16:	4621      	mov	r1, r4
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f001 f803 	bl	8008d24 <_sbrk_r>
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	d00a      	beq.n	8007d38 <sbrk_aligned+0x34>
 8007d22:	1cc4      	adds	r4, r0, #3
 8007d24:	f024 0403 	bic.w	r4, r4, #3
 8007d28:	42a0      	cmp	r0, r4
 8007d2a:	d007      	beq.n	8007d3c <sbrk_aligned+0x38>
 8007d2c:	1a21      	subs	r1, r4, r0
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f000 fff8 	bl	8008d24 <_sbrk_r>
 8007d34:	3001      	adds	r0, #1
 8007d36:	d101      	bne.n	8007d3c <sbrk_aligned+0x38>
 8007d38:	f04f 34ff 	mov.w	r4, #4294967295
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}
 8007d40:	2000057c 	.word	0x2000057c

08007d44 <_malloc_r>:
 8007d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d48:	1ccd      	adds	r5, r1, #3
 8007d4a:	f025 0503 	bic.w	r5, r5, #3
 8007d4e:	3508      	adds	r5, #8
 8007d50:	2d0c      	cmp	r5, #12
 8007d52:	bf38      	it	cc
 8007d54:	250c      	movcc	r5, #12
 8007d56:	2d00      	cmp	r5, #0
 8007d58:	4607      	mov	r7, r0
 8007d5a:	db01      	blt.n	8007d60 <_malloc_r+0x1c>
 8007d5c:	42a9      	cmp	r1, r5
 8007d5e:	d905      	bls.n	8007d6c <_malloc_r+0x28>
 8007d60:	230c      	movs	r3, #12
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	2600      	movs	r6, #0
 8007d66:	4630      	mov	r0, r6
 8007d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007e40 <_malloc_r+0xfc>
 8007d70:	f000 f868 	bl	8007e44 <__malloc_lock>
 8007d74:	f8d8 3000 	ldr.w	r3, [r8]
 8007d78:	461c      	mov	r4, r3
 8007d7a:	bb5c      	cbnz	r4, 8007dd4 <_malloc_r+0x90>
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	4638      	mov	r0, r7
 8007d80:	f7ff ffc0 	bl	8007d04 <sbrk_aligned>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	4604      	mov	r4, r0
 8007d88:	d155      	bne.n	8007e36 <_malloc_r+0xf2>
 8007d8a:	f8d8 4000 	ldr.w	r4, [r8]
 8007d8e:	4626      	mov	r6, r4
 8007d90:	2e00      	cmp	r6, #0
 8007d92:	d145      	bne.n	8007e20 <_malloc_r+0xdc>
 8007d94:	2c00      	cmp	r4, #0
 8007d96:	d048      	beq.n	8007e2a <_malloc_r+0xe6>
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	eb04 0903 	add.w	r9, r4, r3
 8007da2:	f000 ffbf 	bl	8008d24 <_sbrk_r>
 8007da6:	4581      	cmp	r9, r0
 8007da8:	d13f      	bne.n	8007e2a <_malloc_r+0xe6>
 8007daa:	6821      	ldr	r1, [r4, #0]
 8007dac:	1a6d      	subs	r5, r5, r1
 8007dae:	4629      	mov	r1, r5
 8007db0:	4638      	mov	r0, r7
 8007db2:	f7ff ffa7 	bl	8007d04 <sbrk_aligned>
 8007db6:	3001      	adds	r0, #1
 8007db8:	d037      	beq.n	8007e2a <_malloc_r+0xe6>
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	442b      	add	r3, r5
 8007dbe:	6023      	str	r3, [r4, #0]
 8007dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d038      	beq.n	8007e3a <_malloc_r+0xf6>
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	42a2      	cmp	r2, r4
 8007dcc:	d12b      	bne.n	8007e26 <_malloc_r+0xe2>
 8007dce:	2200      	movs	r2, #0
 8007dd0:	605a      	str	r2, [r3, #4]
 8007dd2:	e00f      	b.n	8007df4 <_malloc_r+0xb0>
 8007dd4:	6822      	ldr	r2, [r4, #0]
 8007dd6:	1b52      	subs	r2, r2, r5
 8007dd8:	d41f      	bmi.n	8007e1a <_malloc_r+0xd6>
 8007dda:	2a0b      	cmp	r2, #11
 8007ddc:	d917      	bls.n	8007e0e <_malloc_r+0xca>
 8007dde:	1961      	adds	r1, r4, r5
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	6025      	str	r5, [r4, #0]
 8007de4:	bf18      	it	ne
 8007de6:	6059      	strne	r1, [r3, #4]
 8007de8:	6863      	ldr	r3, [r4, #4]
 8007dea:	bf08      	it	eq
 8007dec:	f8c8 1000 	streq.w	r1, [r8]
 8007df0:	5162      	str	r2, [r4, r5]
 8007df2:	604b      	str	r3, [r1, #4]
 8007df4:	4638      	mov	r0, r7
 8007df6:	f104 060b 	add.w	r6, r4, #11
 8007dfa:	f000 f829 	bl	8007e50 <__malloc_unlock>
 8007dfe:	f026 0607 	bic.w	r6, r6, #7
 8007e02:	1d23      	adds	r3, r4, #4
 8007e04:	1af2      	subs	r2, r6, r3
 8007e06:	d0ae      	beq.n	8007d66 <_malloc_r+0x22>
 8007e08:	1b9b      	subs	r3, r3, r6
 8007e0a:	50a3      	str	r3, [r4, r2]
 8007e0c:	e7ab      	b.n	8007d66 <_malloc_r+0x22>
 8007e0e:	42a3      	cmp	r3, r4
 8007e10:	6862      	ldr	r2, [r4, #4]
 8007e12:	d1dd      	bne.n	8007dd0 <_malloc_r+0x8c>
 8007e14:	f8c8 2000 	str.w	r2, [r8]
 8007e18:	e7ec      	b.n	8007df4 <_malloc_r+0xb0>
 8007e1a:	4623      	mov	r3, r4
 8007e1c:	6864      	ldr	r4, [r4, #4]
 8007e1e:	e7ac      	b.n	8007d7a <_malloc_r+0x36>
 8007e20:	4634      	mov	r4, r6
 8007e22:	6876      	ldr	r6, [r6, #4]
 8007e24:	e7b4      	b.n	8007d90 <_malloc_r+0x4c>
 8007e26:	4613      	mov	r3, r2
 8007e28:	e7cc      	b.n	8007dc4 <_malloc_r+0x80>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	603b      	str	r3, [r7, #0]
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f000 f80e 	bl	8007e50 <__malloc_unlock>
 8007e34:	e797      	b.n	8007d66 <_malloc_r+0x22>
 8007e36:	6025      	str	r5, [r4, #0]
 8007e38:	e7dc      	b.n	8007df4 <_malloc_r+0xb0>
 8007e3a:	605b      	str	r3, [r3, #4]
 8007e3c:	deff      	udf	#255	; 0xff
 8007e3e:	bf00      	nop
 8007e40:	20000578 	.word	0x20000578

08007e44 <__malloc_lock>:
 8007e44:	4801      	ldr	r0, [pc, #4]	; (8007e4c <__malloc_lock+0x8>)
 8007e46:	f7ff b88a 	b.w	8006f5e <__retarget_lock_acquire_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	20000574 	.word	0x20000574

08007e50 <__malloc_unlock>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__malloc_unlock+0x8>)
 8007e52:	f7ff b885 	b.w	8006f60 <__retarget_lock_release_recursive>
 8007e56:	bf00      	nop
 8007e58:	20000574 	.word	0x20000574

08007e5c <_Balloc>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	69c6      	ldr	r6, [r0, #28]
 8007e60:	4604      	mov	r4, r0
 8007e62:	460d      	mov	r5, r1
 8007e64:	b976      	cbnz	r6, 8007e84 <_Balloc+0x28>
 8007e66:	2010      	movs	r0, #16
 8007e68:	f7ff ff44 	bl	8007cf4 <malloc>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	61e0      	str	r0, [r4, #28]
 8007e70:	b920      	cbnz	r0, 8007e7c <_Balloc+0x20>
 8007e72:	4b18      	ldr	r3, [pc, #96]	; (8007ed4 <_Balloc+0x78>)
 8007e74:	4818      	ldr	r0, [pc, #96]	; (8007ed8 <_Balloc+0x7c>)
 8007e76:	216b      	movs	r1, #107	; 0x6b
 8007e78:	f000 ff72 	bl	8008d60 <__assert_func>
 8007e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e80:	6006      	str	r6, [r0, #0]
 8007e82:	60c6      	str	r6, [r0, #12]
 8007e84:	69e6      	ldr	r6, [r4, #28]
 8007e86:	68f3      	ldr	r3, [r6, #12]
 8007e88:	b183      	cbz	r3, 8007eac <_Balloc+0x50>
 8007e8a:	69e3      	ldr	r3, [r4, #28]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e92:	b9b8      	cbnz	r0, 8007ec4 <_Balloc+0x68>
 8007e94:	2101      	movs	r1, #1
 8007e96:	fa01 f605 	lsl.w	r6, r1, r5
 8007e9a:	1d72      	adds	r2, r6, #5
 8007e9c:	0092      	lsls	r2, r2, #2
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 ff7c 	bl	8008d9c <_calloc_r>
 8007ea4:	b160      	cbz	r0, 8007ec0 <_Balloc+0x64>
 8007ea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eaa:	e00e      	b.n	8007eca <_Balloc+0x6e>
 8007eac:	2221      	movs	r2, #33	; 0x21
 8007eae:	2104      	movs	r1, #4
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 ff73 	bl	8008d9c <_calloc_r>
 8007eb6:	69e3      	ldr	r3, [r4, #28]
 8007eb8:	60f0      	str	r0, [r6, #12]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1e4      	bne.n	8007e8a <_Balloc+0x2e>
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	6802      	ldr	r2, [r0, #0]
 8007ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ed0:	e7f7      	b.n	8007ec2 <_Balloc+0x66>
 8007ed2:	bf00      	nop
 8007ed4:	08009f89 	.word	0x08009f89
 8007ed8:	0800a009 	.word	0x0800a009

08007edc <_Bfree>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	69c6      	ldr	r6, [r0, #28]
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	b976      	cbnz	r6, 8007f04 <_Bfree+0x28>
 8007ee6:	2010      	movs	r0, #16
 8007ee8:	f7ff ff04 	bl	8007cf4 <malloc>
 8007eec:	4602      	mov	r2, r0
 8007eee:	61e8      	str	r0, [r5, #28]
 8007ef0:	b920      	cbnz	r0, 8007efc <_Bfree+0x20>
 8007ef2:	4b09      	ldr	r3, [pc, #36]	; (8007f18 <_Bfree+0x3c>)
 8007ef4:	4809      	ldr	r0, [pc, #36]	; (8007f1c <_Bfree+0x40>)
 8007ef6:	218f      	movs	r1, #143	; 0x8f
 8007ef8:	f000 ff32 	bl	8008d60 <__assert_func>
 8007efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f00:	6006      	str	r6, [r0, #0]
 8007f02:	60c6      	str	r6, [r0, #12]
 8007f04:	b13c      	cbz	r4, 8007f16 <_Bfree+0x3a>
 8007f06:	69eb      	ldr	r3, [r5, #28]
 8007f08:	6862      	ldr	r2, [r4, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f10:	6021      	str	r1, [r4, #0]
 8007f12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
 8007f18:	08009f89 	.word	0x08009f89
 8007f1c:	0800a009 	.word	0x0800a009

08007f20 <__multadd>:
 8007f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f24:	690d      	ldr	r5, [r1, #16]
 8007f26:	4607      	mov	r7, r0
 8007f28:	460c      	mov	r4, r1
 8007f2a:	461e      	mov	r6, r3
 8007f2c:	f101 0c14 	add.w	ip, r1, #20
 8007f30:	2000      	movs	r0, #0
 8007f32:	f8dc 3000 	ldr.w	r3, [ip]
 8007f36:	b299      	uxth	r1, r3
 8007f38:	fb02 6101 	mla	r1, r2, r1, r6
 8007f3c:	0c1e      	lsrs	r6, r3, #16
 8007f3e:	0c0b      	lsrs	r3, r1, #16
 8007f40:	fb02 3306 	mla	r3, r2, r6, r3
 8007f44:	b289      	uxth	r1, r1
 8007f46:	3001      	adds	r0, #1
 8007f48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f4c:	4285      	cmp	r5, r0
 8007f4e:	f84c 1b04 	str.w	r1, [ip], #4
 8007f52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f56:	dcec      	bgt.n	8007f32 <__multadd+0x12>
 8007f58:	b30e      	cbz	r6, 8007f9e <__multadd+0x7e>
 8007f5a:	68a3      	ldr	r3, [r4, #8]
 8007f5c:	42ab      	cmp	r3, r5
 8007f5e:	dc19      	bgt.n	8007f94 <__multadd+0x74>
 8007f60:	6861      	ldr	r1, [r4, #4]
 8007f62:	4638      	mov	r0, r7
 8007f64:	3101      	adds	r1, #1
 8007f66:	f7ff ff79 	bl	8007e5c <_Balloc>
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	b928      	cbnz	r0, 8007f7a <__multadd+0x5a>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <__multadd+0x84>)
 8007f72:	480d      	ldr	r0, [pc, #52]	; (8007fa8 <__multadd+0x88>)
 8007f74:	21ba      	movs	r1, #186	; 0xba
 8007f76:	f000 fef3 	bl	8008d60 <__assert_func>
 8007f7a:	6922      	ldr	r2, [r4, #16]
 8007f7c:	3202      	adds	r2, #2
 8007f7e:	f104 010c 	add.w	r1, r4, #12
 8007f82:	0092      	lsls	r2, r2, #2
 8007f84:	300c      	adds	r0, #12
 8007f86:	f000 fedd 	bl	8008d44 <memcpy>
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f7ff ffa5 	bl	8007edc <_Bfree>
 8007f92:	4644      	mov	r4, r8
 8007f94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f98:	3501      	adds	r5, #1
 8007f9a:	615e      	str	r6, [r3, #20]
 8007f9c:	6125      	str	r5, [r4, #16]
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa4:	08009ff8 	.word	0x08009ff8
 8007fa8:	0800a009 	.word	0x0800a009

08007fac <__hi0bits>:
 8007fac:	0c03      	lsrs	r3, r0, #16
 8007fae:	041b      	lsls	r3, r3, #16
 8007fb0:	b9d3      	cbnz	r3, 8007fe8 <__hi0bits+0x3c>
 8007fb2:	0400      	lsls	r0, r0, #16
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007fba:	bf04      	itt	eq
 8007fbc:	0200      	lsleq	r0, r0, #8
 8007fbe:	3308      	addeq	r3, #8
 8007fc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007fc4:	bf04      	itt	eq
 8007fc6:	0100      	lsleq	r0, r0, #4
 8007fc8:	3304      	addeq	r3, #4
 8007fca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007fce:	bf04      	itt	eq
 8007fd0:	0080      	lsleq	r0, r0, #2
 8007fd2:	3302      	addeq	r3, #2
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	db05      	blt.n	8007fe4 <__hi0bits+0x38>
 8007fd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007fdc:	f103 0301 	add.w	r3, r3, #1
 8007fe0:	bf08      	it	eq
 8007fe2:	2320      	moveq	r3, #32
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	4770      	bx	lr
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e7e4      	b.n	8007fb6 <__hi0bits+0xa>

08007fec <__lo0bits>:
 8007fec:	6803      	ldr	r3, [r0, #0]
 8007fee:	f013 0207 	ands.w	r2, r3, #7
 8007ff2:	d00c      	beq.n	800800e <__lo0bits+0x22>
 8007ff4:	07d9      	lsls	r1, r3, #31
 8007ff6:	d422      	bmi.n	800803e <__lo0bits+0x52>
 8007ff8:	079a      	lsls	r2, r3, #30
 8007ffa:	bf49      	itett	mi
 8007ffc:	085b      	lsrmi	r3, r3, #1
 8007ffe:	089b      	lsrpl	r3, r3, #2
 8008000:	6003      	strmi	r3, [r0, #0]
 8008002:	2201      	movmi	r2, #1
 8008004:	bf5c      	itt	pl
 8008006:	6003      	strpl	r3, [r0, #0]
 8008008:	2202      	movpl	r2, #2
 800800a:	4610      	mov	r0, r2
 800800c:	4770      	bx	lr
 800800e:	b299      	uxth	r1, r3
 8008010:	b909      	cbnz	r1, 8008016 <__lo0bits+0x2a>
 8008012:	0c1b      	lsrs	r3, r3, #16
 8008014:	2210      	movs	r2, #16
 8008016:	b2d9      	uxtb	r1, r3
 8008018:	b909      	cbnz	r1, 800801e <__lo0bits+0x32>
 800801a:	3208      	adds	r2, #8
 800801c:	0a1b      	lsrs	r3, r3, #8
 800801e:	0719      	lsls	r1, r3, #28
 8008020:	bf04      	itt	eq
 8008022:	091b      	lsreq	r3, r3, #4
 8008024:	3204      	addeq	r2, #4
 8008026:	0799      	lsls	r1, r3, #30
 8008028:	bf04      	itt	eq
 800802a:	089b      	lsreq	r3, r3, #2
 800802c:	3202      	addeq	r2, #2
 800802e:	07d9      	lsls	r1, r3, #31
 8008030:	d403      	bmi.n	800803a <__lo0bits+0x4e>
 8008032:	085b      	lsrs	r3, r3, #1
 8008034:	f102 0201 	add.w	r2, r2, #1
 8008038:	d003      	beq.n	8008042 <__lo0bits+0x56>
 800803a:	6003      	str	r3, [r0, #0]
 800803c:	e7e5      	b.n	800800a <__lo0bits+0x1e>
 800803e:	2200      	movs	r2, #0
 8008040:	e7e3      	b.n	800800a <__lo0bits+0x1e>
 8008042:	2220      	movs	r2, #32
 8008044:	e7e1      	b.n	800800a <__lo0bits+0x1e>
	...

08008048 <__i2b>:
 8008048:	b510      	push	{r4, lr}
 800804a:	460c      	mov	r4, r1
 800804c:	2101      	movs	r1, #1
 800804e:	f7ff ff05 	bl	8007e5c <_Balloc>
 8008052:	4602      	mov	r2, r0
 8008054:	b928      	cbnz	r0, 8008062 <__i2b+0x1a>
 8008056:	4b05      	ldr	r3, [pc, #20]	; (800806c <__i2b+0x24>)
 8008058:	4805      	ldr	r0, [pc, #20]	; (8008070 <__i2b+0x28>)
 800805a:	f240 1145 	movw	r1, #325	; 0x145
 800805e:	f000 fe7f 	bl	8008d60 <__assert_func>
 8008062:	2301      	movs	r3, #1
 8008064:	6144      	str	r4, [r0, #20]
 8008066:	6103      	str	r3, [r0, #16]
 8008068:	bd10      	pop	{r4, pc}
 800806a:	bf00      	nop
 800806c:	08009ff8 	.word	0x08009ff8
 8008070:	0800a009 	.word	0x0800a009

08008074 <__multiply>:
 8008074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	4691      	mov	r9, r2
 800807a:	690a      	ldr	r2, [r1, #16]
 800807c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008080:	429a      	cmp	r2, r3
 8008082:	bfb8      	it	lt
 8008084:	460b      	movlt	r3, r1
 8008086:	460c      	mov	r4, r1
 8008088:	bfbc      	itt	lt
 800808a:	464c      	movlt	r4, r9
 800808c:	4699      	movlt	r9, r3
 800808e:	6927      	ldr	r7, [r4, #16]
 8008090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008094:	68a3      	ldr	r3, [r4, #8]
 8008096:	6861      	ldr	r1, [r4, #4]
 8008098:	eb07 060a 	add.w	r6, r7, sl
 800809c:	42b3      	cmp	r3, r6
 800809e:	b085      	sub	sp, #20
 80080a0:	bfb8      	it	lt
 80080a2:	3101      	addlt	r1, #1
 80080a4:	f7ff feda 	bl	8007e5c <_Balloc>
 80080a8:	b930      	cbnz	r0, 80080b8 <__multiply+0x44>
 80080aa:	4602      	mov	r2, r0
 80080ac:	4b44      	ldr	r3, [pc, #272]	; (80081c0 <__multiply+0x14c>)
 80080ae:	4845      	ldr	r0, [pc, #276]	; (80081c4 <__multiply+0x150>)
 80080b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80080b4:	f000 fe54 	bl	8008d60 <__assert_func>
 80080b8:	f100 0514 	add.w	r5, r0, #20
 80080bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080c0:	462b      	mov	r3, r5
 80080c2:	2200      	movs	r2, #0
 80080c4:	4543      	cmp	r3, r8
 80080c6:	d321      	bcc.n	800810c <__multiply+0x98>
 80080c8:	f104 0314 	add.w	r3, r4, #20
 80080cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80080d0:	f109 0314 	add.w	r3, r9, #20
 80080d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80080d8:	9202      	str	r2, [sp, #8]
 80080da:	1b3a      	subs	r2, r7, r4
 80080dc:	3a15      	subs	r2, #21
 80080de:	f022 0203 	bic.w	r2, r2, #3
 80080e2:	3204      	adds	r2, #4
 80080e4:	f104 0115 	add.w	r1, r4, #21
 80080e8:	428f      	cmp	r7, r1
 80080ea:	bf38      	it	cc
 80080ec:	2204      	movcc	r2, #4
 80080ee:	9201      	str	r2, [sp, #4]
 80080f0:	9a02      	ldr	r2, [sp, #8]
 80080f2:	9303      	str	r3, [sp, #12]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d80c      	bhi.n	8008112 <__multiply+0x9e>
 80080f8:	2e00      	cmp	r6, #0
 80080fa:	dd03      	ble.n	8008104 <__multiply+0x90>
 80080fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008100:	2b00      	cmp	r3, #0
 8008102:	d05b      	beq.n	80081bc <__multiply+0x148>
 8008104:	6106      	str	r6, [r0, #16]
 8008106:	b005      	add	sp, #20
 8008108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810c:	f843 2b04 	str.w	r2, [r3], #4
 8008110:	e7d8      	b.n	80080c4 <__multiply+0x50>
 8008112:	f8b3 a000 	ldrh.w	sl, [r3]
 8008116:	f1ba 0f00 	cmp.w	sl, #0
 800811a:	d024      	beq.n	8008166 <__multiply+0xf2>
 800811c:	f104 0e14 	add.w	lr, r4, #20
 8008120:	46a9      	mov	r9, r5
 8008122:	f04f 0c00 	mov.w	ip, #0
 8008126:	f85e 2b04 	ldr.w	r2, [lr], #4
 800812a:	f8d9 1000 	ldr.w	r1, [r9]
 800812e:	fa1f fb82 	uxth.w	fp, r2
 8008132:	b289      	uxth	r1, r1
 8008134:	fb0a 110b 	mla	r1, sl, fp, r1
 8008138:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800813c:	f8d9 2000 	ldr.w	r2, [r9]
 8008140:	4461      	add	r1, ip
 8008142:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008146:	fb0a c20b 	mla	r2, sl, fp, ip
 800814a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800814e:	b289      	uxth	r1, r1
 8008150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008154:	4577      	cmp	r7, lr
 8008156:	f849 1b04 	str.w	r1, [r9], #4
 800815a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800815e:	d8e2      	bhi.n	8008126 <__multiply+0xb2>
 8008160:	9a01      	ldr	r2, [sp, #4]
 8008162:	f845 c002 	str.w	ip, [r5, r2]
 8008166:	9a03      	ldr	r2, [sp, #12]
 8008168:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800816c:	3304      	adds	r3, #4
 800816e:	f1b9 0f00 	cmp.w	r9, #0
 8008172:	d021      	beq.n	80081b8 <__multiply+0x144>
 8008174:	6829      	ldr	r1, [r5, #0]
 8008176:	f104 0c14 	add.w	ip, r4, #20
 800817a:	46ae      	mov	lr, r5
 800817c:	f04f 0a00 	mov.w	sl, #0
 8008180:	f8bc b000 	ldrh.w	fp, [ip]
 8008184:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008188:	fb09 220b 	mla	r2, r9, fp, r2
 800818c:	4452      	add	r2, sl
 800818e:	b289      	uxth	r1, r1
 8008190:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008194:	f84e 1b04 	str.w	r1, [lr], #4
 8008198:	f85c 1b04 	ldr.w	r1, [ip], #4
 800819c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80081a0:	f8be 1000 	ldrh.w	r1, [lr]
 80081a4:	fb09 110a 	mla	r1, r9, sl, r1
 80081a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80081ac:	4567      	cmp	r7, ip
 80081ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80081b2:	d8e5      	bhi.n	8008180 <__multiply+0x10c>
 80081b4:	9a01      	ldr	r2, [sp, #4]
 80081b6:	50a9      	str	r1, [r5, r2]
 80081b8:	3504      	adds	r5, #4
 80081ba:	e799      	b.n	80080f0 <__multiply+0x7c>
 80081bc:	3e01      	subs	r6, #1
 80081be:	e79b      	b.n	80080f8 <__multiply+0x84>
 80081c0:	08009ff8 	.word	0x08009ff8
 80081c4:	0800a009 	.word	0x0800a009

080081c8 <__pow5mult>:
 80081c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081cc:	4615      	mov	r5, r2
 80081ce:	f012 0203 	ands.w	r2, r2, #3
 80081d2:	4606      	mov	r6, r0
 80081d4:	460f      	mov	r7, r1
 80081d6:	d007      	beq.n	80081e8 <__pow5mult+0x20>
 80081d8:	4c25      	ldr	r4, [pc, #148]	; (8008270 <__pow5mult+0xa8>)
 80081da:	3a01      	subs	r2, #1
 80081dc:	2300      	movs	r3, #0
 80081de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081e2:	f7ff fe9d 	bl	8007f20 <__multadd>
 80081e6:	4607      	mov	r7, r0
 80081e8:	10ad      	asrs	r5, r5, #2
 80081ea:	d03d      	beq.n	8008268 <__pow5mult+0xa0>
 80081ec:	69f4      	ldr	r4, [r6, #28]
 80081ee:	b97c      	cbnz	r4, 8008210 <__pow5mult+0x48>
 80081f0:	2010      	movs	r0, #16
 80081f2:	f7ff fd7f 	bl	8007cf4 <malloc>
 80081f6:	4602      	mov	r2, r0
 80081f8:	61f0      	str	r0, [r6, #28]
 80081fa:	b928      	cbnz	r0, 8008208 <__pow5mult+0x40>
 80081fc:	4b1d      	ldr	r3, [pc, #116]	; (8008274 <__pow5mult+0xac>)
 80081fe:	481e      	ldr	r0, [pc, #120]	; (8008278 <__pow5mult+0xb0>)
 8008200:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008204:	f000 fdac 	bl	8008d60 <__assert_func>
 8008208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800820c:	6004      	str	r4, [r0, #0]
 800820e:	60c4      	str	r4, [r0, #12]
 8008210:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008218:	b94c      	cbnz	r4, 800822e <__pow5mult+0x66>
 800821a:	f240 2171 	movw	r1, #625	; 0x271
 800821e:	4630      	mov	r0, r6
 8008220:	f7ff ff12 	bl	8008048 <__i2b>
 8008224:	2300      	movs	r3, #0
 8008226:	f8c8 0008 	str.w	r0, [r8, #8]
 800822a:	4604      	mov	r4, r0
 800822c:	6003      	str	r3, [r0, #0]
 800822e:	f04f 0900 	mov.w	r9, #0
 8008232:	07eb      	lsls	r3, r5, #31
 8008234:	d50a      	bpl.n	800824c <__pow5mult+0x84>
 8008236:	4639      	mov	r1, r7
 8008238:	4622      	mov	r2, r4
 800823a:	4630      	mov	r0, r6
 800823c:	f7ff ff1a 	bl	8008074 <__multiply>
 8008240:	4639      	mov	r1, r7
 8008242:	4680      	mov	r8, r0
 8008244:	4630      	mov	r0, r6
 8008246:	f7ff fe49 	bl	8007edc <_Bfree>
 800824a:	4647      	mov	r7, r8
 800824c:	106d      	asrs	r5, r5, #1
 800824e:	d00b      	beq.n	8008268 <__pow5mult+0xa0>
 8008250:	6820      	ldr	r0, [r4, #0]
 8008252:	b938      	cbnz	r0, 8008264 <__pow5mult+0x9c>
 8008254:	4622      	mov	r2, r4
 8008256:	4621      	mov	r1, r4
 8008258:	4630      	mov	r0, r6
 800825a:	f7ff ff0b 	bl	8008074 <__multiply>
 800825e:	6020      	str	r0, [r4, #0]
 8008260:	f8c0 9000 	str.w	r9, [r0]
 8008264:	4604      	mov	r4, r0
 8008266:	e7e4      	b.n	8008232 <__pow5mult+0x6a>
 8008268:	4638      	mov	r0, r7
 800826a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800826e:	bf00      	nop
 8008270:	0800a158 	.word	0x0800a158
 8008274:	08009f89 	.word	0x08009f89
 8008278:	0800a009 	.word	0x0800a009

0800827c <__lshift>:
 800827c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008280:	460c      	mov	r4, r1
 8008282:	6849      	ldr	r1, [r1, #4]
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	4607      	mov	r7, r0
 800828e:	4691      	mov	r9, r2
 8008290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008294:	f108 0601 	add.w	r6, r8, #1
 8008298:	42b3      	cmp	r3, r6
 800829a:	db0b      	blt.n	80082b4 <__lshift+0x38>
 800829c:	4638      	mov	r0, r7
 800829e:	f7ff fddd 	bl	8007e5c <_Balloc>
 80082a2:	4605      	mov	r5, r0
 80082a4:	b948      	cbnz	r0, 80082ba <__lshift+0x3e>
 80082a6:	4602      	mov	r2, r0
 80082a8:	4b28      	ldr	r3, [pc, #160]	; (800834c <__lshift+0xd0>)
 80082aa:	4829      	ldr	r0, [pc, #164]	; (8008350 <__lshift+0xd4>)
 80082ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80082b0:	f000 fd56 	bl	8008d60 <__assert_func>
 80082b4:	3101      	adds	r1, #1
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	e7ee      	b.n	8008298 <__lshift+0x1c>
 80082ba:	2300      	movs	r3, #0
 80082bc:	f100 0114 	add.w	r1, r0, #20
 80082c0:	f100 0210 	add.w	r2, r0, #16
 80082c4:	4618      	mov	r0, r3
 80082c6:	4553      	cmp	r3, sl
 80082c8:	db33      	blt.n	8008332 <__lshift+0xb6>
 80082ca:	6920      	ldr	r0, [r4, #16]
 80082cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082d0:	f104 0314 	add.w	r3, r4, #20
 80082d4:	f019 091f 	ands.w	r9, r9, #31
 80082d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082e0:	d02b      	beq.n	800833a <__lshift+0xbe>
 80082e2:	f1c9 0e20 	rsb	lr, r9, #32
 80082e6:	468a      	mov	sl, r1
 80082e8:	2200      	movs	r2, #0
 80082ea:	6818      	ldr	r0, [r3, #0]
 80082ec:	fa00 f009 	lsl.w	r0, r0, r9
 80082f0:	4310      	orrs	r0, r2
 80082f2:	f84a 0b04 	str.w	r0, [sl], #4
 80082f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082fa:	459c      	cmp	ip, r3
 80082fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008300:	d8f3      	bhi.n	80082ea <__lshift+0x6e>
 8008302:	ebac 0304 	sub.w	r3, ip, r4
 8008306:	3b15      	subs	r3, #21
 8008308:	f023 0303 	bic.w	r3, r3, #3
 800830c:	3304      	adds	r3, #4
 800830e:	f104 0015 	add.w	r0, r4, #21
 8008312:	4584      	cmp	ip, r0
 8008314:	bf38      	it	cc
 8008316:	2304      	movcc	r3, #4
 8008318:	50ca      	str	r2, [r1, r3]
 800831a:	b10a      	cbz	r2, 8008320 <__lshift+0xa4>
 800831c:	f108 0602 	add.w	r6, r8, #2
 8008320:	3e01      	subs	r6, #1
 8008322:	4638      	mov	r0, r7
 8008324:	612e      	str	r6, [r5, #16]
 8008326:	4621      	mov	r1, r4
 8008328:	f7ff fdd8 	bl	8007edc <_Bfree>
 800832c:	4628      	mov	r0, r5
 800832e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008332:	f842 0f04 	str.w	r0, [r2, #4]!
 8008336:	3301      	adds	r3, #1
 8008338:	e7c5      	b.n	80082c6 <__lshift+0x4a>
 800833a:	3904      	subs	r1, #4
 800833c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008340:	f841 2f04 	str.w	r2, [r1, #4]!
 8008344:	459c      	cmp	ip, r3
 8008346:	d8f9      	bhi.n	800833c <__lshift+0xc0>
 8008348:	e7ea      	b.n	8008320 <__lshift+0xa4>
 800834a:	bf00      	nop
 800834c:	08009ff8 	.word	0x08009ff8
 8008350:	0800a009 	.word	0x0800a009

08008354 <__mcmp>:
 8008354:	b530      	push	{r4, r5, lr}
 8008356:	6902      	ldr	r2, [r0, #16]
 8008358:	690c      	ldr	r4, [r1, #16]
 800835a:	1b12      	subs	r2, r2, r4
 800835c:	d10e      	bne.n	800837c <__mcmp+0x28>
 800835e:	f100 0314 	add.w	r3, r0, #20
 8008362:	3114      	adds	r1, #20
 8008364:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008368:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800836c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008370:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008374:	42a5      	cmp	r5, r4
 8008376:	d003      	beq.n	8008380 <__mcmp+0x2c>
 8008378:	d305      	bcc.n	8008386 <__mcmp+0x32>
 800837a:	2201      	movs	r2, #1
 800837c:	4610      	mov	r0, r2
 800837e:	bd30      	pop	{r4, r5, pc}
 8008380:	4283      	cmp	r3, r0
 8008382:	d3f3      	bcc.n	800836c <__mcmp+0x18>
 8008384:	e7fa      	b.n	800837c <__mcmp+0x28>
 8008386:	f04f 32ff 	mov.w	r2, #4294967295
 800838a:	e7f7      	b.n	800837c <__mcmp+0x28>

0800838c <__mdiff>:
 800838c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	460c      	mov	r4, r1
 8008392:	4606      	mov	r6, r0
 8008394:	4611      	mov	r1, r2
 8008396:	4620      	mov	r0, r4
 8008398:	4690      	mov	r8, r2
 800839a:	f7ff ffdb 	bl	8008354 <__mcmp>
 800839e:	1e05      	subs	r5, r0, #0
 80083a0:	d110      	bne.n	80083c4 <__mdiff+0x38>
 80083a2:	4629      	mov	r1, r5
 80083a4:	4630      	mov	r0, r6
 80083a6:	f7ff fd59 	bl	8007e5c <_Balloc>
 80083aa:	b930      	cbnz	r0, 80083ba <__mdiff+0x2e>
 80083ac:	4b3a      	ldr	r3, [pc, #232]	; (8008498 <__mdiff+0x10c>)
 80083ae:	4602      	mov	r2, r0
 80083b0:	f240 2137 	movw	r1, #567	; 0x237
 80083b4:	4839      	ldr	r0, [pc, #228]	; (800849c <__mdiff+0x110>)
 80083b6:	f000 fcd3 	bl	8008d60 <__assert_func>
 80083ba:	2301      	movs	r3, #1
 80083bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	bfa4      	itt	ge
 80083c6:	4643      	movge	r3, r8
 80083c8:	46a0      	movge	r8, r4
 80083ca:	4630      	mov	r0, r6
 80083cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80083d0:	bfa6      	itte	ge
 80083d2:	461c      	movge	r4, r3
 80083d4:	2500      	movge	r5, #0
 80083d6:	2501      	movlt	r5, #1
 80083d8:	f7ff fd40 	bl	8007e5c <_Balloc>
 80083dc:	b920      	cbnz	r0, 80083e8 <__mdiff+0x5c>
 80083de:	4b2e      	ldr	r3, [pc, #184]	; (8008498 <__mdiff+0x10c>)
 80083e0:	4602      	mov	r2, r0
 80083e2:	f240 2145 	movw	r1, #581	; 0x245
 80083e6:	e7e5      	b.n	80083b4 <__mdiff+0x28>
 80083e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80083ec:	6926      	ldr	r6, [r4, #16]
 80083ee:	60c5      	str	r5, [r0, #12]
 80083f0:	f104 0914 	add.w	r9, r4, #20
 80083f4:	f108 0514 	add.w	r5, r8, #20
 80083f8:	f100 0e14 	add.w	lr, r0, #20
 80083fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008400:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008404:	f108 0210 	add.w	r2, r8, #16
 8008408:	46f2      	mov	sl, lr
 800840a:	2100      	movs	r1, #0
 800840c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008410:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008414:	fa11 f88b 	uxtah	r8, r1, fp
 8008418:	b299      	uxth	r1, r3
 800841a:	0c1b      	lsrs	r3, r3, #16
 800841c:	eba8 0801 	sub.w	r8, r8, r1
 8008420:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008424:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008428:	fa1f f888 	uxth.w	r8, r8
 800842c:	1419      	asrs	r1, r3, #16
 800842e:	454e      	cmp	r6, r9
 8008430:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008434:	f84a 3b04 	str.w	r3, [sl], #4
 8008438:	d8e8      	bhi.n	800840c <__mdiff+0x80>
 800843a:	1b33      	subs	r3, r6, r4
 800843c:	3b15      	subs	r3, #21
 800843e:	f023 0303 	bic.w	r3, r3, #3
 8008442:	3304      	adds	r3, #4
 8008444:	3415      	adds	r4, #21
 8008446:	42a6      	cmp	r6, r4
 8008448:	bf38      	it	cc
 800844a:	2304      	movcc	r3, #4
 800844c:	441d      	add	r5, r3
 800844e:	4473      	add	r3, lr
 8008450:	469e      	mov	lr, r3
 8008452:	462e      	mov	r6, r5
 8008454:	4566      	cmp	r6, ip
 8008456:	d30e      	bcc.n	8008476 <__mdiff+0xea>
 8008458:	f10c 0203 	add.w	r2, ip, #3
 800845c:	1b52      	subs	r2, r2, r5
 800845e:	f022 0203 	bic.w	r2, r2, #3
 8008462:	3d03      	subs	r5, #3
 8008464:	45ac      	cmp	ip, r5
 8008466:	bf38      	it	cc
 8008468:	2200      	movcc	r2, #0
 800846a:	4413      	add	r3, r2
 800846c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008470:	b17a      	cbz	r2, 8008492 <__mdiff+0x106>
 8008472:	6107      	str	r7, [r0, #16]
 8008474:	e7a4      	b.n	80083c0 <__mdiff+0x34>
 8008476:	f856 8b04 	ldr.w	r8, [r6], #4
 800847a:	fa11 f288 	uxtah	r2, r1, r8
 800847e:	1414      	asrs	r4, r2, #16
 8008480:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008484:	b292      	uxth	r2, r2
 8008486:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800848a:	f84e 2b04 	str.w	r2, [lr], #4
 800848e:	1421      	asrs	r1, r4, #16
 8008490:	e7e0      	b.n	8008454 <__mdiff+0xc8>
 8008492:	3f01      	subs	r7, #1
 8008494:	e7ea      	b.n	800846c <__mdiff+0xe0>
 8008496:	bf00      	nop
 8008498:	08009ff8 	.word	0x08009ff8
 800849c:	0800a009 	.word	0x0800a009

080084a0 <__d2b>:
 80084a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084a4:	460f      	mov	r7, r1
 80084a6:	2101      	movs	r1, #1
 80084a8:	ec59 8b10 	vmov	r8, r9, d0
 80084ac:	4616      	mov	r6, r2
 80084ae:	f7ff fcd5 	bl	8007e5c <_Balloc>
 80084b2:	4604      	mov	r4, r0
 80084b4:	b930      	cbnz	r0, 80084c4 <__d2b+0x24>
 80084b6:	4602      	mov	r2, r0
 80084b8:	4b24      	ldr	r3, [pc, #144]	; (800854c <__d2b+0xac>)
 80084ba:	4825      	ldr	r0, [pc, #148]	; (8008550 <__d2b+0xb0>)
 80084bc:	f240 310f 	movw	r1, #783	; 0x30f
 80084c0:	f000 fc4e 	bl	8008d60 <__assert_func>
 80084c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084cc:	bb2d      	cbnz	r5, 800851a <__d2b+0x7a>
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	f1b8 0300 	subs.w	r3, r8, #0
 80084d4:	d026      	beq.n	8008524 <__d2b+0x84>
 80084d6:	4668      	mov	r0, sp
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	f7ff fd87 	bl	8007fec <__lo0bits>
 80084de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084e2:	b1e8      	cbz	r0, 8008520 <__d2b+0x80>
 80084e4:	f1c0 0320 	rsb	r3, r0, #32
 80084e8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ec:	430b      	orrs	r3, r1
 80084ee:	40c2      	lsrs	r2, r0
 80084f0:	6163      	str	r3, [r4, #20]
 80084f2:	9201      	str	r2, [sp, #4]
 80084f4:	9b01      	ldr	r3, [sp, #4]
 80084f6:	61a3      	str	r3, [r4, #24]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	bf14      	ite	ne
 80084fc:	2202      	movne	r2, #2
 80084fe:	2201      	moveq	r2, #1
 8008500:	6122      	str	r2, [r4, #16]
 8008502:	b1bd      	cbz	r5, 8008534 <__d2b+0x94>
 8008504:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008508:	4405      	add	r5, r0
 800850a:	603d      	str	r5, [r7, #0]
 800850c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008510:	6030      	str	r0, [r6, #0]
 8008512:	4620      	mov	r0, r4
 8008514:	b003      	add	sp, #12
 8008516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800851a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800851e:	e7d6      	b.n	80084ce <__d2b+0x2e>
 8008520:	6161      	str	r1, [r4, #20]
 8008522:	e7e7      	b.n	80084f4 <__d2b+0x54>
 8008524:	a801      	add	r0, sp, #4
 8008526:	f7ff fd61 	bl	8007fec <__lo0bits>
 800852a:	9b01      	ldr	r3, [sp, #4]
 800852c:	6163      	str	r3, [r4, #20]
 800852e:	3020      	adds	r0, #32
 8008530:	2201      	movs	r2, #1
 8008532:	e7e5      	b.n	8008500 <__d2b+0x60>
 8008534:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008538:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800853c:	6038      	str	r0, [r7, #0]
 800853e:	6918      	ldr	r0, [r3, #16]
 8008540:	f7ff fd34 	bl	8007fac <__hi0bits>
 8008544:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008548:	e7e2      	b.n	8008510 <__d2b+0x70>
 800854a:	bf00      	nop
 800854c:	08009ff8 	.word	0x08009ff8
 8008550:	0800a009 	.word	0x0800a009

08008554 <__ssputs_r>:
 8008554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008558:	688e      	ldr	r6, [r1, #8]
 800855a:	461f      	mov	r7, r3
 800855c:	42be      	cmp	r6, r7
 800855e:	680b      	ldr	r3, [r1, #0]
 8008560:	4682      	mov	sl, r0
 8008562:	460c      	mov	r4, r1
 8008564:	4690      	mov	r8, r2
 8008566:	d82c      	bhi.n	80085c2 <__ssputs_r+0x6e>
 8008568:	898a      	ldrh	r2, [r1, #12]
 800856a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800856e:	d026      	beq.n	80085be <__ssputs_r+0x6a>
 8008570:	6965      	ldr	r5, [r4, #20]
 8008572:	6909      	ldr	r1, [r1, #16]
 8008574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008578:	eba3 0901 	sub.w	r9, r3, r1
 800857c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008580:	1c7b      	adds	r3, r7, #1
 8008582:	444b      	add	r3, r9
 8008584:	106d      	asrs	r5, r5, #1
 8008586:	429d      	cmp	r5, r3
 8008588:	bf38      	it	cc
 800858a:	461d      	movcc	r5, r3
 800858c:	0553      	lsls	r3, r2, #21
 800858e:	d527      	bpl.n	80085e0 <__ssputs_r+0x8c>
 8008590:	4629      	mov	r1, r5
 8008592:	f7ff fbd7 	bl	8007d44 <_malloc_r>
 8008596:	4606      	mov	r6, r0
 8008598:	b360      	cbz	r0, 80085f4 <__ssputs_r+0xa0>
 800859a:	6921      	ldr	r1, [r4, #16]
 800859c:	464a      	mov	r2, r9
 800859e:	f000 fbd1 	bl	8008d44 <memcpy>
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ac:	81a3      	strh	r3, [r4, #12]
 80085ae:	6126      	str	r6, [r4, #16]
 80085b0:	6165      	str	r5, [r4, #20]
 80085b2:	444e      	add	r6, r9
 80085b4:	eba5 0509 	sub.w	r5, r5, r9
 80085b8:	6026      	str	r6, [r4, #0]
 80085ba:	60a5      	str	r5, [r4, #8]
 80085bc:	463e      	mov	r6, r7
 80085be:	42be      	cmp	r6, r7
 80085c0:	d900      	bls.n	80085c4 <__ssputs_r+0x70>
 80085c2:	463e      	mov	r6, r7
 80085c4:	6820      	ldr	r0, [r4, #0]
 80085c6:	4632      	mov	r2, r6
 80085c8:	4641      	mov	r1, r8
 80085ca:	f000 fb6f 	bl	8008cac <memmove>
 80085ce:	68a3      	ldr	r3, [r4, #8]
 80085d0:	1b9b      	subs	r3, r3, r6
 80085d2:	60a3      	str	r3, [r4, #8]
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	4433      	add	r3, r6
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	2000      	movs	r0, #0
 80085dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e0:	462a      	mov	r2, r5
 80085e2:	f000 fc03 	bl	8008dec <_realloc_r>
 80085e6:	4606      	mov	r6, r0
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d1e0      	bne.n	80085ae <__ssputs_r+0x5a>
 80085ec:	6921      	ldr	r1, [r4, #16]
 80085ee:	4650      	mov	r0, sl
 80085f0:	f7ff fb34 	bl	8007c5c <_free_r>
 80085f4:	230c      	movs	r3, #12
 80085f6:	f8ca 3000 	str.w	r3, [sl]
 80085fa:	89a3      	ldrh	r3, [r4, #12]
 80085fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008600:	81a3      	strh	r3, [r4, #12]
 8008602:	f04f 30ff 	mov.w	r0, #4294967295
 8008606:	e7e9      	b.n	80085dc <__ssputs_r+0x88>

08008608 <_svfiprintf_r>:
 8008608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860c:	4698      	mov	r8, r3
 800860e:	898b      	ldrh	r3, [r1, #12]
 8008610:	061b      	lsls	r3, r3, #24
 8008612:	b09d      	sub	sp, #116	; 0x74
 8008614:	4607      	mov	r7, r0
 8008616:	460d      	mov	r5, r1
 8008618:	4614      	mov	r4, r2
 800861a:	d50e      	bpl.n	800863a <_svfiprintf_r+0x32>
 800861c:	690b      	ldr	r3, [r1, #16]
 800861e:	b963      	cbnz	r3, 800863a <_svfiprintf_r+0x32>
 8008620:	2140      	movs	r1, #64	; 0x40
 8008622:	f7ff fb8f 	bl	8007d44 <_malloc_r>
 8008626:	6028      	str	r0, [r5, #0]
 8008628:	6128      	str	r0, [r5, #16]
 800862a:	b920      	cbnz	r0, 8008636 <_svfiprintf_r+0x2e>
 800862c:	230c      	movs	r3, #12
 800862e:	603b      	str	r3, [r7, #0]
 8008630:	f04f 30ff 	mov.w	r0, #4294967295
 8008634:	e0d0      	b.n	80087d8 <_svfiprintf_r+0x1d0>
 8008636:	2340      	movs	r3, #64	; 0x40
 8008638:	616b      	str	r3, [r5, #20]
 800863a:	2300      	movs	r3, #0
 800863c:	9309      	str	r3, [sp, #36]	; 0x24
 800863e:	2320      	movs	r3, #32
 8008640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008644:	f8cd 800c 	str.w	r8, [sp, #12]
 8008648:	2330      	movs	r3, #48	; 0x30
 800864a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80087f0 <_svfiprintf_r+0x1e8>
 800864e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008652:	f04f 0901 	mov.w	r9, #1
 8008656:	4623      	mov	r3, r4
 8008658:	469a      	mov	sl, r3
 800865a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800865e:	b10a      	cbz	r2, 8008664 <_svfiprintf_r+0x5c>
 8008660:	2a25      	cmp	r2, #37	; 0x25
 8008662:	d1f9      	bne.n	8008658 <_svfiprintf_r+0x50>
 8008664:	ebba 0b04 	subs.w	fp, sl, r4
 8008668:	d00b      	beq.n	8008682 <_svfiprintf_r+0x7a>
 800866a:	465b      	mov	r3, fp
 800866c:	4622      	mov	r2, r4
 800866e:	4629      	mov	r1, r5
 8008670:	4638      	mov	r0, r7
 8008672:	f7ff ff6f 	bl	8008554 <__ssputs_r>
 8008676:	3001      	adds	r0, #1
 8008678:	f000 80a9 	beq.w	80087ce <_svfiprintf_r+0x1c6>
 800867c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800867e:	445a      	add	r2, fp
 8008680:	9209      	str	r2, [sp, #36]	; 0x24
 8008682:	f89a 3000 	ldrb.w	r3, [sl]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80a1 	beq.w	80087ce <_svfiprintf_r+0x1c6>
 800868c:	2300      	movs	r3, #0
 800868e:	f04f 32ff 	mov.w	r2, #4294967295
 8008692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008696:	f10a 0a01 	add.w	sl, sl, #1
 800869a:	9304      	str	r3, [sp, #16]
 800869c:	9307      	str	r3, [sp, #28]
 800869e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086a2:	931a      	str	r3, [sp, #104]	; 0x68
 80086a4:	4654      	mov	r4, sl
 80086a6:	2205      	movs	r2, #5
 80086a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ac:	4850      	ldr	r0, [pc, #320]	; (80087f0 <_svfiprintf_r+0x1e8>)
 80086ae:	f7f7 fd8f 	bl	80001d0 <memchr>
 80086b2:	9a04      	ldr	r2, [sp, #16]
 80086b4:	b9d8      	cbnz	r0, 80086ee <_svfiprintf_r+0xe6>
 80086b6:	06d0      	lsls	r0, r2, #27
 80086b8:	bf44      	itt	mi
 80086ba:	2320      	movmi	r3, #32
 80086bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086c0:	0711      	lsls	r1, r2, #28
 80086c2:	bf44      	itt	mi
 80086c4:	232b      	movmi	r3, #43	; 0x2b
 80086c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ca:	f89a 3000 	ldrb.w	r3, [sl]
 80086ce:	2b2a      	cmp	r3, #42	; 0x2a
 80086d0:	d015      	beq.n	80086fe <_svfiprintf_r+0xf6>
 80086d2:	9a07      	ldr	r2, [sp, #28]
 80086d4:	4654      	mov	r4, sl
 80086d6:	2000      	movs	r0, #0
 80086d8:	f04f 0c0a 	mov.w	ip, #10
 80086dc:	4621      	mov	r1, r4
 80086de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086e2:	3b30      	subs	r3, #48	; 0x30
 80086e4:	2b09      	cmp	r3, #9
 80086e6:	d94d      	bls.n	8008784 <_svfiprintf_r+0x17c>
 80086e8:	b1b0      	cbz	r0, 8008718 <_svfiprintf_r+0x110>
 80086ea:	9207      	str	r2, [sp, #28]
 80086ec:	e014      	b.n	8008718 <_svfiprintf_r+0x110>
 80086ee:	eba0 0308 	sub.w	r3, r0, r8
 80086f2:	fa09 f303 	lsl.w	r3, r9, r3
 80086f6:	4313      	orrs	r3, r2
 80086f8:	9304      	str	r3, [sp, #16]
 80086fa:	46a2      	mov	sl, r4
 80086fc:	e7d2      	b.n	80086a4 <_svfiprintf_r+0x9c>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	1d19      	adds	r1, r3, #4
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	9103      	str	r1, [sp, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	bfbb      	ittet	lt
 800870a:	425b      	neglt	r3, r3
 800870c:	f042 0202 	orrlt.w	r2, r2, #2
 8008710:	9307      	strge	r3, [sp, #28]
 8008712:	9307      	strlt	r3, [sp, #28]
 8008714:	bfb8      	it	lt
 8008716:	9204      	strlt	r2, [sp, #16]
 8008718:	7823      	ldrb	r3, [r4, #0]
 800871a:	2b2e      	cmp	r3, #46	; 0x2e
 800871c:	d10c      	bne.n	8008738 <_svfiprintf_r+0x130>
 800871e:	7863      	ldrb	r3, [r4, #1]
 8008720:	2b2a      	cmp	r3, #42	; 0x2a
 8008722:	d134      	bne.n	800878e <_svfiprintf_r+0x186>
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	1d1a      	adds	r2, r3, #4
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	9203      	str	r2, [sp, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	bfb8      	it	lt
 8008730:	f04f 33ff 	movlt.w	r3, #4294967295
 8008734:	3402      	adds	r4, #2
 8008736:	9305      	str	r3, [sp, #20]
 8008738:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008800 <_svfiprintf_r+0x1f8>
 800873c:	7821      	ldrb	r1, [r4, #0]
 800873e:	2203      	movs	r2, #3
 8008740:	4650      	mov	r0, sl
 8008742:	f7f7 fd45 	bl	80001d0 <memchr>
 8008746:	b138      	cbz	r0, 8008758 <_svfiprintf_r+0x150>
 8008748:	9b04      	ldr	r3, [sp, #16]
 800874a:	eba0 000a 	sub.w	r0, r0, sl
 800874e:	2240      	movs	r2, #64	; 0x40
 8008750:	4082      	lsls	r2, r0
 8008752:	4313      	orrs	r3, r2
 8008754:	3401      	adds	r4, #1
 8008756:	9304      	str	r3, [sp, #16]
 8008758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800875c:	4825      	ldr	r0, [pc, #148]	; (80087f4 <_svfiprintf_r+0x1ec>)
 800875e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008762:	2206      	movs	r2, #6
 8008764:	f7f7 fd34 	bl	80001d0 <memchr>
 8008768:	2800      	cmp	r0, #0
 800876a:	d038      	beq.n	80087de <_svfiprintf_r+0x1d6>
 800876c:	4b22      	ldr	r3, [pc, #136]	; (80087f8 <_svfiprintf_r+0x1f0>)
 800876e:	bb1b      	cbnz	r3, 80087b8 <_svfiprintf_r+0x1b0>
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	3307      	adds	r3, #7
 8008774:	f023 0307 	bic.w	r3, r3, #7
 8008778:	3308      	adds	r3, #8
 800877a:	9303      	str	r3, [sp, #12]
 800877c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800877e:	4433      	add	r3, r6
 8008780:	9309      	str	r3, [sp, #36]	; 0x24
 8008782:	e768      	b.n	8008656 <_svfiprintf_r+0x4e>
 8008784:	fb0c 3202 	mla	r2, ip, r2, r3
 8008788:	460c      	mov	r4, r1
 800878a:	2001      	movs	r0, #1
 800878c:	e7a6      	b.n	80086dc <_svfiprintf_r+0xd4>
 800878e:	2300      	movs	r3, #0
 8008790:	3401      	adds	r4, #1
 8008792:	9305      	str	r3, [sp, #20]
 8008794:	4619      	mov	r1, r3
 8008796:	f04f 0c0a 	mov.w	ip, #10
 800879a:	4620      	mov	r0, r4
 800879c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087a0:	3a30      	subs	r2, #48	; 0x30
 80087a2:	2a09      	cmp	r2, #9
 80087a4:	d903      	bls.n	80087ae <_svfiprintf_r+0x1a6>
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0c6      	beq.n	8008738 <_svfiprintf_r+0x130>
 80087aa:	9105      	str	r1, [sp, #20]
 80087ac:	e7c4      	b.n	8008738 <_svfiprintf_r+0x130>
 80087ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80087b2:	4604      	mov	r4, r0
 80087b4:	2301      	movs	r3, #1
 80087b6:	e7f0      	b.n	800879a <_svfiprintf_r+0x192>
 80087b8:	ab03      	add	r3, sp, #12
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	462a      	mov	r2, r5
 80087be:	4b0f      	ldr	r3, [pc, #60]	; (80087fc <_svfiprintf_r+0x1f4>)
 80087c0:	a904      	add	r1, sp, #16
 80087c2:	4638      	mov	r0, r7
 80087c4:	f7fd fd60 	bl	8006288 <_printf_float>
 80087c8:	1c42      	adds	r2, r0, #1
 80087ca:	4606      	mov	r6, r0
 80087cc:	d1d6      	bne.n	800877c <_svfiprintf_r+0x174>
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	065b      	lsls	r3, r3, #25
 80087d2:	f53f af2d 	bmi.w	8008630 <_svfiprintf_r+0x28>
 80087d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087d8:	b01d      	add	sp, #116	; 0x74
 80087da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087de:	ab03      	add	r3, sp, #12
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	462a      	mov	r2, r5
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <_svfiprintf_r+0x1f4>)
 80087e6:	a904      	add	r1, sp, #16
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7fd fff1 	bl	80067d0 <_printf_i>
 80087ee:	e7eb      	b.n	80087c8 <_svfiprintf_r+0x1c0>
 80087f0:	0800a164 	.word	0x0800a164
 80087f4:	0800a16e 	.word	0x0800a16e
 80087f8:	08006289 	.word	0x08006289
 80087fc:	08008555 	.word	0x08008555
 8008800:	0800a16a 	.word	0x0800a16a

08008804 <__sfputc_r>:
 8008804:	6893      	ldr	r3, [r2, #8]
 8008806:	3b01      	subs	r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	b410      	push	{r4}
 800880c:	6093      	str	r3, [r2, #8]
 800880e:	da08      	bge.n	8008822 <__sfputc_r+0x1e>
 8008810:	6994      	ldr	r4, [r2, #24]
 8008812:	42a3      	cmp	r3, r4
 8008814:	db01      	blt.n	800881a <__sfputc_r+0x16>
 8008816:	290a      	cmp	r1, #10
 8008818:	d103      	bne.n	8008822 <__sfputc_r+0x1e>
 800881a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800881e:	f7fe ba8c 	b.w	8006d3a <__swbuf_r>
 8008822:	6813      	ldr	r3, [r2, #0]
 8008824:	1c58      	adds	r0, r3, #1
 8008826:	6010      	str	r0, [r2, #0]
 8008828:	7019      	strb	r1, [r3, #0]
 800882a:	4608      	mov	r0, r1
 800882c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008830:	4770      	bx	lr

08008832 <__sfputs_r>:
 8008832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008834:	4606      	mov	r6, r0
 8008836:	460f      	mov	r7, r1
 8008838:	4614      	mov	r4, r2
 800883a:	18d5      	adds	r5, r2, r3
 800883c:	42ac      	cmp	r4, r5
 800883e:	d101      	bne.n	8008844 <__sfputs_r+0x12>
 8008840:	2000      	movs	r0, #0
 8008842:	e007      	b.n	8008854 <__sfputs_r+0x22>
 8008844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008848:	463a      	mov	r2, r7
 800884a:	4630      	mov	r0, r6
 800884c:	f7ff ffda 	bl	8008804 <__sfputc_r>
 8008850:	1c43      	adds	r3, r0, #1
 8008852:	d1f3      	bne.n	800883c <__sfputs_r+0xa>
 8008854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008858 <_vfiprintf_r>:
 8008858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885c:	460d      	mov	r5, r1
 800885e:	b09d      	sub	sp, #116	; 0x74
 8008860:	4614      	mov	r4, r2
 8008862:	4698      	mov	r8, r3
 8008864:	4606      	mov	r6, r0
 8008866:	b118      	cbz	r0, 8008870 <_vfiprintf_r+0x18>
 8008868:	6a03      	ldr	r3, [r0, #32]
 800886a:	b90b      	cbnz	r3, 8008870 <_vfiprintf_r+0x18>
 800886c:	f7fe f95e 	bl	8006b2c <__sinit>
 8008870:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008872:	07d9      	lsls	r1, r3, #31
 8008874:	d405      	bmi.n	8008882 <_vfiprintf_r+0x2a>
 8008876:	89ab      	ldrh	r3, [r5, #12]
 8008878:	059a      	lsls	r2, r3, #22
 800887a:	d402      	bmi.n	8008882 <_vfiprintf_r+0x2a>
 800887c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800887e:	f7fe fb6e 	bl	8006f5e <__retarget_lock_acquire_recursive>
 8008882:	89ab      	ldrh	r3, [r5, #12]
 8008884:	071b      	lsls	r3, r3, #28
 8008886:	d501      	bpl.n	800888c <_vfiprintf_r+0x34>
 8008888:	692b      	ldr	r3, [r5, #16]
 800888a:	b99b      	cbnz	r3, 80088b4 <_vfiprintf_r+0x5c>
 800888c:	4629      	mov	r1, r5
 800888e:	4630      	mov	r0, r6
 8008890:	f7fe fa90 	bl	8006db4 <__swsetup_r>
 8008894:	b170      	cbz	r0, 80088b4 <_vfiprintf_r+0x5c>
 8008896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008898:	07dc      	lsls	r4, r3, #31
 800889a:	d504      	bpl.n	80088a6 <_vfiprintf_r+0x4e>
 800889c:	f04f 30ff 	mov.w	r0, #4294967295
 80088a0:	b01d      	add	sp, #116	; 0x74
 80088a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a6:	89ab      	ldrh	r3, [r5, #12]
 80088a8:	0598      	lsls	r0, r3, #22
 80088aa:	d4f7      	bmi.n	800889c <_vfiprintf_r+0x44>
 80088ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ae:	f7fe fb57 	bl	8006f60 <__retarget_lock_release_recursive>
 80088b2:	e7f3      	b.n	800889c <_vfiprintf_r+0x44>
 80088b4:	2300      	movs	r3, #0
 80088b6:	9309      	str	r3, [sp, #36]	; 0x24
 80088b8:	2320      	movs	r3, #32
 80088ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088be:	f8cd 800c 	str.w	r8, [sp, #12]
 80088c2:	2330      	movs	r3, #48	; 0x30
 80088c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008a78 <_vfiprintf_r+0x220>
 80088c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088cc:	f04f 0901 	mov.w	r9, #1
 80088d0:	4623      	mov	r3, r4
 80088d2:	469a      	mov	sl, r3
 80088d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088d8:	b10a      	cbz	r2, 80088de <_vfiprintf_r+0x86>
 80088da:	2a25      	cmp	r2, #37	; 0x25
 80088dc:	d1f9      	bne.n	80088d2 <_vfiprintf_r+0x7a>
 80088de:	ebba 0b04 	subs.w	fp, sl, r4
 80088e2:	d00b      	beq.n	80088fc <_vfiprintf_r+0xa4>
 80088e4:	465b      	mov	r3, fp
 80088e6:	4622      	mov	r2, r4
 80088e8:	4629      	mov	r1, r5
 80088ea:	4630      	mov	r0, r6
 80088ec:	f7ff ffa1 	bl	8008832 <__sfputs_r>
 80088f0:	3001      	adds	r0, #1
 80088f2:	f000 80a9 	beq.w	8008a48 <_vfiprintf_r+0x1f0>
 80088f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088f8:	445a      	add	r2, fp
 80088fa:	9209      	str	r2, [sp, #36]	; 0x24
 80088fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 80a1 	beq.w	8008a48 <_vfiprintf_r+0x1f0>
 8008906:	2300      	movs	r3, #0
 8008908:	f04f 32ff 	mov.w	r2, #4294967295
 800890c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008910:	f10a 0a01 	add.w	sl, sl, #1
 8008914:	9304      	str	r3, [sp, #16]
 8008916:	9307      	str	r3, [sp, #28]
 8008918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800891c:	931a      	str	r3, [sp, #104]	; 0x68
 800891e:	4654      	mov	r4, sl
 8008920:	2205      	movs	r2, #5
 8008922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008926:	4854      	ldr	r0, [pc, #336]	; (8008a78 <_vfiprintf_r+0x220>)
 8008928:	f7f7 fc52 	bl	80001d0 <memchr>
 800892c:	9a04      	ldr	r2, [sp, #16]
 800892e:	b9d8      	cbnz	r0, 8008968 <_vfiprintf_r+0x110>
 8008930:	06d1      	lsls	r1, r2, #27
 8008932:	bf44      	itt	mi
 8008934:	2320      	movmi	r3, #32
 8008936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800893a:	0713      	lsls	r3, r2, #28
 800893c:	bf44      	itt	mi
 800893e:	232b      	movmi	r3, #43	; 0x2b
 8008940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008944:	f89a 3000 	ldrb.w	r3, [sl]
 8008948:	2b2a      	cmp	r3, #42	; 0x2a
 800894a:	d015      	beq.n	8008978 <_vfiprintf_r+0x120>
 800894c:	9a07      	ldr	r2, [sp, #28]
 800894e:	4654      	mov	r4, sl
 8008950:	2000      	movs	r0, #0
 8008952:	f04f 0c0a 	mov.w	ip, #10
 8008956:	4621      	mov	r1, r4
 8008958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800895c:	3b30      	subs	r3, #48	; 0x30
 800895e:	2b09      	cmp	r3, #9
 8008960:	d94d      	bls.n	80089fe <_vfiprintf_r+0x1a6>
 8008962:	b1b0      	cbz	r0, 8008992 <_vfiprintf_r+0x13a>
 8008964:	9207      	str	r2, [sp, #28]
 8008966:	e014      	b.n	8008992 <_vfiprintf_r+0x13a>
 8008968:	eba0 0308 	sub.w	r3, r0, r8
 800896c:	fa09 f303 	lsl.w	r3, r9, r3
 8008970:	4313      	orrs	r3, r2
 8008972:	9304      	str	r3, [sp, #16]
 8008974:	46a2      	mov	sl, r4
 8008976:	e7d2      	b.n	800891e <_vfiprintf_r+0xc6>
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	1d19      	adds	r1, r3, #4
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	9103      	str	r1, [sp, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	bfbb      	ittet	lt
 8008984:	425b      	neglt	r3, r3
 8008986:	f042 0202 	orrlt.w	r2, r2, #2
 800898a:	9307      	strge	r3, [sp, #28]
 800898c:	9307      	strlt	r3, [sp, #28]
 800898e:	bfb8      	it	lt
 8008990:	9204      	strlt	r2, [sp, #16]
 8008992:	7823      	ldrb	r3, [r4, #0]
 8008994:	2b2e      	cmp	r3, #46	; 0x2e
 8008996:	d10c      	bne.n	80089b2 <_vfiprintf_r+0x15a>
 8008998:	7863      	ldrb	r3, [r4, #1]
 800899a:	2b2a      	cmp	r3, #42	; 0x2a
 800899c:	d134      	bne.n	8008a08 <_vfiprintf_r+0x1b0>
 800899e:	9b03      	ldr	r3, [sp, #12]
 80089a0:	1d1a      	adds	r2, r3, #4
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	9203      	str	r2, [sp, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	bfb8      	it	lt
 80089aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80089ae:	3402      	adds	r4, #2
 80089b0:	9305      	str	r3, [sp, #20]
 80089b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008a88 <_vfiprintf_r+0x230>
 80089b6:	7821      	ldrb	r1, [r4, #0]
 80089b8:	2203      	movs	r2, #3
 80089ba:	4650      	mov	r0, sl
 80089bc:	f7f7 fc08 	bl	80001d0 <memchr>
 80089c0:	b138      	cbz	r0, 80089d2 <_vfiprintf_r+0x17a>
 80089c2:	9b04      	ldr	r3, [sp, #16]
 80089c4:	eba0 000a 	sub.w	r0, r0, sl
 80089c8:	2240      	movs	r2, #64	; 0x40
 80089ca:	4082      	lsls	r2, r0
 80089cc:	4313      	orrs	r3, r2
 80089ce:	3401      	adds	r4, #1
 80089d0:	9304      	str	r3, [sp, #16]
 80089d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d6:	4829      	ldr	r0, [pc, #164]	; (8008a7c <_vfiprintf_r+0x224>)
 80089d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089dc:	2206      	movs	r2, #6
 80089de:	f7f7 fbf7 	bl	80001d0 <memchr>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d03f      	beq.n	8008a66 <_vfiprintf_r+0x20e>
 80089e6:	4b26      	ldr	r3, [pc, #152]	; (8008a80 <_vfiprintf_r+0x228>)
 80089e8:	bb1b      	cbnz	r3, 8008a32 <_vfiprintf_r+0x1da>
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	3307      	adds	r3, #7
 80089ee:	f023 0307 	bic.w	r3, r3, #7
 80089f2:	3308      	adds	r3, #8
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f8:	443b      	add	r3, r7
 80089fa:	9309      	str	r3, [sp, #36]	; 0x24
 80089fc:	e768      	b.n	80088d0 <_vfiprintf_r+0x78>
 80089fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a02:	460c      	mov	r4, r1
 8008a04:	2001      	movs	r0, #1
 8008a06:	e7a6      	b.n	8008956 <_vfiprintf_r+0xfe>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	3401      	adds	r4, #1
 8008a0c:	9305      	str	r3, [sp, #20]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	f04f 0c0a 	mov.w	ip, #10
 8008a14:	4620      	mov	r0, r4
 8008a16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a1a:	3a30      	subs	r2, #48	; 0x30
 8008a1c:	2a09      	cmp	r2, #9
 8008a1e:	d903      	bls.n	8008a28 <_vfiprintf_r+0x1d0>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0c6      	beq.n	80089b2 <_vfiprintf_r+0x15a>
 8008a24:	9105      	str	r1, [sp, #20]
 8008a26:	e7c4      	b.n	80089b2 <_vfiprintf_r+0x15a>
 8008a28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e7f0      	b.n	8008a14 <_vfiprintf_r+0x1bc>
 8008a32:	ab03      	add	r3, sp, #12
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	462a      	mov	r2, r5
 8008a38:	4b12      	ldr	r3, [pc, #72]	; (8008a84 <_vfiprintf_r+0x22c>)
 8008a3a:	a904      	add	r1, sp, #16
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7fd fc23 	bl	8006288 <_printf_float>
 8008a42:	4607      	mov	r7, r0
 8008a44:	1c78      	adds	r0, r7, #1
 8008a46:	d1d6      	bne.n	80089f6 <_vfiprintf_r+0x19e>
 8008a48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a4a:	07d9      	lsls	r1, r3, #31
 8008a4c:	d405      	bmi.n	8008a5a <_vfiprintf_r+0x202>
 8008a4e:	89ab      	ldrh	r3, [r5, #12]
 8008a50:	059a      	lsls	r2, r3, #22
 8008a52:	d402      	bmi.n	8008a5a <_vfiprintf_r+0x202>
 8008a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a56:	f7fe fa83 	bl	8006f60 <__retarget_lock_release_recursive>
 8008a5a:	89ab      	ldrh	r3, [r5, #12]
 8008a5c:	065b      	lsls	r3, r3, #25
 8008a5e:	f53f af1d 	bmi.w	800889c <_vfiprintf_r+0x44>
 8008a62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a64:	e71c      	b.n	80088a0 <_vfiprintf_r+0x48>
 8008a66:	ab03      	add	r3, sp, #12
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <_vfiprintf_r+0x22c>)
 8008a6e:	a904      	add	r1, sp, #16
 8008a70:	4630      	mov	r0, r6
 8008a72:	f7fd fead 	bl	80067d0 <_printf_i>
 8008a76:	e7e4      	b.n	8008a42 <_vfiprintf_r+0x1ea>
 8008a78:	0800a164 	.word	0x0800a164
 8008a7c:	0800a16e 	.word	0x0800a16e
 8008a80:	08006289 	.word	0x08006289
 8008a84:	08008833 	.word	0x08008833
 8008a88:	0800a16a 	.word	0x0800a16a

08008a8c <__sflush_r>:
 8008a8c:	898a      	ldrh	r2, [r1, #12]
 8008a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a92:	4605      	mov	r5, r0
 8008a94:	0710      	lsls	r0, r2, #28
 8008a96:	460c      	mov	r4, r1
 8008a98:	d458      	bmi.n	8008b4c <__sflush_r+0xc0>
 8008a9a:	684b      	ldr	r3, [r1, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	dc05      	bgt.n	8008aac <__sflush_r+0x20>
 8008aa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dc02      	bgt.n	8008aac <__sflush_r+0x20>
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aae:	2e00      	cmp	r6, #0
 8008ab0:	d0f9      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ab8:	682f      	ldr	r7, [r5, #0]
 8008aba:	6a21      	ldr	r1, [r4, #32]
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	d032      	beq.n	8008b26 <__sflush_r+0x9a>
 8008ac0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	075a      	lsls	r2, r3, #29
 8008ac6:	d505      	bpl.n	8008ad4 <__sflush_r+0x48>
 8008ac8:	6863      	ldr	r3, [r4, #4]
 8008aca:	1ac0      	subs	r0, r0, r3
 8008acc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ace:	b10b      	cbz	r3, 8008ad4 <__sflush_r+0x48>
 8008ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ad2:	1ac0      	subs	r0, r0, r3
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ada:	6a21      	ldr	r1, [r4, #32]
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b0      	blx	r6
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	d106      	bne.n	8008af4 <__sflush_r+0x68>
 8008ae6:	6829      	ldr	r1, [r5, #0]
 8008ae8:	291d      	cmp	r1, #29
 8008aea:	d82b      	bhi.n	8008b44 <__sflush_r+0xb8>
 8008aec:	4a29      	ldr	r2, [pc, #164]	; (8008b94 <__sflush_r+0x108>)
 8008aee:	410a      	asrs	r2, r1
 8008af0:	07d6      	lsls	r6, r2, #31
 8008af2:	d427      	bmi.n	8008b44 <__sflush_r+0xb8>
 8008af4:	2200      	movs	r2, #0
 8008af6:	6062      	str	r2, [r4, #4]
 8008af8:	04d9      	lsls	r1, r3, #19
 8008afa:	6922      	ldr	r2, [r4, #16]
 8008afc:	6022      	str	r2, [r4, #0]
 8008afe:	d504      	bpl.n	8008b0a <__sflush_r+0x7e>
 8008b00:	1c42      	adds	r2, r0, #1
 8008b02:	d101      	bne.n	8008b08 <__sflush_r+0x7c>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b903      	cbnz	r3, 8008b0a <__sflush_r+0x7e>
 8008b08:	6560      	str	r0, [r4, #84]	; 0x54
 8008b0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b0c:	602f      	str	r7, [r5, #0]
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d0c9      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008b12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b16:	4299      	cmp	r1, r3
 8008b18:	d002      	beq.n	8008b20 <__sflush_r+0x94>
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	f7ff f89e 	bl	8007c5c <_free_r>
 8008b20:	2000      	movs	r0, #0
 8008b22:	6360      	str	r0, [r4, #52]	; 0x34
 8008b24:	e7c0      	b.n	8008aa8 <__sflush_r+0x1c>
 8008b26:	2301      	movs	r3, #1
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b0      	blx	r6
 8008b2c:	1c41      	adds	r1, r0, #1
 8008b2e:	d1c8      	bne.n	8008ac2 <__sflush_r+0x36>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0c5      	beq.n	8008ac2 <__sflush_r+0x36>
 8008b36:	2b1d      	cmp	r3, #29
 8008b38:	d001      	beq.n	8008b3e <__sflush_r+0xb2>
 8008b3a:	2b16      	cmp	r3, #22
 8008b3c:	d101      	bne.n	8008b42 <__sflush_r+0xb6>
 8008b3e:	602f      	str	r7, [r5, #0]
 8008b40:	e7b1      	b.n	8008aa6 <__sflush_r+0x1a>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	e7ad      	b.n	8008aa8 <__sflush_r+0x1c>
 8008b4c:	690f      	ldr	r7, [r1, #16]
 8008b4e:	2f00      	cmp	r7, #0
 8008b50:	d0a9      	beq.n	8008aa6 <__sflush_r+0x1a>
 8008b52:	0793      	lsls	r3, r2, #30
 8008b54:	680e      	ldr	r6, [r1, #0]
 8008b56:	bf08      	it	eq
 8008b58:	694b      	ldreq	r3, [r1, #20]
 8008b5a:	600f      	str	r7, [r1, #0]
 8008b5c:	bf18      	it	ne
 8008b5e:	2300      	movne	r3, #0
 8008b60:	eba6 0807 	sub.w	r8, r6, r7
 8008b64:	608b      	str	r3, [r1, #8]
 8008b66:	f1b8 0f00 	cmp.w	r8, #0
 8008b6a:	dd9c      	ble.n	8008aa6 <__sflush_r+0x1a>
 8008b6c:	6a21      	ldr	r1, [r4, #32]
 8008b6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b70:	4643      	mov	r3, r8
 8008b72:	463a      	mov	r2, r7
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b0      	blx	r6
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	dc06      	bgt.n	8008b8a <__sflush_r+0xfe>
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
 8008b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b82:	81a3      	strh	r3, [r4, #12]
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295
 8008b88:	e78e      	b.n	8008aa8 <__sflush_r+0x1c>
 8008b8a:	4407      	add	r7, r0
 8008b8c:	eba8 0800 	sub.w	r8, r8, r0
 8008b90:	e7e9      	b.n	8008b66 <__sflush_r+0xda>
 8008b92:	bf00      	nop
 8008b94:	dfbffffe 	.word	0xdfbffffe

08008b98 <_fflush_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	690b      	ldr	r3, [r1, #16]
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	b913      	cbnz	r3, 8008ba8 <_fflush_r+0x10>
 8008ba2:	2500      	movs	r5, #0
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	b118      	cbz	r0, 8008bb2 <_fflush_r+0x1a>
 8008baa:	6a03      	ldr	r3, [r0, #32]
 8008bac:	b90b      	cbnz	r3, 8008bb2 <_fflush_r+0x1a>
 8008bae:	f7fd ffbd 	bl	8006b2c <__sinit>
 8008bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0f3      	beq.n	8008ba2 <_fflush_r+0xa>
 8008bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bbc:	07d0      	lsls	r0, r2, #31
 8008bbe:	d404      	bmi.n	8008bca <_fflush_r+0x32>
 8008bc0:	0599      	lsls	r1, r3, #22
 8008bc2:	d402      	bmi.n	8008bca <_fflush_r+0x32>
 8008bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bc6:	f7fe f9ca 	bl	8006f5e <__retarget_lock_acquire_recursive>
 8008bca:	4628      	mov	r0, r5
 8008bcc:	4621      	mov	r1, r4
 8008bce:	f7ff ff5d 	bl	8008a8c <__sflush_r>
 8008bd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bd4:	07da      	lsls	r2, r3, #31
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	d4e4      	bmi.n	8008ba4 <_fflush_r+0xc>
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	059b      	lsls	r3, r3, #22
 8008bde:	d4e1      	bmi.n	8008ba4 <_fflush_r+0xc>
 8008be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008be2:	f7fe f9bd 	bl	8006f60 <__retarget_lock_release_recursive>
 8008be6:	e7dd      	b.n	8008ba4 <_fflush_r+0xc>

08008be8 <__swhatbuf_r>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	460c      	mov	r4, r1
 8008bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf0:	2900      	cmp	r1, #0
 8008bf2:	b096      	sub	sp, #88	; 0x58
 8008bf4:	4615      	mov	r5, r2
 8008bf6:	461e      	mov	r6, r3
 8008bf8:	da0d      	bge.n	8008c16 <__swhatbuf_r+0x2e>
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c00:	f04f 0100 	mov.w	r1, #0
 8008c04:	bf0c      	ite	eq
 8008c06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c0a:	2340      	movne	r3, #64	; 0x40
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	6031      	str	r1, [r6, #0]
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	b016      	add	sp, #88	; 0x58
 8008c14:	bd70      	pop	{r4, r5, r6, pc}
 8008c16:	466a      	mov	r2, sp
 8008c18:	f000 f862 	bl	8008ce0 <_fstat_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	dbec      	blt.n	8008bfa <__swhatbuf_r+0x12>
 8008c20:	9901      	ldr	r1, [sp, #4]
 8008c22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c2a:	4259      	negs	r1, r3
 8008c2c:	4159      	adcs	r1, r3
 8008c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c32:	e7eb      	b.n	8008c0c <__swhatbuf_r+0x24>

08008c34 <__smakebuf_r>:
 8008c34:	898b      	ldrh	r3, [r1, #12]
 8008c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c38:	079d      	lsls	r5, r3, #30
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	d507      	bpl.n	8008c50 <__smakebuf_r+0x1c>
 8008c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	6123      	str	r3, [r4, #16]
 8008c48:	2301      	movs	r3, #1
 8008c4a:	6163      	str	r3, [r4, #20]
 8008c4c:	b002      	add	sp, #8
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
 8008c50:	ab01      	add	r3, sp, #4
 8008c52:	466a      	mov	r2, sp
 8008c54:	f7ff ffc8 	bl	8008be8 <__swhatbuf_r>
 8008c58:	9900      	ldr	r1, [sp, #0]
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f7ff f871 	bl	8007d44 <_malloc_r>
 8008c62:	b948      	cbnz	r0, 8008c78 <__smakebuf_r+0x44>
 8008c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c68:	059a      	lsls	r2, r3, #22
 8008c6a:	d4ef      	bmi.n	8008c4c <__smakebuf_r+0x18>
 8008c6c:	f023 0303 	bic.w	r3, r3, #3
 8008c70:	f043 0302 	orr.w	r3, r3, #2
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	e7e3      	b.n	8008c40 <__smakebuf_r+0xc>
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	6020      	str	r0, [r4, #0]
 8008c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c80:	81a3      	strh	r3, [r4, #12]
 8008c82:	9b00      	ldr	r3, [sp, #0]
 8008c84:	6163      	str	r3, [r4, #20]
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	6120      	str	r0, [r4, #16]
 8008c8a:	b15b      	cbz	r3, 8008ca4 <__smakebuf_r+0x70>
 8008c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c90:	4630      	mov	r0, r6
 8008c92:	f000 f837 	bl	8008d04 <_isatty_r>
 8008c96:	b128      	cbz	r0, 8008ca4 <__smakebuf_r+0x70>
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	f023 0303 	bic.w	r3, r3, #3
 8008c9e:	f043 0301 	orr.w	r3, r3, #1
 8008ca2:	81a3      	strh	r3, [r4, #12]
 8008ca4:	89a3      	ldrh	r3, [r4, #12]
 8008ca6:	431d      	orrs	r5, r3
 8008ca8:	81a5      	strh	r5, [r4, #12]
 8008caa:	e7cf      	b.n	8008c4c <__smakebuf_r+0x18>

08008cac <memmove>:
 8008cac:	4288      	cmp	r0, r1
 8008cae:	b510      	push	{r4, lr}
 8008cb0:	eb01 0402 	add.w	r4, r1, r2
 8008cb4:	d902      	bls.n	8008cbc <memmove+0x10>
 8008cb6:	4284      	cmp	r4, r0
 8008cb8:	4623      	mov	r3, r4
 8008cba:	d807      	bhi.n	8008ccc <memmove+0x20>
 8008cbc:	1e43      	subs	r3, r0, #1
 8008cbe:	42a1      	cmp	r1, r4
 8008cc0:	d008      	beq.n	8008cd4 <memmove+0x28>
 8008cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cca:	e7f8      	b.n	8008cbe <memmove+0x12>
 8008ccc:	4402      	add	r2, r0
 8008cce:	4601      	mov	r1, r0
 8008cd0:	428a      	cmp	r2, r1
 8008cd2:	d100      	bne.n	8008cd6 <memmove+0x2a>
 8008cd4:	bd10      	pop	{r4, pc}
 8008cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cde:	e7f7      	b.n	8008cd0 <memmove+0x24>

08008ce0 <_fstat_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4d07      	ldr	r5, [pc, #28]	; (8008d00 <_fstat_r+0x20>)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	4608      	mov	r0, r1
 8008cea:	4611      	mov	r1, r2
 8008cec:	602b      	str	r3, [r5, #0]
 8008cee:	f7f9 fcc6 	bl	800267e <_fstat>
 8008cf2:	1c43      	adds	r3, r0, #1
 8008cf4:	d102      	bne.n	8008cfc <_fstat_r+0x1c>
 8008cf6:	682b      	ldr	r3, [r5, #0]
 8008cf8:	b103      	cbz	r3, 8008cfc <_fstat_r+0x1c>
 8008cfa:	6023      	str	r3, [r4, #0]
 8008cfc:	bd38      	pop	{r3, r4, r5, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000570 	.word	0x20000570

08008d04 <_isatty_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4d06      	ldr	r5, [pc, #24]	; (8008d20 <_isatty_r+0x1c>)
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	602b      	str	r3, [r5, #0]
 8008d10:	f7f9 fcc5 	bl	800269e <_isatty>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d102      	bne.n	8008d1e <_isatty_r+0x1a>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	b103      	cbz	r3, 8008d1e <_isatty_r+0x1a>
 8008d1c:	6023      	str	r3, [r4, #0]
 8008d1e:	bd38      	pop	{r3, r4, r5, pc}
 8008d20:	20000570 	.word	0x20000570

08008d24 <_sbrk_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d06      	ldr	r5, [pc, #24]	; (8008d40 <_sbrk_r+0x1c>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f7f9 fcce 	bl	80026d0 <_sbrk>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_sbrk_r+0x1a>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_sbrk_r+0x1a>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	20000570 	.word	0x20000570

08008d44 <memcpy>:
 8008d44:	440a      	add	r2, r1
 8008d46:	4291      	cmp	r1, r2
 8008d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d4c:	d100      	bne.n	8008d50 <memcpy+0xc>
 8008d4e:	4770      	bx	lr
 8008d50:	b510      	push	{r4, lr}
 8008d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d5a:	4291      	cmp	r1, r2
 8008d5c:	d1f9      	bne.n	8008d52 <memcpy+0xe>
 8008d5e:	bd10      	pop	{r4, pc}

08008d60 <__assert_func>:
 8008d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d62:	4614      	mov	r4, r2
 8008d64:	461a      	mov	r2, r3
 8008d66:	4b09      	ldr	r3, [pc, #36]	; (8008d8c <__assert_func+0x2c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	68d8      	ldr	r0, [r3, #12]
 8008d6e:	b14c      	cbz	r4, 8008d84 <__assert_func+0x24>
 8008d70:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <__assert_func+0x30>)
 8008d72:	9100      	str	r1, [sp, #0]
 8008d74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d78:	4906      	ldr	r1, [pc, #24]	; (8008d94 <__assert_func+0x34>)
 8008d7a:	462b      	mov	r3, r5
 8008d7c:	f000 f872 	bl	8008e64 <fiprintf>
 8008d80:	f000 f882 	bl	8008e88 <abort>
 8008d84:	4b04      	ldr	r3, [pc, #16]	; (8008d98 <__assert_func+0x38>)
 8008d86:	461c      	mov	r4, r3
 8008d88:	e7f3      	b.n	8008d72 <__assert_func+0x12>
 8008d8a:	bf00      	nop
 8008d8c:	20000064 	.word	0x20000064
 8008d90:	0800a17f 	.word	0x0800a17f
 8008d94:	0800a18c 	.word	0x0800a18c
 8008d98:	0800a1ba 	.word	0x0800a1ba

08008d9c <_calloc_r>:
 8008d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d9e:	fba1 2402 	umull	r2, r4, r1, r2
 8008da2:	b94c      	cbnz	r4, 8008db8 <_calloc_r+0x1c>
 8008da4:	4611      	mov	r1, r2
 8008da6:	9201      	str	r2, [sp, #4]
 8008da8:	f7fe ffcc 	bl	8007d44 <_malloc_r>
 8008dac:	9a01      	ldr	r2, [sp, #4]
 8008dae:	4605      	mov	r5, r0
 8008db0:	b930      	cbnz	r0, 8008dc0 <_calloc_r+0x24>
 8008db2:	4628      	mov	r0, r5
 8008db4:	b003      	add	sp, #12
 8008db6:	bd30      	pop	{r4, r5, pc}
 8008db8:	220c      	movs	r2, #12
 8008dba:	6002      	str	r2, [r0, #0]
 8008dbc:	2500      	movs	r5, #0
 8008dbe:	e7f8      	b.n	8008db2 <_calloc_r+0x16>
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	f7fe f84f 	bl	8006e64 <memset>
 8008dc6:	e7f4      	b.n	8008db2 <_calloc_r+0x16>

08008dc8 <__ascii_mbtowc>:
 8008dc8:	b082      	sub	sp, #8
 8008dca:	b901      	cbnz	r1, 8008dce <__ascii_mbtowc+0x6>
 8008dcc:	a901      	add	r1, sp, #4
 8008dce:	b142      	cbz	r2, 8008de2 <__ascii_mbtowc+0x1a>
 8008dd0:	b14b      	cbz	r3, 8008de6 <__ascii_mbtowc+0x1e>
 8008dd2:	7813      	ldrb	r3, [r2, #0]
 8008dd4:	600b      	str	r3, [r1, #0]
 8008dd6:	7812      	ldrb	r2, [r2, #0]
 8008dd8:	1e10      	subs	r0, r2, #0
 8008dda:	bf18      	it	ne
 8008ddc:	2001      	movne	r0, #1
 8008dde:	b002      	add	sp, #8
 8008de0:	4770      	bx	lr
 8008de2:	4610      	mov	r0, r2
 8008de4:	e7fb      	b.n	8008dde <__ascii_mbtowc+0x16>
 8008de6:	f06f 0001 	mvn.w	r0, #1
 8008dea:	e7f8      	b.n	8008dde <__ascii_mbtowc+0x16>

08008dec <_realloc_r>:
 8008dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df0:	4680      	mov	r8, r0
 8008df2:	4614      	mov	r4, r2
 8008df4:	460e      	mov	r6, r1
 8008df6:	b921      	cbnz	r1, 8008e02 <_realloc_r+0x16>
 8008df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	f7fe bfa1 	b.w	8007d44 <_malloc_r>
 8008e02:	b92a      	cbnz	r2, 8008e10 <_realloc_r+0x24>
 8008e04:	f7fe ff2a 	bl	8007c5c <_free_r>
 8008e08:	4625      	mov	r5, r4
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e10:	f000 f841 	bl	8008e96 <_malloc_usable_size_r>
 8008e14:	4284      	cmp	r4, r0
 8008e16:	4607      	mov	r7, r0
 8008e18:	d802      	bhi.n	8008e20 <_realloc_r+0x34>
 8008e1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e1e:	d812      	bhi.n	8008e46 <_realloc_r+0x5a>
 8008e20:	4621      	mov	r1, r4
 8008e22:	4640      	mov	r0, r8
 8008e24:	f7fe ff8e 	bl	8007d44 <_malloc_r>
 8008e28:	4605      	mov	r5, r0
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d0ed      	beq.n	8008e0a <_realloc_r+0x1e>
 8008e2e:	42bc      	cmp	r4, r7
 8008e30:	4622      	mov	r2, r4
 8008e32:	4631      	mov	r1, r6
 8008e34:	bf28      	it	cs
 8008e36:	463a      	movcs	r2, r7
 8008e38:	f7ff ff84 	bl	8008d44 <memcpy>
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4640      	mov	r0, r8
 8008e40:	f7fe ff0c 	bl	8007c5c <_free_r>
 8008e44:	e7e1      	b.n	8008e0a <_realloc_r+0x1e>
 8008e46:	4635      	mov	r5, r6
 8008e48:	e7df      	b.n	8008e0a <_realloc_r+0x1e>

08008e4a <__ascii_wctomb>:
 8008e4a:	b149      	cbz	r1, 8008e60 <__ascii_wctomb+0x16>
 8008e4c:	2aff      	cmp	r2, #255	; 0xff
 8008e4e:	bf85      	ittet	hi
 8008e50:	238a      	movhi	r3, #138	; 0x8a
 8008e52:	6003      	strhi	r3, [r0, #0]
 8008e54:	700a      	strbls	r2, [r1, #0]
 8008e56:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e5a:	bf98      	it	ls
 8008e5c:	2001      	movls	r0, #1
 8008e5e:	4770      	bx	lr
 8008e60:	4608      	mov	r0, r1
 8008e62:	4770      	bx	lr

08008e64 <fiprintf>:
 8008e64:	b40e      	push	{r1, r2, r3}
 8008e66:	b503      	push	{r0, r1, lr}
 8008e68:	4601      	mov	r1, r0
 8008e6a:	ab03      	add	r3, sp, #12
 8008e6c:	4805      	ldr	r0, [pc, #20]	; (8008e84 <fiprintf+0x20>)
 8008e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e72:	6800      	ldr	r0, [r0, #0]
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	f7ff fcef 	bl	8008858 <_vfiprintf_r>
 8008e7a:	b002      	add	sp, #8
 8008e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e80:	b003      	add	sp, #12
 8008e82:	4770      	bx	lr
 8008e84:	20000064 	.word	0x20000064

08008e88 <abort>:
 8008e88:	b508      	push	{r3, lr}
 8008e8a:	2006      	movs	r0, #6
 8008e8c:	f000 f834 	bl	8008ef8 <raise>
 8008e90:	2001      	movs	r0, #1
 8008e92:	f7f9 fba5 	bl	80025e0 <_exit>

08008e96 <_malloc_usable_size_r>:
 8008e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e9a:	1f18      	subs	r0, r3, #4
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bfbc      	itt	lt
 8008ea0:	580b      	ldrlt	r3, [r1, r0]
 8008ea2:	18c0      	addlt	r0, r0, r3
 8008ea4:	4770      	bx	lr

08008ea6 <_raise_r>:
 8008ea6:	291f      	cmp	r1, #31
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4604      	mov	r4, r0
 8008eac:	460d      	mov	r5, r1
 8008eae:	d904      	bls.n	8008eba <_raise_r+0x14>
 8008eb0:	2316      	movs	r3, #22
 8008eb2:	6003      	str	r3, [r0, #0]
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	bd38      	pop	{r3, r4, r5, pc}
 8008eba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008ebc:	b112      	cbz	r2, 8008ec4 <_raise_r+0x1e>
 8008ebe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ec2:	b94b      	cbnz	r3, 8008ed8 <_raise_r+0x32>
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 f831 	bl	8008f2c <_getpid_r>
 8008eca:	462a      	mov	r2, r5
 8008ecc:	4601      	mov	r1, r0
 8008ece:	4620      	mov	r0, r4
 8008ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ed4:	f000 b818 	b.w	8008f08 <_kill_r>
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d00a      	beq.n	8008ef2 <_raise_r+0x4c>
 8008edc:	1c59      	adds	r1, r3, #1
 8008ede:	d103      	bne.n	8008ee8 <_raise_r+0x42>
 8008ee0:	2316      	movs	r3, #22
 8008ee2:	6003      	str	r3, [r0, #0]
 8008ee4:	2001      	movs	r0, #1
 8008ee6:	e7e7      	b.n	8008eb8 <_raise_r+0x12>
 8008ee8:	2400      	movs	r4, #0
 8008eea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008eee:	4628      	mov	r0, r5
 8008ef0:	4798      	blx	r3
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	e7e0      	b.n	8008eb8 <_raise_r+0x12>
	...

08008ef8 <raise>:
 8008ef8:	4b02      	ldr	r3, [pc, #8]	; (8008f04 <raise+0xc>)
 8008efa:	4601      	mov	r1, r0
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	f7ff bfd2 	b.w	8008ea6 <_raise_r>
 8008f02:	bf00      	nop
 8008f04:	20000064 	.word	0x20000064

08008f08 <_kill_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d07      	ldr	r5, [pc, #28]	; (8008f28 <_kill_r+0x20>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	4611      	mov	r1, r2
 8008f14:	602b      	str	r3, [r5, #0]
 8008f16:	f7f9 fb53 	bl	80025c0 <_kill>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	d102      	bne.n	8008f24 <_kill_r+0x1c>
 8008f1e:	682b      	ldr	r3, [r5, #0]
 8008f20:	b103      	cbz	r3, 8008f24 <_kill_r+0x1c>
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	bd38      	pop	{r3, r4, r5, pc}
 8008f26:	bf00      	nop
 8008f28:	20000570 	.word	0x20000570

08008f2c <_getpid_r>:
 8008f2c:	f7f9 bb40 	b.w	80025b0 <_getpid>

08008f30 <pow>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	ed2d 8b02 	vpush	{d8}
 8008f36:	eeb0 8a40 	vmov.f32	s16, s0
 8008f3a:	eef0 8a60 	vmov.f32	s17, s1
 8008f3e:	ec55 4b11 	vmov	r4, r5, d1
 8008f42:	f000 f871 	bl	8009028 <__ieee754_pow>
 8008f46:	4622      	mov	r2, r4
 8008f48:	462b      	mov	r3, r5
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	ec57 6b10 	vmov	r6, r7, d0
 8008f52:	f7f7 fdeb 	bl	8000b2c <__aeabi_dcmpun>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d13b      	bne.n	8008fd2 <pow+0xa2>
 8008f5a:	ec51 0b18 	vmov	r0, r1, d8
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2300      	movs	r3, #0
 8008f62:	f7f7 fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f66:	b1b8      	cbz	r0, 8008f98 <pow+0x68>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f7f7 fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d146      	bne.n	8009006 <pow+0xd6>
 8008f78:	ec45 4b10 	vmov	d0, r4, r5
 8008f7c:	f000 f848 	bl	8009010 <finite>
 8008f80:	b338      	cbz	r0, 8008fd2 <pow+0xa2>
 8008f82:	2200      	movs	r2, #0
 8008f84:	2300      	movs	r3, #0
 8008f86:	4620      	mov	r0, r4
 8008f88:	4629      	mov	r1, r5
 8008f8a:	f7f7 fda7 	bl	8000adc <__aeabi_dcmplt>
 8008f8e:	b300      	cbz	r0, 8008fd2 <pow+0xa2>
 8008f90:	f7fd ffba 	bl	8006f08 <__errno>
 8008f94:	2322      	movs	r3, #34	; 0x22
 8008f96:	e01b      	b.n	8008fd0 <pow+0xa0>
 8008f98:	ec47 6b10 	vmov	d0, r6, r7
 8008f9c:	f000 f838 	bl	8009010 <finite>
 8008fa0:	b9e0      	cbnz	r0, 8008fdc <pow+0xac>
 8008fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8008fa6:	eef0 0a68 	vmov.f32	s1, s17
 8008faa:	f000 f831 	bl	8009010 <finite>
 8008fae:	b1a8      	cbz	r0, 8008fdc <pow+0xac>
 8008fb0:	ec45 4b10 	vmov	d0, r4, r5
 8008fb4:	f000 f82c 	bl	8009010 <finite>
 8008fb8:	b180      	cbz	r0, 8008fdc <pow+0xac>
 8008fba:	4632      	mov	r2, r6
 8008fbc:	463b      	mov	r3, r7
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	f7f7 fdb3 	bl	8000b2c <__aeabi_dcmpun>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	d0e2      	beq.n	8008f90 <pow+0x60>
 8008fca:	f7fd ff9d 	bl	8006f08 <__errno>
 8008fce:	2321      	movs	r3, #33	; 0x21
 8008fd0:	6003      	str	r3, [r0, #0]
 8008fd2:	ecbd 8b02 	vpop	{d8}
 8008fd6:	ec47 6b10 	vmov	d0, r6, r7
 8008fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2300      	movs	r3, #0
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	4639      	mov	r1, r7
 8008fe4:	f7f7 fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d0f2      	beq.n	8008fd2 <pow+0xa2>
 8008fec:	eeb0 0a48 	vmov.f32	s0, s16
 8008ff0:	eef0 0a68 	vmov.f32	s1, s17
 8008ff4:	f000 f80c 	bl	8009010 <finite>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d0ea      	beq.n	8008fd2 <pow+0xa2>
 8008ffc:	ec45 4b10 	vmov	d0, r4, r5
 8009000:	f000 f806 	bl	8009010 <finite>
 8009004:	e7c3      	b.n	8008f8e <pow+0x5e>
 8009006:	4f01      	ldr	r7, [pc, #4]	; (800900c <pow+0xdc>)
 8009008:	2600      	movs	r6, #0
 800900a:	e7e2      	b.n	8008fd2 <pow+0xa2>
 800900c:	3ff00000 	.word	0x3ff00000

08009010 <finite>:
 8009010:	b082      	sub	sp, #8
 8009012:	ed8d 0b00 	vstr	d0, [sp]
 8009016:	9801      	ldr	r0, [sp, #4]
 8009018:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800901c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009020:	0fc0      	lsrs	r0, r0, #31
 8009022:	b002      	add	sp, #8
 8009024:	4770      	bx	lr
	...

08009028 <__ieee754_pow>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	ed2d 8b06 	vpush	{d8-d10}
 8009030:	b089      	sub	sp, #36	; 0x24
 8009032:	ed8d 1b00 	vstr	d1, [sp]
 8009036:	e9dd 2900 	ldrd	r2, r9, [sp]
 800903a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800903e:	ea58 0102 	orrs.w	r1, r8, r2
 8009042:	ec57 6b10 	vmov	r6, r7, d0
 8009046:	d115      	bne.n	8009074 <__ieee754_pow+0x4c>
 8009048:	19b3      	adds	r3, r6, r6
 800904a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800904e:	4152      	adcs	r2, r2
 8009050:	4299      	cmp	r1, r3
 8009052:	4b89      	ldr	r3, [pc, #548]	; (8009278 <__ieee754_pow+0x250>)
 8009054:	4193      	sbcs	r3, r2
 8009056:	f080 84d1 	bcs.w	80099fc <__ieee754_pow+0x9d4>
 800905a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800905e:	4630      	mov	r0, r6
 8009060:	4639      	mov	r1, r7
 8009062:	f7f7 f913 	bl	800028c <__adddf3>
 8009066:	ec41 0b10 	vmov	d0, r0, r1
 800906a:	b009      	add	sp, #36	; 0x24
 800906c:	ecbd 8b06 	vpop	{d8-d10}
 8009070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009074:	4b81      	ldr	r3, [pc, #516]	; (800927c <__ieee754_pow+0x254>)
 8009076:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800907a:	429c      	cmp	r4, r3
 800907c:	ee10 aa10 	vmov	sl, s0
 8009080:	463d      	mov	r5, r7
 8009082:	dc06      	bgt.n	8009092 <__ieee754_pow+0x6a>
 8009084:	d101      	bne.n	800908a <__ieee754_pow+0x62>
 8009086:	2e00      	cmp	r6, #0
 8009088:	d1e7      	bne.n	800905a <__ieee754_pow+0x32>
 800908a:	4598      	cmp	r8, r3
 800908c:	dc01      	bgt.n	8009092 <__ieee754_pow+0x6a>
 800908e:	d10f      	bne.n	80090b0 <__ieee754_pow+0x88>
 8009090:	b172      	cbz	r2, 80090b0 <__ieee754_pow+0x88>
 8009092:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009096:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800909a:	ea55 050a 	orrs.w	r5, r5, sl
 800909e:	d1dc      	bne.n	800905a <__ieee754_pow+0x32>
 80090a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80090a4:	18db      	adds	r3, r3, r3
 80090a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80090aa:	4152      	adcs	r2, r2
 80090ac:	429d      	cmp	r5, r3
 80090ae:	e7d0      	b.n	8009052 <__ieee754_pow+0x2a>
 80090b0:	2d00      	cmp	r5, #0
 80090b2:	da3b      	bge.n	800912c <__ieee754_pow+0x104>
 80090b4:	4b72      	ldr	r3, [pc, #456]	; (8009280 <__ieee754_pow+0x258>)
 80090b6:	4598      	cmp	r8, r3
 80090b8:	dc51      	bgt.n	800915e <__ieee754_pow+0x136>
 80090ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80090be:	4598      	cmp	r8, r3
 80090c0:	f340 84ab 	ble.w	8009a1a <__ieee754_pow+0x9f2>
 80090c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80090c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80090cc:	2b14      	cmp	r3, #20
 80090ce:	dd0f      	ble.n	80090f0 <__ieee754_pow+0xc8>
 80090d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80090d4:	fa22 f103 	lsr.w	r1, r2, r3
 80090d8:	fa01 f303 	lsl.w	r3, r1, r3
 80090dc:	4293      	cmp	r3, r2
 80090de:	f040 849c 	bne.w	8009a1a <__ieee754_pow+0x9f2>
 80090e2:	f001 0101 	and.w	r1, r1, #1
 80090e6:	f1c1 0302 	rsb	r3, r1, #2
 80090ea:	9304      	str	r3, [sp, #16]
 80090ec:	b182      	cbz	r2, 8009110 <__ieee754_pow+0xe8>
 80090ee:	e05f      	b.n	80091b0 <__ieee754_pow+0x188>
 80090f0:	2a00      	cmp	r2, #0
 80090f2:	d15b      	bne.n	80091ac <__ieee754_pow+0x184>
 80090f4:	f1c3 0314 	rsb	r3, r3, #20
 80090f8:	fa48 f103 	asr.w	r1, r8, r3
 80090fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009100:	4543      	cmp	r3, r8
 8009102:	f040 8487 	bne.w	8009a14 <__ieee754_pow+0x9ec>
 8009106:	f001 0101 	and.w	r1, r1, #1
 800910a:	f1c1 0302 	rsb	r3, r1, #2
 800910e:	9304      	str	r3, [sp, #16]
 8009110:	4b5c      	ldr	r3, [pc, #368]	; (8009284 <__ieee754_pow+0x25c>)
 8009112:	4598      	cmp	r8, r3
 8009114:	d132      	bne.n	800917c <__ieee754_pow+0x154>
 8009116:	f1b9 0f00 	cmp.w	r9, #0
 800911a:	f280 8477 	bge.w	8009a0c <__ieee754_pow+0x9e4>
 800911e:	4959      	ldr	r1, [pc, #356]	; (8009284 <__ieee754_pow+0x25c>)
 8009120:	4632      	mov	r2, r6
 8009122:	463b      	mov	r3, r7
 8009124:	2000      	movs	r0, #0
 8009126:	f7f7 fb91 	bl	800084c <__aeabi_ddiv>
 800912a:	e79c      	b.n	8009066 <__ieee754_pow+0x3e>
 800912c:	2300      	movs	r3, #0
 800912e:	9304      	str	r3, [sp, #16]
 8009130:	2a00      	cmp	r2, #0
 8009132:	d13d      	bne.n	80091b0 <__ieee754_pow+0x188>
 8009134:	4b51      	ldr	r3, [pc, #324]	; (800927c <__ieee754_pow+0x254>)
 8009136:	4598      	cmp	r8, r3
 8009138:	d1ea      	bne.n	8009110 <__ieee754_pow+0xe8>
 800913a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800913e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009142:	ea53 030a 	orrs.w	r3, r3, sl
 8009146:	f000 8459 	beq.w	80099fc <__ieee754_pow+0x9d4>
 800914a:	4b4f      	ldr	r3, [pc, #316]	; (8009288 <__ieee754_pow+0x260>)
 800914c:	429c      	cmp	r4, r3
 800914e:	dd08      	ble.n	8009162 <__ieee754_pow+0x13a>
 8009150:	f1b9 0f00 	cmp.w	r9, #0
 8009154:	f2c0 8456 	blt.w	8009a04 <__ieee754_pow+0x9dc>
 8009158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800915c:	e783      	b.n	8009066 <__ieee754_pow+0x3e>
 800915e:	2302      	movs	r3, #2
 8009160:	e7e5      	b.n	800912e <__ieee754_pow+0x106>
 8009162:	f1b9 0f00 	cmp.w	r9, #0
 8009166:	f04f 0000 	mov.w	r0, #0
 800916a:	f04f 0100 	mov.w	r1, #0
 800916e:	f6bf af7a 	bge.w	8009066 <__ieee754_pow+0x3e>
 8009172:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009176:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800917a:	e774      	b.n	8009066 <__ieee754_pow+0x3e>
 800917c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009180:	d106      	bne.n	8009190 <__ieee754_pow+0x168>
 8009182:	4632      	mov	r2, r6
 8009184:	463b      	mov	r3, r7
 8009186:	4630      	mov	r0, r6
 8009188:	4639      	mov	r1, r7
 800918a:	f7f7 fa35 	bl	80005f8 <__aeabi_dmul>
 800918e:	e76a      	b.n	8009066 <__ieee754_pow+0x3e>
 8009190:	4b3e      	ldr	r3, [pc, #248]	; (800928c <__ieee754_pow+0x264>)
 8009192:	4599      	cmp	r9, r3
 8009194:	d10c      	bne.n	80091b0 <__ieee754_pow+0x188>
 8009196:	2d00      	cmp	r5, #0
 8009198:	db0a      	blt.n	80091b0 <__ieee754_pow+0x188>
 800919a:	ec47 6b10 	vmov	d0, r6, r7
 800919e:	b009      	add	sp, #36	; 0x24
 80091a0:	ecbd 8b06 	vpop	{d8-d10}
 80091a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a8:	f000 bd20 	b.w	8009bec <__ieee754_sqrt>
 80091ac:	2300      	movs	r3, #0
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	ec47 6b10 	vmov	d0, r6, r7
 80091b4:	f000 fc62 	bl	8009a7c <fabs>
 80091b8:	ec51 0b10 	vmov	r0, r1, d0
 80091bc:	f1ba 0f00 	cmp.w	sl, #0
 80091c0:	d129      	bne.n	8009216 <__ieee754_pow+0x1ee>
 80091c2:	b124      	cbz	r4, 80091ce <__ieee754_pow+0x1a6>
 80091c4:	4b2f      	ldr	r3, [pc, #188]	; (8009284 <__ieee754_pow+0x25c>)
 80091c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d123      	bne.n	8009216 <__ieee754_pow+0x1ee>
 80091ce:	f1b9 0f00 	cmp.w	r9, #0
 80091d2:	da05      	bge.n	80091e0 <__ieee754_pow+0x1b8>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	2000      	movs	r0, #0
 80091da:	492a      	ldr	r1, [pc, #168]	; (8009284 <__ieee754_pow+0x25c>)
 80091dc:	f7f7 fb36 	bl	800084c <__aeabi_ddiv>
 80091e0:	2d00      	cmp	r5, #0
 80091e2:	f6bf af40 	bge.w	8009066 <__ieee754_pow+0x3e>
 80091e6:	9b04      	ldr	r3, [sp, #16]
 80091e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80091ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80091f0:	431c      	orrs	r4, r3
 80091f2:	d108      	bne.n	8009206 <__ieee754_pow+0x1de>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4610      	mov	r0, r2
 80091fa:	4619      	mov	r1, r3
 80091fc:	f7f7 f844 	bl	8000288 <__aeabi_dsub>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	e78f      	b.n	8009126 <__ieee754_pow+0xfe>
 8009206:	9b04      	ldr	r3, [sp, #16]
 8009208:	2b01      	cmp	r3, #1
 800920a:	f47f af2c 	bne.w	8009066 <__ieee754_pow+0x3e>
 800920e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009212:	4619      	mov	r1, r3
 8009214:	e727      	b.n	8009066 <__ieee754_pow+0x3e>
 8009216:	0feb      	lsrs	r3, r5, #31
 8009218:	3b01      	subs	r3, #1
 800921a:	9306      	str	r3, [sp, #24]
 800921c:	9a06      	ldr	r2, [sp, #24]
 800921e:	9b04      	ldr	r3, [sp, #16]
 8009220:	4313      	orrs	r3, r2
 8009222:	d102      	bne.n	800922a <__ieee754_pow+0x202>
 8009224:	4632      	mov	r2, r6
 8009226:	463b      	mov	r3, r7
 8009228:	e7e6      	b.n	80091f8 <__ieee754_pow+0x1d0>
 800922a:	4b19      	ldr	r3, [pc, #100]	; (8009290 <__ieee754_pow+0x268>)
 800922c:	4598      	cmp	r8, r3
 800922e:	f340 80fb 	ble.w	8009428 <__ieee754_pow+0x400>
 8009232:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009236:	4598      	cmp	r8, r3
 8009238:	4b13      	ldr	r3, [pc, #76]	; (8009288 <__ieee754_pow+0x260>)
 800923a:	dd0c      	ble.n	8009256 <__ieee754_pow+0x22e>
 800923c:	429c      	cmp	r4, r3
 800923e:	dc0f      	bgt.n	8009260 <__ieee754_pow+0x238>
 8009240:	f1b9 0f00 	cmp.w	r9, #0
 8009244:	da0f      	bge.n	8009266 <__ieee754_pow+0x23e>
 8009246:	2000      	movs	r0, #0
 8009248:	b009      	add	sp, #36	; 0x24
 800924a:	ecbd 8b06 	vpop	{d8-d10}
 800924e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009252:	f000 bcc2 	b.w	8009bda <__math_oflow>
 8009256:	429c      	cmp	r4, r3
 8009258:	dbf2      	blt.n	8009240 <__ieee754_pow+0x218>
 800925a:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <__ieee754_pow+0x25c>)
 800925c:	429c      	cmp	r4, r3
 800925e:	dd19      	ble.n	8009294 <__ieee754_pow+0x26c>
 8009260:	f1b9 0f00 	cmp.w	r9, #0
 8009264:	dcef      	bgt.n	8009246 <__ieee754_pow+0x21e>
 8009266:	2000      	movs	r0, #0
 8009268:	b009      	add	sp, #36	; 0x24
 800926a:	ecbd 8b06 	vpop	{d8-d10}
 800926e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009272:	f000 bca9 	b.w	8009bc8 <__math_uflow>
 8009276:	bf00      	nop
 8009278:	fff00000 	.word	0xfff00000
 800927c:	7ff00000 	.word	0x7ff00000
 8009280:	433fffff 	.word	0x433fffff
 8009284:	3ff00000 	.word	0x3ff00000
 8009288:	3fefffff 	.word	0x3fefffff
 800928c:	3fe00000 	.word	0x3fe00000
 8009290:	41e00000 	.word	0x41e00000
 8009294:	4b60      	ldr	r3, [pc, #384]	; (8009418 <__ieee754_pow+0x3f0>)
 8009296:	2200      	movs	r2, #0
 8009298:	f7f6 fff6 	bl	8000288 <__aeabi_dsub>
 800929c:	a354      	add	r3, pc, #336	; (adr r3, 80093f0 <__ieee754_pow+0x3c8>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	4604      	mov	r4, r0
 80092a4:	460d      	mov	r5, r1
 80092a6:	f7f7 f9a7 	bl	80005f8 <__aeabi_dmul>
 80092aa:	a353      	add	r3, pc, #332	; (adr r3, 80093f8 <__ieee754_pow+0x3d0>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	4606      	mov	r6, r0
 80092b2:	460f      	mov	r7, r1
 80092b4:	4620      	mov	r0, r4
 80092b6:	4629      	mov	r1, r5
 80092b8:	f7f7 f99e 	bl	80005f8 <__aeabi_dmul>
 80092bc:	4b57      	ldr	r3, [pc, #348]	; (800941c <__ieee754_pow+0x3f4>)
 80092be:	4682      	mov	sl, r0
 80092c0:	468b      	mov	fp, r1
 80092c2:	2200      	movs	r2, #0
 80092c4:	4620      	mov	r0, r4
 80092c6:	4629      	mov	r1, r5
 80092c8:	f7f7 f996 	bl	80005f8 <__aeabi_dmul>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	a14b      	add	r1, pc, #300	; (adr r1, 8009400 <__ieee754_pow+0x3d8>)
 80092d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d6:	f7f6 ffd7 	bl	8000288 <__aeabi_dsub>
 80092da:	4622      	mov	r2, r4
 80092dc:	462b      	mov	r3, r5
 80092de:	f7f7 f98b 	bl	80005f8 <__aeabi_dmul>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	2000      	movs	r0, #0
 80092e8:	494d      	ldr	r1, [pc, #308]	; (8009420 <__ieee754_pow+0x3f8>)
 80092ea:	f7f6 ffcd 	bl	8000288 <__aeabi_dsub>
 80092ee:	4622      	mov	r2, r4
 80092f0:	4680      	mov	r8, r0
 80092f2:	4689      	mov	r9, r1
 80092f4:	462b      	mov	r3, r5
 80092f6:	4620      	mov	r0, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	f7f7 f97d 	bl	80005f8 <__aeabi_dmul>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	4640      	mov	r0, r8
 8009304:	4649      	mov	r1, r9
 8009306:	f7f7 f977 	bl	80005f8 <__aeabi_dmul>
 800930a:	a33f      	add	r3, pc, #252	; (adr r3, 8009408 <__ieee754_pow+0x3e0>)
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	f7f7 f972 	bl	80005f8 <__aeabi_dmul>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4650      	mov	r0, sl
 800931a:	4659      	mov	r1, fp
 800931c:	f7f6 ffb4 	bl	8000288 <__aeabi_dsub>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4680      	mov	r8, r0
 8009326:	4689      	mov	r9, r1
 8009328:	4630      	mov	r0, r6
 800932a:	4639      	mov	r1, r7
 800932c:	f7f6 ffae 	bl	800028c <__adddf3>
 8009330:	2000      	movs	r0, #0
 8009332:	4632      	mov	r2, r6
 8009334:	463b      	mov	r3, r7
 8009336:	4604      	mov	r4, r0
 8009338:	460d      	mov	r5, r1
 800933a:	f7f6 ffa5 	bl	8000288 <__aeabi_dsub>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4640      	mov	r0, r8
 8009344:	4649      	mov	r1, r9
 8009346:	f7f6 ff9f 	bl	8000288 <__aeabi_dsub>
 800934a:	9b04      	ldr	r3, [sp, #16]
 800934c:	9a06      	ldr	r2, [sp, #24]
 800934e:	3b01      	subs	r3, #1
 8009350:	4313      	orrs	r3, r2
 8009352:	4682      	mov	sl, r0
 8009354:	468b      	mov	fp, r1
 8009356:	f040 81e7 	bne.w	8009728 <__ieee754_pow+0x700>
 800935a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009410 <__ieee754_pow+0x3e8>
 800935e:	eeb0 8a47 	vmov.f32	s16, s14
 8009362:	eef0 8a67 	vmov.f32	s17, s15
 8009366:	e9dd 6700 	ldrd	r6, r7, [sp]
 800936a:	2600      	movs	r6, #0
 800936c:	4632      	mov	r2, r6
 800936e:	463b      	mov	r3, r7
 8009370:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009374:	f7f6 ff88 	bl	8000288 <__aeabi_dsub>
 8009378:	4622      	mov	r2, r4
 800937a:	462b      	mov	r3, r5
 800937c:	f7f7 f93c 	bl	80005f8 <__aeabi_dmul>
 8009380:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009384:	4680      	mov	r8, r0
 8009386:	4689      	mov	r9, r1
 8009388:	4650      	mov	r0, sl
 800938a:	4659      	mov	r1, fp
 800938c:	f7f7 f934 	bl	80005f8 <__aeabi_dmul>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4640      	mov	r0, r8
 8009396:	4649      	mov	r1, r9
 8009398:	f7f6 ff78 	bl	800028c <__adddf3>
 800939c:	4632      	mov	r2, r6
 800939e:	463b      	mov	r3, r7
 80093a0:	4680      	mov	r8, r0
 80093a2:	4689      	mov	r9, r1
 80093a4:	4620      	mov	r0, r4
 80093a6:	4629      	mov	r1, r5
 80093a8:	f7f7 f926 	bl	80005f8 <__aeabi_dmul>
 80093ac:	460b      	mov	r3, r1
 80093ae:	4604      	mov	r4, r0
 80093b0:	460d      	mov	r5, r1
 80093b2:	4602      	mov	r2, r0
 80093b4:	4649      	mov	r1, r9
 80093b6:	4640      	mov	r0, r8
 80093b8:	f7f6 ff68 	bl	800028c <__adddf3>
 80093bc:	4b19      	ldr	r3, [pc, #100]	; (8009424 <__ieee754_pow+0x3fc>)
 80093be:	4299      	cmp	r1, r3
 80093c0:	ec45 4b19 	vmov	d9, r4, r5
 80093c4:	4606      	mov	r6, r0
 80093c6:	460f      	mov	r7, r1
 80093c8:	468b      	mov	fp, r1
 80093ca:	f340 82f0 	ble.w	80099ae <__ieee754_pow+0x986>
 80093ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80093d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80093d6:	4303      	orrs	r3, r0
 80093d8:	f000 81e4 	beq.w	80097a4 <__ieee754_pow+0x77c>
 80093dc:	ec51 0b18 	vmov	r0, r1, d8
 80093e0:	2200      	movs	r2, #0
 80093e2:	2300      	movs	r3, #0
 80093e4:	f7f7 fb7a 	bl	8000adc <__aeabi_dcmplt>
 80093e8:	3800      	subs	r0, #0
 80093ea:	bf18      	it	ne
 80093ec:	2001      	movne	r0, #1
 80093ee:	e72b      	b.n	8009248 <__ieee754_pow+0x220>
 80093f0:	60000000 	.word	0x60000000
 80093f4:	3ff71547 	.word	0x3ff71547
 80093f8:	f85ddf44 	.word	0xf85ddf44
 80093fc:	3e54ae0b 	.word	0x3e54ae0b
 8009400:	55555555 	.word	0x55555555
 8009404:	3fd55555 	.word	0x3fd55555
 8009408:	652b82fe 	.word	0x652b82fe
 800940c:	3ff71547 	.word	0x3ff71547
 8009410:	00000000 	.word	0x00000000
 8009414:	bff00000 	.word	0xbff00000
 8009418:	3ff00000 	.word	0x3ff00000
 800941c:	3fd00000 	.word	0x3fd00000
 8009420:	3fe00000 	.word	0x3fe00000
 8009424:	408fffff 	.word	0x408fffff
 8009428:	4bd5      	ldr	r3, [pc, #852]	; (8009780 <__ieee754_pow+0x758>)
 800942a:	402b      	ands	r3, r5
 800942c:	2200      	movs	r2, #0
 800942e:	b92b      	cbnz	r3, 800943c <__ieee754_pow+0x414>
 8009430:	4bd4      	ldr	r3, [pc, #848]	; (8009784 <__ieee754_pow+0x75c>)
 8009432:	f7f7 f8e1 	bl	80005f8 <__aeabi_dmul>
 8009436:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800943a:	460c      	mov	r4, r1
 800943c:	1523      	asrs	r3, r4, #20
 800943e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009442:	4413      	add	r3, r2
 8009444:	9305      	str	r3, [sp, #20]
 8009446:	4bd0      	ldr	r3, [pc, #832]	; (8009788 <__ieee754_pow+0x760>)
 8009448:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800944c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009450:	429c      	cmp	r4, r3
 8009452:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009456:	dd08      	ble.n	800946a <__ieee754_pow+0x442>
 8009458:	4bcc      	ldr	r3, [pc, #816]	; (800978c <__ieee754_pow+0x764>)
 800945a:	429c      	cmp	r4, r3
 800945c:	f340 8162 	ble.w	8009724 <__ieee754_pow+0x6fc>
 8009460:	9b05      	ldr	r3, [sp, #20]
 8009462:	3301      	adds	r3, #1
 8009464:	9305      	str	r3, [sp, #20]
 8009466:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800946a:	2400      	movs	r4, #0
 800946c:	00e3      	lsls	r3, r4, #3
 800946e:	9307      	str	r3, [sp, #28]
 8009470:	4bc7      	ldr	r3, [pc, #796]	; (8009790 <__ieee754_pow+0x768>)
 8009472:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009476:	ed93 7b00 	vldr	d7, [r3]
 800947a:	4629      	mov	r1, r5
 800947c:	ec53 2b17 	vmov	r2, r3, d7
 8009480:	eeb0 9a47 	vmov.f32	s18, s14
 8009484:	eef0 9a67 	vmov.f32	s19, s15
 8009488:	4682      	mov	sl, r0
 800948a:	f7f6 fefd 	bl	8000288 <__aeabi_dsub>
 800948e:	4652      	mov	r2, sl
 8009490:	4606      	mov	r6, r0
 8009492:	460f      	mov	r7, r1
 8009494:	462b      	mov	r3, r5
 8009496:	ec51 0b19 	vmov	r0, r1, d9
 800949a:	f7f6 fef7 	bl	800028c <__adddf3>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	2000      	movs	r0, #0
 80094a4:	49bb      	ldr	r1, [pc, #748]	; (8009794 <__ieee754_pow+0x76c>)
 80094a6:	f7f7 f9d1 	bl	800084c <__aeabi_ddiv>
 80094aa:	ec41 0b1a 	vmov	d10, r0, r1
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4630      	mov	r0, r6
 80094b4:	4639      	mov	r1, r7
 80094b6:	f7f7 f89f 	bl	80005f8 <__aeabi_dmul>
 80094ba:	2300      	movs	r3, #0
 80094bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094c0:	9302      	str	r3, [sp, #8]
 80094c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094c6:	46ab      	mov	fp, r5
 80094c8:	106d      	asrs	r5, r5, #1
 80094ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80094ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80094d2:	ec41 0b18 	vmov	d8, r0, r1
 80094d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80094da:	2200      	movs	r2, #0
 80094dc:	4640      	mov	r0, r8
 80094de:	4649      	mov	r1, r9
 80094e0:	4614      	mov	r4, r2
 80094e2:	461d      	mov	r5, r3
 80094e4:	f7f7 f888 	bl	80005f8 <__aeabi_dmul>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4630      	mov	r0, r6
 80094ee:	4639      	mov	r1, r7
 80094f0:	f7f6 feca 	bl	8000288 <__aeabi_dsub>
 80094f4:	ec53 2b19 	vmov	r2, r3, d9
 80094f8:	4606      	mov	r6, r0
 80094fa:	460f      	mov	r7, r1
 80094fc:	4620      	mov	r0, r4
 80094fe:	4629      	mov	r1, r5
 8009500:	f7f6 fec2 	bl	8000288 <__aeabi_dsub>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4650      	mov	r0, sl
 800950a:	4659      	mov	r1, fp
 800950c:	f7f6 febc 	bl	8000288 <__aeabi_dsub>
 8009510:	4642      	mov	r2, r8
 8009512:	464b      	mov	r3, r9
 8009514:	f7f7 f870 	bl	80005f8 <__aeabi_dmul>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4630      	mov	r0, r6
 800951e:	4639      	mov	r1, r7
 8009520:	f7f6 feb2 	bl	8000288 <__aeabi_dsub>
 8009524:	ec53 2b1a 	vmov	r2, r3, d10
 8009528:	f7f7 f866 	bl	80005f8 <__aeabi_dmul>
 800952c:	ec53 2b18 	vmov	r2, r3, d8
 8009530:	ec41 0b19 	vmov	d9, r0, r1
 8009534:	ec51 0b18 	vmov	r0, r1, d8
 8009538:	f7f7 f85e 	bl	80005f8 <__aeabi_dmul>
 800953c:	a37c      	add	r3, pc, #496	; (adr r3, 8009730 <__ieee754_pow+0x708>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	4604      	mov	r4, r0
 8009544:	460d      	mov	r5, r1
 8009546:	f7f7 f857 	bl	80005f8 <__aeabi_dmul>
 800954a:	a37b      	add	r3, pc, #492	; (adr r3, 8009738 <__ieee754_pow+0x710>)
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	f7f6 fe9c 	bl	800028c <__adddf3>
 8009554:	4622      	mov	r2, r4
 8009556:	462b      	mov	r3, r5
 8009558:	f7f7 f84e 	bl	80005f8 <__aeabi_dmul>
 800955c:	a378      	add	r3, pc, #480	; (adr r3, 8009740 <__ieee754_pow+0x718>)
 800955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009562:	f7f6 fe93 	bl	800028c <__adddf3>
 8009566:	4622      	mov	r2, r4
 8009568:	462b      	mov	r3, r5
 800956a:	f7f7 f845 	bl	80005f8 <__aeabi_dmul>
 800956e:	a376      	add	r3, pc, #472	; (adr r3, 8009748 <__ieee754_pow+0x720>)
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	f7f6 fe8a 	bl	800028c <__adddf3>
 8009578:	4622      	mov	r2, r4
 800957a:	462b      	mov	r3, r5
 800957c:	f7f7 f83c 	bl	80005f8 <__aeabi_dmul>
 8009580:	a373      	add	r3, pc, #460	; (adr r3, 8009750 <__ieee754_pow+0x728>)
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	f7f6 fe81 	bl	800028c <__adddf3>
 800958a:	4622      	mov	r2, r4
 800958c:	462b      	mov	r3, r5
 800958e:	f7f7 f833 	bl	80005f8 <__aeabi_dmul>
 8009592:	a371      	add	r3, pc, #452	; (adr r3, 8009758 <__ieee754_pow+0x730>)
 8009594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009598:	f7f6 fe78 	bl	800028c <__adddf3>
 800959c:	4622      	mov	r2, r4
 800959e:	4606      	mov	r6, r0
 80095a0:	460f      	mov	r7, r1
 80095a2:	462b      	mov	r3, r5
 80095a4:	4620      	mov	r0, r4
 80095a6:	4629      	mov	r1, r5
 80095a8:	f7f7 f826 	bl	80005f8 <__aeabi_dmul>
 80095ac:	4602      	mov	r2, r0
 80095ae:	460b      	mov	r3, r1
 80095b0:	4630      	mov	r0, r6
 80095b2:	4639      	mov	r1, r7
 80095b4:	f7f7 f820 	bl	80005f8 <__aeabi_dmul>
 80095b8:	4642      	mov	r2, r8
 80095ba:	4604      	mov	r4, r0
 80095bc:	460d      	mov	r5, r1
 80095be:	464b      	mov	r3, r9
 80095c0:	ec51 0b18 	vmov	r0, r1, d8
 80095c4:	f7f6 fe62 	bl	800028c <__adddf3>
 80095c8:	ec53 2b19 	vmov	r2, r3, d9
 80095cc:	f7f7 f814 	bl	80005f8 <__aeabi_dmul>
 80095d0:	4622      	mov	r2, r4
 80095d2:	462b      	mov	r3, r5
 80095d4:	f7f6 fe5a 	bl	800028c <__adddf3>
 80095d8:	4642      	mov	r2, r8
 80095da:	4682      	mov	sl, r0
 80095dc:	468b      	mov	fp, r1
 80095de:	464b      	mov	r3, r9
 80095e0:	4640      	mov	r0, r8
 80095e2:	4649      	mov	r1, r9
 80095e4:	f7f7 f808 	bl	80005f8 <__aeabi_dmul>
 80095e8:	4b6b      	ldr	r3, [pc, #428]	; (8009798 <__ieee754_pow+0x770>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	f7f6 fe4c 	bl	800028c <__adddf3>
 80095f4:	4652      	mov	r2, sl
 80095f6:	465b      	mov	r3, fp
 80095f8:	f7f6 fe48 	bl	800028c <__adddf3>
 80095fc:	2000      	movs	r0, #0
 80095fe:	4604      	mov	r4, r0
 8009600:	460d      	mov	r5, r1
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	4640      	mov	r0, r8
 8009608:	4649      	mov	r1, r9
 800960a:	f7f6 fff5 	bl	80005f8 <__aeabi_dmul>
 800960e:	4b62      	ldr	r3, [pc, #392]	; (8009798 <__ieee754_pow+0x770>)
 8009610:	4680      	mov	r8, r0
 8009612:	4689      	mov	r9, r1
 8009614:	2200      	movs	r2, #0
 8009616:	4620      	mov	r0, r4
 8009618:	4629      	mov	r1, r5
 800961a:	f7f6 fe35 	bl	8000288 <__aeabi_dsub>
 800961e:	4632      	mov	r2, r6
 8009620:	463b      	mov	r3, r7
 8009622:	f7f6 fe31 	bl	8000288 <__aeabi_dsub>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4650      	mov	r0, sl
 800962c:	4659      	mov	r1, fp
 800962e:	f7f6 fe2b 	bl	8000288 <__aeabi_dsub>
 8009632:	ec53 2b18 	vmov	r2, r3, d8
 8009636:	f7f6 ffdf 	bl	80005f8 <__aeabi_dmul>
 800963a:	4622      	mov	r2, r4
 800963c:	4606      	mov	r6, r0
 800963e:	460f      	mov	r7, r1
 8009640:	462b      	mov	r3, r5
 8009642:	ec51 0b19 	vmov	r0, r1, d9
 8009646:	f7f6 ffd7 	bl	80005f8 <__aeabi_dmul>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4630      	mov	r0, r6
 8009650:	4639      	mov	r1, r7
 8009652:	f7f6 fe1b 	bl	800028c <__adddf3>
 8009656:	4606      	mov	r6, r0
 8009658:	460f      	mov	r7, r1
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4640      	mov	r0, r8
 8009660:	4649      	mov	r1, r9
 8009662:	f7f6 fe13 	bl	800028c <__adddf3>
 8009666:	a33e      	add	r3, pc, #248	; (adr r3, 8009760 <__ieee754_pow+0x738>)
 8009668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966c:	2000      	movs	r0, #0
 800966e:	4604      	mov	r4, r0
 8009670:	460d      	mov	r5, r1
 8009672:	f7f6 ffc1 	bl	80005f8 <__aeabi_dmul>
 8009676:	4642      	mov	r2, r8
 8009678:	ec41 0b18 	vmov	d8, r0, r1
 800967c:	464b      	mov	r3, r9
 800967e:	4620      	mov	r0, r4
 8009680:	4629      	mov	r1, r5
 8009682:	f7f6 fe01 	bl	8000288 <__aeabi_dsub>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4630      	mov	r0, r6
 800968c:	4639      	mov	r1, r7
 800968e:	f7f6 fdfb 	bl	8000288 <__aeabi_dsub>
 8009692:	a335      	add	r3, pc, #212	; (adr r3, 8009768 <__ieee754_pow+0x740>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f7f6 ffae 	bl	80005f8 <__aeabi_dmul>
 800969c:	a334      	add	r3, pc, #208	; (adr r3, 8009770 <__ieee754_pow+0x748>)
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	4606      	mov	r6, r0
 80096a4:	460f      	mov	r7, r1
 80096a6:	4620      	mov	r0, r4
 80096a8:	4629      	mov	r1, r5
 80096aa:	f7f6 ffa5 	bl	80005f8 <__aeabi_dmul>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	4630      	mov	r0, r6
 80096b4:	4639      	mov	r1, r7
 80096b6:	f7f6 fde9 	bl	800028c <__adddf3>
 80096ba:	9a07      	ldr	r2, [sp, #28]
 80096bc:	4b37      	ldr	r3, [pc, #220]	; (800979c <__ieee754_pow+0x774>)
 80096be:	4413      	add	r3, r2
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f7f6 fde2 	bl	800028c <__adddf3>
 80096c8:	4682      	mov	sl, r0
 80096ca:	9805      	ldr	r0, [sp, #20]
 80096cc:	468b      	mov	fp, r1
 80096ce:	f7f6 ff29 	bl	8000524 <__aeabi_i2d>
 80096d2:	9a07      	ldr	r2, [sp, #28]
 80096d4:	4b32      	ldr	r3, [pc, #200]	; (80097a0 <__ieee754_pow+0x778>)
 80096d6:	4413      	add	r3, r2
 80096d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096dc:	4606      	mov	r6, r0
 80096de:	460f      	mov	r7, r1
 80096e0:	4652      	mov	r2, sl
 80096e2:	465b      	mov	r3, fp
 80096e4:	ec51 0b18 	vmov	r0, r1, d8
 80096e8:	f7f6 fdd0 	bl	800028c <__adddf3>
 80096ec:	4642      	mov	r2, r8
 80096ee:	464b      	mov	r3, r9
 80096f0:	f7f6 fdcc 	bl	800028c <__adddf3>
 80096f4:	4632      	mov	r2, r6
 80096f6:	463b      	mov	r3, r7
 80096f8:	f7f6 fdc8 	bl	800028c <__adddf3>
 80096fc:	2000      	movs	r0, #0
 80096fe:	4632      	mov	r2, r6
 8009700:	463b      	mov	r3, r7
 8009702:	4604      	mov	r4, r0
 8009704:	460d      	mov	r5, r1
 8009706:	f7f6 fdbf 	bl	8000288 <__aeabi_dsub>
 800970a:	4642      	mov	r2, r8
 800970c:	464b      	mov	r3, r9
 800970e:	f7f6 fdbb 	bl	8000288 <__aeabi_dsub>
 8009712:	ec53 2b18 	vmov	r2, r3, d8
 8009716:	f7f6 fdb7 	bl	8000288 <__aeabi_dsub>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	4650      	mov	r0, sl
 8009720:	4659      	mov	r1, fp
 8009722:	e610      	b.n	8009346 <__ieee754_pow+0x31e>
 8009724:	2401      	movs	r4, #1
 8009726:	e6a1      	b.n	800946c <__ieee754_pow+0x444>
 8009728:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009778 <__ieee754_pow+0x750>
 800972c:	e617      	b.n	800935e <__ieee754_pow+0x336>
 800972e:	bf00      	nop
 8009730:	4a454eef 	.word	0x4a454eef
 8009734:	3fca7e28 	.word	0x3fca7e28
 8009738:	93c9db65 	.word	0x93c9db65
 800973c:	3fcd864a 	.word	0x3fcd864a
 8009740:	a91d4101 	.word	0xa91d4101
 8009744:	3fd17460 	.word	0x3fd17460
 8009748:	518f264d 	.word	0x518f264d
 800974c:	3fd55555 	.word	0x3fd55555
 8009750:	db6fabff 	.word	0xdb6fabff
 8009754:	3fdb6db6 	.word	0x3fdb6db6
 8009758:	33333303 	.word	0x33333303
 800975c:	3fe33333 	.word	0x3fe33333
 8009760:	e0000000 	.word	0xe0000000
 8009764:	3feec709 	.word	0x3feec709
 8009768:	dc3a03fd 	.word	0xdc3a03fd
 800976c:	3feec709 	.word	0x3feec709
 8009770:	145b01f5 	.word	0x145b01f5
 8009774:	be3e2fe0 	.word	0xbe3e2fe0
 8009778:	00000000 	.word	0x00000000
 800977c:	3ff00000 	.word	0x3ff00000
 8009780:	7ff00000 	.word	0x7ff00000
 8009784:	43400000 	.word	0x43400000
 8009788:	0003988e 	.word	0x0003988e
 800978c:	000bb679 	.word	0x000bb679
 8009790:	0800a2c0 	.word	0x0800a2c0
 8009794:	3ff00000 	.word	0x3ff00000
 8009798:	40080000 	.word	0x40080000
 800979c:	0800a2e0 	.word	0x0800a2e0
 80097a0:	0800a2d0 	.word	0x0800a2d0
 80097a4:	a3b3      	add	r3, pc, #716	; (adr r3, 8009a74 <__ieee754_pow+0xa4c>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	4640      	mov	r0, r8
 80097ac:	4649      	mov	r1, r9
 80097ae:	f7f6 fd6d 	bl	800028c <__adddf3>
 80097b2:	4622      	mov	r2, r4
 80097b4:	ec41 0b1a 	vmov	d10, r0, r1
 80097b8:	462b      	mov	r3, r5
 80097ba:	4630      	mov	r0, r6
 80097bc:	4639      	mov	r1, r7
 80097be:	f7f6 fd63 	bl	8000288 <__aeabi_dsub>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	ec51 0b1a 	vmov	r0, r1, d10
 80097ca:	f7f7 f9a5 	bl	8000b18 <__aeabi_dcmpgt>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f47f ae04 	bne.w	80093dc <__ieee754_pow+0x3b4>
 80097d4:	4aa2      	ldr	r2, [pc, #648]	; (8009a60 <__ieee754_pow+0xa38>)
 80097d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097da:	4293      	cmp	r3, r2
 80097dc:	f340 8107 	ble.w	80099ee <__ieee754_pow+0x9c6>
 80097e0:	151b      	asrs	r3, r3, #20
 80097e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80097e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80097ea:	fa4a fa03 	asr.w	sl, sl, r3
 80097ee:	44da      	add	sl, fp
 80097f0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80097f4:	489b      	ldr	r0, [pc, #620]	; (8009a64 <__ieee754_pow+0xa3c>)
 80097f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80097fa:	4108      	asrs	r0, r1
 80097fc:	ea00 030a 	and.w	r3, r0, sl
 8009800:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009804:	f1c1 0114 	rsb	r1, r1, #20
 8009808:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800980c:	fa4a fa01 	asr.w	sl, sl, r1
 8009810:	f1bb 0f00 	cmp.w	fp, #0
 8009814:	f04f 0200 	mov.w	r2, #0
 8009818:	4620      	mov	r0, r4
 800981a:	4629      	mov	r1, r5
 800981c:	bfb8      	it	lt
 800981e:	f1ca 0a00 	rsblt	sl, sl, #0
 8009822:	f7f6 fd31 	bl	8000288 <__aeabi_dsub>
 8009826:	ec41 0b19 	vmov	d9, r0, r1
 800982a:	4642      	mov	r2, r8
 800982c:	464b      	mov	r3, r9
 800982e:	ec51 0b19 	vmov	r0, r1, d9
 8009832:	f7f6 fd2b 	bl	800028c <__adddf3>
 8009836:	a37a      	add	r3, pc, #488	; (adr r3, 8009a20 <__ieee754_pow+0x9f8>)
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	2000      	movs	r0, #0
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
 8009842:	f7f6 fed9 	bl	80005f8 <__aeabi_dmul>
 8009846:	ec53 2b19 	vmov	r2, r3, d9
 800984a:	4606      	mov	r6, r0
 800984c:	460f      	mov	r7, r1
 800984e:	4620      	mov	r0, r4
 8009850:	4629      	mov	r1, r5
 8009852:	f7f6 fd19 	bl	8000288 <__aeabi_dsub>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4640      	mov	r0, r8
 800985c:	4649      	mov	r1, r9
 800985e:	f7f6 fd13 	bl	8000288 <__aeabi_dsub>
 8009862:	a371      	add	r3, pc, #452	; (adr r3, 8009a28 <__ieee754_pow+0xa00>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	f7f6 fec6 	bl	80005f8 <__aeabi_dmul>
 800986c:	a370      	add	r3, pc, #448	; (adr r3, 8009a30 <__ieee754_pow+0xa08>)
 800986e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009872:	4680      	mov	r8, r0
 8009874:	4689      	mov	r9, r1
 8009876:	4620      	mov	r0, r4
 8009878:	4629      	mov	r1, r5
 800987a:	f7f6 febd 	bl	80005f8 <__aeabi_dmul>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4640      	mov	r0, r8
 8009884:	4649      	mov	r1, r9
 8009886:	f7f6 fd01 	bl	800028c <__adddf3>
 800988a:	4604      	mov	r4, r0
 800988c:	460d      	mov	r5, r1
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4630      	mov	r0, r6
 8009894:	4639      	mov	r1, r7
 8009896:	f7f6 fcf9 	bl	800028c <__adddf3>
 800989a:	4632      	mov	r2, r6
 800989c:	463b      	mov	r3, r7
 800989e:	4680      	mov	r8, r0
 80098a0:	4689      	mov	r9, r1
 80098a2:	f7f6 fcf1 	bl	8000288 <__aeabi_dsub>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4620      	mov	r0, r4
 80098ac:	4629      	mov	r1, r5
 80098ae:	f7f6 fceb 	bl	8000288 <__aeabi_dsub>
 80098b2:	4642      	mov	r2, r8
 80098b4:	4606      	mov	r6, r0
 80098b6:	460f      	mov	r7, r1
 80098b8:	464b      	mov	r3, r9
 80098ba:	4640      	mov	r0, r8
 80098bc:	4649      	mov	r1, r9
 80098be:	f7f6 fe9b 	bl	80005f8 <__aeabi_dmul>
 80098c2:	a35d      	add	r3, pc, #372	; (adr r3, 8009a38 <__ieee754_pow+0xa10>)
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	4604      	mov	r4, r0
 80098ca:	460d      	mov	r5, r1
 80098cc:	f7f6 fe94 	bl	80005f8 <__aeabi_dmul>
 80098d0:	a35b      	add	r3, pc, #364	; (adr r3, 8009a40 <__ieee754_pow+0xa18>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	f7f6 fcd7 	bl	8000288 <__aeabi_dsub>
 80098da:	4622      	mov	r2, r4
 80098dc:	462b      	mov	r3, r5
 80098de:	f7f6 fe8b 	bl	80005f8 <__aeabi_dmul>
 80098e2:	a359      	add	r3, pc, #356	; (adr r3, 8009a48 <__ieee754_pow+0xa20>)
 80098e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e8:	f7f6 fcd0 	bl	800028c <__adddf3>
 80098ec:	4622      	mov	r2, r4
 80098ee:	462b      	mov	r3, r5
 80098f0:	f7f6 fe82 	bl	80005f8 <__aeabi_dmul>
 80098f4:	a356      	add	r3, pc, #344	; (adr r3, 8009a50 <__ieee754_pow+0xa28>)
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	f7f6 fcc5 	bl	8000288 <__aeabi_dsub>
 80098fe:	4622      	mov	r2, r4
 8009900:	462b      	mov	r3, r5
 8009902:	f7f6 fe79 	bl	80005f8 <__aeabi_dmul>
 8009906:	a354      	add	r3, pc, #336	; (adr r3, 8009a58 <__ieee754_pow+0xa30>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f7f6 fcbe 	bl	800028c <__adddf3>
 8009910:	4622      	mov	r2, r4
 8009912:	462b      	mov	r3, r5
 8009914:	f7f6 fe70 	bl	80005f8 <__aeabi_dmul>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4640      	mov	r0, r8
 800991e:	4649      	mov	r1, r9
 8009920:	f7f6 fcb2 	bl	8000288 <__aeabi_dsub>
 8009924:	4604      	mov	r4, r0
 8009926:	460d      	mov	r5, r1
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4640      	mov	r0, r8
 800992e:	4649      	mov	r1, r9
 8009930:	f7f6 fe62 	bl	80005f8 <__aeabi_dmul>
 8009934:	2200      	movs	r2, #0
 8009936:	ec41 0b19 	vmov	d9, r0, r1
 800993a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800993e:	4620      	mov	r0, r4
 8009940:	4629      	mov	r1, r5
 8009942:	f7f6 fca1 	bl	8000288 <__aeabi_dsub>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	ec51 0b19 	vmov	r0, r1, d9
 800994e:	f7f6 ff7d 	bl	800084c <__aeabi_ddiv>
 8009952:	4632      	mov	r2, r6
 8009954:	4604      	mov	r4, r0
 8009956:	460d      	mov	r5, r1
 8009958:	463b      	mov	r3, r7
 800995a:	4640      	mov	r0, r8
 800995c:	4649      	mov	r1, r9
 800995e:	f7f6 fe4b 	bl	80005f8 <__aeabi_dmul>
 8009962:	4632      	mov	r2, r6
 8009964:	463b      	mov	r3, r7
 8009966:	f7f6 fc91 	bl	800028c <__adddf3>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7f6 fc89 	bl	8000288 <__aeabi_dsub>
 8009976:	4642      	mov	r2, r8
 8009978:	464b      	mov	r3, r9
 800997a:	f7f6 fc85 	bl	8000288 <__aeabi_dsub>
 800997e:	460b      	mov	r3, r1
 8009980:	4602      	mov	r2, r0
 8009982:	4939      	ldr	r1, [pc, #228]	; (8009a68 <__ieee754_pow+0xa40>)
 8009984:	2000      	movs	r0, #0
 8009986:	f7f6 fc7f 	bl	8000288 <__aeabi_dsub>
 800998a:	ec41 0b10 	vmov	d0, r0, r1
 800998e:	ee10 3a90 	vmov	r3, s1
 8009992:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800999a:	da2b      	bge.n	80099f4 <__ieee754_pow+0x9cc>
 800999c:	4650      	mov	r0, sl
 800999e:	f000 f877 	bl	8009a90 <scalbn>
 80099a2:	ec51 0b10 	vmov	r0, r1, d0
 80099a6:	ec53 2b18 	vmov	r2, r3, d8
 80099aa:	f7ff bbee 	b.w	800918a <__ieee754_pow+0x162>
 80099ae:	4b2f      	ldr	r3, [pc, #188]	; (8009a6c <__ieee754_pow+0xa44>)
 80099b0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80099b4:	429e      	cmp	r6, r3
 80099b6:	f77f af0d 	ble.w	80097d4 <__ieee754_pow+0x7ac>
 80099ba:	4b2d      	ldr	r3, [pc, #180]	; (8009a70 <__ieee754_pow+0xa48>)
 80099bc:	440b      	add	r3, r1
 80099be:	4303      	orrs	r3, r0
 80099c0:	d009      	beq.n	80099d6 <__ieee754_pow+0x9ae>
 80099c2:	ec51 0b18 	vmov	r0, r1, d8
 80099c6:	2200      	movs	r2, #0
 80099c8:	2300      	movs	r3, #0
 80099ca:	f7f7 f887 	bl	8000adc <__aeabi_dcmplt>
 80099ce:	3800      	subs	r0, #0
 80099d0:	bf18      	it	ne
 80099d2:	2001      	movne	r0, #1
 80099d4:	e448      	b.n	8009268 <__ieee754_pow+0x240>
 80099d6:	4622      	mov	r2, r4
 80099d8:	462b      	mov	r3, r5
 80099da:	f7f6 fc55 	bl	8000288 <__aeabi_dsub>
 80099de:	4642      	mov	r2, r8
 80099e0:	464b      	mov	r3, r9
 80099e2:	f7f7 f88f 	bl	8000b04 <__aeabi_dcmpge>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f43f aef4 	beq.w	80097d4 <__ieee754_pow+0x7ac>
 80099ec:	e7e9      	b.n	80099c2 <__ieee754_pow+0x99a>
 80099ee:	f04f 0a00 	mov.w	sl, #0
 80099f2:	e71a      	b.n	800982a <__ieee754_pow+0x802>
 80099f4:	ec51 0b10 	vmov	r0, r1, d0
 80099f8:	4619      	mov	r1, r3
 80099fa:	e7d4      	b.n	80099a6 <__ieee754_pow+0x97e>
 80099fc:	491a      	ldr	r1, [pc, #104]	; (8009a68 <__ieee754_pow+0xa40>)
 80099fe:	2000      	movs	r0, #0
 8009a00:	f7ff bb31 	b.w	8009066 <__ieee754_pow+0x3e>
 8009a04:	2000      	movs	r0, #0
 8009a06:	2100      	movs	r1, #0
 8009a08:	f7ff bb2d 	b.w	8009066 <__ieee754_pow+0x3e>
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	4639      	mov	r1, r7
 8009a10:	f7ff bb29 	b.w	8009066 <__ieee754_pow+0x3e>
 8009a14:	9204      	str	r2, [sp, #16]
 8009a16:	f7ff bb7b 	b.w	8009110 <__ieee754_pow+0xe8>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f7ff bb65 	b.w	80090ea <__ieee754_pow+0xc2>
 8009a20:	00000000 	.word	0x00000000
 8009a24:	3fe62e43 	.word	0x3fe62e43
 8009a28:	fefa39ef 	.word	0xfefa39ef
 8009a2c:	3fe62e42 	.word	0x3fe62e42
 8009a30:	0ca86c39 	.word	0x0ca86c39
 8009a34:	be205c61 	.word	0xbe205c61
 8009a38:	72bea4d0 	.word	0x72bea4d0
 8009a3c:	3e663769 	.word	0x3e663769
 8009a40:	c5d26bf1 	.word	0xc5d26bf1
 8009a44:	3ebbbd41 	.word	0x3ebbbd41
 8009a48:	af25de2c 	.word	0xaf25de2c
 8009a4c:	3f11566a 	.word	0x3f11566a
 8009a50:	16bebd93 	.word	0x16bebd93
 8009a54:	3f66c16c 	.word	0x3f66c16c
 8009a58:	5555553e 	.word	0x5555553e
 8009a5c:	3fc55555 	.word	0x3fc55555
 8009a60:	3fe00000 	.word	0x3fe00000
 8009a64:	fff00000 	.word	0xfff00000
 8009a68:	3ff00000 	.word	0x3ff00000
 8009a6c:	4090cbff 	.word	0x4090cbff
 8009a70:	3f6f3400 	.word	0x3f6f3400
 8009a74:	652b82fe 	.word	0x652b82fe
 8009a78:	3c971547 	.word	0x3c971547

08009a7c <fabs>:
 8009a7c:	ec51 0b10 	vmov	r0, r1, d0
 8009a80:	ee10 2a10 	vmov	r2, s0
 8009a84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a88:	ec43 2b10 	vmov	d0, r2, r3
 8009a8c:	4770      	bx	lr
	...

08009a90 <scalbn>:
 8009a90:	b570      	push	{r4, r5, r6, lr}
 8009a92:	ec55 4b10 	vmov	r4, r5, d0
 8009a96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	462b      	mov	r3, r5
 8009a9e:	b999      	cbnz	r1, 8009ac8 <scalbn+0x38>
 8009aa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009aa4:	4323      	orrs	r3, r4
 8009aa6:	d03f      	beq.n	8009b28 <scalbn+0x98>
 8009aa8:	4b35      	ldr	r3, [pc, #212]	; (8009b80 <scalbn+0xf0>)
 8009aaa:	4629      	mov	r1, r5
 8009aac:	ee10 0a10 	vmov	r0, s0
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	4b33      	ldr	r3, [pc, #204]	; (8009b84 <scalbn+0xf4>)
 8009ab8:	429e      	cmp	r6, r3
 8009aba:	4604      	mov	r4, r0
 8009abc:	460d      	mov	r5, r1
 8009abe:	da10      	bge.n	8009ae2 <scalbn+0x52>
 8009ac0:	a327      	add	r3, pc, #156	; (adr r3, 8009b60 <scalbn+0xd0>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	e01f      	b.n	8009b08 <scalbn+0x78>
 8009ac8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009acc:	4291      	cmp	r1, r2
 8009ace:	d10c      	bne.n	8009aea <scalbn+0x5a>
 8009ad0:	ee10 2a10 	vmov	r2, s0
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f7f6 fbd8 	bl	800028c <__adddf3>
 8009adc:	4604      	mov	r4, r0
 8009ade:	460d      	mov	r5, r1
 8009ae0:	e022      	b.n	8009b28 <scalbn+0x98>
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009ae8:	3936      	subs	r1, #54	; 0x36
 8009aea:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009aee:	4296      	cmp	r6, r2
 8009af0:	dd0d      	ble.n	8009b0e <scalbn+0x7e>
 8009af2:	2d00      	cmp	r5, #0
 8009af4:	a11c      	add	r1, pc, #112	; (adr r1, 8009b68 <scalbn+0xd8>)
 8009af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009afa:	da02      	bge.n	8009b02 <scalbn+0x72>
 8009afc:	a11c      	add	r1, pc, #112	; (adr r1, 8009b70 <scalbn+0xe0>)
 8009afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b02:	a319      	add	r3, pc, #100	; (adr r3, 8009b68 <scalbn+0xd8>)
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f7f6 fd76 	bl	80005f8 <__aeabi_dmul>
 8009b0c:	e7e6      	b.n	8009adc <scalbn+0x4c>
 8009b0e:	1872      	adds	r2, r6, r1
 8009b10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009b14:	428a      	cmp	r2, r1
 8009b16:	dcec      	bgt.n	8009af2 <scalbn+0x62>
 8009b18:	2a00      	cmp	r2, #0
 8009b1a:	dd08      	ble.n	8009b2e <scalbn+0x9e>
 8009b1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009b20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009b28:	ec45 4b10 	vmov	d0, r4, r5
 8009b2c:	bd70      	pop	{r4, r5, r6, pc}
 8009b2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009b32:	da08      	bge.n	8009b46 <scalbn+0xb6>
 8009b34:	2d00      	cmp	r5, #0
 8009b36:	a10a      	add	r1, pc, #40	; (adr r1, 8009b60 <scalbn+0xd0>)
 8009b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b3c:	dac0      	bge.n	8009ac0 <scalbn+0x30>
 8009b3e:	a10e      	add	r1, pc, #56	; (adr r1, 8009b78 <scalbn+0xe8>)
 8009b40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b44:	e7bc      	b.n	8009ac0 <scalbn+0x30>
 8009b46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009b4a:	3236      	adds	r2, #54	; 0x36
 8009b4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009b54:	4620      	mov	r0, r4
 8009b56:	4b0c      	ldr	r3, [pc, #48]	; (8009b88 <scalbn+0xf8>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	e7d5      	b.n	8009b08 <scalbn+0x78>
 8009b5c:	f3af 8000 	nop.w
 8009b60:	c2f8f359 	.word	0xc2f8f359
 8009b64:	01a56e1f 	.word	0x01a56e1f
 8009b68:	8800759c 	.word	0x8800759c
 8009b6c:	7e37e43c 	.word	0x7e37e43c
 8009b70:	8800759c 	.word	0x8800759c
 8009b74:	fe37e43c 	.word	0xfe37e43c
 8009b78:	c2f8f359 	.word	0xc2f8f359
 8009b7c:	81a56e1f 	.word	0x81a56e1f
 8009b80:	43500000 	.word	0x43500000
 8009b84:	ffff3cb0 	.word	0xffff3cb0
 8009b88:	3c900000 	.word	0x3c900000

08009b8c <with_errno>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	4604      	mov	r4, r0
 8009b90:	460d      	mov	r5, r1
 8009b92:	4616      	mov	r6, r2
 8009b94:	f7fd f9b8 	bl	8006f08 <__errno>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	6006      	str	r6, [r0, #0]
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}

08009ba0 <xflow>:
 8009ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ba2:	4614      	mov	r4, r2
 8009ba4:	461d      	mov	r5, r3
 8009ba6:	b108      	cbz	r0, 8009bac <xflow+0xc>
 8009ba8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009bac:	e9cd 2300 	strd	r2, r3, [sp]
 8009bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	f7f6 fd1e 	bl	80005f8 <__aeabi_dmul>
 8009bbc:	2222      	movs	r2, #34	; 0x22
 8009bbe:	b003      	add	sp, #12
 8009bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bc4:	f7ff bfe2 	b.w	8009b8c <with_errno>

08009bc8 <__math_uflow>:
 8009bc8:	b508      	push	{r3, lr}
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009bd0:	f7ff ffe6 	bl	8009ba0 <xflow>
 8009bd4:	ec41 0b10 	vmov	d0, r0, r1
 8009bd8:	bd08      	pop	{r3, pc}

08009bda <__math_oflow>:
 8009bda:	b508      	push	{r3, lr}
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009be2:	f7ff ffdd 	bl	8009ba0 <xflow>
 8009be6:	ec41 0b10 	vmov	d0, r0, r1
 8009bea:	bd08      	pop	{r3, pc}

08009bec <__ieee754_sqrt>:
 8009bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	ec55 4b10 	vmov	r4, r5, d0
 8009bf4:	4e67      	ldr	r6, [pc, #412]	; (8009d94 <__ieee754_sqrt+0x1a8>)
 8009bf6:	43ae      	bics	r6, r5
 8009bf8:	ee10 0a10 	vmov	r0, s0
 8009bfc:	ee10 2a10 	vmov	r2, s0
 8009c00:	4629      	mov	r1, r5
 8009c02:	462b      	mov	r3, r5
 8009c04:	d10d      	bne.n	8009c22 <__ieee754_sqrt+0x36>
 8009c06:	f7f6 fcf7 	bl	80005f8 <__aeabi_dmul>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4620      	mov	r0, r4
 8009c10:	4629      	mov	r1, r5
 8009c12:	f7f6 fb3b 	bl	800028c <__adddf3>
 8009c16:	4604      	mov	r4, r0
 8009c18:	460d      	mov	r5, r1
 8009c1a:	ec45 4b10 	vmov	d0, r4, r5
 8009c1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c22:	2d00      	cmp	r5, #0
 8009c24:	dc0b      	bgt.n	8009c3e <__ieee754_sqrt+0x52>
 8009c26:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009c2a:	4326      	orrs	r6, r4
 8009c2c:	d0f5      	beq.n	8009c1a <__ieee754_sqrt+0x2e>
 8009c2e:	b135      	cbz	r5, 8009c3e <__ieee754_sqrt+0x52>
 8009c30:	f7f6 fb2a 	bl	8000288 <__aeabi_dsub>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	f7f6 fe08 	bl	800084c <__aeabi_ddiv>
 8009c3c:	e7eb      	b.n	8009c16 <__ieee754_sqrt+0x2a>
 8009c3e:	1509      	asrs	r1, r1, #20
 8009c40:	f000 808d 	beq.w	8009d5e <__ieee754_sqrt+0x172>
 8009c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c48:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c50:	07c9      	lsls	r1, r1, #31
 8009c52:	bf5c      	itt	pl
 8009c54:	005b      	lslpl	r3, r3, #1
 8009c56:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009c5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c5e:	bf58      	it	pl
 8009c60:	0052      	lslpl	r2, r2, #1
 8009c62:	2500      	movs	r5, #0
 8009c64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009c68:	1076      	asrs	r6, r6, #1
 8009c6a:	0052      	lsls	r2, r2, #1
 8009c6c:	f04f 0e16 	mov.w	lr, #22
 8009c70:	46ac      	mov	ip, r5
 8009c72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c76:	eb0c 0001 	add.w	r0, ip, r1
 8009c7a:	4298      	cmp	r0, r3
 8009c7c:	bfde      	ittt	le
 8009c7e:	1a1b      	suble	r3, r3, r0
 8009c80:	eb00 0c01 	addle.w	ip, r0, r1
 8009c84:	186d      	addle	r5, r5, r1
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	f1be 0e01 	subs.w	lr, lr, #1
 8009c8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009c90:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009c94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009c98:	d1ed      	bne.n	8009c76 <__ieee754_sqrt+0x8a>
 8009c9a:	4674      	mov	r4, lr
 8009c9c:	2720      	movs	r7, #32
 8009c9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009ca2:	4563      	cmp	r3, ip
 8009ca4:	eb01 000e 	add.w	r0, r1, lr
 8009ca8:	dc02      	bgt.n	8009cb0 <__ieee754_sqrt+0xc4>
 8009caa:	d113      	bne.n	8009cd4 <__ieee754_sqrt+0xe8>
 8009cac:	4290      	cmp	r0, r2
 8009cae:	d811      	bhi.n	8009cd4 <__ieee754_sqrt+0xe8>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	eb00 0e01 	add.w	lr, r0, r1
 8009cb6:	da57      	bge.n	8009d68 <__ieee754_sqrt+0x17c>
 8009cb8:	f1be 0f00 	cmp.w	lr, #0
 8009cbc:	db54      	blt.n	8009d68 <__ieee754_sqrt+0x17c>
 8009cbe:	f10c 0801 	add.w	r8, ip, #1
 8009cc2:	eba3 030c 	sub.w	r3, r3, ip
 8009cc6:	4290      	cmp	r0, r2
 8009cc8:	bf88      	it	hi
 8009cca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009cce:	1a12      	subs	r2, r2, r0
 8009cd0:	440c      	add	r4, r1
 8009cd2:	46c4      	mov	ip, r8
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	3f01      	subs	r7, #1
 8009cd8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009cdc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009ce0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009ce4:	d1dd      	bne.n	8009ca2 <__ieee754_sqrt+0xb6>
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	d01b      	beq.n	8009d22 <__ieee754_sqrt+0x136>
 8009cea:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009d98 <__ieee754_sqrt+0x1ac>
 8009cee:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009d9c <__ieee754_sqrt+0x1b0>
 8009cf2:	e9da 0100 	ldrd	r0, r1, [sl]
 8009cf6:	e9db 2300 	ldrd	r2, r3, [fp]
 8009cfa:	f7f6 fac5 	bl	8000288 <__aeabi_dsub>
 8009cfe:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4640      	mov	r0, r8
 8009d08:	4649      	mov	r1, r9
 8009d0a:	f7f6 fef1 	bl	8000af0 <__aeabi_dcmple>
 8009d0e:	b140      	cbz	r0, 8009d22 <__ieee754_sqrt+0x136>
 8009d10:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009d14:	e9da 0100 	ldrd	r0, r1, [sl]
 8009d18:	e9db 2300 	ldrd	r2, r3, [fp]
 8009d1c:	d126      	bne.n	8009d6c <__ieee754_sqrt+0x180>
 8009d1e:	3501      	adds	r5, #1
 8009d20:	463c      	mov	r4, r7
 8009d22:	106a      	asrs	r2, r5, #1
 8009d24:	0863      	lsrs	r3, r4, #1
 8009d26:	07e9      	lsls	r1, r5, #31
 8009d28:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009d2c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009d30:	bf48      	it	mi
 8009d32:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009d36:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009d3a:	461c      	mov	r4, r3
 8009d3c:	e76d      	b.n	8009c1a <__ieee754_sqrt+0x2e>
 8009d3e:	0ad3      	lsrs	r3, r2, #11
 8009d40:	3815      	subs	r0, #21
 8009d42:	0552      	lsls	r2, r2, #21
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0fa      	beq.n	8009d3e <__ieee754_sqrt+0x152>
 8009d48:	02dc      	lsls	r4, r3, #11
 8009d4a:	d50a      	bpl.n	8009d62 <__ieee754_sqrt+0x176>
 8009d4c:	f1c1 0420 	rsb	r4, r1, #32
 8009d50:	fa22 f404 	lsr.w	r4, r2, r4
 8009d54:	1e4d      	subs	r5, r1, #1
 8009d56:	408a      	lsls	r2, r1
 8009d58:	4323      	orrs	r3, r4
 8009d5a:	1b41      	subs	r1, r0, r5
 8009d5c:	e772      	b.n	8009c44 <__ieee754_sqrt+0x58>
 8009d5e:	4608      	mov	r0, r1
 8009d60:	e7f0      	b.n	8009d44 <__ieee754_sqrt+0x158>
 8009d62:	005b      	lsls	r3, r3, #1
 8009d64:	3101      	adds	r1, #1
 8009d66:	e7ef      	b.n	8009d48 <__ieee754_sqrt+0x15c>
 8009d68:	46e0      	mov	r8, ip
 8009d6a:	e7aa      	b.n	8009cc2 <__ieee754_sqrt+0xd6>
 8009d6c:	f7f6 fa8e 	bl	800028c <__adddf3>
 8009d70:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4640      	mov	r0, r8
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	f7f6 feae 	bl	8000adc <__aeabi_dcmplt>
 8009d80:	b120      	cbz	r0, 8009d8c <__ieee754_sqrt+0x1a0>
 8009d82:	1ca0      	adds	r0, r4, #2
 8009d84:	bf08      	it	eq
 8009d86:	3501      	addeq	r5, #1
 8009d88:	3402      	adds	r4, #2
 8009d8a:	e7ca      	b.n	8009d22 <__ieee754_sqrt+0x136>
 8009d8c:	3401      	adds	r4, #1
 8009d8e:	f024 0401 	bic.w	r4, r4, #1
 8009d92:	e7c6      	b.n	8009d22 <__ieee754_sqrt+0x136>
 8009d94:	7ff00000 	.word	0x7ff00000
 8009d98:	200001d8 	.word	0x200001d8
 8009d9c:	200001e0 	.word	0x200001e0

08009da0 <_init>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	bf00      	nop
 8009da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009da6:	bc08      	pop	{r3}
 8009da8:	469e      	mov	lr, r3
 8009daa:	4770      	bx	lr

08009dac <_fini>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	bf00      	nop
 8009db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db2:	bc08      	pop	{r3}
 8009db4:	469e      	mov	lr, r3
 8009db6:	4770      	bx	lr
