
Projekt1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007740  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080078d0  080078d0  000088d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c90  08007c90  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007c90  08007c90  00008c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c98  08007c98  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c98  08007c98  00008c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c9c  08007c9c  00008c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007ca0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  200001d4  08007e74  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08007e74  000095b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc0f  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002427  00000000  00000000  00018e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  0001b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a73  00000000  00000000  0001bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a87  00000000  00000000  0001ca3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119c9  00000000  00000000  000204c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed2ac  00000000  00000000  00031e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f137  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004790  00000000  00000000  0011f17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012390c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078b8 	.word	0x080078b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080078b8 	.word	0x080078b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <appendData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void appendData(uint8_t buffer){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	static int ind = 0;
	if(buffer == '\n'){
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b0a      	cmp	r3, #10
 8000ea6:	d111      	bne.n	8000ecc <appendData+0x34>
		GPS_data[ind++] = '\0';
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <appendData+0x58>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	1c5a      	adds	r2, r3, #1
 8000eae:	4910      	ldr	r1, [pc, #64]	@ (8000ef0 <appendData+0x58>)
 8000eb0:	600a      	str	r2, [r1, #0]
 8000eb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ef4 <appendData+0x5c>)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	54d1      	strb	r1, [r2, r3]
		printf("%s\n",GPS_data);
 8000eb8:	480e      	ldr	r0, [pc, #56]	@ (8000ef4 <appendData+0x5c>)
 8000eba:	f004 fd91 	bl	80059e0 <puts>
		ind = 0;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <appendData+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
		strcpy(GPS_data, "");
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <appendData+0x5c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
		//skip
	}
	else{
		GPS_data[ind++] = buffer;
	}
}
 8000eca:	e00d      	b.n	8000ee8 <appendData+0x50>
	else if(buffer == '\r'){
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b0d      	cmp	r3, #13
 8000ed0:	d00a      	beq.n	8000ee8 <appendData+0x50>
	else if(buffer == '\0'){
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <appendData+0x50>
		GPS_data[ind++] = buffer;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <appendData+0x58>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	4904      	ldr	r1, [pc, #16]	@ (8000ef0 <appendData+0x58>)
 8000ee0:	600a      	str	r2, [r1, #0]
 8000ee2:	4904      	ldr	r1, [pc, #16]	@ (8000ef4 <appendData+0x5c>)
 8000ee4:	79fa      	ldrb	r2, [r7, #7]
 8000ee6:	54ca      	strb	r2, [r1, r3]
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000458 	.word	0x20000458
 8000ef4:	20000354 	.word	0x20000354

08000ef8 <__io_putchar>:
int __io_putchar(int ch)
 {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
     if (ch == '\n') {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b0a      	cmp	r3, #10
 8000f04:	d109      	bne.n	8000f1a <__io_putchar+0x22>
         uint8_t ch2 = '\r';
 8000f06:	230d      	movs	r3, #13
 8000f08:	73fb      	strb	r3, [r7, #15]
         HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8000f0a:	f107 010f 	add.w	r1, r7, #15
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	2201      	movs	r2, #1
 8000f14:	4807      	ldr	r0, [pc, #28]	@ (8000f34 <__io_putchar+0x3c>)
 8000f16:	f002 fc79 	bl	800380c <HAL_UART_Transmit>
     }

     HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f1a:	1d39      	adds	r1, r7, #4
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	2201      	movs	r2, #1
 8000f22:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <__io_putchar+0x3c>)
 8000f24:	f002 fc72 	bl	800380c <HAL_UART_Transmit>
     return 1;
 8000f28:	2301      	movs	r3, #1
 }
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002cc 	.word	0x200002cc

08000f38 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if(huart == &huart1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <HAL_UART_RxCpltCallback+0x2c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d109      	bne.n	8000f5c <HAL_UART_RxCpltCallback+0x24>
  {
	  appendData(buffer);
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <HAL_UART_RxCpltCallback+0x30>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ffa3 	bl	8000e98 <appendData>
	  HAL_UART_Receive_IT(&huart1, &buffer, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	4904      	ldr	r1, [pc, #16]	@ (8000f68 <HAL_UART_RxCpltCallback+0x30>)
 8000f56:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <HAL_UART_RxCpltCallback+0x2c>)
 8000f58:	f002 fce2 	bl	8003920 <HAL_UART_Receive_IT>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000244 	.word	0x20000244
 8000f68:	20000454 	.word	0x20000454

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f000 fbca 	bl	800170a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f000 f839 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f000 f91b 	bl	80011b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f7e:	f000 f87b 	bl	8001078 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f82:	f000 f8e7 	bl	8001154 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f86:	f000 f8b5 	bl	80010f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //AHT20
  float temp;
  float humi;
  const uint16_t addr = 0b0111000; //0x38
 8000f8a:	2338      	movs	r3, #56	@ 0x38
 8000f8c:	83fb      	strh	r3, [r7, #30]
  const int addr_wr = addr<<1;
 8000f8e:	8bfb      	ldrh	r3, [r7, #30]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
  const int addr_rc = addr_wr + 1;
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  uint32_t temp_data;
  uint8_t init[3] = {0xbe, 0x08, 0x00};
 8000f9a:	4a10      	ldr	r2, [pc, #64]	@ (8000fdc <main+0x70>)
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	8019      	strh	r1, [r3, #0]
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	0c12      	lsrs	r2, r2, #16
 8000faa:	701a      	strb	r2, [r3, #0]
  uint8_t measure[3] = {0xac, 0x33, 0x00};
 8000fac:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe0 <main+0x74>)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	8019      	strh	r1, [r3, #0]
 8000fb8:	3302      	adds	r3, #2
 8000fba:	0c12      	lsrs	r2, r2, #16
 8000fbc:	701a      	strb	r2, [r3, #0]
  uint8_t data[6];
  uint32_t time_stamp = HAL_GetTick();
 8000fbe:	f000 fc0d 	bl	80017dc <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]
//  }
//  bool bme280p = bmp280.id == BMP280_CHIP_ID;
//  printf("BMP280: found %s\n", bme280p ? "BME280" : "BMP280");

  //GPS
  HAL_UART_Receive_IT(&huart1, &buffer, 1);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <main+0x78>)
 8000fc8:	4807      	ldr	r0, [pc, #28]	@ (8000fe8 <main+0x7c>)
 8000fca:	f002 fca9 	bl	8003920 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fce:	2120      	movs	r1, #32
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd4:	f000 ff60 	bl	8001e98 <HAL_GPIO_TogglePin>
 8000fd8:	e7f9      	b.n	8000fce <main+0x62>
 8000fda:	bf00      	nop
 8000fdc:	080078d0 	.word	0x080078d0
 8000fe0:	080078d4 	.word	0x080078d4
 8000fe4:	20000454 	.word	0x20000454
 8000fe8:	20000244 	.word	0x20000244

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b096      	sub	sp, #88	@ 0x58
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2244      	movs	r2, #68	@ 0x44
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 fdd0 	bl	8005ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800100e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001012:	f001 f89b 	bl	800214c <HAL_PWREx_ControlVoltageScaling>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800101c:	f000 f908 	bl	8001230 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001020:	2310      	movs	r3, #16
 8001022:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800102c:	2360      	movs	r3, #96	@ 0x60
 800102e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001030:	2300      	movs	r3, #0
 8001032:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4618      	mov	r0, r3
 800103a:	f001 f8dd 	bl	80021f8 <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001044:	f000 f8f4 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	230f      	movs	r3, #15
 800104a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fca5 	bl	80029b0 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800106c:	f000 f8e0 	bl	8001230 <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3758      	adds	r7, #88	@ 0x58
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800107c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <MX_I2C1_Init+0x74>)
 800107e:	4a1c      	ldr	r2, [pc, #112]	@ (80010f0 <MX_I2C1_Init+0x78>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_I2C1_Init+0x74>)
 8001084:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001088:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800108a:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <MX_I2C1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001090:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <MX_I2C1_Init+0x74>)
 8001092:	2201      	movs	r2, #1
 8001094:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800109c:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a2:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a8:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b4:	480d      	ldr	r0, [pc, #52]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010b6:	f000 ff09 	bl	8001ecc <HAL_I2C_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c0:	f000 f8b6 	bl	8001230 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4809      	ldr	r0, [pc, #36]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010c8:	f000 ff9b 	bl	8002002 <HAL_I2CEx_ConfigAnalogFilter>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80010d2:	f000 f8ad 	bl	8001230 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4804      	ldr	r0, [pc, #16]	@ (80010ec <MX_I2C1_Init+0x74>)
 80010da:	f000 ffdd 	bl	8002098 <HAL_I2CEx_ConfigDigitalFilter>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80010e4:	f000 f8a4 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001f0 	.word	0x200001f0
 80010f0:	40005400 	.word	0x40005400

080010f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_USART1_UART_Init+0x58>)
 80010fa:	4a15      	ldr	r2, [pc, #84]	@ (8001150 <MX_USART1_UART_Init+0x5c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001100:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <MX_USART1_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_USART1_UART_Init+0x58>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_USART1_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_USART1_UART_Init+0x58>)
 8001138:	f002 fb1a 	bl	8003770 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 f875 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000244 	.word	0x20000244
 8001150:	40013800 	.word	0x40013800

08001154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800115a:	4a15      	ldr	r2, [pc, #84]	@ (80011b0 <MX_USART2_UART_Init+0x5c>)
 800115c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_USART2_UART_Init+0x58>)
 8001198:	f002 faea 	bl	8003770 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011a2:	f000 f845 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200002cc 	.word	0x200002cc
 80011b0:	40004400 	.word	0x40004400

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_GPIO_Init+0x78>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	4a17      	ldr	r2, [pc, #92]	@ (800122c <MX_GPIO_Init+0x78>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_GPIO_Init+0x78>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <MX_GPIO_Init+0x78>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a11      	ldr	r2, [pc, #68]	@ (800122c <MX_GPIO_Init+0x78>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <MX_GPIO_Init+0x78>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2120      	movs	r1, #32
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001202:	f000 fe31 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001206:	2320      	movs	r3, #32
 8001208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001220:	f000 fc78 	bl	8001b14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <Error_Handler+0x8>

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_MspInit+0x44>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001246:	4a0e      	ldr	r2, [pc, #56]	@ (8001280 <HAL_MspInit+0x44>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6613      	str	r3, [r2, #96]	@ 0x60
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <HAL_MspInit+0x44>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <HAL_MspInit+0x44>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125e:	4a08      	ldr	r2, [pc, #32]	@ (8001280 <HAL_MspInit+0x44>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001264:	6593      	str	r3, [r2, #88]	@ 0x58
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_MspInit+0x44>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0ac      	sub	sp, #176	@ 0xb0
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2288      	movs	r2, #136	@ 0x88
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f004 fc7b 	bl	8005ba0 <memset>
  if(hi2c->Instance==I2C1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <HAL_I2C_MspInit+0xb0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d13b      	bne.n	800132c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012b4:	2340      	movs	r3, #64	@ 0x40
 80012b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 fd99 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012cc:	f7ff ffb0 	bl	8001230 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	4a18      	ldr	r2, [pc, #96]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f0:	2312      	movs	r3, #18
 80012f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001302:	2304      	movs	r3, #4
 8001304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800130c:	4619      	mov	r1, r3
 800130e:	480b      	ldr	r0, [pc, #44]	@ (800133c <HAL_I2C_MspInit+0xb8>)
 8001310:	f000 fc00 	bl	8001b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001318:	4a07      	ldr	r2, [pc, #28]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 800131a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800131e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_I2C_MspInit+0xb4>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	37b0      	adds	r7, #176	@ 0xb0
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40005400 	.word	0x40005400
 8001338:	40021000 	.word	0x40021000
 800133c:	48000400 	.word	0x48000400

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0ae      	sub	sp, #184	@ 0xb8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2288      	movs	r2, #136	@ 0x88
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f004 fc1d 	bl	8005ba0 <memset>
  if(huart->Instance==USART1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a47      	ldr	r2, [pc, #284]	@ (8001488 <HAL_UART_MspInit+0x148>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d145      	bne.n	80013fc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001370:	2301      	movs	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001374:	2300      	movs	r3, #0
 8001376:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4618      	mov	r0, r3
 800137e:	f001 fd3b 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001388:	f7ff ff52 	bl	8001230 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800138c:	4b3f      	ldr	r3, [pc, #252]	@ (800148c <HAL_UART_MspInit+0x14c>)
 800138e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001390:	4a3e      	ldr	r2, [pc, #248]	@ (800148c <HAL_UART_MspInit+0x14c>)
 8001392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001396:	6613      	str	r3, [r2, #96]	@ 0x60
 8001398:	4b3c      	ldr	r3, [pc, #240]	@ (800148c <HAL_UART_MspInit+0x14c>)
 800139a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800139c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b39      	ldr	r3, [pc, #228]	@ (800148c <HAL_UART_MspInit+0x14c>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	4a38      	ldr	r2, [pc, #224]	@ (800148c <HAL_UART_MspInit+0x14c>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b0:	4b36      	ldr	r3, [pc, #216]	@ (800148c <HAL_UART_MspInit+0x14c>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013d6:	2307      	movs	r3, #7
 80013d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013e0:	4619      	mov	r1, r3
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e6:	f000 fb95 	bl	8001b14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2025      	movs	r0, #37	@ 0x25
 80013f0:	f000 fadb 	bl	80019aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013f4:	2025      	movs	r0, #37	@ 0x25
 80013f6:	f000 faf4 	bl	80019e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fa:	e040      	b.n	800147e <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <HAL_UART_MspInit+0x150>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d13b      	bne.n	800147e <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001406:	2302      	movs	r3, #2
 8001408:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800140a:	2300      	movs	r3, #0
 800140c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4618      	mov	r0, r3
 8001414:	f001 fcf0 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800141e:	f7ff ff07 	bl	8001230 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001422:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <HAL_UART_MspInit+0x14c>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	4a19      	ldr	r2, [pc, #100]	@ (800148c <HAL_UART_MspInit+0x14c>)
 8001428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142c:	6593      	str	r3, [r2, #88]	@ 0x58
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <HAL_UART_MspInit+0x14c>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_UART_MspInit+0x14c>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143e:	4a13      	ldr	r2, [pc, #76]	@ (800148c <HAL_UART_MspInit+0x14c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <HAL_UART_MspInit+0x14c>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001452:	230c      	movs	r3, #12
 8001454:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800146a:	2307      	movs	r3, #7
 800146c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001474:	4619      	mov	r1, r3
 8001476:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147a:	f000 fb4b 	bl	8001b14 <HAL_GPIO_Init>
}
 800147e:	bf00      	nop
 8001480:	37b8      	adds	r7, #184	@ 0xb8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40013800 	.word	0x40013800
 800148c:	40021000 	.word	0x40021000
 8001490:	40004400 	.word	0x40004400

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <NMI_Handler+0x4>

0800149c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <MemManage_Handler+0x4>

080014ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <UsageFault_Handler+0x4>

080014bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ea:	f000 f963 	bl	80017b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <USART1_IRQHandler+0x10>)
 80014fa:	f002 fa5d 	bl	80039b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000244 	.word	0x20000244

08001508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return 1;
 800150c:	2301      	movs	r3, #1
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_kill>:

int _kill(int pid, int sig)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001522:	f004 fb8f 	bl	8005c44 <__errno>
 8001526:	4603      	mov	r3, r0
 8001528:	2216      	movs	r2, #22
 800152a:	601a      	str	r2, [r3, #0]
  return -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_exit>:

void _exit (int status)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ffe7 	bl	8001518 <_kill>
  while (1) {}    /* Make sure we hang here */
 800154a:	bf00      	nop
 800154c:	e7fd      	b.n	800154a <_exit+0x12>

0800154e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e00a      	b.n	8001576 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001560:	f3af 8000 	nop.w
 8001564:	4601      	mov	r1, r0
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	60ba      	str	r2, [r7, #8]
 800156c:	b2ca      	uxtb	r2, r1
 800156e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3301      	adds	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	429a      	cmp	r2, r3
 800157c:	dbf0      	blt.n	8001560 <_read+0x12>
  }

  return len;
 800157e:	687b      	ldr	r3, [r7, #4]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e009      	b.n	80015ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	60ba      	str	r2, [r7, #8]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fca8 	bl	8000ef8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	3301      	adds	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dbf1      	blt.n	800159a <_write+0x12>
  }
  return len;
 80015b6:	687b      	ldr	r3, [r7, #4]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_close>:

int _close(int file)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e8:	605a      	str	r2, [r3, #4]
  return 0;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_isatty>:

int _isatty(int file)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800160e:	b480      	push	{r7}
 8001610:	b085      	sub	sp, #20
 8001612:	af00      	add	r7, sp, #0
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	@ (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	@ (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f004 faf4 	bl	8005c44 <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20018000 	.word	0x20018000
 8001688:	00000400 	.word	0x00000400
 800168c:	2000045c 	.word	0x2000045c
 8001690:	200005b0 	.word	0x200005b0

08001694 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016bc:	f7ff ffea 	bl	8001694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c0:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016c2:	490d      	ldr	r1, [pc, #52]	@ (80016f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c4:	4a0d      	ldr	r2, [pc, #52]	@ (80016fc <LoopForever+0xe>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001704 <LoopForever+0x16>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e6:	f004 fab3 	bl	8005c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ea:	f7ff fc3f 	bl	8000f6c <main>

080016ee <LoopForever>:

LoopForever:
    b LoopForever
 80016ee:	e7fe      	b.n	80016ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80016fc:	08007ca0 	.word	0x08007ca0
  ldr r2, =_sbss
 8001700:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001704:	200005b0 	.word	0x200005b0

08001708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC1_2_IRQHandler>

0800170a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001714:	2003      	movs	r0, #3
 8001716:	f000 f93d 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171a:	200f      	movs	r0, #15
 800171c:	f000 f80e 	bl	800173c <HAL_InitTick>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	e001      	b.n	8001730 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800172c:	f7ff fd86 	bl	800123c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001730:	79fb      	ldrb	r3, [r7, #7]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001748:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <HAL_InitTick+0x6c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d023      	beq.n	8001798 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001750:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <HAL_InitTick+0x70>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <HAL_InitTick+0x6c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f949 	bl	80019fe <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10f      	bne.n	8001792 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d809      	bhi.n	800178c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f000 f913 	bl	80019aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001784:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <HAL_InitTick+0x74>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e007      	b.n	800179c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e004      	b.n	800179c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e001      	b.n	800179c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000460 	.word	0x20000460

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000460 	.word	0x20000460

080017f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	@ (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <__NVIC_GetPriorityGrouping+0x18>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0307 	and.w	r3, r3, #7
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	2b00      	cmp	r3, #0
 8001868:	db0b      	blt.n	8001882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	f003 021f 	and.w	r2, r3, #31
 8001870:	4907      	ldr	r1, [pc, #28]	@ (8001890 <__NVIC_EnableIRQ+0x38>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	2001      	movs	r0, #1
 800187a:	fa00 f202 	lsl.w	r2, r0, r2
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000e100 	.word	0xe000e100

08001894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	@ (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	@ (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	@ 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
         );
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	@ 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001960:	d301      	bcc.n	8001966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001962:	2301      	movs	r3, #1
 8001964:	e00f      	b.n	8001986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001966:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <SysTick_Config+0x40>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196e:	210f      	movs	r1, #15
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f7ff ff8e 	bl	8001894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <SysTick_Config+0x40>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <SysTick_Config+0x40>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff29 	bl	80017f4 <__NVIC_SetPriorityGrouping>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019bc:	f7ff ff3e 	bl	800183c <__NVIC_GetPriorityGrouping>
 80019c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f7ff ff8e 	bl	80018e8 <NVIC_EncodePriority>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff5d 	bl	8001894 <__NVIC_SetPriority>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff31 	bl	8001858 <__NVIC_EnableIRQ>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ffa2 	bl	8001950 <SysTick_Config>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d008      	beq.n	8001a40 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2204      	movs	r2, #4
 8001a32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e022      	b.n	8001a86 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 020e 	bic.w	r2, r2, #14
 8001a4e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a64:	f003 021c 	and.w	r2, r3, #28
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a72:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d005      	beq.n	8001ab6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2204      	movs	r2, #4
 8001aae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e029      	b.n	8001b0a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 020e 	bic.w	r2, r2, #14
 8001ac4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	f003 021c 	and.w	r2, r3, #28
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4798      	blx	r3
    }
  }
  return status;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b22:	e17f      	b.n	8001e24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	4013      	ands	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8171 	beq.w	8001e1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d005      	beq.n	8001b54 <HAL_GPIO_Init+0x40>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d130      	bne.n	8001bb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f003 0201 	and.w	r2, r3, #1
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d118      	bne.n	8001bf4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	08db      	lsrs	r3, r3, #3
 8001bde:	f003 0201 	and.w	r2, r3, #1
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d017      	beq.n	8001c30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d123      	bne.n	8001c84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	6939      	ldr	r1, [r7, #16]
 8001c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0203 	and.w	r2, r3, #3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80ac 	beq.w	8001e1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e44 <HAL_GPIO_Init+0x330>)
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cca:	4a5e      	ldr	r2, [pc, #376]	@ (8001e44 <HAL_GPIO_Init+0x330>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e44 <HAL_GPIO_Init+0x330>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cde:	4a5a      	ldr	r2, [pc, #360]	@ (8001e48 <HAL_GPIO_Init+0x334>)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d08:	d025      	beq.n	8001d56 <HAL_GPIO_Init+0x242>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e4c <HAL_GPIO_Init+0x338>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01f      	beq.n	8001d52 <HAL_GPIO_Init+0x23e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4e      	ldr	r2, [pc, #312]	@ (8001e50 <HAL_GPIO_Init+0x33c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x23a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e54 <HAL_GPIO_Init+0x340>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x236>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	@ (8001e58 <HAL_GPIO_Init+0x344>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x232>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e5c <HAL_GPIO_Init+0x348>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x22e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4a      	ldr	r2, [pc, #296]	@ (8001e60 <HAL_GPIO_Init+0x34c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x22a>
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	e00c      	b.n	8001d58 <HAL_GPIO_Init+0x244>
 8001d3e:	2307      	movs	r3, #7
 8001d40:	e00a      	b.n	8001d58 <HAL_GPIO_Init+0x244>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e008      	b.n	8001d58 <HAL_GPIO_Init+0x244>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x244>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e004      	b.n	8001d58 <HAL_GPIO_Init+0x244>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_Init+0x244>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x244>
 8001d56:	2300      	movs	r3, #0
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	f002 0203 	and.w	r2, r2, #3
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	4093      	lsls	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d68:	4937      	ldr	r1, [pc, #220]	@ (8001e48 <HAL_GPIO_Init+0x334>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d76:	4b3b      	ldr	r3, [pc, #236]	@ (8001e64 <HAL_GPIO_Init+0x350>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d9a:	4a32      	ldr	r2, [pc, #200]	@ (8001e64 <HAL_GPIO_Init+0x350>)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001da0:	4b30      	ldr	r3, [pc, #192]	@ (8001e64 <HAL_GPIO_Init+0x350>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dc4:	4a27      	ldr	r2, [pc, #156]	@ (8001e64 <HAL_GPIO_Init+0x350>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dca:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <HAL_GPIO_Init+0x350>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dee:	4a1d      	ldr	r2, [pc, #116]	@ (8001e64 <HAL_GPIO_Init+0x350>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_GPIO_Init+0x350>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e18:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <HAL_GPIO_Init+0x350>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f47f ae78 	bne.w	8001b24 <HAL_GPIO_Init+0x10>
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	48000400 	.word	0x48000400
 8001e50:	48000800 	.word	0x48000800
 8001e54:	48000c00 	.word	0x48000c00
 8001e58:	48001000 	.word	0x48001000
 8001e5c:	48001400 	.word	0x48001400
 8001e60:	48001800 	.word	0x48001800
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e84:	e002      	b.n	8001e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	041a      	lsls	r2, r3, #16
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	43d9      	mvns	r1, r3
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	400b      	ands	r3, r1
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	619a      	str	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e08d      	b.n	8001ffa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff f9c6 	bl	8001284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	@ 0x24
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d107      	bne.n	8001f46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	e006      	b.n	8001f54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d108      	bne.n	8001f6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	e007      	b.n	8001f7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69d9      	ldr	r1, [r3, #28]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b20      	cmp	r3, #32
 8002016:	d138      	bne.n	800208a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002022:	2302      	movs	r3, #2
 8002024:	e032      	b.n	800208c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2224      	movs	r2, #36	@ 0x24
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002054:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d139      	bne.n	8002122 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e033      	b.n	8002124 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2224      	movs	r2, #36	@ 0x24
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002122:	2302      	movs	r3, #2
  }
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002134:	4b04      	ldr	r3, [pc, #16]	@ (8002148 <HAL_PWREx_GetVoltageRange+0x18>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40007000 	.word	0x40007000

0800214c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800215a:	d130      	bne.n	80021be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800215c:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002168:	d038      	beq.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002172:	4a1e      	ldr	r2, [pc, #120]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002174:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002178:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800217a:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2232      	movs	r2, #50	@ 0x32
 8002180:	fb02 f303 	mul.w	r3, r2, r3
 8002184:	4a1b      	ldr	r2, [pc, #108]	@ (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0c9b      	lsrs	r3, r3, #18
 800218c:	3301      	adds	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002190:	e002      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3b01      	subs	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021a4:	d102      	bne.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f2      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ac:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b8:	d110      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e00f      	b.n	80021de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021be:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ca:	d007      	beq.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021cc:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021d4:	4a05      	ldr	r2, [pc, #20]	@ (80021ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40007000 	.word	0x40007000
 80021f0:	20000000 	.word	0x20000000
 80021f4:	431bde83 	.word	0x431bde83

080021f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e3ca      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800220a:	4b97      	ldr	r3, [pc, #604]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002214:	4b94      	ldr	r3, [pc, #592]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80e4 	beq.w	80023f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_RCC_OscConfig+0x4a>
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	f040 808b 	bne.w	8002350 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 8087 	bne.w	8002350 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002242:	4b89      	ldr	r3, [pc, #548]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x62>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e3a2      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	4b82      	ldr	r3, [pc, #520]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d004      	beq.n	8002274 <HAL_RCC_OscConfig+0x7c>
 800226a:	4b7f      	ldr	r3, [pc, #508]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002272:	e005      	b.n	8002280 <HAL_RCC_OscConfig+0x88>
 8002274:	4b7c      	ldr	r3, [pc, #496]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002280:	4293      	cmp	r3, r2
 8002282:	d223      	bcs.n	80022cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fd55 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e383      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002298:	4b73      	ldr	r3, [pc, #460]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a72      	ldr	r2, [pc, #456]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800229e:	f043 0308 	orr.w	r3, r3, #8
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b70      	ldr	r3, [pc, #448]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	496d      	ldr	r1, [pc, #436]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	4968      	ldr	r1, [pc, #416]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
 80022ca:	e025      	b.n	8002318 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022cc:	4b66      	ldr	r3, [pc, #408]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a65      	ldr	r2, [pc, #404]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b63      	ldr	r3, [pc, #396]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4960      	ldr	r1, [pc, #384]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	495b      	ldr	r1, [pc, #364]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fd15 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e343      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002318:	f000 fc4a 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	4950      	ldr	r1, [pc, #320]	@ (800246c <HAL_RCC_OscConfig+0x274>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	4a4e      	ldr	r2, [pc, #312]	@ (8002470 <HAL_RCC_OscConfig+0x278>)
 8002336:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002338:	4b4e      	ldr	r3, [pc, #312]	@ (8002474 <HAL_RCC_OscConfig+0x27c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f9fd 	bl	800173c <HAL_InitTick>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d052      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	e327      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d032      	beq.n	80023be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002358:	4b43      	ldr	r3, [pc, #268]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a42      	ldr	r2, [pc, #264]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002364:	f7ff fa3a 	bl	80017dc <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236c:	f7ff fa36 	bl	80017dc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e310      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237e:	4b3a      	ldr	r3, [pc, #232]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238a:	4b37      	ldr	r3, [pc, #220]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a36      	ldr	r2, [pc, #216]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b34      	ldr	r3, [pc, #208]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4931      	ldr	r1, [pc, #196]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	492c      	ldr	r1, [pc, #176]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
 80023bc:	e01a      	b.n	80023f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023be:	4b2a      	ldr	r3, [pc, #168]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a29      	ldr	r2, [pc, #164]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ca:	f7ff fa07 	bl	80017dc <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d2:	f7ff fa03 	bl	80017dc <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e2dd      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e4:	4b20      	ldr	r3, [pc, #128]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x1da>
 80023f0:	e000      	b.n	80023f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d074      	beq.n	80024ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b08      	cmp	r3, #8
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x21a>
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d10e      	bne.n	800242a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d10b      	bne.n	800242a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002412:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d064      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d160      	bne.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e2ba      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x24a>
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0b      	ldr	r2, [pc, #44]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e026      	b.n	8002490 <HAL_RCC_OscConfig+0x298>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800244a:	d115      	bne.n	8002478 <HAL_RCC_OscConfig+0x280>
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a05      	ldr	r2, [pc, #20]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 8002452:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a02      	ldr	r2, [pc, #8]	@ (8002468 <HAL_RCC_OscConfig+0x270>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e014      	b.n	8002490 <HAL_RCC_OscConfig+0x298>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	080078d8 	.word	0x080078d8
 8002470:	20000000 	.word	0x20000000
 8002474:	20000004 	.word	0x20000004
 8002478:	4ba0      	ldr	r3, [pc, #640]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a9f      	ldr	r2, [pc, #636]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b9d      	ldr	r3, [pc, #628]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a9c      	ldr	r2, [pc, #624]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7ff f9a0 	bl	80017dc <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7ff f99c 	bl	80017dc <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	@ 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e276      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b2:	4b92      	ldr	r3, [pc, #584]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x2a8>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7ff f98c 	bl	80017dc <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff f988 	bl	80017dc <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	@ 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e262      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	4b88      	ldr	r3, [pc, #544]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2d0>
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d060      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_OscConfig+0x310>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d119      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d116      	bne.n	8002536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	4b7c      	ldr	r3, [pc, #496]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x328>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e23f      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b76      	ldr	r3, [pc, #472]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	4973      	ldr	r1, [pc, #460]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002534:	e040      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d023      	beq.n	8002586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253e:	4b6f      	ldr	r3, [pc, #444]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6e      	ldr	r2, [pc, #440]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7ff f947 	bl	80017dc <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002552:	f7ff f943 	bl	80017dc <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e21d      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	4b65      	ldr	r3, [pc, #404]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b62      	ldr	r3, [pc, #392]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	495f      	ldr	r1, [pc, #380]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
 8002584:	e018      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b5d      	ldr	r3, [pc, #372]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5c      	ldr	r2, [pc, #368]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800258c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7ff f923 	bl	80017dc <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7ff f91f 	bl	80017dc <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1f9      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	4b53      	ldr	r3, [pc, #332]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d03c      	beq.n	800263e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01c      	beq.n	8002606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025cc:	4b4b      	ldr	r3, [pc, #300]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d2:	4a4a      	ldr	r2, [pc, #296]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7ff f8fe 	bl	80017dc <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7ff f8fa 	bl	80017dc <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1d4      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	4b41      	ldr	r3, [pc, #260]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80025f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <HAL_RCC_OscConfig+0x3ec>
 8002604:	e01b      	b.n	800263e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002606:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800260c:	4a3b      	ldr	r2, [pc, #236]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7ff f8e1 	bl	80017dc <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261e:	f7ff f8dd 	bl	80017dc <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1b7      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	4b32      	ldr	r3, [pc, #200]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ef      	bne.n	800261e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80a6 	beq.w	8002798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002650:	4b2a      	ldr	r3, [pc, #168]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	4a26      	ldr	r2, [pc, #152]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002666:	6593      	str	r3, [r2, #88]	@ 0x58
 8002668:	4b24      	ldr	r3, [pc, #144]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002674:	2301      	movs	r3, #1
 8002676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002678:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <HAL_RCC_OscConfig+0x508>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d118      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002684:	4b1e      	ldr	r3, [pc, #120]	@ (8002700 <HAL_RCC_OscConfig+0x508>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1d      	ldr	r2, [pc, #116]	@ (8002700 <HAL_RCC_OscConfig+0x508>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002690:	f7ff f8a4 	bl	80017dc <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002698:	f7ff f8a0 	bl	80017dc <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e17a      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	4b15      	ldr	r3, [pc, #84]	@ (8002700 <HAL_RCC_OscConfig+0x508>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4d8>
 80026be:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c4:	4a0d      	ldr	r2, [pc, #52]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026ce:	e029      	b.n	8002724 <HAL_RCC_OscConfig+0x52c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d115      	bne.n	8002704 <HAL_RCC_OscConfig+0x50c>
 80026d8:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026de:	4a07      	ldr	r2, [pc, #28]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ee:	4a03      	ldr	r2, [pc, #12]	@ (80026fc <HAL_RCC_OscConfig+0x504>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f8:	e014      	b.n	8002724 <HAL_RCC_OscConfig+0x52c>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	40007000 	.word	0x40007000
 8002704:	4b9c      	ldr	r3, [pc, #624]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270a:	4a9b      	ldr	r2, [pc, #620]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002714:	4b98      	ldr	r3, [pc, #608]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271a:	4a97      	ldr	r2, [pc, #604]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d016      	beq.n	800275a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7ff f856 	bl	80017dc <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7ff f852 	bl	80017dc <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e12a      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274a:	4b8b      	ldr	r3, [pc, #556]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ed      	beq.n	8002734 <HAL_RCC_OscConfig+0x53c>
 8002758:	e015      	b.n	8002786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7ff f83f 	bl	80017dc <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7ff f83b 	bl	80017dc <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e113      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002778:	4b7f      	ldr	r3, [pc, #508]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ed      	bne.n	8002762 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002786:	7ffb      	ldrb	r3, [r7, #31]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b7a      	ldr	r3, [pc, #488]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	4a79      	ldr	r2, [pc, #484]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 8002792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80fe 	beq.w	800299e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	f040 80d0 	bne.w	800294c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ac:	4b72      	ldr	r3, [pc, #456]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	429a      	cmp	r2, r3
 80027be:	d130      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	3b01      	subs	r3, #1
 80027cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d127      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027de:	429a      	cmp	r2, r3
 80027e0:	d11f      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027ec:	2a07      	cmp	r2, #7
 80027ee:	bf14      	ite	ne
 80027f0:	2201      	movne	r2, #1
 80027f2:	2200      	moveq	r2, #0
 80027f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d113      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	3b01      	subs	r3, #1
 8002808:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d109      	bne.n	8002822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d06e      	beq.n	8002900 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d069      	beq.n	80028fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002828:	4b53      	ldr	r3, [pc, #332]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002834:	4b50      	ldr	r3, [pc, #320]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0ad      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002844:	4b4c      	ldr	r3, [pc, #304]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a4b      	ldr	r2, [pc, #300]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 800284a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800284e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002850:	f7fe ffc4 	bl	80017dc <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe ffc0 	bl	80017dc <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e09a      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286a:	4b43      	ldr	r3, [pc, #268]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002876:	4b40      	ldr	r3, [pc, #256]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	4b40      	ldr	r3, [pc, #256]	@ (800297c <HAL_RCC_OscConfig+0x784>)
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002886:	3a01      	subs	r2, #1
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002890:	0212      	lsls	r2, r2, #8
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002898:	0852      	lsrs	r2, r2, #1
 800289a:	3a01      	subs	r2, #1
 800289c:	0552      	lsls	r2, r2, #21
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028a4:	0852      	lsrs	r2, r2, #1
 80028a6:	3a01      	subs	r2, #1
 80028a8:	0652      	lsls	r2, r2, #25
 80028aa:	4311      	orrs	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028b0:	0912      	lsrs	r2, r2, #4
 80028b2:	0452      	lsls	r2, r2, #17
 80028b4:	430a      	orrs	r2, r1
 80028b6:	4930      	ldr	r1, [pc, #192]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2d      	ldr	r2, [pc, #180]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 80028c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028d4:	f7fe ff82 	bl	80017dc <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe ff7e 	bl	80017dc <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e058      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	4b22      	ldr	r3, [pc, #136]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028fa:	e050      	b.n	800299e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e04f      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002900:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d148      	bne.n	800299e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800290c:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a19      	ldr	r2, [pc, #100]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002918:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a16      	ldr	r2, [pc, #88]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002924:	f7fe ff5a 	bl	80017dc <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe ff56 	bl	80017dc <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e030      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x734>
 800294a:	e028      	b.n	800299e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d023      	beq.n	800299a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002952:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a08      	ldr	r2, [pc, #32]	@ (8002978 <HAL_RCC_OscConfig+0x780>)
 8002958:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800295c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7fe ff3d 	bl	80017dc <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002964:	e00c      	b.n	8002980 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7fe ff39 	bl	80017dc <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d905      	bls.n	8002980 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e013      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
 8002978:	40021000 	.word	0x40021000
 800297c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002980:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_OscConfig+0x7b0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ec      	bne.n	8002966 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800298c:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_RCC_OscConfig+0x7b0>)
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	4905      	ldr	r1, [pc, #20]	@ (80029a8 <HAL_RCC_OscConfig+0x7b0>)
 8002992:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_RCC_OscConfig+0x7b4>)
 8002994:	4013      	ands	r3, r2
 8002996:	60cb      	str	r3, [r1, #12]
 8002998:	e001      	b.n	800299e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	feeefffc 	.word	0xfeeefffc

080029b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0e7      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b75      	ldr	r3, [pc, #468]	@ (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d910      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b72      	ldr	r3, [pc, #456]	@ (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 0207 	bic.w	r2, r3, #7
 80029da:	4970      	ldr	r1, [pc, #448]	@ (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b6e      	ldr	r3, [pc, #440]	@ (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0cf      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d010      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	4b66      	ldr	r3, [pc, #408]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d908      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b63      	ldr	r3, [pc, #396]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4960      	ldr	r1, [pc, #384]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d04c      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a36:	4b5a      	ldr	r3, [pc, #360]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d121      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0a6      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d115      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e09a      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a66:	4b4e      	ldr	r3, [pc, #312]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e08e      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e086      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b46      	ldr	r3, [pc, #280]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4943      	ldr	r1, [pc, #268]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a98:	f7fe fea0 	bl	80017dc <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe fe9c 	bl	80017dc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e06e      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d208      	bcs.n	8002af6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	492b      	ldr	r1, [pc, #172]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af6:	4b29      	ldr	r3, [pc, #164]	@ (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d210      	bcs.n	8002b26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b04:	4b25      	ldr	r3, [pc, #148]	@ (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 0207 	bic.w	r2, r3, #7
 8002b0c:	4923      	ldr	r1, [pc, #140]	@ (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b14:	4b21      	ldr	r3, [pc, #132]	@ (8002b9c <HAL_RCC_ClockConfig+0x1ec>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e036      	b.n	8002b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4918      	ldr	r1, [pc, #96]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4910      	ldr	r1, [pc, #64]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b64:	f000 f824 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	490b      	ldr	r1, [pc, #44]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1f4>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b80:	4a09      	ldr	r2, [pc, #36]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b84:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_RCC_ClockConfig+0x1fc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe fdd7 	bl	800173c <HAL_InitTick>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b92:	7afb      	ldrb	r3, [r7, #11]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	080078d8 	.word	0x080078d8
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	20000004 	.word	0x20000004

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	@ 0x24
 8002bb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d121      	bne.n	8002c22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d11e      	bne.n	8002c22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002be4:	4b34      	ldr	r3, [pc, #208]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bf0:	4b31      	ldr	r3, [pc, #196]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e005      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c00:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10d      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c28:	4b25      	ldr	r3, [pc, #148]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	e004      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c34:	4b23      	ldr	r3, [pc, #140]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d134      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d003      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0xac>
 8002c54:	e005      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c58:	617b      	str	r3, [r7, #20]
      break;
 8002c5a:	e005      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c5e:	617b      	str	r3, [r7, #20]
      break;
 8002c60:	e002      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	617b      	str	r3, [r7, #20]
      break;
 8002c66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c68:	4b13      	ldr	r3, [pc, #76]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	3301      	adds	r3, #1
 8002c74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c76:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	fb03 f202 	mul.w	r2, r3, r2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	0e5b      	lsrs	r3, r3, #25
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	@ 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	080078f0 	.word	0x080078f0
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	007a1200 	.word	0x007a1200

08002cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	@ (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000000 	.word	0x20000000

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4904      	ldr	r1, [pc, #16]	@ (8002d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	080078e8 	.word	0x080078e8

08002d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d10:	f7ff ffda 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0adb      	lsrs	r3, r3, #11
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4904      	ldr	r1, [pc, #16]	@ (8002d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	080078e8 	.word	0x080078e8

08002d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d44:	4b2a      	ldr	r3, [pc, #168]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d50:	f7ff f9ee 	bl	8002130 <HAL_PWREx_GetVoltageRange>
 8002d54:	6178      	str	r0, [r7, #20]
 8002d56:	e014      	b.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b25      	ldr	r3, [pc, #148]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	4a24      	ldr	r2, [pc, #144]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d64:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d70:	f7ff f9de 	bl	8002130 <HAL_PWREx_GetVoltageRange>
 8002d74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d88:	d10b      	bne.n	8002da2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b80      	cmp	r3, #128	@ 0x80
 8002d8e:	d919      	bls.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d94:	d902      	bls.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d96:	2302      	movs	r3, #2
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	e013      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	e010      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b80      	cmp	r3, #128	@ 0x80
 8002da6:	d902      	bls.n	8002dae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002da8:	2303      	movs	r3, #3
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	e00a      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b80      	cmp	r3, #128	@ 0x80
 8002db2:	d102      	bne.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002db4:	2302      	movs	r3, #2
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	e004      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b70      	cmp	r3, #112	@ 0x70
 8002dbe:	d101      	bne.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 0207 	bic.w	r2, r3, #7
 8002dcc:	4909      	ldr	r1, [pc, #36]	@ (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dd4:	4b07      	ldr	r3, [pc, #28]	@ (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40022000 	.word	0x40022000

08002df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e00:	2300      	movs	r3, #0
 8002e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e04:	2300      	movs	r3, #0
 8002e06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d041      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e18:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e1c:	d02a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e1e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e22:	d824      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e28:	d008      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e2e:	d81e      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e38:	d010      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e3a:	e018      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e3c:	4b86      	ldr	r3, [pc, #536]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a85      	ldr	r2, [pc, #532]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e48:	e015      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fabb 	bl	80033cc <RCCEx_PLLSAI1_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e5a:	e00c      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3320      	adds	r3, #32
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fba6 	bl	80035b4 <RCCEx_PLLSAI2_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e6c:	e003      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	74fb      	strb	r3, [r7, #19]
      break;
 8002e72:	e000      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e7c:	4b76      	ldr	r3, [pc, #472]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e8a:	4973      	ldr	r1, [pc, #460]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e92:	e001      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d041      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ea8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002eac:	d02a      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002eae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002eb2:	d824      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002eb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eb8:	d008      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002eba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ebe:	d81e      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ec8:	d010      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eca:	e018      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ecc:	4b62      	ldr	r3, [pc, #392]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a61      	ldr	r2, [pc, #388]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ed8:	e015      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fa73 	bl	80033cc <RCCEx_PLLSAI1_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eea:	e00c      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3320      	adds	r3, #32
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fb5e 	bl	80035b4 <RCCEx_PLLSAI2_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002efc:	e003      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	74fb      	strb	r3, [r7, #19]
      break;
 8002f02:	e000      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f06:	7cfb      	ldrb	r3, [r7, #19]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f0c:	4b52      	ldr	r3, [pc, #328]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f1a:	494f      	ldr	r1, [pc, #316]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f22:	e001      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80a0 	beq.w	8003076 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f3a:	4b47      	ldr	r3, [pc, #284]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f50:	4b41      	ldr	r3, [pc, #260]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f54:	4a40      	ldr	r2, [pc, #256]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a3a      	ldr	r2, [pc, #232]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f78:	f7fe fc30 	bl	80017dc <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f7e:	e009      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f80:	f7fe fc2c 	bl	80017dc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d902      	bls.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	74fb      	strb	r3, [r7, #19]
        break;
 8002f92:	e005      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f94:	4b31      	ldr	r3, [pc, #196]	@ (800305c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ef      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fa0:	7cfb      	ldrb	r3, [r7, #19]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d15c      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01f      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d019      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fc4:	4b24      	ldr	r3, [pc, #144]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fd0:	4b21      	ldr	r3, [pc, #132]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd6:	4a20      	ldr	r2, [pc, #128]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ff0:	4a19      	ldr	r2, [pc, #100]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fe fbeb 	bl	80017dc <HAL_GetTick>
 8003006:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003008:	e00b      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300a:	f7fe fbe7 	bl	80017dc <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003018:	4293      	cmp	r3, r2
 800301a:	d902      	bls.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	74fb      	strb	r3, [r7, #19]
            break;
 8003020:	e006      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003022:	4b0d      	ldr	r3, [pc, #52]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ec      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003036:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003046:	4904      	ldr	r1, [pc, #16]	@ (8003058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800304e:	e009      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	74bb      	strb	r3, [r7, #18]
 8003054:	e006      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003064:	7c7b      	ldrb	r3, [r7, #17]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d105      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306a:	4b9e      	ldr	r3, [pc, #632]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306e:	4a9d      	ldr	r2, [pc, #628]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003070:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003074:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003082:	4b98      	ldr	r3, [pc, #608]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003088:	f023 0203 	bic.w	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003090:	4994      	ldr	r1, [pc, #592]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030a4:	4b8f      	ldr	r3, [pc, #572]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	f023 020c 	bic.w	r2, r3, #12
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b2:	498c      	ldr	r1, [pc, #560]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030c6:	4b87      	ldr	r3, [pc, #540]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	4983      	ldr	r1, [pc, #524]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030e8:	4b7e      	ldr	r3, [pc, #504]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	497b      	ldr	r1, [pc, #492]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800310a:	4b76      	ldr	r3, [pc, #472]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003110:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003118:	4972      	ldr	r1, [pc, #456]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800312c:	4b6d      	ldr	r3, [pc, #436]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003132:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313a:	496a      	ldr	r1, [pc, #424]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800314e:	4b65      	ldr	r3, [pc, #404]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003154:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315c:	4961      	ldr	r1, [pc, #388]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003170:	4b5c      	ldr	r3, [pc, #368]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003176:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317e:	4959      	ldr	r1, [pc, #356]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003192:	4b54      	ldr	r3, [pc, #336]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003198:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a0:	4950      	ldr	r1, [pc, #320]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031b4:	4b4b      	ldr	r3, [pc, #300]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c2:	4948      	ldr	r1, [pc, #288]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031d6:	4b43      	ldr	r3, [pc, #268]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e4:	493f      	ldr	r1, [pc, #252]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d028      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f8:	4b3a      	ldr	r3, [pc, #232]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003206:	4937      	ldr	r1, [pc, #220]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003212:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003216:	d106      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003218:	4b32      	ldr	r3, [pc, #200]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a31      	ldr	r2, [pc, #196]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003222:	60d3      	str	r3, [r2, #12]
 8003224:	e011      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800322a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800322e:	d10c      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3304      	adds	r3, #4
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f8c8 	bl	80033cc <RCCEx_PLLSAI1_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d028      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003256:	4b23      	ldr	r3, [pc, #140]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003264:	491f      	ldr	r1, [pc, #124]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003274:	d106      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003276:	4b1b      	ldr	r3, [pc, #108]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	4a1a      	ldr	r2, [pc, #104]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003280:	60d3      	str	r3, [r2, #12]
 8003282:	e011      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003288:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f899 	bl	80033cc <RCCEx_PLLSAI1_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d02b      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032c2:	4908      	ldr	r1, [pc, #32]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032d2:	d109      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d4:	4b03      	ldr	r3, [pc, #12]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4a02      	ldr	r2, [pc, #8]	@ (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032de:	60d3      	str	r3, [r2, #12]
 80032e0:	e014      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032f0:	d10c      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f867 	bl	80033cc <RCCEx_PLLSAI1_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d02f      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003318:	4b2b      	ldr	r3, [pc, #172]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003326:	4928      	ldr	r1, [pc, #160]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003336:	d10d      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	2102      	movs	r1, #2
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f844 	bl	80033cc <RCCEx_PLLSAI1_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d014      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	74bb      	strb	r3, [r7, #18]
 8003352:	e011      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800335c:	d10c      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3320      	adds	r3, #32
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f925 	bl	80035b4 <RCCEx_PLLSAI2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003384:	4b10      	ldr	r3, [pc, #64]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003392:	490d      	ldr	r1, [pc, #52]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033a6:	4b08      	ldr	r3, [pc, #32]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033b6:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033be:	7cbb      	ldrb	r3, [r7, #18]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000

080033cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033da:	4b75      	ldr	r3, [pc, #468]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d018      	beq.n	8003418 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033e6:	4b72      	ldr	r3, [pc, #456]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0203 	and.w	r2, r3, #3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d10d      	bne.n	8003412 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
       ||
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033fe:	4b6c      	ldr	r3, [pc, #432]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
       ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d047      	beq.n	80034a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e044      	b.n	80034a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d018      	beq.n	8003452 <RCCEx_PLLSAI1_Config+0x86>
 8003420:	2b03      	cmp	r3, #3
 8003422:	d825      	bhi.n	8003470 <RCCEx_PLLSAI1_Config+0xa4>
 8003424:	2b01      	cmp	r3, #1
 8003426:	d002      	beq.n	800342e <RCCEx_PLLSAI1_Config+0x62>
 8003428:	2b02      	cmp	r3, #2
 800342a:	d009      	beq.n	8003440 <RCCEx_PLLSAI1_Config+0x74>
 800342c:	e020      	b.n	8003470 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800342e:	4b60      	ldr	r3, [pc, #384]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11d      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343e:	e01a      	b.n	8003476 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003440:	4b5b      	ldr	r3, [pc, #364]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003450:	e013      	b.n	800347a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003452:	4b57      	ldr	r3, [pc, #348]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10f      	bne.n	800347e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800345e:	4b54      	ldr	r3, [pc, #336]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800346e:	e006      	b.n	800347e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      break;
 8003474:	e004      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800347e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10d      	bne.n	80034a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003486:	4b4a      	ldr	r3, [pc, #296]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6819      	ldr	r1, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	430b      	orrs	r3, r1
 800349c:	4944      	ldr	r1, [pc, #272]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d17d      	bne.n	80035a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a8:	4b41      	ldr	r3, [pc, #260]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a40      	ldr	r2, [pc, #256]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b4:	f7fe f992 	bl	80017dc <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034ba:	e009      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034bc:	f7fe f98e 	bl	80017dc <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d902      	bls.n	80034d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	73fb      	strb	r3, [r7, #15]
        break;
 80034ce:	e005      	b.n	80034dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034d0:	4b37      	ldr	r3, [pc, #220]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ef      	bne.n	80034bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d160      	bne.n	80035a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d111      	bne.n	800350c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e8:	4b31      	ldr	r3, [pc, #196]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80034f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6892      	ldr	r2, [r2, #8]
 80034f8:	0211      	lsls	r1, r2, #8
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68d2      	ldr	r2, [r2, #12]
 80034fe:	0912      	lsrs	r2, r2, #4
 8003500:	0452      	lsls	r2, r2, #17
 8003502:	430a      	orrs	r2, r1
 8003504:	492a      	ldr	r1, [pc, #168]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003506:	4313      	orrs	r3, r2
 8003508:	610b      	str	r3, [r1, #16]
 800350a:	e027      	b.n	800355c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d112      	bne.n	8003538 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003512:	4b27      	ldr	r3, [pc, #156]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800351a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	0211      	lsls	r1, r2, #8
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6912      	ldr	r2, [r2, #16]
 8003528:	0852      	lsrs	r2, r2, #1
 800352a:	3a01      	subs	r2, #1
 800352c:	0552      	lsls	r2, r2, #21
 800352e:	430a      	orrs	r2, r1
 8003530:	491f      	ldr	r1, [pc, #124]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	610b      	str	r3, [r1, #16]
 8003536:	e011      	b.n	800355c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003538:	4b1d      	ldr	r3, [pc, #116]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003540:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6892      	ldr	r2, [r2, #8]
 8003548:	0211      	lsls	r1, r2, #8
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6952      	ldr	r2, [r2, #20]
 800354e:	0852      	lsrs	r2, r2, #1
 8003550:	3a01      	subs	r2, #1
 8003552:	0652      	lsls	r2, r2, #25
 8003554:	430a      	orrs	r2, r1
 8003556:	4916      	ldr	r1, [pc, #88]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800355c:	4b14      	ldr	r3, [pc, #80]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a13      	ldr	r2, [pc, #76]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003562:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003566:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe f938 	bl	80017dc <HAL_GetTick>
 800356c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800356e:	e009      	b.n	8003584 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003570:	f7fe f934 	bl	80017dc <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d902      	bls.n	8003584 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	73fb      	strb	r3, [r7, #15]
          break;
 8003582:	e005      	b.n	8003590 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003584:	4b0a      	ldr	r3, [pc, #40]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ef      	beq.n	8003570 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003596:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	4904      	ldr	r1, [pc, #16]	@ (80035b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000

080035b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035c2:	4b6a      	ldr	r3, [pc, #424]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035ce:	4b67      	ldr	r3, [pc, #412]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0203 	and.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d10d      	bne.n	80035fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
       ||
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035e6:	4b61      	ldr	r3, [pc, #388]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
       ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d047      	beq.n	800368a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e044      	b.n	800368a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d018      	beq.n	800363a <RCCEx_PLLSAI2_Config+0x86>
 8003608:	2b03      	cmp	r3, #3
 800360a:	d825      	bhi.n	8003658 <RCCEx_PLLSAI2_Config+0xa4>
 800360c:	2b01      	cmp	r3, #1
 800360e:	d002      	beq.n	8003616 <RCCEx_PLLSAI2_Config+0x62>
 8003610:	2b02      	cmp	r3, #2
 8003612:	d009      	beq.n	8003628 <RCCEx_PLLSAI2_Config+0x74>
 8003614:	e020      	b.n	8003658 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003616:	4b55      	ldr	r3, [pc, #340]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11d      	bne.n	800365e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003626:	e01a      	b.n	800365e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003628:	4b50      	ldr	r3, [pc, #320]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d116      	bne.n	8003662 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e013      	b.n	8003662 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800363a:	4b4c      	ldr	r3, [pc, #304]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003646:	4b49      	ldr	r3, [pc, #292]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003656:	e006      	b.n	8003666 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e004      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003666:	bf00      	nop
    }

    if(status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800366e:	4b3f      	ldr	r3, [pc, #252]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	430b      	orrs	r3, r1
 8003684:	4939      	ldr	r1, [pc, #228]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003686:	4313      	orrs	r3, r2
 8003688:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d167      	bne.n	8003760 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003690:	4b36      	ldr	r3, [pc, #216]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a35      	ldr	r2, [pc, #212]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800369a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fe f89e 	bl	80017dc <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036a2:	e009      	b.n	80036b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036a4:	f7fe f89a 	bl	80017dc <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d902      	bls.n	80036b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	73fb      	strb	r3, [r7, #15]
        break;
 80036b6:	e005      	b.n	80036c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036b8:	4b2c      	ldr	r3, [pc, #176]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ef      	bne.n	80036a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d14a      	bne.n	8003760 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d111      	bne.n	80036f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036d0:	4b26      	ldr	r3, [pc, #152]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80036d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6892      	ldr	r2, [r2, #8]
 80036e0:	0211      	lsls	r1, r2, #8
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	0912      	lsrs	r2, r2, #4
 80036e8:	0452      	lsls	r2, r2, #17
 80036ea:	430a      	orrs	r2, r1
 80036ec:	491f      	ldr	r1, [pc, #124]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	614b      	str	r3, [r1, #20]
 80036f2:	e011      	b.n	8003718 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036f4:	4b1d      	ldr	r3, [pc, #116]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6892      	ldr	r2, [r2, #8]
 8003704:	0211      	lsls	r1, r2, #8
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6912      	ldr	r2, [r2, #16]
 800370a:	0852      	lsrs	r2, r2, #1
 800370c:	3a01      	subs	r2, #1
 800370e:	0652      	lsls	r2, r2, #25
 8003710:	430a      	orrs	r2, r1
 8003712:	4916      	ldr	r1, [pc, #88]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003714:	4313      	orrs	r3, r2
 8003716:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003718:	4b14      	ldr	r3, [pc, #80]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a13      	ldr	r2, [pc, #76]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 800371e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003722:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe f85a 	bl	80017dc <HAL_GetTick>
 8003728:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800372a:	e009      	b.n	8003740 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800372c:	f7fe f856 	bl	80017dc <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d902      	bls.n	8003740 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	73fb      	strb	r3, [r7, #15]
          break;
 800373e:	e005      	b.n	800374c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003740:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ef      	beq.n	800372c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003752:	4b06      	ldr	r3, [pc, #24]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	4904      	ldr	r1, [pc, #16]	@ (800376c <RCCEx_PLLSAI2_Config+0x1b8>)
 800375c:	4313      	orrs	r3, r2
 800375e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000

08003770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e040      	b.n	8003804 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd fdd4 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	@ 0x24
 800379c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fec0 	bl	800453c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fc05 	bl	8003fcc <UART_SetConfig>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e01b      	b.n	8003804 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0201 	orr.w	r2, r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 ff3f 	bl	8004680 <UART_CheckIdleState>
 8003802:	4603      	mov	r3, r0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003820:	2b20      	cmp	r3, #32
 8003822:	d177      	bne.n	8003914 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_UART_Transmit+0x24>
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e070      	b.n	8003916 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2221      	movs	r2, #33	@ 0x21
 8003840:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003842:	f7fd ffcb 	bl	80017dc <HAL_GetTick>
 8003846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003860:	d108      	bne.n	8003874 <HAL_UART_Transmit+0x68>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d104      	bne.n	8003874 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	e003      	b.n	800387c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800387c:	e02f      	b.n	80038de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2200      	movs	r2, #0
 8003886:	2180      	movs	r1, #128	@ 0x80
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 ffa1 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e03b      	b.n	8003916 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	881a      	ldrh	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b0:	b292      	uxth	r2, r2
 80038b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	3302      	adds	r3, #2
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	e007      	b.n	80038cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	3301      	adds	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1c9      	bne.n	800387e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	2140      	movs	r1, #64	@ 0x40
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 ff6b 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e005      	b.n	8003916 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	@ 0x28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003934:	2b20      	cmp	r3, #32
 8003936:	d137      	bne.n	80039a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_UART_Receive_IT+0x24>
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e030      	b.n	80039aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a18      	ldr	r2, [pc, #96]	@ (80039b4 <HAL_UART_Receive_IT+0x94>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d01f      	beq.n	8003998 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	613b      	str	r3, [r7, #16]
   return(result);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	623b      	str	r3, [r7, #32]
 8003986:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	69f9      	ldr	r1, [r7, #28]
 800398a:	6a3a      	ldr	r2, [r7, #32]
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	61bb      	str	r3, [r7, #24]
   return(result);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e6      	bne.n	8003966 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	461a      	mov	r2, r3
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 ff7e 	bl	80048a0 <UART_Start_Receive_IT>
 80039a4:	4603      	mov	r3, r0
 80039a6:	e000      	b.n	80039aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3728      	adds	r7, #40	@ 0x28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40008000 	.word	0x40008000

080039b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b0ba      	sub	sp, #232	@ 0xe8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80039e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80039e6:	4013      	ands	r3, r2
 80039e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80039ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d115      	bne.n	8003a20 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00f      	beq.n	8003a20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 82ae 	beq.w	8003f72 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
      }
      return;
 8003a1e:	e2a8      	b.n	8003f72 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8117 	beq.w	8003c58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003a3a:	4b85      	ldr	r3, [pc, #532]	@ (8003c50 <HAL_UART_IRQHandler+0x298>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 810a 	beq.w	8003c58 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d011      	beq.n	8003a74 <HAL_UART_IRQHandler+0xbc>
 8003a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00b      	beq.n	8003a74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2201      	movs	r2, #1
 8003a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d011      	beq.n	8003aa4 <HAL_UART_IRQHandler+0xec>
 8003a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2202      	movs	r2, #2
 8003a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a9a:	f043 0204 	orr.w	r2, r3, #4
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d011      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x11c>
 8003ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00b      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aca:	f043 0202 	orr.w	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d017      	beq.n	8003b10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003af0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2208      	movs	r2, #8
 8003afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b06:	f043 0208 	orr.w	r2, r3, #8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d012      	beq.n	8003b42 <HAL_UART_IRQHandler+0x18a>
 8003b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00c      	beq.n	8003b42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8214 	beq.w	8003f76 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00d      	beq.n	8003b76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8a:	2b40      	cmp	r3, #64	@ 0x40
 8003b8c:	d005      	beq.n	8003b9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d04f      	beq.n	8003c3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 ff46 	bl	8004a2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003baa:	2b40      	cmp	r3, #64	@ 0x40
 8003bac:	d141      	bne.n	8003c32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003bda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003bde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1d9      	bne.n	8003bae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d013      	beq.n	8003c2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c06:	4a13      	ldr	r2, [pc, #76]	@ (8003c54 <HAL_UART_IRQHandler+0x29c>)
 8003c08:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd ff3f 	bl	8001a92 <HAL_DMA_Abort_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d017      	beq.n	8003c4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c24:	4610      	mov	r0, r2
 8003c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e00f      	b.n	8003c4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9b8 	bl	8003fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e00b      	b.n	8003c4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9b4 	bl	8003fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	e007      	b.n	8003c4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f9b0 	bl	8003fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003c48:	e195      	b.n	8003f76 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4a:	bf00      	nop
    return;
 8003c4c:	e193      	b.n	8003f76 <HAL_UART_IRQHandler+0x5be>
 8003c4e:	bf00      	nop
 8003c50:	04000120 	.word	0x04000120
 8003c54:	08004af5 	.word	0x08004af5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	f040 814e 	bne.w	8003efe <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8147 	beq.w	8003efe <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8140 	beq.w	8003efe <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2210      	movs	r2, #16
 8003c84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c90:	2b40      	cmp	r3, #64	@ 0x40
 8003c92:	f040 80b8 	bne.w	8003e06 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ca2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8167 	beq.w	8003f7a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f080 815f 	bcs.w	8003f7a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f040 8086 	bne.w	8003de4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1da      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3308      	adds	r3, #8
 8003d28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3308      	adds	r3, #8
 8003d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d52:	e841 2300 	strex	r3, r2, [r1]
 8003d56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1e1      	bne.n	8003d22 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3308      	adds	r3, #8
 8003d64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e3      	bne.n	8003d5e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003db4:	f023 0310 	bic.w	r3, r3, #16
 8003db8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e4      	bne.n	8003da4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd fe19 	bl	8001a16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8d8 	bl	8003fb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e04:	e0b9      	b.n	8003f7a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80ab 	beq.w	8003f7e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a6 	beq.w	8003f7e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e4      	bne.n	8003e32 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	623b      	str	r3, [r7, #32]
   return(result);
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3308      	adds	r3, #8
 8003e88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e3      	bne.n	8003e68 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f023 0310 	bic.w	r3, r3, #16
 8003ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	69b9      	ldr	r1, [r7, #24]
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e4      	bne.n	8003eb4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f85c 	bl	8003fb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003efc:	e03f      	b.n	8003f7e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00e      	beq.n	8003f28 <HAL_UART_IRQHandler+0x570>
 8003f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003f1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 ffe3 	bl	8004eec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f26:	e02d      	b.n	8003f84 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00e      	beq.n	8003f52 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01c      	beq.n	8003f82 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4798      	blx	r3
    }
    return;
 8003f50:	e017      	b.n	8003f82 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d012      	beq.n	8003f84 <HAL_UART_IRQHandler+0x5cc>
 8003f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00c      	beq.n	8003f84 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fdd8 	bl	8004b20 <UART_EndTransmit_IT>
    return;
 8003f70:	e008      	b.n	8003f84 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f72:	bf00      	nop
 8003f74:	e006      	b.n	8003f84 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003f76:	bf00      	nop
 8003f78:	e004      	b.n	8003f84 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003f82:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f84:	37e8      	adds	r7, #232	@ 0xe8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop

08003f8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd0:	b08a      	sub	sp, #40	@ 0x28
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4ba4      	ldr	r3, [pc, #656]	@ (800428c <UART_SetConfig+0x2c0>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004004:	430b      	orrs	r3, r1
 8004006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a99      	ldr	r2, [pc, #612]	@ (8004290 <UART_SetConfig+0x2c4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004034:	4313      	orrs	r3, r2
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004048:	430a      	orrs	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a90      	ldr	r2, [pc, #576]	@ (8004294 <UART_SetConfig+0x2c8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d126      	bne.n	80040a4 <UART_SetConfig+0xd8>
 8004056:	4b90      	ldr	r3, [pc, #576]	@ (8004298 <UART_SetConfig+0x2cc>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b03      	cmp	r3, #3
 8004062:	d81b      	bhi.n	800409c <UART_SetConfig+0xd0>
 8004064:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <UART_SetConfig+0xa0>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	0800407d 	.word	0x0800407d
 8004070:	0800408d 	.word	0x0800408d
 8004074:	08004085 	.word	0x08004085
 8004078:	08004095 	.word	0x08004095
 800407c:	2301      	movs	r3, #1
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004082:	e116      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004084:	2302      	movs	r3, #2
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800408a:	e112      	b.n	80042b2 <UART_SetConfig+0x2e6>
 800408c:	2304      	movs	r3, #4
 800408e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004092:	e10e      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004094:	2308      	movs	r3, #8
 8004096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409a:	e10a      	b.n	80042b2 <UART_SetConfig+0x2e6>
 800409c:	2310      	movs	r3, #16
 800409e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a2:	e106      	b.n	80042b2 <UART_SetConfig+0x2e6>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a7c      	ldr	r2, [pc, #496]	@ (800429c <UART_SetConfig+0x2d0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d138      	bne.n	8004120 <UART_SetConfig+0x154>
 80040ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004298 <UART_SetConfig+0x2cc>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	d82d      	bhi.n	8004118 <UART_SetConfig+0x14c>
 80040bc:	a201      	add	r2, pc, #4	@ (adr r2, 80040c4 <UART_SetConfig+0xf8>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	08004119 	.word	0x08004119
 80040cc:	08004119 	.word	0x08004119
 80040d0:	08004119 	.word	0x08004119
 80040d4:	08004109 	.word	0x08004109
 80040d8:	08004119 	.word	0x08004119
 80040dc:	08004119 	.word	0x08004119
 80040e0:	08004119 	.word	0x08004119
 80040e4:	08004101 	.word	0x08004101
 80040e8:	08004119 	.word	0x08004119
 80040ec:	08004119 	.word	0x08004119
 80040f0:	08004119 	.word	0x08004119
 80040f4:	08004111 	.word	0x08004111
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040fe:	e0d8      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004100:	2302      	movs	r3, #2
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004106:	e0d4      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004108:	2304      	movs	r3, #4
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800410e:	e0d0      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004110:	2308      	movs	r3, #8
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004116:	e0cc      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004118:	2310      	movs	r3, #16
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800411e:	e0c8      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a5e      	ldr	r2, [pc, #376]	@ (80042a0 <UART_SetConfig+0x2d4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d125      	bne.n	8004176 <UART_SetConfig+0x1aa>
 800412a:	4b5b      	ldr	r3, [pc, #364]	@ (8004298 <UART_SetConfig+0x2cc>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004130:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004134:	2b30      	cmp	r3, #48	@ 0x30
 8004136:	d016      	beq.n	8004166 <UART_SetConfig+0x19a>
 8004138:	2b30      	cmp	r3, #48	@ 0x30
 800413a:	d818      	bhi.n	800416e <UART_SetConfig+0x1a2>
 800413c:	2b20      	cmp	r3, #32
 800413e:	d00a      	beq.n	8004156 <UART_SetConfig+0x18a>
 8004140:	2b20      	cmp	r3, #32
 8004142:	d814      	bhi.n	800416e <UART_SetConfig+0x1a2>
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <UART_SetConfig+0x182>
 8004148:	2b10      	cmp	r3, #16
 800414a:	d008      	beq.n	800415e <UART_SetConfig+0x192>
 800414c:	e00f      	b.n	800416e <UART_SetConfig+0x1a2>
 800414e:	2300      	movs	r3, #0
 8004150:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004154:	e0ad      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004156:	2302      	movs	r3, #2
 8004158:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800415c:	e0a9      	b.n	80042b2 <UART_SetConfig+0x2e6>
 800415e:	2304      	movs	r3, #4
 8004160:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004164:	e0a5      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004166:	2308      	movs	r3, #8
 8004168:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416c:	e0a1      	b.n	80042b2 <UART_SetConfig+0x2e6>
 800416e:	2310      	movs	r3, #16
 8004170:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004174:	e09d      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a4a      	ldr	r2, [pc, #296]	@ (80042a4 <UART_SetConfig+0x2d8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d125      	bne.n	80041cc <UART_SetConfig+0x200>
 8004180:	4b45      	ldr	r3, [pc, #276]	@ (8004298 <UART_SetConfig+0x2cc>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800418a:	2bc0      	cmp	r3, #192	@ 0xc0
 800418c:	d016      	beq.n	80041bc <UART_SetConfig+0x1f0>
 800418e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004190:	d818      	bhi.n	80041c4 <UART_SetConfig+0x1f8>
 8004192:	2b80      	cmp	r3, #128	@ 0x80
 8004194:	d00a      	beq.n	80041ac <UART_SetConfig+0x1e0>
 8004196:	2b80      	cmp	r3, #128	@ 0x80
 8004198:	d814      	bhi.n	80041c4 <UART_SetConfig+0x1f8>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <UART_SetConfig+0x1d8>
 800419e:	2b40      	cmp	r3, #64	@ 0x40
 80041a0:	d008      	beq.n	80041b4 <UART_SetConfig+0x1e8>
 80041a2:	e00f      	b.n	80041c4 <UART_SetConfig+0x1f8>
 80041a4:	2300      	movs	r3, #0
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041aa:	e082      	b.n	80042b2 <UART_SetConfig+0x2e6>
 80041ac:	2302      	movs	r3, #2
 80041ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041b2:	e07e      	b.n	80042b2 <UART_SetConfig+0x2e6>
 80041b4:	2304      	movs	r3, #4
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ba:	e07a      	b.n	80042b2 <UART_SetConfig+0x2e6>
 80041bc:	2308      	movs	r3, #8
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041c2:	e076      	b.n	80042b2 <UART_SetConfig+0x2e6>
 80041c4:	2310      	movs	r3, #16
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ca:	e072      	b.n	80042b2 <UART_SetConfig+0x2e6>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a35      	ldr	r2, [pc, #212]	@ (80042a8 <UART_SetConfig+0x2dc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d12a      	bne.n	800422c <UART_SetConfig+0x260>
 80041d6:	4b30      	ldr	r3, [pc, #192]	@ (8004298 <UART_SetConfig+0x2cc>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041e4:	d01a      	beq.n	800421c <UART_SetConfig+0x250>
 80041e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ea:	d81b      	bhi.n	8004224 <UART_SetConfig+0x258>
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f0:	d00c      	beq.n	800420c <UART_SetConfig+0x240>
 80041f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f6:	d815      	bhi.n	8004224 <UART_SetConfig+0x258>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <UART_SetConfig+0x238>
 80041fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004200:	d008      	beq.n	8004214 <UART_SetConfig+0x248>
 8004202:	e00f      	b.n	8004224 <UART_SetConfig+0x258>
 8004204:	2300      	movs	r3, #0
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800420a:	e052      	b.n	80042b2 <UART_SetConfig+0x2e6>
 800420c:	2302      	movs	r3, #2
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004212:	e04e      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004214:	2304      	movs	r3, #4
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421a:	e04a      	b.n	80042b2 <UART_SetConfig+0x2e6>
 800421c:	2308      	movs	r3, #8
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004222:	e046      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004224:	2310      	movs	r3, #16
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422a:	e042      	b.n	80042b2 <UART_SetConfig+0x2e6>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a17      	ldr	r2, [pc, #92]	@ (8004290 <UART_SetConfig+0x2c4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d13a      	bne.n	80042ac <UART_SetConfig+0x2e0>
 8004236:	4b18      	ldr	r3, [pc, #96]	@ (8004298 <UART_SetConfig+0x2cc>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004240:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004244:	d01a      	beq.n	800427c <UART_SetConfig+0x2b0>
 8004246:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800424a:	d81b      	bhi.n	8004284 <UART_SetConfig+0x2b8>
 800424c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004250:	d00c      	beq.n	800426c <UART_SetConfig+0x2a0>
 8004252:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004256:	d815      	bhi.n	8004284 <UART_SetConfig+0x2b8>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <UART_SetConfig+0x298>
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004260:	d008      	beq.n	8004274 <UART_SetConfig+0x2a8>
 8004262:	e00f      	b.n	8004284 <UART_SetConfig+0x2b8>
 8004264:	2300      	movs	r3, #0
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426a:	e022      	b.n	80042b2 <UART_SetConfig+0x2e6>
 800426c:	2302      	movs	r3, #2
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004272:	e01e      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004274:	2304      	movs	r3, #4
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800427a:	e01a      	b.n	80042b2 <UART_SetConfig+0x2e6>
 800427c:	2308      	movs	r3, #8
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004282:	e016      	b.n	80042b2 <UART_SetConfig+0x2e6>
 8004284:	2310      	movs	r3, #16
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800428a:	e012      	b.n	80042b2 <UART_SetConfig+0x2e6>
 800428c:	efff69f3 	.word	0xefff69f3
 8004290:	40008000 	.word	0x40008000
 8004294:	40013800 	.word	0x40013800
 8004298:	40021000 	.word	0x40021000
 800429c:	40004400 	.word	0x40004400
 80042a0:	40004800 	.word	0x40004800
 80042a4:	40004c00 	.word	0x40004c00
 80042a8:	40005000 	.word	0x40005000
 80042ac:	2310      	movs	r3, #16
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a9f      	ldr	r2, [pc, #636]	@ (8004534 <UART_SetConfig+0x568>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d17a      	bne.n	80043b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d824      	bhi.n	800430e <UART_SetConfig+0x342>
 80042c4:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <UART_SetConfig+0x300>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	0800430f 	.word	0x0800430f
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	0800430f 	.word	0x0800430f
 80042dc:	080042ff 	.word	0x080042ff
 80042e0:	0800430f 	.word	0x0800430f
 80042e4:	0800430f 	.word	0x0800430f
 80042e8:	0800430f 	.word	0x0800430f
 80042ec:	08004307 	.word	0x08004307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7fe fcf6 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 80042f4:	61f8      	str	r0, [r7, #28]
        break;
 80042f6:	e010      	b.n	800431a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f8:	4b8f      	ldr	r3, [pc, #572]	@ (8004538 <UART_SetConfig+0x56c>)
 80042fa:	61fb      	str	r3, [r7, #28]
        break;
 80042fc:	e00d      	b.n	800431a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fe:	f7fe fc57 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8004302:	61f8      	str	r0, [r7, #28]
        break;
 8004304:	e009      	b.n	800431a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800430a:	61fb      	str	r3, [r7, #28]
        break;
 800430c:	e005      	b.n	800431a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004318:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80fb 	beq.w	8004518 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	4413      	add	r3, r2
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	429a      	cmp	r2, r3
 8004330:	d305      	bcc.n	800433e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	429a      	cmp	r2, r3
 800433c:	d903      	bls.n	8004346 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004344:	e0e8      	b.n	8004518 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	2200      	movs	r2, #0
 800434a:	461c      	mov	r4, r3
 800434c:	4615      	mov	r5, r2
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	022b      	lsls	r3, r5, #8
 8004358:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800435c:	0222      	lsls	r2, r4, #8
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	6849      	ldr	r1, [r1, #4]
 8004362:	0849      	lsrs	r1, r1, #1
 8004364:	2000      	movs	r0, #0
 8004366:	4688      	mov	r8, r1
 8004368:	4681      	mov	r9, r0
 800436a:	eb12 0a08 	adds.w	sl, r2, r8
 800436e:	eb43 0b09 	adc.w	fp, r3, r9
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004380:	4650      	mov	r0, sl
 8004382:	4659      	mov	r1, fp
 8004384:	f7fc fc10 	bl	8000ba8 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4613      	mov	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004396:	d308      	bcc.n	80043aa <UART_SetConfig+0x3de>
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800439e:	d204      	bcs.n	80043aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	e0b6      	b.n	8004518 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043b0:	e0b2      	b.n	8004518 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ba:	d15e      	bne.n	800447a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80043bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d828      	bhi.n	8004416 <UART_SetConfig+0x44a>
 80043c4:	a201      	add	r2, pc, #4	@ (adr r2, 80043cc <UART_SetConfig+0x400>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004417 	.word	0x08004417
 80043dc:	08004407 	.word	0x08004407
 80043e0:	08004417 	.word	0x08004417
 80043e4:	08004417 	.word	0x08004417
 80043e8:	08004417 	.word	0x08004417
 80043ec:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7fe fc76 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 80043f4:	61f8      	str	r0, [r7, #28]
        break;
 80043f6:	e014      	b.n	8004422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fe fc88 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 80043fc:	61f8      	str	r0, [r7, #28]
        break;
 80043fe:	e010      	b.n	8004422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b4d      	ldr	r3, [pc, #308]	@ (8004538 <UART_SetConfig+0x56c>)
 8004402:	61fb      	str	r3, [r7, #28]
        break;
 8004404:	e00d      	b.n	8004422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fe fbd3 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 800440a:	61f8      	str	r0, [r7, #28]
        break;
 800440c:	e009      	b.n	8004422 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004412:	61fb      	str	r3, [r7, #28]
        break;
 8004414:	e005      	b.n	8004422 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004420:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d077      	beq.n	8004518 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	005a      	lsls	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	441a      	add	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b0f      	cmp	r3, #15
 8004442:	d916      	bls.n	8004472 <UART_SetConfig+0x4a6>
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800444a:	d212      	bcs.n	8004472 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	b29b      	uxth	r3, r3
 8004450:	f023 030f 	bic.w	r3, r3, #15
 8004454:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	b29b      	uxth	r3, r3
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	b29a      	uxth	r2, r3
 8004462:	8afb      	ldrh	r3, [r7, #22]
 8004464:	4313      	orrs	r3, r2
 8004466:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	8afa      	ldrh	r2, [r7, #22]
 800446e:	60da      	str	r2, [r3, #12]
 8004470:	e052      	b.n	8004518 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004478:	e04e      	b.n	8004518 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800447a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800447e:	2b08      	cmp	r3, #8
 8004480:	d827      	bhi.n	80044d2 <UART_SetConfig+0x506>
 8004482:	a201      	add	r2, pc, #4	@ (adr r2, 8004488 <UART_SetConfig+0x4bc>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044bd 	.word	0x080044bd
 8004494:	080044d3 	.word	0x080044d3
 8004498:	080044c3 	.word	0x080044c3
 800449c:	080044d3 	.word	0x080044d3
 80044a0:	080044d3 	.word	0x080044d3
 80044a4:	080044d3 	.word	0x080044d3
 80044a8:	080044cb 	.word	0x080044cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fe fc18 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 80044b0:	61f8      	str	r0, [r7, #28]
        break;
 80044b2:	e014      	b.n	80044de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b4:	f7fe fc2a 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 80044b8:	61f8      	str	r0, [r7, #28]
        break;
 80044ba:	e010      	b.n	80044de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004538 <UART_SetConfig+0x56c>)
 80044be:	61fb      	str	r3, [r7, #28]
        break;
 80044c0:	e00d      	b.n	80044de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c2:	f7fe fb75 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 80044c6:	61f8      	str	r0, [r7, #28]
        break;
 80044c8:	e009      	b.n	80044de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ce:	61fb      	str	r3, [r7, #28]
        break;
 80044d0:	e005      	b.n	80044de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044dc:	bf00      	nop
    }

    if (pclk != 0U)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d019      	beq.n	8004518 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	085a      	lsrs	r2, r3, #1
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	441a      	add	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b0f      	cmp	r3, #15
 80044fc:	d909      	bls.n	8004512 <UART_SetConfig+0x546>
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004504:	d205      	bcs.n	8004512 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60da      	str	r2, [r3, #12]
 8004510:	e002      	b.n	8004518 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004524:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004528:	4618      	mov	r0, r3
 800452a:	3728      	adds	r7, #40	@ 0x28
 800452c:	46bd      	mov	sp, r7
 800452e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004532:	bf00      	nop
 8004534:	40008000 	.word	0x40008000
 8004538:	00f42400 	.word	0x00f42400

0800453c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01a      	beq.n	8004652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800463a:	d10a      	bne.n	8004652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	605a      	str	r2, [r3, #4]
  }
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b098      	sub	sp, #96	@ 0x60
 8004684:	af02      	add	r7, sp, #8
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004690:	f7fd f8a4 	bl	80017dc <HAL_GetTick>
 8004694:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d12e      	bne.n	8004702 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046ac:	2200      	movs	r2, #0
 80046ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f88c 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d021      	beq.n	8004702 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	461a      	mov	r2, r3
 80046da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80046de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e6      	bne.n	80046be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e062      	b.n	80047c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d149      	bne.n	80047a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004718:	2200      	movs	r2, #0
 800471a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f856 	bl	80047d0 <UART_WaitOnFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d03c      	beq.n	80047a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	623b      	str	r3, [r7, #32]
   return(result);
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800473e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004748:	633b      	str	r3, [r7, #48]	@ 0x30
 800474a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800474e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e6      	bne.n	800472a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3308      	adds	r3, #8
 8004762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	60fb      	str	r3, [r7, #12]
   return(result);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3308      	adds	r3, #8
 800477a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800477c:	61fa      	str	r2, [r7, #28]
 800477e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	69b9      	ldr	r1, [r7, #24]
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	617b      	str	r3, [r7, #20]
   return(result);
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e5      	bne.n	800475c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e011      	b.n	80047c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3758      	adds	r7, #88	@ 0x58
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e0:	e049      	b.n	8004876 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d045      	beq.n	8004876 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fc fff7 	bl	80017dc <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <UART_WaitOnFlagUntilTimeout+0x30>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e048      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d031      	beq.n	8004876 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b08      	cmp	r3, #8
 800481e:	d110      	bne.n	8004842 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2208      	movs	r2, #8
 8004826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f8ff 	bl	8004a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2208      	movs	r2, #8
 8004832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e029      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800484c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004850:	d111      	bne.n	8004876 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800485a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f8e5 	bl	8004a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e00f      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4013      	ands	r3, r2
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	429a      	cmp	r2, r3
 8004884:	bf0c      	ite	eq
 8004886:	2301      	moveq	r3, #1
 8004888:	2300      	movne	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	429a      	cmp	r2, r3
 8004892:	d0a6      	beq.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b097      	sub	sp, #92	@ 0x5c
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	4613      	mov	r3, r2
 80048ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d2:	d10e      	bne.n	80048f2 <UART_Start_Receive_IT+0x52>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <UART_Start_Receive_IT+0x48>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80048e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048e6:	e02d      	b.n	8004944 <UART_Start_Receive_IT+0xa4>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	22ff      	movs	r2, #255	@ 0xff
 80048ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80048f0:	e028      	b.n	8004944 <UART_Start_Receive_IT+0xa4>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10d      	bne.n	8004916 <UART_Start_Receive_IT+0x76>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d104      	bne.n	800490c <UART_Start_Receive_IT+0x6c>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	22ff      	movs	r2, #255	@ 0xff
 8004906:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800490a:	e01b      	b.n	8004944 <UART_Start_Receive_IT+0xa4>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	227f      	movs	r2, #127	@ 0x7f
 8004910:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004914:	e016      	b.n	8004944 <UART_Start_Receive_IT+0xa4>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800491e:	d10d      	bne.n	800493c <UART_Start_Receive_IT+0x9c>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <UART_Start_Receive_IT+0x92>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	227f      	movs	r2, #127	@ 0x7f
 800492c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004930:	e008      	b.n	8004944 <UART_Start_Receive_IT+0xa4>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	223f      	movs	r2, #63	@ 0x3f
 8004936:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800493a:	e003      	b.n	8004944 <UART_Start_Receive_IT+0xa4>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2222      	movs	r2, #34	@ 0x22
 8004950:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3308      	adds	r3, #8
 800495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	657b      	str	r3, [r7, #84]	@ 0x54
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3308      	adds	r3, #8
 8004972:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004974:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004976:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800497a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e5      	bne.n	8004954 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004990:	d107      	bne.n	80049a2 <UART_Start_Receive_IT+0x102>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d103      	bne.n	80049a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a21      	ldr	r2, [pc, #132]	@ (8004a24 <UART_Start_Receive_IT+0x184>)
 800499e:	669a      	str	r2, [r3, #104]	@ 0x68
 80049a0:	e002      	b.n	80049a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4a20      	ldr	r2, [pc, #128]	@ (8004a28 <UART_Start_Receive_IT+0x188>)
 80049a6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d019      	beq.n	80049e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80049c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80049d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80049dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e6      	bne.n	80049b0 <UART_Start_Receive_IT+0x110>
 80049e2:	e018      	b.n	8004a16 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	613b      	str	r3, [r7, #16]
   return(result);
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f043 0320 	orr.w	r3, r3, #32
 80049f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	69f9      	ldr	r1, [r7, #28]
 8004a08:	6a3a      	ldr	r2, [r7, #32]
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e6      	bne.n	80049e4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	375c      	adds	r7, #92	@ 0x5c
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	08004d31 	.word	0x08004d31
 8004a28:	08004b75 	.word	0x08004b75

08004a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b095      	sub	sp, #84	@ 0x54
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a52:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e6      	bne.n	8004a34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3308      	adds	r3, #8
 8004a84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e5      	bne.n	8004a66 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d118      	bne.n	8004ad4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f023 0310 	bic.w	r3, r3, #16
 8004ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6979      	ldr	r1, [r7, #20]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e6      	bne.n	8004aa2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ae8:	bf00      	nop
 8004aea:	3754      	adds	r7, #84	@ 0x54
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f7ff fa44 	bl	8003fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6979      	ldr	r1, [r7, #20]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	613b      	str	r3, [r7, #16]
   return(result);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e6      	bne.n	8004b28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fa10 	bl	8003f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b6c:	bf00      	nop
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b09c      	sub	sp, #112	@ 0x70
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b8c:	2b22      	cmp	r3, #34	@ 0x22
 8004b8e:	f040 80be 	bne.w	8004d0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004ba0:	b2d9      	uxtb	r1, r3
 8004ba2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bac:	400a      	ands	r2, r1
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f040 80a3 	bne.w	8004d22 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e6      	bne.n	8004bdc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3308      	adds	r3, #8
 8004c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c20:	f023 0301 	bic.w	r3, r3, #1
 8004c24:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e5      	bne.n	8004c0e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a34      	ldr	r2, [pc, #208]	@ (8004d2c <UART_RxISR_8BIT+0x1b8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d01f      	beq.n	8004ca0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d018      	beq.n	8004ca0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c82:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e6      	bne.n	8004c6e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d12e      	bne.n	8004d06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0310 	bic.w	r3, r3, #16
 8004cc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	69b9      	ldr	r1, [r7, #24]
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e6      	bne.n	8004cae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f003 0310 	and.w	r3, r3, #16
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d103      	bne.n	8004cf6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2210      	movs	r2, #16
 8004cf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff f958 	bl	8003fb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d04:	e00d      	b.n	8004d22 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc f916 	bl	8000f38 <HAL_UART_RxCpltCallback>
}
 8004d0c:	e009      	b.n	8004d22 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	8b1b      	ldrh	r3, [r3, #24]
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0208 	orr.w	r2, r2, #8
 8004d1e:	b292      	uxth	r2, r2
 8004d20:	831a      	strh	r2, [r3, #24]
}
 8004d22:	bf00      	nop
 8004d24:	3770      	adds	r7, #112	@ 0x70
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40008000 	.word	0x40008000

08004d30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b09c      	sub	sp, #112	@ 0x70
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d48:	2b22      	cmp	r3, #34	@ 0x22
 8004d4a:	f040 80be 	bne.w	8004eca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004d54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004d62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d66:	4013      	ands	r3, r2
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d72:	1c9a      	adds	r2, r3, #2
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f040 80a3 	bne.w	8004ede <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004da8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dac:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004db8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004dbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e6      	bne.n	8004d98 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3308      	adds	r3, #8
 8004dd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3308      	adds	r3, #8
 8004de8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004dea:	643a      	str	r2, [r7, #64]	@ 0x40
 8004dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004df0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e5      	bne.n	8004dca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a34      	ldr	r2, [pc, #208]	@ (8004ee8 <UART_RxISR_16BIT+0x1b8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d01f      	beq.n	8004e5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d018      	beq.n	8004e5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e4a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e6      	bne.n	8004e2a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d12e      	bne.n	8004ec2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	e853 3f00 	ldrex	r3, [r3]
 8004e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f023 0310 	bic.w	r3, r3, #16
 8004e7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	6979      	ldr	r1, [r7, #20]
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	e841 2300 	strex	r3, r2, [r1]
 8004e94:	613b      	str	r3, [r7, #16]
   return(result);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e6      	bne.n	8004e6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f003 0310 	and.w	r3, r3, #16
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d103      	bne.n	8004eb2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2210      	movs	r2, #16
 8004eb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff f87a 	bl	8003fb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ec0:	e00d      	b.n	8004ede <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fc f838 	bl	8000f38 <HAL_UART_RxCpltCallback>
}
 8004ec8:	e009      	b.n	8004ede <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	8b1b      	ldrh	r3, [r3, #24]
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0208 	orr.w	r2, r2, #8
 8004eda:	b292      	uxth	r2, r2
 8004edc:	831a      	strh	r2, [r3, #24]
}
 8004ede:	bf00      	nop
 8004ee0:	3770      	adds	r7, #112	@ 0x70
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40008000 	.word	0x40008000

08004eec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <__cvt>:
 8004f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	ec57 6b10 	vmov	r6, r7, d0
 8004f08:	2f00      	cmp	r7, #0
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	463b      	mov	r3, r7
 8004f10:	bfbb      	ittet	lt
 8004f12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f16:	461f      	movlt	r7, r3
 8004f18:	2300      	movge	r3, #0
 8004f1a:	232d      	movlt	r3, #45	@ 0x2d
 8004f1c:	700b      	strb	r3, [r1, #0]
 8004f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f24:	4691      	mov	r9, r2
 8004f26:	f023 0820 	bic.w	r8, r3, #32
 8004f2a:	bfbc      	itt	lt
 8004f2c:	4632      	movlt	r2, r6
 8004f2e:	4616      	movlt	r6, r2
 8004f30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f34:	d005      	beq.n	8004f42 <__cvt+0x42>
 8004f36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f3a:	d100      	bne.n	8004f3e <__cvt+0x3e>
 8004f3c:	3401      	adds	r4, #1
 8004f3e:	2102      	movs	r1, #2
 8004f40:	e000      	b.n	8004f44 <__cvt+0x44>
 8004f42:	2103      	movs	r1, #3
 8004f44:	ab03      	add	r3, sp, #12
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	ab02      	add	r3, sp, #8
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	ec47 6b10 	vmov	d0, r6, r7
 8004f50:	4653      	mov	r3, sl
 8004f52:	4622      	mov	r2, r4
 8004f54:	f000 ff2c 	bl	8005db0 <_dtoa_r>
 8004f58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f5c:	4605      	mov	r5, r0
 8004f5e:	d119      	bne.n	8004f94 <__cvt+0x94>
 8004f60:	f019 0f01 	tst.w	r9, #1
 8004f64:	d00e      	beq.n	8004f84 <__cvt+0x84>
 8004f66:	eb00 0904 	add.w	r9, r0, r4
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4630      	mov	r0, r6
 8004f70:	4639      	mov	r1, r7
 8004f72:	f7fb fda9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f76:	b108      	cbz	r0, 8004f7c <__cvt+0x7c>
 8004f78:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f7c:	2230      	movs	r2, #48	@ 0x30
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	454b      	cmp	r3, r9
 8004f82:	d31e      	bcc.n	8004fc2 <__cvt+0xc2>
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f88:	1b5b      	subs	r3, r3, r5
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	b004      	add	sp, #16
 8004f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f98:	eb00 0904 	add.w	r9, r0, r4
 8004f9c:	d1e5      	bne.n	8004f6a <__cvt+0x6a>
 8004f9e:	7803      	ldrb	r3, [r0, #0]
 8004fa0:	2b30      	cmp	r3, #48	@ 0x30
 8004fa2:	d10a      	bne.n	8004fba <__cvt+0xba>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	4630      	mov	r0, r6
 8004faa:	4639      	mov	r1, r7
 8004fac:	f7fb fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fb0:	b918      	cbnz	r0, 8004fba <__cvt+0xba>
 8004fb2:	f1c4 0401 	rsb	r4, r4, #1
 8004fb6:	f8ca 4000 	str.w	r4, [sl]
 8004fba:	f8da 3000 	ldr.w	r3, [sl]
 8004fbe:	4499      	add	r9, r3
 8004fc0:	e7d3      	b.n	8004f6a <__cvt+0x6a>
 8004fc2:	1c59      	adds	r1, r3, #1
 8004fc4:	9103      	str	r1, [sp, #12]
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	e7d9      	b.n	8004f7e <__cvt+0x7e>

08004fca <__exponent>:
 8004fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	bfba      	itte	lt
 8004fd0:	4249      	neglt	r1, r1
 8004fd2:	232d      	movlt	r3, #45	@ 0x2d
 8004fd4:	232b      	movge	r3, #43	@ 0x2b
 8004fd6:	2909      	cmp	r1, #9
 8004fd8:	7002      	strb	r2, [r0, #0]
 8004fda:	7043      	strb	r3, [r0, #1]
 8004fdc:	dd29      	ble.n	8005032 <__exponent+0x68>
 8004fde:	f10d 0307 	add.w	r3, sp, #7
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	270a      	movs	r7, #10
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004fec:	fb07 1416 	mls	r4, r7, r6, r1
 8004ff0:	3430      	adds	r4, #48	@ 0x30
 8004ff2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	2c63      	cmp	r4, #99	@ 0x63
 8004ffa:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ffe:	4631      	mov	r1, r6
 8005000:	dcf1      	bgt.n	8004fe6 <__exponent+0x1c>
 8005002:	3130      	adds	r1, #48	@ 0x30
 8005004:	1e94      	subs	r4, r2, #2
 8005006:	f803 1c01 	strb.w	r1, [r3, #-1]
 800500a:	1c41      	adds	r1, r0, #1
 800500c:	4623      	mov	r3, r4
 800500e:	42ab      	cmp	r3, r5
 8005010:	d30a      	bcc.n	8005028 <__exponent+0x5e>
 8005012:	f10d 0309 	add.w	r3, sp, #9
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	42ac      	cmp	r4, r5
 800501a:	bf88      	it	hi
 800501c:	2300      	movhi	r3, #0
 800501e:	3302      	adds	r3, #2
 8005020:	4403      	add	r3, r0
 8005022:	1a18      	subs	r0, r3, r0
 8005024:	b003      	add	sp, #12
 8005026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005028:	f813 6b01 	ldrb.w	r6, [r3], #1
 800502c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005030:	e7ed      	b.n	800500e <__exponent+0x44>
 8005032:	2330      	movs	r3, #48	@ 0x30
 8005034:	3130      	adds	r1, #48	@ 0x30
 8005036:	7083      	strb	r3, [r0, #2]
 8005038:	70c1      	strb	r1, [r0, #3]
 800503a:	1d03      	adds	r3, r0, #4
 800503c:	e7f1      	b.n	8005022 <__exponent+0x58>
	...

08005040 <_printf_float>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	b08d      	sub	sp, #52	@ 0x34
 8005046:	460c      	mov	r4, r1
 8005048:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800504c:	4616      	mov	r6, r2
 800504e:	461f      	mov	r7, r3
 8005050:	4605      	mov	r5, r0
 8005052:	f000 fdad 	bl	8005bb0 <_localeconv_r>
 8005056:	6803      	ldr	r3, [r0, #0]
 8005058:	9304      	str	r3, [sp, #16]
 800505a:	4618      	mov	r0, r3
 800505c:	f7fb f908 	bl	8000270 <strlen>
 8005060:	2300      	movs	r3, #0
 8005062:	930a      	str	r3, [sp, #40]	@ 0x28
 8005064:	f8d8 3000 	ldr.w	r3, [r8]
 8005068:	9005      	str	r0, [sp, #20]
 800506a:	3307      	adds	r3, #7
 800506c:	f023 0307 	bic.w	r3, r3, #7
 8005070:	f103 0208 	add.w	r2, r3, #8
 8005074:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005078:	f8d4 b000 	ldr.w	fp, [r4]
 800507c:	f8c8 2000 	str.w	r2, [r8]
 8005080:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005084:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005088:	9307      	str	r3, [sp, #28]
 800508a:	f8cd 8018 	str.w	r8, [sp, #24]
 800508e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005096:	4b9c      	ldr	r3, [pc, #624]	@ (8005308 <_printf_float+0x2c8>)
 8005098:	f04f 32ff 	mov.w	r2, #4294967295
 800509c:	f7fb fd46 	bl	8000b2c <__aeabi_dcmpun>
 80050a0:	bb70      	cbnz	r0, 8005100 <_printf_float+0xc0>
 80050a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050a6:	4b98      	ldr	r3, [pc, #608]	@ (8005308 <_printf_float+0x2c8>)
 80050a8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ac:	f7fb fd20 	bl	8000af0 <__aeabi_dcmple>
 80050b0:	bb30      	cbnz	r0, 8005100 <_printf_float+0xc0>
 80050b2:	2200      	movs	r2, #0
 80050b4:	2300      	movs	r3, #0
 80050b6:	4640      	mov	r0, r8
 80050b8:	4649      	mov	r1, r9
 80050ba:	f7fb fd0f 	bl	8000adc <__aeabi_dcmplt>
 80050be:	b110      	cbz	r0, 80050c6 <_printf_float+0x86>
 80050c0:	232d      	movs	r3, #45	@ 0x2d
 80050c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c6:	4a91      	ldr	r2, [pc, #580]	@ (800530c <_printf_float+0x2cc>)
 80050c8:	4b91      	ldr	r3, [pc, #580]	@ (8005310 <_printf_float+0x2d0>)
 80050ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050ce:	bf94      	ite	ls
 80050d0:	4690      	movls	r8, r2
 80050d2:	4698      	movhi	r8, r3
 80050d4:	2303      	movs	r3, #3
 80050d6:	6123      	str	r3, [r4, #16]
 80050d8:	f02b 0304 	bic.w	r3, fp, #4
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	f04f 0900 	mov.w	r9, #0
 80050e2:	9700      	str	r7, [sp, #0]
 80050e4:	4633      	mov	r3, r6
 80050e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80050e8:	4621      	mov	r1, r4
 80050ea:	4628      	mov	r0, r5
 80050ec:	f000 f9d2 	bl	8005494 <_printf_common>
 80050f0:	3001      	adds	r0, #1
 80050f2:	f040 808d 	bne.w	8005210 <_printf_float+0x1d0>
 80050f6:	f04f 30ff 	mov.w	r0, #4294967295
 80050fa:	b00d      	add	sp, #52	@ 0x34
 80050fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005100:	4642      	mov	r2, r8
 8005102:	464b      	mov	r3, r9
 8005104:	4640      	mov	r0, r8
 8005106:	4649      	mov	r1, r9
 8005108:	f7fb fd10 	bl	8000b2c <__aeabi_dcmpun>
 800510c:	b140      	cbz	r0, 8005120 <_printf_float+0xe0>
 800510e:	464b      	mov	r3, r9
 8005110:	2b00      	cmp	r3, #0
 8005112:	bfbc      	itt	lt
 8005114:	232d      	movlt	r3, #45	@ 0x2d
 8005116:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800511a:	4a7e      	ldr	r2, [pc, #504]	@ (8005314 <_printf_float+0x2d4>)
 800511c:	4b7e      	ldr	r3, [pc, #504]	@ (8005318 <_printf_float+0x2d8>)
 800511e:	e7d4      	b.n	80050ca <_printf_float+0x8a>
 8005120:	6863      	ldr	r3, [r4, #4]
 8005122:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005126:	9206      	str	r2, [sp, #24]
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	d13b      	bne.n	80051a4 <_printf_float+0x164>
 800512c:	2306      	movs	r3, #6
 800512e:	6063      	str	r3, [r4, #4]
 8005130:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005134:	2300      	movs	r3, #0
 8005136:	6022      	str	r2, [r4, #0]
 8005138:	9303      	str	r3, [sp, #12]
 800513a:	ab0a      	add	r3, sp, #40	@ 0x28
 800513c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005140:	ab09      	add	r3, sp, #36	@ 0x24
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	6861      	ldr	r1, [r4, #4]
 8005146:	ec49 8b10 	vmov	d0, r8, r9
 800514a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800514e:	4628      	mov	r0, r5
 8005150:	f7ff fed6 	bl	8004f00 <__cvt>
 8005154:	9b06      	ldr	r3, [sp, #24]
 8005156:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005158:	2b47      	cmp	r3, #71	@ 0x47
 800515a:	4680      	mov	r8, r0
 800515c:	d129      	bne.n	80051b2 <_printf_float+0x172>
 800515e:	1cc8      	adds	r0, r1, #3
 8005160:	db02      	blt.n	8005168 <_printf_float+0x128>
 8005162:	6863      	ldr	r3, [r4, #4]
 8005164:	4299      	cmp	r1, r3
 8005166:	dd41      	ble.n	80051ec <_printf_float+0x1ac>
 8005168:	f1aa 0a02 	sub.w	sl, sl, #2
 800516c:	fa5f fa8a 	uxtb.w	sl, sl
 8005170:	3901      	subs	r1, #1
 8005172:	4652      	mov	r2, sl
 8005174:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005178:	9109      	str	r1, [sp, #36]	@ 0x24
 800517a:	f7ff ff26 	bl	8004fca <__exponent>
 800517e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005180:	1813      	adds	r3, r2, r0
 8005182:	2a01      	cmp	r2, #1
 8005184:	4681      	mov	r9, r0
 8005186:	6123      	str	r3, [r4, #16]
 8005188:	dc02      	bgt.n	8005190 <_printf_float+0x150>
 800518a:	6822      	ldr	r2, [r4, #0]
 800518c:	07d2      	lsls	r2, r2, #31
 800518e:	d501      	bpl.n	8005194 <_printf_float+0x154>
 8005190:	3301      	adds	r3, #1
 8005192:	6123      	str	r3, [r4, #16]
 8005194:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0a2      	beq.n	80050e2 <_printf_float+0xa2>
 800519c:	232d      	movs	r3, #45	@ 0x2d
 800519e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051a2:	e79e      	b.n	80050e2 <_printf_float+0xa2>
 80051a4:	9a06      	ldr	r2, [sp, #24]
 80051a6:	2a47      	cmp	r2, #71	@ 0x47
 80051a8:	d1c2      	bne.n	8005130 <_printf_float+0xf0>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1c0      	bne.n	8005130 <_printf_float+0xf0>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e7bd      	b.n	800512e <_printf_float+0xee>
 80051b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051b6:	d9db      	bls.n	8005170 <_printf_float+0x130>
 80051b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051bc:	d118      	bne.n	80051f0 <_printf_float+0x1b0>
 80051be:	2900      	cmp	r1, #0
 80051c0:	6863      	ldr	r3, [r4, #4]
 80051c2:	dd0b      	ble.n	80051dc <_printf_float+0x19c>
 80051c4:	6121      	str	r1, [r4, #16]
 80051c6:	b913      	cbnz	r3, 80051ce <_printf_float+0x18e>
 80051c8:	6822      	ldr	r2, [r4, #0]
 80051ca:	07d0      	lsls	r0, r2, #31
 80051cc:	d502      	bpl.n	80051d4 <_printf_float+0x194>
 80051ce:	3301      	adds	r3, #1
 80051d0:	440b      	add	r3, r1
 80051d2:	6123      	str	r3, [r4, #16]
 80051d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051d6:	f04f 0900 	mov.w	r9, #0
 80051da:	e7db      	b.n	8005194 <_printf_float+0x154>
 80051dc:	b913      	cbnz	r3, 80051e4 <_printf_float+0x1a4>
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	07d2      	lsls	r2, r2, #31
 80051e2:	d501      	bpl.n	80051e8 <_printf_float+0x1a8>
 80051e4:	3302      	adds	r3, #2
 80051e6:	e7f4      	b.n	80051d2 <_printf_float+0x192>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e7f2      	b.n	80051d2 <_printf_float+0x192>
 80051ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80051f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051f2:	4299      	cmp	r1, r3
 80051f4:	db05      	blt.n	8005202 <_printf_float+0x1c2>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	6121      	str	r1, [r4, #16]
 80051fa:	07d8      	lsls	r0, r3, #31
 80051fc:	d5ea      	bpl.n	80051d4 <_printf_float+0x194>
 80051fe:	1c4b      	adds	r3, r1, #1
 8005200:	e7e7      	b.n	80051d2 <_printf_float+0x192>
 8005202:	2900      	cmp	r1, #0
 8005204:	bfd4      	ite	le
 8005206:	f1c1 0202 	rsble	r2, r1, #2
 800520a:	2201      	movgt	r2, #1
 800520c:	4413      	add	r3, r2
 800520e:	e7e0      	b.n	80051d2 <_printf_float+0x192>
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	055a      	lsls	r2, r3, #21
 8005214:	d407      	bmi.n	8005226 <_printf_float+0x1e6>
 8005216:	6923      	ldr	r3, [r4, #16]
 8005218:	4642      	mov	r2, r8
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	d12b      	bne.n	800527c <_printf_float+0x23c>
 8005224:	e767      	b.n	80050f6 <_printf_float+0xb6>
 8005226:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800522a:	f240 80dd 	bls.w	80053e8 <_printf_float+0x3a8>
 800522e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005232:	2200      	movs	r2, #0
 8005234:	2300      	movs	r3, #0
 8005236:	f7fb fc47 	bl	8000ac8 <__aeabi_dcmpeq>
 800523a:	2800      	cmp	r0, #0
 800523c:	d033      	beq.n	80052a6 <_printf_float+0x266>
 800523e:	4a37      	ldr	r2, [pc, #220]	@ (800531c <_printf_float+0x2dc>)
 8005240:	2301      	movs	r3, #1
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	f43f af54 	beq.w	80050f6 <_printf_float+0xb6>
 800524e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005252:	4543      	cmp	r3, r8
 8005254:	db02      	blt.n	800525c <_printf_float+0x21c>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	07d8      	lsls	r0, r3, #31
 800525a:	d50f      	bpl.n	800527c <_printf_float+0x23c>
 800525c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005260:	4631      	mov	r1, r6
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	f43f af45 	beq.w	80050f6 <_printf_float+0xb6>
 800526c:	f04f 0900 	mov.w	r9, #0
 8005270:	f108 38ff 	add.w	r8, r8, #4294967295
 8005274:	f104 0a1a 	add.w	sl, r4, #26
 8005278:	45c8      	cmp	r8, r9
 800527a:	dc09      	bgt.n	8005290 <_printf_float+0x250>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	079b      	lsls	r3, r3, #30
 8005280:	f100 8103 	bmi.w	800548a <_printf_float+0x44a>
 8005284:	68e0      	ldr	r0, [r4, #12]
 8005286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005288:	4298      	cmp	r0, r3
 800528a:	bfb8      	it	lt
 800528c:	4618      	movlt	r0, r3
 800528e:	e734      	b.n	80050fa <_printf_float+0xba>
 8005290:	2301      	movs	r3, #1
 8005292:	4652      	mov	r2, sl
 8005294:	4631      	mov	r1, r6
 8005296:	4628      	mov	r0, r5
 8005298:	47b8      	blx	r7
 800529a:	3001      	adds	r0, #1
 800529c:	f43f af2b 	beq.w	80050f6 <_printf_float+0xb6>
 80052a0:	f109 0901 	add.w	r9, r9, #1
 80052a4:	e7e8      	b.n	8005278 <_printf_float+0x238>
 80052a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	dc39      	bgt.n	8005320 <_printf_float+0x2e0>
 80052ac:	4a1b      	ldr	r2, [pc, #108]	@ (800531c <_printf_float+0x2dc>)
 80052ae:	2301      	movs	r3, #1
 80052b0:	4631      	mov	r1, r6
 80052b2:	4628      	mov	r0, r5
 80052b4:	47b8      	blx	r7
 80052b6:	3001      	adds	r0, #1
 80052b8:	f43f af1d 	beq.w	80050f6 <_printf_float+0xb6>
 80052bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80052c0:	ea59 0303 	orrs.w	r3, r9, r3
 80052c4:	d102      	bne.n	80052cc <_printf_float+0x28c>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	07d9      	lsls	r1, r3, #31
 80052ca:	d5d7      	bpl.n	800527c <_printf_float+0x23c>
 80052cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052d0:	4631      	mov	r1, r6
 80052d2:	4628      	mov	r0, r5
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	f43f af0d 	beq.w	80050f6 <_printf_float+0xb6>
 80052dc:	f04f 0a00 	mov.w	sl, #0
 80052e0:	f104 0b1a 	add.w	fp, r4, #26
 80052e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e6:	425b      	negs	r3, r3
 80052e8:	4553      	cmp	r3, sl
 80052ea:	dc01      	bgt.n	80052f0 <_printf_float+0x2b0>
 80052ec:	464b      	mov	r3, r9
 80052ee:	e793      	b.n	8005218 <_printf_float+0x1d8>
 80052f0:	2301      	movs	r3, #1
 80052f2:	465a      	mov	r2, fp
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	f43f aefb 	beq.w	80050f6 <_printf_float+0xb6>
 8005300:	f10a 0a01 	add.w	sl, sl, #1
 8005304:	e7ee      	b.n	80052e4 <_printf_float+0x2a4>
 8005306:	bf00      	nop
 8005308:	7fefffff 	.word	0x7fefffff
 800530c:	08007920 	.word	0x08007920
 8005310:	08007924 	.word	0x08007924
 8005314:	08007928 	.word	0x08007928
 8005318:	0800792c 	.word	0x0800792c
 800531c:	08007930 	.word	0x08007930
 8005320:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005322:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005326:	4553      	cmp	r3, sl
 8005328:	bfa8      	it	ge
 800532a:	4653      	movge	r3, sl
 800532c:	2b00      	cmp	r3, #0
 800532e:	4699      	mov	r9, r3
 8005330:	dc36      	bgt.n	80053a0 <_printf_float+0x360>
 8005332:	f04f 0b00 	mov.w	fp, #0
 8005336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800533a:	f104 021a 	add.w	r2, r4, #26
 800533e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005340:	9306      	str	r3, [sp, #24]
 8005342:	eba3 0309 	sub.w	r3, r3, r9
 8005346:	455b      	cmp	r3, fp
 8005348:	dc31      	bgt.n	80053ae <_printf_float+0x36e>
 800534a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800534c:	459a      	cmp	sl, r3
 800534e:	dc3a      	bgt.n	80053c6 <_printf_float+0x386>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	07da      	lsls	r2, r3, #31
 8005354:	d437      	bmi.n	80053c6 <_printf_float+0x386>
 8005356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005358:	ebaa 0903 	sub.w	r9, sl, r3
 800535c:	9b06      	ldr	r3, [sp, #24]
 800535e:	ebaa 0303 	sub.w	r3, sl, r3
 8005362:	4599      	cmp	r9, r3
 8005364:	bfa8      	it	ge
 8005366:	4699      	movge	r9, r3
 8005368:	f1b9 0f00 	cmp.w	r9, #0
 800536c:	dc33      	bgt.n	80053d6 <_printf_float+0x396>
 800536e:	f04f 0800 	mov.w	r8, #0
 8005372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005376:	f104 0b1a 	add.w	fp, r4, #26
 800537a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800537c:	ebaa 0303 	sub.w	r3, sl, r3
 8005380:	eba3 0309 	sub.w	r3, r3, r9
 8005384:	4543      	cmp	r3, r8
 8005386:	f77f af79 	ble.w	800527c <_printf_float+0x23c>
 800538a:	2301      	movs	r3, #1
 800538c:	465a      	mov	r2, fp
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	47b8      	blx	r7
 8005394:	3001      	adds	r0, #1
 8005396:	f43f aeae 	beq.w	80050f6 <_printf_float+0xb6>
 800539a:	f108 0801 	add.w	r8, r8, #1
 800539e:	e7ec      	b.n	800537a <_printf_float+0x33a>
 80053a0:	4642      	mov	r2, r8
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	d1c2      	bne.n	8005332 <_printf_float+0x2f2>
 80053ac:	e6a3      	b.n	80050f6 <_printf_float+0xb6>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4631      	mov	r1, r6
 80053b2:	4628      	mov	r0, r5
 80053b4:	9206      	str	r2, [sp, #24]
 80053b6:	47b8      	blx	r7
 80053b8:	3001      	adds	r0, #1
 80053ba:	f43f ae9c 	beq.w	80050f6 <_printf_float+0xb6>
 80053be:	9a06      	ldr	r2, [sp, #24]
 80053c0:	f10b 0b01 	add.w	fp, fp, #1
 80053c4:	e7bb      	b.n	800533e <_printf_float+0x2fe>
 80053c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	d1c0      	bne.n	8005356 <_printf_float+0x316>
 80053d4:	e68f      	b.n	80050f6 <_printf_float+0xb6>
 80053d6:	9a06      	ldr	r2, [sp, #24]
 80053d8:	464b      	mov	r3, r9
 80053da:	4442      	add	r2, r8
 80053dc:	4631      	mov	r1, r6
 80053de:	4628      	mov	r0, r5
 80053e0:	47b8      	blx	r7
 80053e2:	3001      	adds	r0, #1
 80053e4:	d1c3      	bne.n	800536e <_printf_float+0x32e>
 80053e6:	e686      	b.n	80050f6 <_printf_float+0xb6>
 80053e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80053ec:	f1ba 0f01 	cmp.w	sl, #1
 80053f0:	dc01      	bgt.n	80053f6 <_printf_float+0x3b6>
 80053f2:	07db      	lsls	r3, r3, #31
 80053f4:	d536      	bpl.n	8005464 <_printf_float+0x424>
 80053f6:	2301      	movs	r3, #1
 80053f8:	4642      	mov	r2, r8
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b8      	blx	r7
 8005400:	3001      	adds	r0, #1
 8005402:	f43f ae78 	beq.w	80050f6 <_printf_float+0xb6>
 8005406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	47b8      	blx	r7
 8005410:	3001      	adds	r0, #1
 8005412:	f43f ae70 	beq.w	80050f6 <_printf_float+0xb6>
 8005416:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800541a:	2200      	movs	r2, #0
 800541c:	2300      	movs	r3, #0
 800541e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005422:	f7fb fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 8005426:	b9c0      	cbnz	r0, 800545a <_printf_float+0x41a>
 8005428:	4653      	mov	r3, sl
 800542a:	f108 0201 	add.w	r2, r8, #1
 800542e:	4631      	mov	r1, r6
 8005430:	4628      	mov	r0, r5
 8005432:	47b8      	blx	r7
 8005434:	3001      	adds	r0, #1
 8005436:	d10c      	bne.n	8005452 <_printf_float+0x412>
 8005438:	e65d      	b.n	80050f6 <_printf_float+0xb6>
 800543a:	2301      	movs	r3, #1
 800543c:	465a      	mov	r2, fp
 800543e:	4631      	mov	r1, r6
 8005440:	4628      	mov	r0, r5
 8005442:	47b8      	blx	r7
 8005444:	3001      	adds	r0, #1
 8005446:	f43f ae56 	beq.w	80050f6 <_printf_float+0xb6>
 800544a:	f108 0801 	add.w	r8, r8, #1
 800544e:	45d0      	cmp	r8, sl
 8005450:	dbf3      	blt.n	800543a <_printf_float+0x3fa>
 8005452:	464b      	mov	r3, r9
 8005454:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005458:	e6df      	b.n	800521a <_printf_float+0x1da>
 800545a:	f04f 0800 	mov.w	r8, #0
 800545e:	f104 0b1a 	add.w	fp, r4, #26
 8005462:	e7f4      	b.n	800544e <_printf_float+0x40e>
 8005464:	2301      	movs	r3, #1
 8005466:	4642      	mov	r2, r8
 8005468:	e7e1      	b.n	800542e <_printf_float+0x3ee>
 800546a:	2301      	movs	r3, #1
 800546c:	464a      	mov	r2, r9
 800546e:	4631      	mov	r1, r6
 8005470:	4628      	mov	r0, r5
 8005472:	47b8      	blx	r7
 8005474:	3001      	adds	r0, #1
 8005476:	f43f ae3e 	beq.w	80050f6 <_printf_float+0xb6>
 800547a:	f108 0801 	add.w	r8, r8, #1
 800547e:	68e3      	ldr	r3, [r4, #12]
 8005480:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005482:	1a5b      	subs	r3, r3, r1
 8005484:	4543      	cmp	r3, r8
 8005486:	dcf0      	bgt.n	800546a <_printf_float+0x42a>
 8005488:	e6fc      	b.n	8005284 <_printf_float+0x244>
 800548a:	f04f 0800 	mov.w	r8, #0
 800548e:	f104 0919 	add.w	r9, r4, #25
 8005492:	e7f4      	b.n	800547e <_printf_float+0x43e>

08005494 <_printf_common>:
 8005494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005498:	4616      	mov	r6, r2
 800549a:	4698      	mov	r8, r3
 800549c:	688a      	ldr	r2, [r1, #8]
 800549e:	690b      	ldr	r3, [r1, #16]
 80054a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054a4:	4293      	cmp	r3, r2
 80054a6:	bfb8      	it	lt
 80054a8:	4613      	movlt	r3, r2
 80054aa:	6033      	str	r3, [r6, #0]
 80054ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054b0:	4607      	mov	r7, r0
 80054b2:	460c      	mov	r4, r1
 80054b4:	b10a      	cbz	r2, 80054ba <_printf_common+0x26>
 80054b6:	3301      	adds	r3, #1
 80054b8:	6033      	str	r3, [r6, #0]
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	0699      	lsls	r1, r3, #26
 80054be:	bf42      	ittt	mi
 80054c0:	6833      	ldrmi	r3, [r6, #0]
 80054c2:	3302      	addmi	r3, #2
 80054c4:	6033      	strmi	r3, [r6, #0]
 80054c6:	6825      	ldr	r5, [r4, #0]
 80054c8:	f015 0506 	ands.w	r5, r5, #6
 80054cc:	d106      	bne.n	80054dc <_printf_common+0x48>
 80054ce:	f104 0a19 	add.w	sl, r4, #25
 80054d2:	68e3      	ldr	r3, [r4, #12]
 80054d4:	6832      	ldr	r2, [r6, #0]
 80054d6:	1a9b      	subs	r3, r3, r2
 80054d8:	42ab      	cmp	r3, r5
 80054da:	dc26      	bgt.n	800552a <_printf_common+0x96>
 80054dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	3b00      	subs	r3, #0
 80054e4:	bf18      	it	ne
 80054e6:	2301      	movne	r3, #1
 80054e8:	0692      	lsls	r2, r2, #26
 80054ea:	d42b      	bmi.n	8005544 <_printf_common+0xb0>
 80054ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054f0:	4641      	mov	r1, r8
 80054f2:	4638      	mov	r0, r7
 80054f4:	47c8      	blx	r9
 80054f6:	3001      	adds	r0, #1
 80054f8:	d01e      	beq.n	8005538 <_printf_common+0xa4>
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	6922      	ldr	r2, [r4, #16]
 80054fe:	f003 0306 	and.w	r3, r3, #6
 8005502:	2b04      	cmp	r3, #4
 8005504:	bf02      	ittt	eq
 8005506:	68e5      	ldreq	r5, [r4, #12]
 8005508:	6833      	ldreq	r3, [r6, #0]
 800550a:	1aed      	subeq	r5, r5, r3
 800550c:	68a3      	ldr	r3, [r4, #8]
 800550e:	bf0c      	ite	eq
 8005510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005514:	2500      	movne	r5, #0
 8005516:	4293      	cmp	r3, r2
 8005518:	bfc4      	itt	gt
 800551a:	1a9b      	subgt	r3, r3, r2
 800551c:	18ed      	addgt	r5, r5, r3
 800551e:	2600      	movs	r6, #0
 8005520:	341a      	adds	r4, #26
 8005522:	42b5      	cmp	r5, r6
 8005524:	d11a      	bne.n	800555c <_printf_common+0xc8>
 8005526:	2000      	movs	r0, #0
 8005528:	e008      	b.n	800553c <_printf_common+0xa8>
 800552a:	2301      	movs	r3, #1
 800552c:	4652      	mov	r2, sl
 800552e:	4641      	mov	r1, r8
 8005530:	4638      	mov	r0, r7
 8005532:	47c8      	blx	r9
 8005534:	3001      	adds	r0, #1
 8005536:	d103      	bne.n	8005540 <_printf_common+0xac>
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005540:	3501      	adds	r5, #1
 8005542:	e7c6      	b.n	80054d2 <_printf_common+0x3e>
 8005544:	18e1      	adds	r1, r4, r3
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	2030      	movs	r0, #48	@ 0x30
 800554a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800554e:	4422      	add	r2, r4
 8005550:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005554:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005558:	3302      	adds	r3, #2
 800555a:	e7c7      	b.n	80054ec <_printf_common+0x58>
 800555c:	2301      	movs	r3, #1
 800555e:	4622      	mov	r2, r4
 8005560:	4641      	mov	r1, r8
 8005562:	4638      	mov	r0, r7
 8005564:	47c8      	blx	r9
 8005566:	3001      	adds	r0, #1
 8005568:	d0e6      	beq.n	8005538 <_printf_common+0xa4>
 800556a:	3601      	adds	r6, #1
 800556c:	e7d9      	b.n	8005522 <_printf_common+0x8e>
	...

08005570 <_printf_i>:
 8005570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005574:	7e0f      	ldrb	r7, [r1, #24]
 8005576:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005578:	2f78      	cmp	r7, #120	@ 0x78
 800557a:	4691      	mov	r9, r2
 800557c:	4680      	mov	r8, r0
 800557e:	460c      	mov	r4, r1
 8005580:	469a      	mov	sl, r3
 8005582:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005586:	d807      	bhi.n	8005598 <_printf_i+0x28>
 8005588:	2f62      	cmp	r7, #98	@ 0x62
 800558a:	d80a      	bhi.n	80055a2 <_printf_i+0x32>
 800558c:	2f00      	cmp	r7, #0
 800558e:	f000 80d2 	beq.w	8005736 <_printf_i+0x1c6>
 8005592:	2f58      	cmp	r7, #88	@ 0x58
 8005594:	f000 80b9 	beq.w	800570a <_printf_i+0x19a>
 8005598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800559c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055a0:	e03a      	b.n	8005618 <_printf_i+0xa8>
 80055a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055a6:	2b15      	cmp	r3, #21
 80055a8:	d8f6      	bhi.n	8005598 <_printf_i+0x28>
 80055aa:	a101      	add	r1, pc, #4	@ (adr r1, 80055b0 <_printf_i+0x40>)
 80055ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055b0:	08005609 	.word	0x08005609
 80055b4:	0800561d 	.word	0x0800561d
 80055b8:	08005599 	.word	0x08005599
 80055bc:	08005599 	.word	0x08005599
 80055c0:	08005599 	.word	0x08005599
 80055c4:	08005599 	.word	0x08005599
 80055c8:	0800561d 	.word	0x0800561d
 80055cc:	08005599 	.word	0x08005599
 80055d0:	08005599 	.word	0x08005599
 80055d4:	08005599 	.word	0x08005599
 80055d8:	08005599 	.word	0x08005599
 80055dc:	0800571d 	.word	0x0800571d
 80055e0:	08005647 	.word	0x08005647
 80055e4:	080056d7 	.word	0x080056d7
 80055e8:	08005599 	.word	0x08005599
 80055ec:	08005599 	.word	0x08005599
 80055f0:	0800573f 	.word	0x0800573f
 80055f4:	08005599 	.word	0x08005599
 80055f8:	08005647 	.word	0x08005647
 80055fc:	08005599 	.word	0x08005599
 8005600:	08005599 	.word	0x08005599
 8005604:	080056df 	.word	0x080056df
 8005608:	6833      	ldr	r3, [r6, #0]
 800560a:	1d1a      	adds	r2, r3, #4
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6032      	str	r2, [r6, #0]
 8005610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005614:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005618:	2301      	movs	r3, #1
 800561a:	e09d      	b.n	8005758 <_printf_i+0x1e8>
 800561c:	6833      	ldr	r3, [r6, #0]
 800561e:	6820      	ldr	r0, [r4, #0]
 8005620:	1d19      	adds	r1, r3, #4
 8005622:	6031      	str	r1, [r6, #0]
 8005624:	0606      	lsls	r6, r0, #24
 8005626:	d501      	bpl.n	800562c <_printf_i+0xbc>
 8005628:	681d      	ldr	r5, [r3, #0]
 800562a:	e003      	b.n	8005634 <_printf_i+0xc4>
 800562c:	0645      	lsls	r5, r0, #25
 800562e:	d5fb      	bpl.n	8005628 <_printf_i+0xb8>
 8005630:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005634:	2d00      	cmp	r5, #0
 8005636:	da03      	bge.n	8005640 <_printf_i+0xd0>
 8005638:	232d      	movs	r3, #45	@ 0x2d
 800563a:	426d      	negs	r5, r5
 800563c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005640:	4859      	ldr	r0, [pc, #356]	@ (80057a8 <_printf_i+0x238>)
 8005642:	230a      	movs	r3, #10
 8005644:	e011      	b.n	800566a <_printf_i+0xfa>
 8005646:	6821      	ldr	r1, [r4, #0]
 8005648:	6833      	ldr	r3, [r6, #0]
 800564a:	0608      	lsls	r0, r1, #24
 800564c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005650:	d402      	bmi.n	8005658 <_printf_i+0xe8>
 8005652:	0649      	lsls	r1, r1, #25
 8005654:	bf48      	it	mi
 8005656:	b2ad      	uxthmi	r5, r5
 8005658:	2f6f      	cmp	r7, #111	@ 0x6f
 800565a:	4853      	ldr	r0, [pc, #332]	@ (80057a8 <_printf_i+0x238>)
 800565c:	6033      	str	r3, [r6, #0]
 800565e:	bf14      	ite	ne
 8005660:	230a      	movne	r3, #10
 8005662:	2308      	moveq	r3, #8
 8005664:	2100      	movs	r1, #0
 8005666:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800566a:	6866      	ldr	r6, [r4, #4]
 800566c:	60a6      	str	r6, [r4, #8]
 800566e:	2e00      	cmp	r6, #0
 8005670:	bfa2      	ittt	ge
 8005672:	6821      	ldrge	r1, [r4, #0]
 8005674:	f021 0104 	bicge.w	r1, r1, #4
 8005678:	6021      	strge	r1, [r4, #0]
 800567a:	b90d      	cbnz	r5, 8005680 <_printf_i+0x110>
 800567c:	2e00      	cmp	r6, #0
 800567e:	d04b      	beq.n	8005718 <_printf_i+0x1a8>
 8005680:	4616      	mov	r6, r2
 8005682:	fbb5 f1f3 	udiv	r1, r5, r3
 8005686:	fb03 5711 	mls	r7, r3, r1, r5
 800568a:	5dc7      	ldrb	r7, [r0, r7]
 800568c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005690:	462f      	mov	r7, r5
 8005692:	42bb      	cmp	r3, r7
 8005694:	460d      	mov	r5, r1
 8005696:	d9f4      	bls.n	8005682 <_printf_i+0x112>
 8005698:	2b08      	cmp	r3, #8
 800569a:	d10b      	bne.n	80056b4 <_printf_i+0x144>
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	07df      	lsls	r7, r3, #31
 80056a0:	d508      	bpl.n	80056b4 <_printf_i+0x144>
 80056a2:	6923      	ldr	r3, [r4, #16]
 80056a4:	6861      	ldr	r1, [r4, #4]
 80056a6:	4299      	cmp	r1, r3
 80056a8:	bfde      	ittt	le
 80056aa:	2330      	movle	r3, #48	@ 0x30
 80056ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056b4:	1b92      	subs	r2, r2, r6
 80056b6:	6122      	str	r2, [r4, #16]
 80056b8:	f8cd a000 	str.w	sl, [sp]
 80056bc:	464b      	mov	r3, r9
 80056be:	aa03      	add	r2, sp, #12
 80056c0:	4621      	mov	r1, r4
 80056c2:	4640      	mov	r0, r8
 80056c4:	f7ff fee6 	bl	8005494 <_printf_common>
 80056c8:	3001      	adds	r0, #1
 80056ca:	d14a      	bne.n	8005762 <_printf_i+0x1f2>
 80056cc:	f04f 30ff 	mov.w	r0, #4294967295
 80056d0:	b004      	add	sp, #16
 80056d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	f043 0320 	orr.w	r3, r3, #32
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	4833      	ldr	r0, [pc, #204]	@ (80057ac <_printf_i+0x23c>)
 80056e0:	2778      	movs	r7, #120	@ 0x78
 80056e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	6831      	ldr	r1, [r6, #0]
 80056ea:	061f      	lsls	r7, r3, #24
 80056ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80056f0:	d402      	bmi.n	80056f8 <_printf_i+0x188>
 80056f2:	065f      	lsls	r7, r3, #25
 80056f4:	bf48      	it	mi
 80056f6:	b2ad      	uxthmi	r5, r5
 80056f8:	6031      	str	r1, [r6, #0]
 80056fa:	07d9      	lsls	r1, r3, #31
 80056fc:	bf44      	itt	mi
 80056fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005702:	6023      	strmi	r3, [r4, #0]
 8005704:	b11d      	cbz	r5, 800570e <_printf_i+0x19e>
 8005706:	2310      	movs	r3, #16
 8005708:	e7ac      	b.n	8005664 <_printf_i+0xf4>
 800570a:	4827      	ldr	r0, [pc, #156]	@ (80057a8 <_printf_i+0x238>)
 800570c:	e7e9      	b.n	80056e2 <_printf_i+0x172>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	f023 0320 	bic.w	r3, r3, #32
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	e7f6      	b.n	8005706 <_printf_i+0x196>
 8005718:	4616      	mov	r6, r2
 800571a:	e7bd      	b.n	8005698 <_printf_i+0x128>
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	6825      	ldr	r5, [r4, #0]
 8005720:	6961      	ldr	r1, [r4, #20]
 8005722:	1d18      	adds	r0, r3, #4
 8005724:	6030      	str	r0, [r6, #0]
 8005726:	062e      	lsls	r6, r5, #24
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	d501      	bpl.n	8005730 <_printf_i+0x1c0>
 800572c:	6019      	str	r1, [r3, #0]
 800572e:	e002      	b.n	8005736 <_printf_i+0x1c6>
 8005730:	0668      	lsls	r0, r5, #25
 8005732:	d5fb      	bpl.n	800572c <_printf_i+0x1bc>
 8005734:	8019      	strh	r1, [r3, #0]
 8005736:	2300      	movs	r3, #0
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	4616      	mov	r6, r2
 800573c:	e7bc      	b.n	80056b8 <_printf_i+0x148>
 800573e:	6833      	ldr	r3, [r6, #0]
 8005740:	1d1a      	adds	r2, r3, #4
 8005742:	6032      	str	r2, [r6, #0]
 8005744:	681e      	ldr	r6, [r3, #0]
 8005746:	6862      	ldr	r2, [r4, #4]
 8005748:	2100      	movs	r1, #0
 800574a:	4630      	mov	r0, r6
 800574c:	f7fa fd40 	bl	80001d0 <memchr>
 8005750:	b108      	cbz	r0, 8005756 <_printf_i+0x1e6>
 8005752:	1b80      	subs	r0, r0, r6
 8005754:	6060      	str	r0, [r4, #4]
 8005756:	6863      	ldr	r3, [r4, #4]
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	2300      	movs	r3, #0
 800575c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005760:	e7aa      	b.n	80056b8 <_printf_i+0x148>
 8005762:	6923      	ldr	r3, [r4, #16]
 8005764:	4632      	mov	r2, r6
 8005766:	4649      	mov	r1, r9
 8005768:	4640      	mov	r0, r8
 800576a:	47d0      	blx	sl
 800576c:	3001      	adds	r0, #1
 800576e:	d0ad      	beq.n	80056cc <_printf_i+0x15c>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	079b      	lsls	r3, r3, #30
 8005774:	d413      	bmi.n	800579e <_printf_i+0x22e>
 8005776:	68e0      	ldr	r0, [r4, #12]
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	4298      	cmp	r0, r3
 800577c:	bfb8      	it	lt
 800577e:	4618      	movlt	r0, r3
 8005780:	e7a6      	b.n	80056d0 <_printf_i+0x160>
 8005782:	2301      	movs	r3, #1
 8005784:	4632      	mov	r2, r6
 8005786:	4649      	mov	r1, r9
 8005788:	4640      	mov	r0, r8
 800578a:	47d0      	blx	sl
 800578c:	3001      	adds	r0, #1
 800578e:	d09d      	beq.n	80056cc <_printf_i+0x15c>
 8005790:	3501      	adds	r5, #1
 8005792:	68e3      	ldr	r3, [r4, #12]
 8005794:	9903      	ldr	r1, [sp, #12]
 8005796:	1a5b      	subs	r3, r3, r1
 8005798:	42ab      	cmp	r3, r5
 800579a:	dcf2      	bgt.n	8005782 <_printf_i+0x212>
 800579c:	e7eb      	b.n	8005776 <_printf_i+0x206>
 800579e:	2500      	movs	r5, #0
 80057a0:	f104 0619 	add.w	r6, r4, #25
 80057a4:	e7f5      	b.n	8005792 <_printf_i+0x222>
 80057a6:	bf00      	nop
 80057a8:	08007932 	.word	0x08007932
 80057ac:	08007943 	.word	0x08007943

080057b0 <std>:
 80057b0:	2300      	movs	r3, #0
 80057b2:	b510      	push	{r4, lr}
 80057b4:	4604      	mov	r4, r0
 80057b6:	e9c0 3300 	strd	r3, r3, [r0]
 80057ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057be:	6083      	str	r3, [r0, #8]
 80057c0:	8181      	strh	r1, [r0, #12]
 80057c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80057c4:	81c2      	strh	r2, [r0, #14]
 80057c6:	6183      	str	r3, [r0, #24]
 80057c8:	4619      	mov	r1, r3
 80057ca:	2208      	movs	r2, #8
 80057cc:	305c      	adds	r0, #92	@ 0x5c
 80057ce:	f000 f9e7 	bl	8005ba0 <memset>
 80057d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <std+0x58>)
 80057d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <std+0x5c>)
 80057d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <std+0x60>)
 80057dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057de:	4b0d      	ldr	r3, [pc, #52]	@ (8005814 <std+0x64>)
 80057e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80057e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005818 <std+0x68>)
 80057e4:	6224      	str	r4, [r4, #32]
 80057e6:	429c      	cmp	r4, r3
 80057e8:	d006      	beq.n	80057f8 <std+0x48>
 80057ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057ee:	4294      	cmp	r4, r2
 80057f0:	d002      	beq.n	80057f8 <std+0x48>
 80057f2:	33d0      	adds	r3, #208	@ 0xd0
 80057f4:	429c      	cmp	r4, r3
 80057f6:	d105      	bne.n	8005804 <std+0x54>
 80057f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005800:	f000 ba4a 	b.w	8005c98 <__retarget_lock_init_recursive>
 8005804:	bd10      	pop	{r4, pc}
 8005806:	bf00      	nop
 8005808:	080059f1 	.word	0x080059f1
 800580c:	08005a13 	.word	0x08005a13
 8005810:	08005a4b 	.word	0x08005a4b
 8005814:	08005a6f 	.word	0x08005a6f
 8005818:	20000464 	.word	0x20000464

0800581c <stdio_exit_handler>:
 800581c:	4a02      	ldr	r2, [pc, #8]	@ (8005828 <stdio_exit_handler+0xc>)
 800581e:	4903      	ldr	r1, [pc, #12]	@ (800582c <stdio_exit_handler+0x10>)
 8005820:	4803      	ldr	r0, [pc, #12]	@ (8005830 <stdio_exit_handler+0x14>)
 8005822:	f000 b869 	b.w	80058f8 <_fwalk_sglue>
 8005826:	bf00      	nop
 8005828:	2000000c 	.word	0x2000000c
 800582c:	08007345 	.word	0x08007345
 8005830:	2000001c 	.word	0x2000001c

08005834 <cleanup_stdio>:
 8005834:	6841      	ldr	r1, [r0, #4]
 8005836:	4b0c      	ldr	r3, [pc, #48]	@ (8005868 <cleanup_stdio+0x34>)
 8005838:	4299      	cmp	r1, r3
 800583a:	b510      	push	{r4, lr}
 800583c:	4604      	mov	r4, r0
 800583e:	d001      	beq.n	8005844 <cleanup_stdio+0x10>
 8005840:	f001 fd80 	bl	8007344 <_fflush_r>
 8005844:	68a1      	ldr	r1, [r4, #8]
 8005846:	4b09      	ldr	r3, [pc, #36]	@ (800586c <cleanup_stdio+0x38>)
 8005848:	4299      	cmp	r1, r3
 800584a:	d002      	beq.n	8005852 <cleanup_stdio+0x1e>
 800584c:	4620      	mov	r0, r4
 800584e:	f001 fd79 	bl	8007344 <_fflush_r>
 8005852:	68e1      	ldr	r1, [r4, #12]
 8005854:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <cleanup_stdio+0x3c>)
 8005856:	4299      	cmp	r1, r3
 8005858:	d004      	beq.n	8005864 <cleanup_stdio+0x30>
 800585a:	4620      	mov	r0, r4
 800585c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005860:	f001 bd70 	b.w	8007344 <_fflush_r>
 8005864:	bd10      	pop	{r4, pc}
 8005866:	bf00      	nop
 8005868:	20000464 	.word	0x20000464
 800586c:	200004cc 	.word	0x200004cc
 8005870:	20000534 	.word	0x20000534

08005874 <global_stdio_init.part.0>:
 8005874:	b510      	push	{r4, lr}
 8005876:	4b0b      	ldr	r3, [pc, #44]	@ (80058a4 <global_stdio_init.part.0+0x30>)
 8005878:	4c0b      	ldr	r4, [pc, #44]	@ (80058a8 <global_stdio_init.part.0+0x34>)
 800587a:	4a0c      	ldr	r2, [pc, #48]	@ (80058ac <global_stdio_init.part.0+0x38>)
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	4620      	mov	r0, r4
 8005880:	2200      	movs	r2, #0
 8005882:	2104      	movs	r1, #4
 8005884:	f7ff ff94 	bl	80057b0 <std>
 8005888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800588c:	2201      	movs	r2, #1
 800588e:	2109      	movs	r1, #9
 8005890:	f7ff ff8e 	bl	80057b0 <std>
 8005894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005898:	2202      	movs	r2, #2
 800589a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800589e:	2112      	movs	r1, #18
 80058a0:	f7ff bf86 	b.w	80057b0 <std>
 80058a4:	2000059c 	.word	0x2000059c
 80058a8:	20000464 	.word	0x20000464
 80058ac:	0800581d 	.word	0x0800581d

080058b0 <__sfp_lock_acquire>:
 80058b0:	4801      	ldr	r0, [pc, #4]	@ (80058b8 <__sfp_lock_acquire+0x8>)
 80058b2:	f000 b9f2 	b.w	8005c9a <__retarget_lock_acquire_recursive>
 80058b6:	bf00      	nop
 80058b8:	200005a5 	.word	0x200005a5

080058bc <__sfp_lock_release>:
 80058bc:	4801      	ldr	r0, [pc, #4]	@ (80058c4 <__sfp_lock_release+0x8>)
 80058be:	f000 b9ed 	b.w	8005c9c <__retarget_lock_release_recursive>
 80058c2:	bf00      	nop
 80058c4:	200005a5 	.word	0x200005a5

080058c8 <__sinit>:
 80058c8:	b510      	push	{r4, lr}
 80058ca:	4604      	mov	r4, r0
 80058cc:	f7ff fff0 	bl	80058b0 <__sfp_lock_acquire>
 80058d0:	6a23      	ldr	r3, [r4, #32]
 80058d2:	b11b      	cbz	r3, 80058dc <__sinit+0x14>
 80058d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d8:	f7ff bff0 	b.w	80058bc <__sfp_lock_release>
 80058dc:	4b04      	ldr	r3, [pc, #16]	@ (80058f0 <__sinit+0x28>)
 80058de:	6223      	str	r3, [r4, #32]
 80058e0:	4b04      	ldr	r3, [pc, #16]	@ (80058f4 <__sinit+0x2c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f5      	bne.n	80058d4 <__sinit+0xc>
 80058e8:	f7ff ffc4 	bl	8005874 <global_stdio_init.part.0>
 80058ec:	e7f2      	b.n	80058d4 <__sinit+0xc>
 80058ee:	bf00      	nop
 80058f0:	08005835 	.word	0x08005835
 80058f4:	2000059c 	.word	0x2000059c

080058f8 <_fwalk_sglue>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	4607      	mov	r7, r0
 80058fe:	4688      	mov	r8, r1
 8005900:	4614      	mov	r4, r2
 8005902:	2600      	movs	r6, #0
 8005904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005908:	f1b9 0901 	subs.w	r9, r9, #1
 800590c:	d505      	bpl.n	800591a <_fwalk_sglue+0x22>
 800590e:	6824      	ldr	r4, [r4, #0]
 8005910:	2c00      	cmp	r4, #0
 8005912:	d1f7      	bne.n	8005904 <_fwalk_sglue+0xc>
 8005914:	4630      	mov	r0, r6
 8005916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591a:	89ab      	ldrh	r3, [r5, #12]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d907      	bls.n	8005930 <_fwalk_sglue+0x38>
 8005920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005924:	3301      	adds	r3, #1
 8005926:	d003      	beq.n	8005930 <_fwalk_sglue+0x38>
 8005928:	4629      	mov	r1, r5
 800592a:	4638      	mov	r0, r7
 800592c:	47c0      	blx	r8
 800592e:	4306      	orrs	r6, r0
 8005930:	3568      	adds	r5, #104	@ 0x68
 8005932:	e7e9      	b.n	8005908 <_fwalk_sglue+0x10>

08005934 <_puts_r>:
 8005934:	6a03      	ldr	r3, [r0, #32]
 8005936:	b570      	push	{r4, r5, r6, lr}
 8005938:	6884      	ldr	r4, [r0, #8]
 800593a:	4605      	mov	r5, r0
 800593c:	460e      	mov	r6, r1
 800593e:	b90b      	cbnz	r3, 8005944 <_puts_r+0x10>
 8005940:	f7ff ffc2 	bl	80058c8 <__sinit>
 8005944:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005946:	07db      	lsls	r3, r3, #31
 8005948:	d405      	bmi.n	8005956 <_puts_r+0x22>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	0598      	lsls	r0, r3, #22
 800594e:	d402      	bmi.n	8005956 <_puts_r+0x22>
 8005950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005952:	f000 f9a2 	bl	8005c9a <__retarget_lock_acquire_recursive>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	0719      	lsls	r1, r3, #28
 800595a:	d502      	bpl.n	8005962 <_puts_r+0x2e>
 800595c:	6923      	ldr	r3, [r4, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d135      	bne.n	80059ce <_puts_r+0x9a>
 8005962:	4621      	mov	r1, r4
 8005964:	4628      	mov	r0, r5
 8005966:	f000 f8c5 	bl	8005af4 <__swsetup_r>
 800596a:	b380      	cbz	r0, 80059ce <_puts_r+0x9a>
 800596c:	f04f 35ff 	mov.w	r5, #4294967295
 8005970:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005972:	07da      	lsls	r2, r3, #31
 8005974:	d405      	bmi.n	8005982 <_puts_r+0x4e>
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	059b      	lsls	r3, r3, #22
 800597a:	d402      	bmi.n	8005982 <_puts_r+0x4e>
 800597c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800597e:	f000 f98d 	bl	8005c9c <__retarget_lock_release_recursive>
 8005982:	4628      	mov	r0, r5
 8005984:	bd70      	pop	{r4, r5, r6, pc}
 8005986:	2b00      	cmp	r3, #0
 8005988:	da04      	bge.n	8005994 <_puts_r+0x60>
 800598a:	69a2      	ldr	r2, [r4, #24]
 800598c:	429a      	cmp	r2, r3
 800598e:	dc17      	bgt.n	80059c0 <_puts_r+0x8c>
 8005990:	290a      	cmp	r1, #10
 8005992:	d015      	beq.n	80059c0 <_puts_r+0x8c>
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	6022      	str	r2, [r4, #0]
 800599a:	7019      	strb	r1, [r3, #0]
 800599c:	68a3      	ldr	r3, [r4, #8]
 800599e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059a2:	3b01      	subs	r3, #1
 80059a4:	60a3      	str	r3, [r4, #8]
 80059a6:	2900      	cmp	r1, #0
 80059a8:	d1ed      	bne.n	8005986 <_puts_r+0x52>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	da11      	bge.n	80059d2 <_puts_r+0x9e>
 80059ae:	4622      	mov	r2, r4
 80059b0:	210a      	movs	r1, #10
 80059b2:	4628      	mov	r0, r5
 80059b4:	f000 f85f 	bl	8005a76 <__swbuf_r>
 80059b8:	3001      	adds	r0, #1
 80059ba:	d0d7      	beq.n	800596c <_puts_r+0x38>
 80059bc:	250a      	movs	r5, #10
 80059be:	e7d7      	b.n	8005970 <_puts_r+0x3c>
 80059c0:	4622      	mov	r2, r4
 80059c2:	4628      	mov	r0, r5
 80059c4:	f000 f857 	bl	8005a76 <__swbuf_r>
 80059c8:	3001      	adds	r0, #1
 80059ca:	d1e7      	bne.n	800599c <_puts_r+0x68>
 80059cc:	e7ce      	b.n	800596c <_puts_r+0x38>
 80059ce:	3e01      	subs	r6, #1
 80059d0:	e7e4      	b.n	800599c <_puts_r+0x68>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	6022      	str	r2, [r4, #0]
 80059d8:	220a      	movs	r2, #10
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	e7ee      	b.n	80059bc <_puts_r+0x88>
	...

080059e0 <puts>:
 80059e0:	4b02      	ldr	r3, [pc, #8]	@ (80059ec <puts+0xc>)
 80059e2:	4601      	mov	r1, r0
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	f7ff bfa5 	b.w	8005934 <_puts_r>
 80059ea:	bf00      	nop
 80059ec:	20000018 	.word	0x20000018

080059f0 <__sread>:
 80059f0:	b510      	push	{r4, lr}
 80059f2:	460c      	mov	r4, r1
 80059f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f8:	f000 f900 	bl	8005bfc <_read_r>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	bfab      	itete	ge
 8005a00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a02:	89a3      	ldrhlt	r3, [r4, #12]
 8005a04:	181b      	addge	r3, r3, r0
 8005a06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a0a:	bfac      	ite	ge
 8005a0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a0e:	81a3      	strhlt	r3, [r4, #12]
 8005a10:	bd10      	pop	{r4, pc}

08005a12 <__swrite>:
 8005a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a16:	461f      	mov	r7, r3
 8005a18:	898b      	ldrh	r3, [r1, #12]
 8005a1a:	05db      	lsls	r3, r3, #23
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	4616      	mov	r6, r2
 8005a22:	d505      	bpl.n	8005a30 <__swrite+0x1e>
 8005a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a28:	2302      	movs	r3, #2
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f000 f8d4 	bl	8005bd8 <_lseek_r>
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a3a:	81a3      	strh	r3, [r4, #12]
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	463b      	mov	r3, r7
 8005a40:	4628      	mov	r0, r5
 8005a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a46:	f000 b8eb 	b.w	8005c20 <_write_r>

08005a4a <__sseek>:
 8005a4a:	b510      	push	{r4, lr}
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a52:	f000 f8c1 	bl	8005bd8 <_lseek_r>
 8005a56:	1c43      	adds	r3, r0, #1
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	bf15      	itete	ne
 8005a5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a66:	81a3      	strheq	r3, [r4, #12]
 8005a68:	bf18      	it	ne
 8005a6a:	81a3      	strhne	r3, [r4, #12]
 8005a6c:	bd10      	pop	{r4, pc}

08005a6e <__sclose>:
 8005a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a72:	f000 b8a1 	b.w	8005bb8 <_close_r>

08005a76 <__swbuf_r>:
 8005a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a78:	460e      	mov	r6, r1
 8005a7a:	4614      	mov	r4, r2
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	b118      	cbz	r0, 8005a88 <__swbuf_r+0x12>
 8005a80:	6a03      	ldr	r3, [r0, #32]
 8005a82:	b90b      	cbnz	r3, 8005a88 <__swbuf_r+0x12>
 8005a84:	f7ff ff20 	bl	80058c8 <__sinit>
 8005a88:	69a3      	ldr	r3, [r4, #24]
 8005a8a:	60a3      	str	r3, [r4, #8]
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	071a      	lsls	r2, r3, #28
 8005a90:	d501      	bpl.n	8005a96 <__swbuf_r+0x20>
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	b943      	cbnz	r3, 8005aa8 <__swbuf_r+0x32>
 8005a96:	4621      	mov	r1, r4
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 f82b 	bl	8005af4 <__swsetup_r>
 8005a9e:	b118      	cbz	r0, 8005aa8 <__swbuf_r+0x32>
 8005aa0:	f04f 37ff 	mov.w	r7, #4294967295
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	6922      	ldr	r2, [r4, #16]
 8005aac:	1a98      	subs	r0, r3, r2
 8005aae:	6963      	ldr	r3, [r4, #20]
 8005ab0:	b2f6      	uxtb	r6, r6
 8005ab2:	4283      	cmp	r3, r0
 8005ab4:	4637      	mov	r7, r6
 8005ab6:	dc05      	bgt.n	8005ac4 <__swbuf_r+0x4e>
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4628      	mov	r0, r5
 8005abc:	f001 fc42 	bl	8007344 <_fflush_r>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d1ed      	bne.n	8005aa0 <__swbuf_r+0x2a>
 8005ac4:	68a3      	ldr	r3, [r4, #8]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	60a3      	str	r3, [r4, #8]
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	6022      	str	r2, [r4, #0]
 8005ad0:	701e      	strb	r6, [r3, #0]
 8005ad2:	6962      	ldr	r2, [r4, #20]
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d004      	beq.n	8005ae4 <__swbuf_r+0x6e>
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	07db      	lsls	r3, r3, #31
 8005ade:	d5e1      	bpl.n	8005aa4 <__swbuf_r+0x2e>
 8005ae0:	2e0a      	cmp	r6, #10
 8005ae2:	d1df      	bne.n	8005aa4 <__swbuf_r+0x2e>
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f001 fc2c 	bl	8007344 <_fflush_r>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d0d9      	beq.n	8005aa4 <__swbuf_r+0x2e>
 8005af0:	e7d6      	b.n	8005aa0 <__swbuf_r+0x2a>
	...

08005af4 <__swsetup_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	4b29      	ldr	r3, [pc, #164]	@ (8005b9c <__swsetup_r+0xa8>)
 8005af8:	4605      	mov	r5, r0
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	460c      	mov	r4, r1
 8005afe:	b118      	cbz	r0, 8005b08 <__swsetup_r+0x14>
 8005b00:	6a03      	ldr	r3, [r0, #32]
 8005b02:	b90b      	cbnz	r3, 8005b08 <__swsetup_r+0x14>
 8005b04:	f7ff fee0 	bl	80058c8 <__sinit>
 8005b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b0c:	0719      	lsls	r1, r3, #28
 8005b0e:	d422      	bmi.n	8005b56 <__swsetup_r+0x62>
 8005b10:	06da      	lsls	r2, r3, #27
 8005b12:	d407      	bmi.n	8005b24 <__swsetup_r+0x30>
 8005b14:	2209      	movs	r2, #9
 8005b16:	602a      	str	r2, [r5, #0]
 8005b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b1c:	81a3      	strh	r3, [r4, #12]
 8005b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b22:	e033      	b.n	8005b8c <__swsetup_r+0x98>
 8005b24:	0758      	lsls	r0, r3, #29
 8005b26:	d512      	bpl.n	8005b4e <__swsetup_r+0x5a>
 8005b28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b2a:	b141      	cbz	r1, 8005b3e <__swsetup_r+0x4a>
 8005b2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b30:	4299      	cmp	r1, r3
 8005b32:	d002      	beq.n	8005b3a <__swsetup_r+0x46>
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 feff 	bl	8006938 <_free_r>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b44:	81a3      	strh	r3, [r4, #12]
 8005b46:	2300      	movs	r3, #0
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f043 0308 	orr.w	r3, r3, #8
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	6923      	ldr	r3, [r4, #16]
 8005b58:	b94b      	cbnz	r3, 8005b6e <__swsetup_r+0x7a>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b64:	d003      	beq.n	8005b6e <__swsetup_r+0x7a>
 8005b66:	4621      	mov	r1, r4
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f001 fc39 	bl	80073e0 <__smakebuf_r>
 8005b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b72:	f013 0201 	ands.w	r2, r3, #1
 8005b76:	d00a      	beq.n	8005b8e <__swsetup_r+0x9a>
 8005b78:	2200      	movs	r2, #0
 8005b7a:	60a2      	str	r2, [r4, #8]
 8005b7c:	6962      	ldr	r2, [r4, #20]
 8005b7e:	4252      	negs	r2, r2
 8005b80:	61a2      	str	r2, [r4, #24]
 8005b82:	6922      	ldr	r2, [r4, #16]
 8005b84:	b942      	cbnz	r2, 8005b98 <__swsetup_r+0xa4>
 8005b86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b8a:	d1c5      	bne.n	8005b18 <__swsetup_r+0x24>
 8005b8c:	bd38      	pop	{r3, r4, r5, pc}
 8005b8e:	0799      	lsls	r1, r3, #30
 8005b90:	bf58      	it	pl
 8005b92:	6962      	ldrpl	r2, [r4, #20]
 8005b94:	60a2      	str	r2, [r4, #8]
 8005b96:	e7f4      	b.n	8005b82 <__swsetup_r+0x8e>
 8005b98:	2000      	movs	r0, #0
 8005b9a:	e7f7      	b.n	8005b8c <__swsetup_r+0x98>
 8005b9c:	20000018 	.word	0x20000018

08005ba0 <memset>:
 8005ba0:	4402      	add	r2, r0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d100      	bne.n	8005baa <memset+0xa>
 8005ba8:	4770      	bx	lr
 8005baa:	f803 1b01 	strb.w	r1, [r3], #1
 8005bae:	e7f9      	b.n	8005ba4 <memset+0x4>

08005bb0 <_localeconv_r>:
 8005bb0:	4800      	ldr	r0, [pc, #0]	@ (8005bb4 <_localeconv_r+0x4>)
 8005bb2:	4770      	bx	lr
 8005bb4:	20000158 	.word	0x20000158

08005bb8 <_close_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d06      	ldr	r5, [pc, #24]	@ (8005bd4 <_close_r+0x1c>)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	602b      	str	r3, [r5, #0]
 8005bc4:	f7fb fcfc 	bl	80015c0 <_close>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_close_r+0x1a>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_close_r+0x1a>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	200005a0 	.word	0x200005a0

08005bd8 <_lseek_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d07      	ldr	r5, [pc, #28]	@ (8005bf8 <_lseek_r+0x20>)
 8005bdc:	4604      	mov	r4, r0
 8005bde:	4608      	mov	r0, r1
 8005be0:	4611      	mov	r1, r2
 8005be2:	2200      	movs	r2, #0
 8005be4:	602a      	str	r2, [r5, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f7fb fd11 	bl	800160e <_lseek>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_lseek_r+0x1e>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_lseek_r+0x1e>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	200005a0 	.word	0x200005a0

08005bfc <_read_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d07      	ldr	r5, [pc, #28]	@ (8005c1c <_read_r+0x20>)
 8005c00:	4604      	mov	r4, r0
 8005c02:	4608      	mov	r0, r1
 8005c04:	4611      	mov	r1, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	602a      	str	r2, [r5, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f7fb fc9f 	bl	800154e <_read>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_read_r+0x1e>
 8005c14:	682b      	ldr	r3, [r5, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_read_r+0x1e>
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	200005a0 	.word	0x200005a0

08005c20 <_write_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	4d07      	ldr	r5, [pc, #28]	@ (8005c40 <_write_r+0x20>)
 8005c24:	4604      	mov	r4, r0
 8005c26:	4608      	mov	r0, r1
 8005c28:	4611      	mov	r1, r2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	602a      	str	r2, [r5, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f7fb fcaa 	bl	8001588 <_write>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d102      	bne.n	8005c3e <_write_r+0x1e>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	b103      	cbz	r3, 8005c3e <_write_r+0x1e>
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	200005a0 	.word	0x200005a0

08005c44 <__errno>:
 8005c44:	4b01      	ldr	r3, [pc, #4]	@ (8005c4c <__errno+0x8>)
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20000018 	.word	0x20000018

08005c50 <__libc_init_array>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	4d0d      	ldr	r5, [pc, #52]	@ (8005c88 <__libc_init_array+0x38>)
 8005c54:	4c0d      	ldr	r4, [pc, #52]	@ (8005c8c <__libc_init_array+0x3c>)
 8005c56:	1b64      	subs	r4, r4, r5
 8005c58:	10a4      	asrs	r4, r4, #2
 8005c5a:	2600      	movs	r6, #0
 8005c5c:	42a6      	cmp	r6, r4
 8005c5e:	d109      	bne.n	8005c74 <__libc_init_array+0x24>
 8005c60:	4d0b      	ldr	r5, [pc, #44]	@ (8005c90 <__libc_init_array+0x40>)
 8005c62:	4c0c      	ldr	r4, [pc, #48]	@ (8005c94 <__libc_init_array+0x44>)
 8005c64:	f001 fe28 	bl	80078b8 <_init>
 8005c68:	1b64      	subs	r4, r4, r5
 8005c6a:	10a4      	asrs	r4, r4, #2
 8005c6c:	2600      	movs	r6, #0
 8005c6e:	42a6      	cmp	r6, r4
 8005c70:	d105      	bne.n	8005c7e <__libc_init_array+0x2e>
 8005c72:	bd70      	pop	{r4, r5, r6, pc}
 8005c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c78:	4798      	blx	r3
 8005c7a:	3601      	adds	r6, #1
 8005c7c:	e7ee      	b.n	8005c5c <__libc_init_array+0xc>
 8005c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c82:	4798      	blx	r3
 8005c84:	3601      	adds	r6, #1
 8005c86:	e7f2      	b.n	8005c6e <__libc_init_array+0x1e>
 8005c88:	08007c98 	.word	0x08007c98
 8005c8c:	08007c98 	.word	0x08007c98
 8005c90:	08007c98 	.word	0x08007c98
 8005c94:	08007c9c 	.word	0x08007c9c

08005c98 <__retarget_lock_init_recursive>:
 8005c98:	4770      	bx	lr

08005c9a <__retarget_lock_acquire_recursive>:
 8005c9a:	4770      	bx	lr

08005c9c <__retarget_lock_release_recursive>:
 8005c9c:	4770      	bx	lr

08005c9e <quorem>:
 8005c9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca2:	6903      	ldr	r3, [r0, #16]
 8005ca4:	690c      	ldr	r4, [r1, #16]
 8005ca6:	42a3      	cmp	r3, r4
 8005ca8:	4607      	mov	r7, r0
 8005caa:	db7e      	blt.n	8005daa <quorem+0x10c>
 8005cac:	3c01      	subs	r4, #1
 8005cae:	f101 0814 	add.w	r8, r1, #20
 8005cb2:	00a3      	lsls	r3, r4, #2
 8005cb4:	f100 0514 	add.w	r5, r0, #20
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cbe:	9301      	str	r3, [sp, #4]
 8005cc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cd4:	d32e      	bcc.n	8005d34 <quorem+0x96>
 8005cd6:	f04f 0a00 	mov.w	sl, #0
 8005cda:	46c4      	mov	ip, r8
 8005cdc:	46ae      	mov	lr, r5
 8005cde:	46d3      	mov	fp, sl
 8005ce0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ce4:	b298      	uxth	r0, r3
 8005ce6:	fb06 a000 	mla	r0, r6, r0, sl
 8005cea:	0c02      	lsrs	r2, r0, #16
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	fb06 2303 	mla	r3, r6, r3, r2
 8005cf2:	f8de 2000 	ldr.w	r2, [lr]
 8005cf6:	b280      	uxth	r0, r0
 8005cf8:	b292      	uxth	r2, r2
 8005cfa:	1a12      	subs	r2, r2, r0
 8005cfc:	445a      	add	r2, fp
 8005cfe:	f8de 0000 	ldr.w	r0, [lr]
 8005d02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d0c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d10:	b292      	uxth	r2, r2
 8005d12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d16:	45e1      	cmp	r9, ip
 8005d18:	f84e 2b04 	str.w	r2, [lr], #4
 8005d1c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d20:	d2de      	bcs.n	8005ce0 <quorem+0x42>
 8005d22:	9b00      	ldr	r3, [sp, #0]
 8005d24:	58eb      	ldr	r3, [r5, r3]
 8005d26:	b92b      	cbnz	r3, 8005d34 <quorem+0x96>
 8005d28:	9b01      	ldr	r3, [sp, #4]
 8005d2a:	3b04      	subs	r3, #4
 8005d2c:	429d      	cmp	r5, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	d32f      	bcc.n	8005d92 <quorem+0xf4>
 8005d32:	613c      	str	r4, [r7, #16]
 8005d34:	4638      	mov	r0, r7
 8005d36:	f001 f979 	bl	800702c <__mcmp>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	db25      	blt.n	8005d8a <quorem+0xec>
 8005d3e:	4629      	mov	r1, r5
 8005d40:	2000      	movs	r0, #0
 8005d42:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d46:	f8d1 c000 	ldr.w	ip, [r1]
 8005d4a:	fa1f fe82 	uxth.w	lr, r2
 8005d4e:	fa1f f38c 	uxth.w	r3, ip
 8005d52:	eba3 030e 	sub.w	r3, r3, lr
 8005d56:	4403      	add	r3, r0
 8005d58:	0c12      	lsrs	r2, r2, #16
 8005d5a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d5e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d68:	45c1      	cmp	r9, r8
 8005d6a:	f841 3b04 	str.w	r3, [r1], #4
 8005d6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d72:	d2e6      	bcs.n	8005d42 <quorem+0xa4>
 8005d74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d7c:	b922      	cbnz	r2, 8005d88 <quorem+0xea>
 8005d7e:	3b04      	subs	r3, #4
 8005d80:	429d      	cmp	r5, r3
 8005d82:	461a      	mov	r2, r3
 8005d84:	d30b      	bcc.n	8005d9e <quorem+0x100>
 8005d86:	613c      	str	r4, [r7, #16]
 8005d88:	3601      	adds	r6, #1
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	b003      	add	sp, #12
 8005d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	3b04      	subs	r3, #4
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	d1cb      	bne.n	8005d32 <quorem+0x94>
 8005d9a:	3c01      	subs	r4, #1
 8005d9c:	e7c6      	b.n	8005d2c <quorem+0x8e>
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	3b04      	subs	r3, #4
 8005da2:	2a00      	cmp	r2, #0
 8005da4:	d1ef      	bne.n	8005d86 <quorem+0xe8>
 8005da6:	3c01      	subs	r4, #1
 8005da8:	e7ea      	b.n	8005d80 <quorem+0xe2>
 8005daa:	2000      	movs	r0, #0
 8005dac:	e7ee      	b.n	8005d8c <quorem+0xee>
	...

08005db0 <_dtoa_r>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	69c7      	ldr	r7, [r0, #28]
 8005db6:	b099      	sub	sp, #100	@ 0x64
 8005db8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005dbc:	ec55 4b10 	vmov	r4, r5, d0
 8005dc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005dc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dc4:	4683      	mov	fp, r0
 8005dc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005dc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005dca:	b97f      	cbnz	r7, 8005dec <_dtoa_r+0x3c>
 8005dcc:	2010      	movs	r0, #16
 8005dce:	f000 fdfd 	bl	80069cc <malloc>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	f8cb 001c 	str.w	r0, [fp, #28]
 8005dd8:	b920      	cbnz	r0, 8005de4 <_dtoa_r+0x34>
 8005dda:	4ba7      	ldr	r3, [pc, #668]	@ (8006078 <_dtoa_r+0x2c8>)
 8005ddc:	21ef      	movs	r1, #239	@ 0xef
 8005dde:	48a7      	ldr	r0, [pc, #668]	@ (800607c <_dtoa_r+0x2cc>)
 8005de0:	f001 fb7a 	bl	80074d8 <__assert_func>
 8005de4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005de8:	6007      	str	r7, [r0, #0]
 8005dea:	60c7      	str	r7, [r0, #12]
 8005dec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005df0:	6819      	ldr	r1, [r3, #0]
 8005df2:	b159      	cbz	r1, 8005e0c <_dtoa_r+0x5c>
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	604a      	str	r2, [r1, #4]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	4093      	lsls	r3, r2
 8005dfc:	608b      	str	r3, [r1, #8]
 8005dfe:	4658      	mov	r0, fp
 8005e00:	f000 feda 	bl	8006bb8 <_Bfree>
 8005e04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	1e2b      	subs	r3, r5, #0
 8005e0e:	bfb9      	ittee	lt
 8005e10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e14:	9303      	strlt	r3, [sp, #12]
 8005e16:	2300      	movge	r3, #0
 8005e18:	6033      	strge	r3, [r6, #0]
 8005e1a:	9f03      	ldr	r7, [sp, #12]
 8005e1c:	4b98      	ldr	r3, [pc, #608]	@ (8006080 <_dtoa_r+0x2d0>)
 8005e1e:	bfbc      	itt	lt
 8005e20:	2201      	movlt	r2, #1
 8005e22:	6032      	strlt	r2, [r6, #0]
 8005e24:	43bb      	bics	r3, r7
 8005e26:	d112      	bne.n	8005e4e <_dtoa_r+0x9e>
 8005e28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e34:	4323      	orrs	r3, r4
 8005e36:	f000 854d 	beq.w	80068d4 <_dtoa_r+0xb24>
 8005e3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006094 <_dtoa_r+0x2e4>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 854f 	beq.w	80068e4 <_dtoa_r+0xb34>
 8005e46:	f10a 0303 	add.w	r3, sl, #3
 8005e4a:	f000 bd49 	b.w	80068e0 <_dtoa_r+0xb30>
 8005e4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	ec51 0b17 	vmov	r0, r1, d7
 8005e58:	2300      	movs	r3, #0
 8005e5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005e5e:	f7fa fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e62:	4680      	mov	r8, r0
 8005e64:	b158      	cbz	r0, 8005e7e <_dtoa_r+0xce>
 8005e66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e68:	2301      	movs	r3, #1
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e6e:	b113      	cbz	r3, 8005e76 <_dtoa_r+0xc6>
 8005e70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005e72:	4b84      	ldr	r3, [pc, #528]	@ (8006084 <_dtoa_r+0x2d4>)
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006098 <_dtoa_r+0x2e8>
 8005e7a:	f000 bd33 	b.w	80068e4 <_dtoa_r+0xb34>
 8005e7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005e82:	aa16      	add	r2, sp, #88	@ 0x58
 8005e84:	a917      	add	r1, sp, #92	@ 0x5c
 8005e86:	4658      	mov	r0, fp
 8005e88:	f001 f980 	bl	800718c <__d2b>
 8005e8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005e90:	4681      	mov	r9, r0
 8005e92:	2e00      	cmp	r6, #0
 8005e94:	d077      	beq.n	8005f86 <_dtoa_r+0x1d6>
 8005e96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ea4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ea8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005eac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	4b74      	ldr	r3, [pc, #464]	@ (8006088 <_dtoa_r+0x2d8>)
 8005eb6:	f7fa f9e7 	bl	8000288 <__aeabi_dsub>
 8005eba:	a369      	add	r3, pc, #420	@ (adr r3, 8006060 <_dtoa_r+0x2b0>)
 8005ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec0:	f7fa fb9a 	bl	80005f8 <__aeabi_dmul>
 8005ec4:	a368      	add	r3, pc, #416	@ (adr r3, 8006068 <_dtoa_r+0x2b8>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f9df 	bl	800028c <__adddf3>
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	460d      	mov	r5, r1
 8005ed4:	f7fa fb26 	bl	8000524 <__aeabi_i2d>
 8005ed8:	a365      	add	r3, pc, #404	@ (adr r3, 8006070 <_dtoa_r+0x2c0>)
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	f7fa fb8b 	bl	80005f8 <__aeabi_dmul>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	4629      	mov	r1, r5
 8005eea:	f7fa f9cf 	bl	800028c <__adddf3>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	460d      	mov	r5, r1
 8005ef2:	f7fa fe31 	bl	8000b58 <__aeabi_d2iz>
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	4607      	mov	r7, r0
 8005efa:	2300      	movs	r3, #0
 8005efc:	4620      	mov	r0, r4
 8005efe:	4629      	mov	r1, r5
 8005f00:	f7fa fdec 	bl	8000adc <__aeabi_dcmplt>
 8005f04:	b140      	cbz	r0, 8005f18 <_dtoa_r+0x168>
 8005f06:	4638      	mov	r0, r7
 8005f08:	f7fa fb0c 	bl	8000524 <__aeabi_i2d>
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	462b      	mov	r3, r5
 8005f10:	f7fa fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f14:	b900      	cbnz	r0, 8005f18 <_dtoa_r+0x168>
 8005f16:	3f01      	subs	r7, #1
 8005f18:	2f16      	cmp	r7, #22
 8005f1a:	d851      	bhi.n	8005fc0 <_dtoa_r+0x210>
 8005f1c:	4b5b      	ldr	r3, [pc, #364]	@ (800608c <_dtoa_r+0x2dc>)
 8005f1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f2a:	f7fa fdd7 	bl	8000adc <__aeabi_dcmplt>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d048      	beq.n	8005fc4 <_dtoa_r+0x214>
 8005f32:	3f01      	subs	r7, #1
 8005f34:	2300      	movs	r3, #0
 8005f36:	9312      	str	r3, [sp, #72]	@ 0x48
 8005f38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f3a:	1b9b      	subs	r3, r3, r6
 8005f3c:	1e5a      	subs	r2, r3, #1
 8005f3e:	bf44      	itt	mi
 8005f40:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f44:	2300      	movmi	r3, #0
 8005f46:	9208      	str	r2, [sp, #32]
 8005f48:	bf54      	ite	pl
 8005f4a:	f04f 0800 	movpl.w	r8, #0
 8005f4e:	9308      	strmi	r3, [sp, #32]
 8005f50:	2f00      	cmp	r7, #0
 8005f52:	db39      	blt.n	8005fc8 <_dtoa_r+0x218>
 8005f54:	9b08      	ldr	r3, [sp, #32]
 8005f56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005f58:	443b      	add	r3, r7
 8005f5a:	9308      	str	r3, [sp, #32]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f62:	2b09      	cmp	r3, #9
 8005f64:	d864      	bhi.n	8006030 <_dtoa_r+0x280>
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	bfc4      	itt	gt
 8005f6a:	3b04      	subgt	r3, #4
 8005f6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f70:	f1a3 0302 	sub.w	r3, r3, #2
 8005f74:	bfcc      	ite	gt
 8005f76:	2400      	movgt	r4, #0
 8005f78:	2401      	movle	r4, #1
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d863      	bhi.n	8006046 <_dtoa_r+0x296>
 8005f7e:	e8df f003 	tbb	[pc, r3]
 8005f82:	372a      	.short	0x372a
 8005f84:	5535      	.short	0x5535
 8005f86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005f8a:	441e      	add	r6, r3
 8005f8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	bfc1      	itttt	gt
 8005f94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f98:	409f      	lslgt	r7, r3
 8005f9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005fa2:	bfd6      	itet	le
 8005fa4:	f1c3 0320 	rsble	r3, r3, #32
 8005fa8:	ea47 0003 	orrgt.w	r0, r7, r3
 8005fac:	fa04 f003 	lslle.w	r0, r4, r3
 8005fb0:	f7fa faa8 	bl	8000504 <__aeabi_ui2d>
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005fba:	3e01      	subs	r6, #1
 8005fbc:	9214      	str	r2, [sp, #80]	@ 0x50
 8005fbe:	e777      	b.n	8005eb0 <_dtoa_r+0x100>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e7b8      	b.n	8005f36 <_dtoa_r+0x186>
 8005fc4:	9012      	str	r0, [sp, #72]	@ 0x48
 8005fc6:	e7b7      	b.n	8005f38 <_dtoa_r+0x188>
 8005fc8:	427b      	negs	r3, r7
 8005fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fcc:	2300      	movs	r3, #0
 8005fce:	eba8 0807 	sub.w	r8, r8, r7
 8005fd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005fd4:	e7c4      	b.n	8005f60 <_dtoa_r+0x1b0>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	dc35      	bgt.n	800604c <_dtoa_r+0x29c>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	9307      	str	r3, [sp, #28]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fea:	e00b      	b.n	8006004 <_dtoa_r+0x254>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e7f3      	b.n	8005fd8 <_dtoa_r+0x228>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ff6:	18fb      	adds	r3, r7, r3
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	9307      	str	r3, [sp, #28]
 8006000:	bfb8      	it	lt
 8006002:	2301      	movlt	r3, #1
 8006004:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006008:	2100      	movs	r1, #0
 800600a:	2204      	movs	r2, #4
 800600c:	f102 0514 	add.w	r5, r2, #20
 8006010:	429d      	cmp	r5, r3
 8006012:	d91f      	bls.n	8006054 <_dtoa_r+0x2a4>
 8006014:	6041      	str	r1, [r0, #4]
 8006016:	4658      	mov	r0, fp
 8006018:	f000 fd8e 	bl	8006b38 <_Balloc>
 800601c:	4682      	mov	sl, r0
 800601e:	2800      	cmp	r0, #0
 8006020:	d13c      	bne.n	800609c <_dtoa_r+0x2ec>
 8006022:	4b1b      	ldr	r3, [pc, #108]	@ (8006090 <_dtoa_r+0x2e0>)
 8006024:	4602      	mov	r2, r0
 8006026:	f240 11af 	movw	r1, #431	@ 0x1af
 800602a:	e6d8      	b.n	8005dde <_dtoa_r+0x2e>
 800602c:	2301      	movs	r3, #1
 800602e:	e7e0      	b.n	8005ff2 <_dtoa_r+0x242>
 8006030:	2401      	movs	r4, #1
 8006032:	2300      	movs	r3, #0
 8006034:	9309      	str	r3, [sp, #36]	@ 0x24
 8006036:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006038:	f04f 33ff 	mov.w	r3, #4294967295
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	9307      	str	r3, [sp, #28]
 8006040:	2200      	movs	r2, #0
 8006042:	2312      	movs	r3, #18
 8006044:	e7d0      	b.n	8005fe8 <_dtoa_r+0x238>
 8006046:	2301      	movs	r3, #1
 8006048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800604a:	e7f5      	b.n	8006038 <_dtoa_r+0x288>
 800604c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	9307      	str	r3, [sp, #28]
 8006052:	e7d7      	b.n	8006004 <_dtoa_r+0x254>
 8006054:	3101      	adds	r1, #1
 8006056:	0052      	lsls	r2, r2, #1
 8006058:	e7d8      	b.n	800600c <_dtoa_r+0x25c>
 800605a:	bf00      	nop
 800605c:	f3af 8000 	nop.w
 8006060:	636f4361 	.word	0x636f4361
 8006064:	3fd287a7 	.word	0x3fd287a7
 8006068:	8b60c8b3 	.word	0x8b60c8b3
 800606c:	3fc68a28 	.word	0x3fc68a28
 8006070:	509f79fb 	.word	0x509f79fb
 8006074:	3fd34413 	.word	0x3fd34413
 8006078:	08007961 	.word	0x08007961
 800607c:	08007978 	.word	0x08007978
 8006080:	7ff00000 	.word	0x7ff00000
 8006084:	08007931 	.word	0x08007931
 8006088:	3ff80000 	.word	0x3ff80000
 800608c:	08007a70 	.word	0x08007a70
 8006090:	080079d0 	.word	0x080079d0
 8006094:	0800795d 	.word	0x0800795d
 8006098:	08007930 	.word	0x08007930
 800609c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060a0:	6018      	str	r0, [r3, #0]
 80060a2:	9b07      	ldr	r3, [sp, #28]
 80060a4:	2b0e      	cmp	r3, #14
 80060a6:	f200 80a4 	bhi.w	80061f2 <_dtoa_r+0x442>
 80060aa:	2c00      	cmp	r4, #0
 80060ac:	f000 80a1 	beq.w	80061f2 <_dtoa_r+0x442>
 80060b0:	2f00      	cmp	r7, #0
 80060b2:	dd33      	ble.n	800611c <_dtoa_r+0x36c>
 80060b4:	4bad      	ldr	r3, [pc, #692]	@ (800636c <_dtoa_r+0x5bc>)
 80060b6:	f007 020f 	and.w	r2, r7, #15
 80060ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060be:	ed93 7b00 	vldr	d7, [r3]
 80060c2:	05f8      	lsls	r0, r7, #23
 80060c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80060c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80060cc:	d516      	bpl.n	80060fc <_dtoa_r+0x34c>
 80060ce:	4ba8      	ldr	r3, [pc, #672]	@ (8006370 <_dtoa_r+0x5c0>)
 80060d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060d8:	f7fa fbb8 	bl	800084c <__aeabi_ddiv>
 80060dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e0:	f004 040f 	and.w	r4, r4, #15
 80060e4:	2603      	movs	r6, #3
 80060e6:	4da2      	ldr	r5, [pc, #648]	@ (8006370 <_dtoa_r+0x5c0>)
 80060e8:	b954      	cbnz	r4, 8006100 <_dtoa_r+0x350>
 80060ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060f2:	f7fa fbab 	bl	800084c <__aeabi_ddiv>
 80060f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060fa:	e028      	b.n	800614e <_dtoa_r+0x39e>
 80060fc:	2602      	movs	r6, #2
 80060fe:	e7f2      	b.n	80060e6 <_dtoa_r+0x336>
 8006100:	07e1      	lsls	r1, r4, #31
 8006102:	d508      	bpl.n	8006116 <_dtoa_r+0x366>
 8006104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006108:	e9d5 2300 	ldrd	r2, r3, [r5]
 800610c:	f7fa fa74 	bl	80005f8 <__aeabi_dmul>
 8006110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006114:	3601      	adds	r6, #1
 8006116:	1064      	asrs	r4, r4, #1
 8006118:	3508      	adds	r5, #8
 800611a:	e7e5      	b.n	80060e8 <_dtoa_r+0x338>
 800611c:	f000 80d2 	beq.w	80062c4 <_dtoa_r+0x514>
 8006120:	427c      	negs	r4, r7
 8006122:	4b92      	ldr	r3, [pc, #584]	@ (800636c <_dtoa_r+0x5bc>)
 8006124:	4d92      	ldr	r5, [pc, #584]	@ (8006370 <_dtoa_r+0x5c0>)
 8006126:	f004 020f 	and.w	r2, r4, #15
 800612a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006136:	f7fa fa5f 	bl	80005f8 <__aeabi_dmul>
 800613a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800613e:	1124      	asrs	r4, r4, #4
 8006140:	2300      	movs	r3, #0
 8006142:	2602      	movs	r6, #2
 8006144:	2c00      	cmp	r4, #0
 8006146:	f040 80b2 	bne.w	80062ae <_dtoa_r+0x4fe>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1d3      	bne.n	80060f6 <_dtoa_r+0x346>
 800614e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006150:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80b7 	beq.w	80062c8 <_dtoa_r+0x518>
 800615a:	4b86      	ldr	r3, [pc, #536]	@ (8006374 <_dtoa_r+0x5c4>)
 800615c:	2200      	movs	r2, #0
 800615e:	4620      	mov	r0, r4
 8006160:	4629      	mov	r1, r5
 8006162:	f7fa fcbb 	bl	8000adc <__aeabi_dcmplt>
 8006166:	2800      	cmp	r0, #0
 8006168:	f000 80ae 	beq.w	80062c8 <_dtoa_r+0x518>
 800616c:	9b07      	ldr	r3, [sp, #28]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 80aa 	beq.w	80062c8 <_dtoa_r+0x518>
 8006174:	9b00      	ldr	r3, [sp, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	dd37      	ble.n	80061ea <_dtoa_r+0x43a>
 800617a:	1e7b      	subs	r3, r7, #1
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	4620      	mov	r0, r4
 8006180:	4b7d      	ldr	r3, [pc, #500]	@ (8006378 <_dtoa_r+0x5c8>)
 8006182:	2200      	movs	r2, #0
 8006184:	4629      	mov	r1, r5
 8006186:	f7fa fa37 	bl	80005f8 <__aeabi_dmul>
 800618a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800618e:	9c00      	ldr	r4, [sp, #0]
 8006190:	3601      	adds	r6, #1
 8006192:	4630      	mov	r0, r6
 8006194:	f7fa f9c6 	bl	8000524 <__aeabi_i2d>
 8006198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800619c:	f7fa fa2c 	bl	80005f8 <__aeabi_dmul>
 80061a0:	4b76      	ldr	r3, [pc, #472]	@ (800637c <_dtoa_r+0x5cc>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	f7fa f872 	bl	800028c <__adddf3>
 80061a8:	4605      	mov	r5, r0
 80061aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80061ae:	2c00      	cmp	r4, #0
 80061b0:	f040 808d 	bne.w	80062ce <_dtoa_r+0x51e>
 80061b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061b8:	4b71      	ldr	r3, [pc, #452]	@ (8006380 <_dtoa_r+0x5d0>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	f7fa f864 	bl	8000288 <__aeabi_dsub>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061c8:	462a      	mov	r2, r5
 80061ca:	4633      	mov	r3, r6
 80061cc:	f7fa fca4 	bl	8000b18 <__aeabi_dcmpgt>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f040 828b 	bne.w	80066ec <_dtoa_r+0x93c>
 80061d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061da:	462a      	mov	r2, r5
 80061dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80061e0:	f7fa fc7c 	bl	8000adc <__aeabi_dcmplt>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	f040 8128 	bne.w	800643a <_dtoa_r+0x68a>
 80061ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80061ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80061f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f2c0 815a 	blt.w	80064ae <_dtoa_r+0x6fe>
 80061fa:	2f0e      	cmp	r7, #14
 80061fc:	f300 8157 	bgt.w	80064ae <_dtoa_r+0x6fe>
 8006200:	4b5a      	ldr	r3, [pc, #360]	@ (800636c <_dtoa_r+0x5bc>)
 8006202:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006206:	ed93 7b00 	vldr	d7, [r3]
 800620a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800620c:	2b00      	cmp	r3, #0
 800620e:	ed8d 7b00 	vstr	d7, [sp]
 8006212:	da03      	bge.n	800621c <_dtoa_r+0x46c>
 8006214:	9b07      	ldr	r3, [sp, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f340 8101 	ble.w	800641e <_dtoa_r+0x66e>
 800621c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006220:	4656      	mov	r6, sl
 8006222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006226:	4620      	mov	r0, r4
 8006228:	4629      	mov	r1, r5
 800622a:	f7fa fb0f 	bl	800084c <__aeabi_ddiv>
 800622e:	f7fa fc93 	bl	8000b58 <__aeabi_d2iz>
 8006232:	4680      	mov	r8, r0
 8006234:	f7fa f976 	bl	8000524 <__aeabi_i2d>
 8006238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800623c:	f7fa f9dc 	bl	80005f8 <__aeabi_dmul>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800624c:	f7fa f81c 	bl	8000288 <__aeabi_dsub>
 8006250:	f806 4b01 	strb.w	r4, [r6], #1
 8006254:	9d07      	ldr	r5, [sp, #28]
 8006256:	eba6 040a 	sub.w	r4, r6, sl
 800625a:	42a5      	cmp	r5, r4
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	f040 8117 	bne.w	8006492 <_dtoa_r+0x6e2>
 8006264:	f7fa f812 	bl	800028c <__adddf3>
 8006268:	e9dd 2300 	ldrd	r2, r3, [sp]
 800626c:	4604      	mov	r4, r0
 800626e:	460d      	mov	r5, r1
 8006270:	f7fa fc52 	bl	8000b18 <__aeabi_dcmpgt>
 8006274:	2800      	cmp	r0, #0
 8006276:	f040 80f9 	bne.w	800646c <_dtoa_r+0x6bc>
 800627a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800627e:	4620      	mov	r0, r4
 8006280:	4629      	mov	r1, r5
 8006282:	f7fa fc21 	bl	8000ac8 <__aeabi_dcmpeq>
 8006286:	b118      	cbz	r0, 8006290 <_dtoa_r+0x4e0>
 8006288:	f018 0f01 	tst.w	r8, #1
 800628c:	f040 80ee 	bne.w	800646c <_dtoa_r+0x6bc>
 8006290:	4649      	mov	r1, r9
 8006292:	4658      	mov	r0, fp
 8006294:	f000 fc90 	bl	8006bb8 <_Bfree>
 8006298:	2300      	movs	r3, #0
 800629a:	7033      	strb	r3, [r6, #0]
 800629c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800629e:	3701      	adds	r7, #1
 80062a0:	601f      	str	r7, [r3, #0]
 80062a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 831d 	beq.w	80068e4 <_dtoa_r+0xb34>
 80062aa:	601e      	str	r6, [r3, #0]
 80062ac:	e31a      	b.n	80068e4 <_dtoa_r+0xb34>
 80062ae:	07e2      	lsls	r2, r4, #31
 80062b0:	d505      	bpl.n	80062be <_dtoa_r+0x50e>
 80062b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062b6:	f7fa f99f 	bl	80005f8 <__aeabi_dmul>
 80062ba:	3601      	adds	r6, #1
 80062bc:	2301      	movs	r3, #1
 80062be:	1064      	asrs	r4, r4, #1
 80062c0:	3508      	adds	r5, #8
 80062c2:	e73f      	b.n	8006144 <_dtoa_r+0x394>
 80062c4:	2602      	movs	r6, #2
 80062c6:	e742      	b.n	800614e <_dtoa_r+0x39e>
 80062c8:	9c07      	ldr	r4, [sp, #28]
 80062ca:	9704      	str	r7, [sp, #16]
 80062cc:	e761      	b.n	8006192 <_dtoa_r+0x3e2>
 80062ce:	4b27      	ldr	r3, [pc, #156]	@ (800636c <_dtoa_r+0x5bc>)
 80062d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062da:	4454      	add	r4, sl
 80062dc:	2900      	cmp	r1, #0
 80062de:	d053      	beq.n	8006388 <_dtoa_r+0x5d8>
 80062e0:	4928      	ldr	r1, [pc, #160]	@ (8006384 <_dtoa_r+0x5d4>)
 80062e2:	2000      	movs	r0, #0
 80062e4:	f7fa fab2 	bl	800084c <__aeabi_ddiv>
 80062e8:	4633      	mov	r3, r6
 80062ea:	462a      	mov	r2, r5
 80062ec:	f7f9 ffcc 	bl	8000288 <__aeabi_dsub>
 80062f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062f4:	4656      	mov	r6, sl
 80062f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062fa:	f7fa fc2d 	bl	8000b58 <__aeabi_d2iz>
 80062fe:	4605      	mov	r5, r0
 8006300:	f7fa f910 	bl	8000524 <__aeabi_i2d>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800630c:	f7f9 ffbc 	bl	8000288 <__aeabi_dsub>
 8006310:	3530      	adds	r5, #48	@ 0x30
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800631a:	f806 5b01 	strb.w	r5, [r6], #1
 800631e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006322:	f7fa fbdb 	bl	8000adc <__aeabi_dcmplt>
 8006326:	2800      	cmp	r0, #0
 8006328:	d171      	bne.n	800640e <_dtoa_r+0x65e>
 800632a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800632e:	4911      	ldr	r1, [pc, #68]	@ (8006374 <_dtoa_r+0x5c4>)
 8006330:	2000      	movs	r0, #0
 8006332:	f7f9 ffa9 	bl	8000288 <__aeabi_dsub>
 8006336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800633a:	f7fa fbcf 	bl	8000adc <__aeabi_dcmplt>
 800633e:	2800      	cmp	r0, #0
 8006340:	f040 8095 	bne.w	800646e <_dtoa_r+0x6be>
 8006344:	42a6      	cmp	r6, r4
 8006346:	f43f af50 	beq.w	80061ea <_dtoa_r+0x43a>
 800634a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800634e:	4b0a      	ldr	r3, [pc, #40]	@ (8006378 <_dtoa_r+0x5c8>)
 8006350:	2200      	movs	r2, #0
 8006352:	f7fa f951 	bl	80005f8 <__aeabi_dmul>
 8006356:	4b08      	ldr	r3, [pc, #32]	@ (8006378 <_dtoa_r+0x5c8>)
 8006358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800635c:	2200      	movs	r2, #0
 800635e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006362:	f7fa f949 	bl	80005f8 <__aeabi_dmul>
 8006366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800636a:	e7c4      	b.n	80062f6 <_dtoa_r+0x546>
 800636c:	08007a70 	.word	0x08007a70
 8006370:	08007a48 	.word	0x08007a48
 8006374:	3ff00000 	.word	0x3ff00000
 8006378:	40240000 	.word	0x40240000
 800637c:	401c0000 	.word	0x401c0000
 8006380:	40140000 	.word	0x40140000
 8006384:	3fe00000 	.word	0x3fe00000
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	f7fa f934 	bl	80005f8 <__aeabi_dmul>
 8006390:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006394:	9415      	str	r4, [sp, #84]	@ 0x54
 8006396:	4656      	mov	r6, sl
 8006398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800639c:	f7fa fbdc 	bl	8000b58 <__aeabi_d2iz>
 80063a0:	4605      	mov	r5, r0
 80063a2:	f7fa f8bf 	bl	8000524 <__aeabi_i2d>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ae:	f7f9 ff6b 	bl	8000288 <__aeabi_dsub>
 80063b2:	3530      	adds	r5, #48	@ 0x30
 80063b4:	f806 5b01 	strb.w	r5, [r6], #1
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	42a6      	cmp	r6, r4
 80063be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	d124      	bne.n	8006412 <_dtoa_r+0x662>
 80063c8:	4bac      	ldr	r3, [pc, #688]	@ (800667c <_dtoa_r+0x8cc>)
 80063ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063ce:	f7f9 ff5d 	bl	800028c <__adddf3>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063da:	f7fa fb9d 	bl	8000b18 <__aeabi_dcmpgt>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d145      	bne.n	800646e <_dtoa_r+0x6be>
 80063e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063e6:	49a5      	ldr	r1, [pc, #660]	@ (800667c <_dtoa_r+0x8cc>)
 80063e8:	2000      	movs	r0, #0
 80063ea:	f7f9 ff4d 	bl	8000288 <__aeabi_dsub>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f6:	f7fa fb71 	bl	8000adc <__aeabi_dcmplt>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	f43f aef5 	beq.w	80061ea <_dtoa_r+0x43a>
 8006400:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006402:	1e73      	subs	r3, r6, #1
 8006404:	9315      	str	r3, [sp, #84]	@ 0x54
 8006406:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800640a:	2b30      	cmp	r3, #48	@ 0x30
 800640c:	d0f8      	beq.n	8006400 <_dtoa_r+0x650>
 800640e:	9f04      	ldr	r7, [sp, #16]
 8006410:	e73e      	b.n	8006290 <_dtoa_r+0x4e0>
 8006412:	4b9b      	ldr	r3, [pc, #620]	@ (8006680 <_dtoa_r+0x8d0>)
 8006414:	f7fa f8f0 	bl	80005f8 <__aeabi_dmul>
 8006418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800641c:	e7bc      	b.n	8006398 <_dtoa_r+0x5e8>
 800641e:	d10c      	bne.n	800643a <_dtoa_r+0x68a>
 8006420:	4b98      	ldr	r3, [pc, #608]	@ (8006684 <_dtoa_r+0x8d4>)
 8006422:	2200      	movs	r2, #0
 8006424:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006428:	f7fa f8e6 	bl	80005f8 <__aeabi_dmul>
 800642c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006430:	f7fa fb68 	bl	8000b04 <__aeabi_dcmpge>
 8006434:	2800      	cmp	r0, #0
 8006436:	f000 8157 	beq.w	80066e8 <_dtoa_r+0x938>
 800643a:	2400      	movs	r4, #0
 800643c:	4625      	mov	r5, r4
 800643e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006440:	43db      	mvns	r3, r3
 8006442:	9304      	str	r3, [sp, #16]
 8006444:	4656      	mov	r6, sl
 8006446:	2700      	movs	r7, #0
 8006448:	4621      	mov	r1, r4
 800644a:	4658      	mov	r0, fp
 800644c:	f000 fbb4 	bl	8006bb8 <_Bfree>
 8006450:	2d00      	cmp	r5, #0
 8006452:	d0dc      	beq.n	800640e <_dtoa_r+0x65e>
 8006454:	b12f      	cbz	r7, 8006462 <_dtoa_r+0x6b2>
 8006456:	42af      	cmp	r7, r5
 8006458:	d003      	beq.n	8006462 <_dtoa_r+0x6b2>
 800645a:	4639      	mov	r1, r7
 800645c:	4658      	mov	r0, fp
 800645e:	f000 fbab 	bl	8006bb8 <_Bfree>
 8006462:	4629      	mov	r1, r5
 8006464:	4658      	mov	r0, fp
 8006466:	f000 fba7 	bl	8006bb8 <_Bfree>
 800646a:	e7d0      	b.n	800640e <_dtoa_r+0x65e>
 800646c:	9704      	str	r7, [sp, #16]
 800646e:	4633      	mov	r3, r6
 8006470:	461e      	mov	r6, r3
 8006472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006476:	2a39      	cmp	r2, #57	@ 0x39
 8006478:	d107      	bne.n	800648a <_dtoa_r+0x6da>
 800647a:	459a      	cmp	sl, r3
 800647c:	d1f8      	bne.n	8006470 <_dtoa_r+0x6c0>
 800647e:	9a04      	ldr	r2, [sp, #16]
 8006480:	3201      	adds	r2, #1
 8006482:	9204      	str	r2, [sp, #16]
 8006484:	2230      	movs	r2, #48	@ 0x30
 8006486:	f88a 2000 	strb.w	r2, [sl]
 800648a:	781a      	ldrb	r2, [r3, #0]
 800648c:	3201      	adds	r2, #1
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	e7bd      	b.n	800640e <_dtoa_r+0x65e>
 8006492:	4b7b      	ldr	r3, [pc, #492]	@ (8006680 <_dtoa_r+0x8d0>)
 8006494:	2200      	movs	r2, #0
 8006496:	f7fa f8af 	bl	80005f8 <__aeabi_dmul>
 800649a:	2200      	movs	r2, #0
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	460d      	mov	r5, r1
 80064a2:	f7fa fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	f43f aebb 	beq.w	8006222 <_dtoa_r+0x472>
 80064ac:	e6f0      	b.n	8006290 <_dtoa_r+0x4e0>
 80064ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	f000 80db 	beq.w	800666c <_dtoa_r+0x8bc>
 80064b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064b8:	2a01      	cmp	r2, #1
 80064ba:	f300 80bf 	bgt.w	800663c <_dtoa_r+0x88c>
 80064be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80064c0:	2a00      	cmp	r2, #0
 80064c2:	f000 80b7 	beq.w	8006634 <_dtoa_r+0x884>
 80064c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80064ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064cc:	4646      	mov	r6, r8
 80064ce:	9a08      	ldr	r2, [sp, #32]
 80064d0:	2101      	movs	r1, #1
 80064d2:	441a      	add	r2, r3
 80064d4:	4658      	mov	r0, fp
 80064d6:	4498      	add	r8, r3
 80064d8:	9208      	str	r2, [sp, #32]
 80064da:	f000 fc21 	bl	8006d20 <__i2b>
 80064de:	4605      	mov	r5, r0
 80064e0:	b15e      	cbz	r6, 80064fa <_dtoa_r+0x74a>
 80064e2:	9b08      	ldr	r3, [sp, #32]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dd08      	ble.n	80064fa <_dtoa_r+0x74a>
 80064e8:	42b3      	cmp	r3, r6
 80064ea:	9a08      	ldr	r2, [sp, #32]
 80064ec:	bfa8      	it	ge
 80064ee:	4633      	movge	r3, r6
 80064f0:	eba8 0803 	sub.w	r8, r8, r3
 80064f4:	1af6      	subs	r6, r6, r3
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	9308      	str	r3, [sp, #32]
 80064fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064fc:	b1f3      	cbz	r3, 800653c <_dtoa_r+0x78c>
 80064fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 80b7 	beq.w	8006674 <_dtoa_r+0x8c4>
 8006506:	b18c      	cbz	r4, 800652c <_dtoa_r+0x77c>
 8006508:	4629      	mov	r1, r5
 800650a:	4622      	mov	r2, r4
 800650c:	4658      	mov	r0, fp
 800650e:	f000 fcc7 	bl	8006ea0 <__pow5mult>
 8006512:	464a      	mov	r2, r9
 8006514:	4601      	mov	r1, r0
 8006516:	4605      	mov	r5, r0
 8006518:	4658      	mov	r0, fp
 800651a:	f000 fc17 	bl	8006d4c <__multiply>
 800651e:	4649      	mov	r1, r9
 8006520:	9004      	str	r0, [sp, #16]
 8006522:	4658      	mov	r0, fp
 8006524:	f000 fb48 	bl	8006bb8 <_Bfree>
 8006528:	9b04      	ldr	r3, [sp, #16]
 800652a:	4699      	mov	r9, r3
 800652c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800652e:	1b1a      	subs	r2, r3, r4
 8006530:	d004      	beq.n	800653c <_dtoa_r+0x78c>
 8006532:	4649      	mov	r1, r9
 8006534:	4658      	mov	r0, fp
 8006536:	f000 fcb3 	bl	8006ea0 <__pow5mult>
 800653a:	4681      	mov	r9, r0
 800653c:	2101      	movs	r1, #1
 800653e:	4658      	mov	r0, fp
 8006540:	f000 fbee 	bl	8006d20 <__i2b>
 8006544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006546:	4604      	mov	r4, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 81cf 	beq.w	80068ec <_dtoa_r+0xb3c>
 800654e:	461a      	mov	r2, r3
 8006550:	4601      	mov	r1, r0
 8006552:	4658      	mov	r0, fp
 8006554:	f000 fca4 	bl	8006ea0 <__pow5mult>
 8006558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800655a:	2b01      	cmp	r3, #1
 800655c:	4604      	mov	r4, r0
 800655e:	f300 8095 	bgt.w	800668c <_dtoa_r+0x8dc>
 8006562:	9b02      	ldr	r3, [sp, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f040 8087 	bne.w	8006678 <_dtoa_r+0x8c8>
 800656a:	9b03      	ldr	r3, [sp, #12]
 800656c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006570:	2b00      	cmp	r3, #0
 8006572:	f040 8089 	bne.w	8006688 <_dtoa_r+0x8d8>
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800657c:	0d1b      	lsrs	r3, r3, #20
 800657e:	051b      	lsls	r3, r3, #20
 8006580:	b12b      	cbz	r3, 800658e <_dtoa_r+0x7de>
 8006582:	9b08      	ldr	r3, [sp, #32]
 8006584:	3301      	adds	r3, #1
 8006586:	9308      	str	r3, [sp, #32]
 8006588:	f108 0801 	add.w	r8, r8, #1
 800658c:	2301      	movs	r3, #1
 800658e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 81b0 	beq.w	80068f8 <_dtoa_r+0xb48>
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800659e:	6918      	ldr	r0, [r3, #16]
 80065a0:	f000 fb72 	bl	8006c88 <__hi0bits>
 80065a4:	f1c0 0020 	rsb	r0, r0, #32
 80065a8:	9b08      	ldr	r3, [sp, #32]
 80065aa:	4418      	add	r0, r3
 80065ac:	f010 001f 	ands.w	r0, r0, #31
 80065b0:	d077      	beq.n	80066a2 <_dtoa_r+0x8f2>
 80065b2:	f1c0 0320 	rsb	r3, r0, #32
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	dd6b      	ble.n	8006692 <_dtoa_r+0x8e2>
 80065ba:	9b08      	ldr	r3, [sp, #32]
 80065bc:	f1c0 001c 	rsb	r0, r0, #28
 80065c0:	4403      	add	r3, r0
 80065c2:	4480      	add	r8, r0
 80065c4:	4406      	add	r6, r0
 80065c6:	9308      	str	r3, [sp, #32]
 80065c8:	f1b8 0f00 	cmp.w	r8, #0
 80065cc:	dd05      	ble.n	80065da <_dtoa_r+0x82a>
 80065ce:	4649      	mov	r1, r9
 80065d0:	4642      	mov	r2, r8
 80065d2:	4658      	mov	r0, fp
 80065d4:	f000 fcbe 	bl	8006f54 <__lshift>
 80065d8:	4681      	mov	r9, r0
 80065da:	9b08      	ldr	r3, [sp, #32]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dd05      	ble.n	80065ec <_dtoa_r+0x83c>
 80065e0:	4621      	mov	r1, r4
 80065e2:	461a      	mov	r2, r3
 80065e4:	4658      	mov	r0, fp
 80065e6:	f000 fcb5 	bl	8006f54 <__lshift>
 80065ea:	4604      	mov	r4, r0
 80065ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d059      	beq.n	80066a6 <_dtoa_r+0x8f6>
 80065f2:	4621      	mov	r1, r4
 80065f4:	4648      	mov	r0, r9
 80065f6:	f000 fd19 	bl	800702c <__mcmp>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	da53      	bge.n	80066a6 <_dtoa_r+0x8f6>
 80065fe:	1e7b      	subs	r3, r7, #1
 8006600:	9304      	str	r3, [sp, #16]
 8006602:	4649      	mov	r1, r9
 8006604:	2300      	movs	r3, #0
 8006606:	220a      	movs	r2, #10
 8006608:	4658      	mov	r0, fp
 800660a:	f000 faf7 	bl	8006bfc <__multadd>
 800660e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006610:	4681      	mov	r9, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 8172 	beq.w	80068fc <_dtoa_r+0xb4c>
 8006618:	2300      	movs	r3, #0
 800661a:	4629      	mov	r1, r5
 800661c:	220a      	movs	r2, #10
 800661e:	4658      	mov	r0, fp
 8006620:	f000 faec 	bl	8006bfc <__multadd>
 8006624:	9b00      	ldr	r3, [sp, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	4605      	mov	r5, r0
 800662a:	dc67      	bgt.n	80066fc <_dtoa_r+0x94c>
 800662c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662e:	2b02      	cmp	r3, #2
 8006630:	dc41      	bgt.n	80066b6 <_dtoa_r+0x906>
 8006632:	e063      	b.n	80066fc <_dtoa_r+0x94c>
 8006634:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006636:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800663a:	e746      	b.n	80064ca <_dtoa_r+0x71a>
 800663c:	9b07      	ldr	r3, [sp, #28]
 800663e:	1e5c      	subs	r4, r3, #1
 8006640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006642:	42a3      	cmp	r3, r4
 8006644:	bfbf      	itttt	lt
 8006646:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006648:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800664a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800664c:	1ae3      	sublt	r3, r4, r3
 800664e:	bfb4      	ite	lt
 8006650:	18d2      	addlt	r2, r2, r3
 8006652:	1b1c      	subge	r4, r3, r4
 8006654:	9b07      	ldr	r3, [sp, #28]
 8006656:	bfbc      	itt	lt
 8006658:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800665a:	2400      	movlt	r4, #0
 800665c:	2b00      	cmp	r3, #0
 800665e:	bfb5      	itete	lt
 8006660:	eba8 0603 	sublt.w	r6, r8, r3
 8006664:	9b07      	ldrge	r3, [sp, #28]
 8006666:	2300      	movlt	r3, #0
 8006668:	4646      	movge	r6, r8
 800666a:	e730      	b.n	80064ce <_dtoa_r+0x71e>
 800666c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800666e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006670:	4646      	mov	r6, r8
 8006672:	e735      	b.n	80064e0 <_dtoa_r+0x730>
 8006674:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006676:	e75c      	b.n	8006532 <_dtoa_r+0x782>
 8006678:	2300      	movs	r3, #0
 800667a:	e788      	b.n	800658e <_dtoa_r+0x7de>
 800667c:	3fe00000 	.word	0x3fe00000
 8006680:	40240000 	.word	0x40240000
 8006684:	40140000 	.word	0x40140000
 8006688:	9b02      	ldr	r3, [sp, #8]
 800668a:	e780      	b.n	800658e <_dtoa_r+0x7de>
 800668c:	2300      	movs	r3, #0
 800668e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006690:	e782      	b.n	8006598 <_dtoa_r+0x7e8>
 8006692:	d099      	beq.n	80065c8 <_dtoa_r+0x818>
 8006694:	9a08      	ldr	r2, [sp, #32]
 8006696:	331c      	adds	r3, #28
 8006698:	441a      	add	r2, r3
 800669a:	4498      	add	r8, r3
 800669c:	441e      	add	r6, r3
 800669e:	9208      	str	r2, [sp, #32]
 80066a0:	e792      	b.n	80065c8 <_dtoa_r+0x818>
 80066a2:	4603      	mov	r3, r0
 80066a4:	e7f6      	b.n	8006694 <_dtoa_r+0x8e4>
 80066a6:	9b07      	ldr	r3, [sp, #28]
 80066a8:	9704      	str	r7, [sp, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	dc20      	bgt.n	80066f0 <_dtoa_r+0x940>
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	dd1e      	ble.n	80066f4 <_dtoa_r+0x944>
 80066b6:	9b00      	ldr	r3, [sp, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f47f aec0 	bne.w	800643e <_dtoa_r+0x68e>
 80066be:	4621      	mov	r1, r4
 80066c0:	2205      	movs	r2, #5
 80066c2:	4658      	mov	r0, fp
 80066c4:	f000 fa9a 	bl	8006bfc <__multadd>
 80066c8:	4601      	mov	r1, r0
 80066ca:	4604      	mov	r4, r0
 80066cc:	4648      	mov	r0, r9
 80066ce:	f000 fcad 	bl	800702c <__mcmp>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	f77f aeb3 	ble.w	800643e <_dtoa_r+0x68e>
 80066d8:	4656      	mov	r6, sl
 80066da:	2331      	movs	r3, #49	@ 0x31
 80066dc:	f806 3b01 	strb.w	r3, [r6], #1
 80066e0:	9b04      	ldr	r3, [sp, #16]
 80066e2:	3301      	adds	r3, #1
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	e6ae      	b.n	8006446 <_dtoa_r+0x696>
 80066e8:	9c07      	ldr	r4, [sp, #28]
 80066ea:	9704      	str	r7, [sp, #16]
 80066ec:	4625      	mov	r5, r4
 80066ee:	e7f3      	b.n	80066d8 <_dtoa_r+0x928>
 80066f0:	9b07      	ldr	r3, [sp, #28]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 8104 	beq.w	8006904 <_dtoa_r+0xb54>
 80066fc:	2e00      	cmp	r6, #0
 80066fe:	dd05      	ble.n	800670c <_dtoa_r+0x95c>
 8006700:	4629      	mov	r1, r5
 8006702:	4632      	mov	r2, r6
 8006704:	4658      	mov	r0, fp
 8006706:	f000 fc25 	bl	8006f54 <__lshift>
 800670a:	4605      	mov	r5, r0
 800670c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800670e:	2b00      	cmp	r3, #0
 8006710:	d05a      	beq.n	80067c8 <_dtoa_r+0xa18>
 8006712:	6869      	ldr	r1, [r5, #4]
 8006714:	4658      	mov	r0, fp
 8006716:	f000 fa0f 	bl	8006b38 <_Balloc>
 800671a:	4606      	mov	r6, r0
 800671c:	b928      	cbnz	r0, 800672a <_dtoa_r+0x97a>
 800671e:	4b84      	ldr	r3, [pc, #528]	@ (8006930 <_dtoa_r+0xb80>)
 8006720:	4602      	mov	r2, r0
 8006722:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006726:	f7ff bb5a 	b.w	8005dde <_dtoa_r+0x2e>
 800672a:	692a      	ldr	r2, [r5, #16]
 800672c:	3202      	adds	r2, #2
 800672e:	0092      	lsls	r2, r2, #2
 8006730:	f105 010c 	add.w	r1, r5, #12
 8006734:	300c      	adds	r0, #12
 8006736:	f000 fec1 	bl	80074bc <memcpy>
 800673a:	2201      	movs	r2, #1
 800673c:	4631      	mov	r1, r6
 800673e:	4658      	mov	r0, fp
 8006740:	f000 fc08 	bl	8006f54 <__lshift>
 8006744:	f10a 0301 	add.w	r3, sl, #1
 8006748:	9307      	str	r3, [sp, #28]
 800674a:	9b00      	ldr	r3, [sp, #0]
 800674c:	4453      	add	r3, sl
 800674e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006750:	9b02      	ldr	r3, [sp, #8]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	462f      	mov	r7, r5
 8006758:	930a      	str	r3, [sp, #40]	@ 0x28
 800675a:	4605      	mov	r5, r0
 800675c:	9b07      	ldr	r3, [sp, #28]
 800675e:	4621      	mov	r1, r4
 8006760:	3b01      	subs	r3, #1
 8006762:	4648      	mov	r0, r9
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	f7ff fa9a 	bl	8005c9e <quorem>
 800676a:	4639      	mov	r1, r7
 800676c:	9002      	str	r0, [sp, #8]
 800676e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006772:	4648      	mov	r0, r9
 8006774:	f000 fc5a 	bl	800702c <__mcmp>
 8006778:	462a      	mov	r2, r5
 800677a:	9008      	str	r0, [sp, #32]
 800677c:	4621      	mov	r1, r4
 800677e:	4658      	mov	r0, fp
 8006780:	f000 fc70 	bl	8007064 <__mdiff>
 8006784:	68c2      	ldr	r2, [r0, #12]
 8006786:	4606      	mov	r6, r0
 8006788:	bb02      	cbnz	r2, 80067cc <_dtoa_r+0xa1c>
 800678a:	4601      	mov	r1, r0
 800678c:	4648      	mov	r0, r9
 800678e:	f000 fc4d 	bl	800702c <__mcmp>
 8006792:	4602      	mov	r2, r0
 8006794:	4631      	mov	r1, r6
 8006796:	4658      	mov	r0, fp
 8006798:	920e      	str	r2, [sp, #56]	@ 0x38
 800679a:	f000 fa0d 	bl	8006bb8 <_Bfree>
 800679e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067a2:	9e07      	ldr	r6, [sp, #28]
 80067a4:	ea43 0102 	orr.w	r1, r3, r2
 80067a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067aa:	4319      	orrs	r1, r3
 80067ac:	d110      	bne.n	80067d0 <_dtoa_r+0xa20>
 80067ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067b2:	d029      	beq.n	8006808 <_dtoa_r+0xa58>
 80067b4:	9b08      	ldr	r3, [sp, #32]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	dd02      	ble.n	80067c0 <_dtoa_r+0xa10>
 80067ba:	9b02      	ldr	r3, [sp, #8]
 80067bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80067c0:	9b00      	ldr	r3, [sp, #0]
 80067c2:	f883 8000 	strb.w	r8, [r3]
 80067c6:	e63f      	b.n	8006448 <_dtoa_r+0x698>
 80067c8:	4628      	mov	r0, r5
 80067ca:	e7bb      	b.n	8006744 <_dtoa_r+0x994>
 80067cc:	2201      	movs	r2, #1
 80067ce:	e7e1      	b.n	8006794 <_dtoa_r+0x9e4>
 80067d0:	9b08      	ldr	r3, [sp, #32]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	db04      	blt.n	80067e0 <_dtoa_r+0xa30>
 80067d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067d8:	430b      	orrs	r3, r1
 80067da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067dc:	430b      	orrs	r3, r1
 80067de:	d120      	bne.n	8006822 <_dtoa_r+0xa72>
 80067e0:	2a00      	cmp	r2, #0
 80067e2:	dded      	ble.n	80067c0 <_dtoa_r+0xa10>
 80067e4:	4649      	mov	r1, r9
 80067e6:	2201      	movs	r2, #1
 80067e8:	4658      	mov	r0, fp
 80067ea:	f000 fbb3 	bl	8006f54 <__lshift>
 80067ee:	4621      	mov	r1, r4
 80067f0:	4681      	mov	r9, r0
 80067f2:	f000 fc1b 	bl	800702c <__mcmp>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	dc03      	bgt.n	8006802 <_dtoa_r+0xa52>
 80067fa:	d1e1      	bne.n	80067c0 <_dtoa_r+0xa10>
 80067fc:	f018 0f01 	tst.w	r8, #1
 8006800:	d0de      	beq.n	80067c0 <_dtoa_r+0xa10>
 8006802:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006806:	d1d8      	bne.n	80067ba <_dtoa_r+0xa0a>
 8006808:	9a00      	ldr	r2, [sp, #0]
 800680a:	2339      	movs	r3, #57	@ 0x39
 800680c:	7013      	strb	r3, [r2, #0]
 800680e:	4633      	mov	r3, r6
 8006810:	461e      	mov	r6, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006818:	2a39      	cmp	r2, #57	@ 0x39
 800681a:	d052      	beq.n	80068c2 <_dtoa_r+0xb12>
 800681c:	3201      	adds	r2, #1
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	e612      	b.n	8006448 <_dtoa_r+0x698>
 8006822:	2a00      	cmp	r2, #0
 8006824:	dd07      	ble.n	8006836 <_dtoa_r+0xa86>
 8006826:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800682a:	d0ed      	beq.n	8006808 <_dtoa_r+0xa58>
 800682c:	9a00      	ldr	r2, [sp, #0]
 800682e:	f108 0301 	add.w	r3, r8, #1
 8006832:	7013      	strb	r3, [r2, #0]
 8006834:	e608      	b.n	8006448 <_dtoa_r+0x698>
 8006836:	9b07      	ldr	r3, [sp, #28]
 8006838:	9a07      	ldr	r2, [sp, #28]
 800683a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800683e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006840:	4293      	cmp	r3, r2
 8006842:	d028      	beq.n	8006896 <_dtoa_r+0xae6>
 8006844:	4649      	mov	r1, r9
 8006846:	2300      	movs	r3, #0
 8006848:	220a      	movs	r2, #10
 800684a:	4658      	mov	r0, fp
 800684c:	f000 f9d6 	bl	8006bfc <__multadd>
 8006850:	42af      	cmp	r7, r5
 8006852:	4681      	mov	r9, r0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	f04f 020a 	mov.w	r2, #10
 800685c:	4639      	mov	r1, r7
 800685e:	4658      	mov	r0, fp
 8006860:	d107      	bne.n	8006872 <_dtoa_r+0xac2>
 8006862:	f000 f9cb 	bl	8006bfc <__multadd>
 8006866:	4607      	mov	r7, r0
 8006868:	4605      	mov	r5, r0
 800686a:	9b07      	ldr	r3, [sp, #28]
 800686c:	3301      	adds	r3, #1
 800686e:	9307      	str	r3, [sp, #28]
 8006870:	e774      	b.n	800675c <_dtoa_r+0x9ac>
 8006872:	f000 f9c3 	bl	8006bfc <__multadd>
 8006876:	4629      	mov	r1, r5
 8006878:	4607      	mov	r7, r0
 800687a:	2300      	movs	r3, #0
 800687c:	220a      	movs	r2, #10
 800687e:	4658      	mov	r0, fp
 8006880:	f000 f9bc 	bl	8006bfc <__multadd>
 8006884:	4605      	mov	r5, r0
 8006886:	e7f0      	b.n	800686a <_dtoa_r+0xaba>
 8006888:	9b00      	ldr	r3, [sp, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	bfcc      	ite	gt
 800688e:	461e      	movgt	r6, r3
 8006890:	2601      	movle	r6, #1
 8006892:	4456      	add	r6, sl
 8006894:	2700      	movs	r7, #0
 8006896:	4649      	mov	r1, r9
 8006898:	2201      	movs	r2, #1
 800689a:	4658      	mov	r0, fp
 800689c:	f000 fb5a 	bl	8006f54 <__lshift>
 80068a0:	4621      	mov	r1, r4
 80068a2:	4681      	mov	r9, r0
 80068a4:	f000 fbc2 	bl	800702c <__mcmp>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	dcb0      	bgt.n	800680e <_dtoa_r+0xa5e>
 80068ac:	d102      	bne.n	80068b4 <_dtoa_r+0xb04>
 80068ae:	f018 0f01 	tst.w	r8, #1
 80068b2:	d1ac      	bne.n	800680e <_dtoa_r+0xa5e>
 80068b4:	4633      	mov	r3, r6
 80068b6:	461e      	mov	r6, r3
 80068b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068bc:	2a30      	cmp	r2, #48	@ 0x30
 80068be:	d0fa      	beq.n	80068b6 <_dtoa_r+0xb06>
 80068c0:	e5c2      	b.n	8006448 <_dtoa_r+0x698>
 80068c2:	459a      	cmp	sl, r3
 80068c4:	d1a4      	bne.n	8006810 <_dtoa_r+0xa60>
 80068c6:	9b04      	ldr	r3, [sp, #16]
 80068c8:	3301      	adds	r3, #1
 80068ca:	9304      	str	r3, [sp, #16]
 80068cc:	2331      	movs	r3, #49	@ 0x31
 80068ce:	f88a 3000 	strb.w	r3, [sl]
 80068d2:	e5b9      	b.n	8006448 <_dtoa_r+0x698>
 80068d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006934 <_dtoa_r+0xb84>
 80068da:	b11b      	cbz	r3, 80068e4 <_dtoa_r+0xb34>
 80068dc:	f10a 0308 	add.w	r3, sl, #8
 80068e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	4650      	mov	r0, sl
 80068e6:	b019      	add	sp, #100	@ 0x64
 80068e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	f77f ae37 	ble.w	8006562 <_dtoa_r+0x7b2>
 80068f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80068f8:	2001      	movs	r0, #1
 80068fa:	e655      	b.n	80065a8 <_dtoa_r+0x7f8>
 80068fc:	9b00      	ldr	r3, [sp, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f77f aed6 	ble.w	80066b0 <_dtoa_r+0x900>
 8006904:	4656      	mov	r6, sl
 8006906:	4621      	mov	r1, r4
 8006908:	4648      	mov	r0, r9
 800690a:	f7ff f9c8 	bl	8005c9e <quorem>
 800690e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006912:	f806 8b01 	strb.w	r8, [r6], #1
 8006916:	9b00      	ldr	r3, [sp, #0]
 8006918:	eba6 020a 	sub.w	r2, r6, sl
 800691c:	4293      	cmp	r3, r2
 800691e:	ddb3      	ble.n	8006888 <_dtoa_r+0xad8>
 8006920:	4649      	mov	r1, r9
 8006922:	2300      	movs	r3, #0
 8006924:	220a      	movs	r2, #10
 8006926:	4658      	mov	r0, fp
 8006928:	f000 f968 	bl	8006bfc <__multadd>
 800692c:	4681      	mov	r9, r0
 800692e:	e7ea      	b.n	8006906 <_dtoa_r+0xb56>
 8006930:	080079d0 	.word	0x080079d0
 8006934:	08007954 	.word	0x08007954

08006938 <_free_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4605      	mov	r5, r0
 800693c:	2900      	cmp	r1, #0
 800693e:	d041      	beq.n	80069c4 <_free_r+0x8c>
 8006940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006944:	1f0c      	subs	r4, r1, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	bfb8      	it	lt
 800694a:	18e4      	addlt	r4, r4, r3
 800694c:	f000 f8e8 	bl	8006b20 <__malloc_lock>
 8006950:	4a1d      	ldr	r2, [pc, #116]	@ (80069c8 <_free_r+0x90>)
 8006952:	6813      	ldr	r3, [r2, #0]
 8006954:	b933      	cbnz	r3, 8006964 <_free_r+0x2c>
 8006956:	6063      	str	r3, [r4, #4]
 8006958:	6014      	str	r4, [r2, #0]
 800695a:	4628      	mov	r0, r5
 800695c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006960:	f000 b8e4 	b.w	8006b2c <__malloc_unlock>
 8006964:	42a3      	cmp	r3, r4
 8006966:	d908      	bls.n	800697a <_free_r+0x42>
 8006968:	6820      	ldr	r0, [r4, #0]
 800696a:	1821      	adds	r1, r4, r0
 800696c:	428b      	cmp	r3, r1
 800696e:	bf01      	itttt	eq
 8006970:	6819      	ldreq	r1, [r3, #0]
 8006972:	685b      	ldreq	r3, [r3, #4]
 8006974:	1809      	addeq	r1, r1, r0
 8006976:	6021      	streq	r1, [r4, #0]
 8006978:	e7ed      	b.n	8006956 <_free_r+0x1e>
 800697a:	461a      	mov	r2, r3
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	b10b      	cbz	r3, 8006984 <_free_r+0x4c>
 8006980:	42a3      	cmp	r3, r4
 8006982:	d9fa      	bls.n	800697a <_free_r+0x42>
 8006984:	6811      	ldr	r1, [r2, #0]
 8006986:	1850      	adds	r0, r2, r1
 8006988:	42a0      	cmp	r0, r4
 800698a:	d10b      	bne.n	80069a4 <_free_r+0x6c>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	4401      	add	r1, r0
 8006990:	1850      	adds	r0, r2, r1
 8006992:	4283      	cmp	r3, r0
 8006994:	6011      	str	r1, [r2, #0]
 8006996:	d1e0      	bne.n	800695a <_free_r+0x22>
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	6053      	str	r3, [r2, #4]
 800699e:	4408      	add	r0, r1
 80069a0:	6010      	str	r0, [r2, #0]
 80069a2:	e7da      	b.n	800695a <_free_r+0x22>
 80069a4:	d902      	bls.n	80069ac <_free_r+0x74>
 80069a6:	230c      	movs	r3, #12
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	e7d6      	b.n	800695a <_free_r+0x22>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	1821      	adds	r1, r4, r0
 80069b0:	428b      	cmp	r3, r1
 80069b2:	bf04      	itt	eq
 80069b4:	6819      	ldreq	r1, [r3, #0]
 80069b6:	685b      	ldreq	r3, [r3, #4]
 80069b8:	6063      	str	r3, [r4, #4]
 80069ba:	bf04      	itt	eq
 80069bc:	1809      	addeq	r1, r1, r0
 80069be:	6021      	streq	r1, [r4, #0]
 80069c0:	6054      	str	r4, [r2, #4]
 80069c2:	e7ca      	b.n	800695a <_free_r+0x22>
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
 80069c6:	bf00      	nop
 80069c8:	200005ac 	.word	0x200005ac

080069cc <malloc>:
 80069cc:	4b02      	ldr	r3, [pc, #8]	@ (80069d8 <malloc+0xc>)
 80069ce:	4601      	mov	r1, r0
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	f000 b825 	b.w	8006a20 <_malloc_r>
 80069d6:	bf00      	nop
 80069d8:	20000018 	.word	0x20000018

080069dc <sbrk_aligned>:
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	4e0f      	ldr	r6, [pc, #60]	@ (8006a1c <sbrk_aligned+0x40>)
 80069e0:	460c      	mov	r4, r1
 80069e2:	6831      	ldr	r1, [r6, #0]
 80069e4:	4605      	mov	r5, r0
 80069e6:	b911      	cbnz	r1, 80069ee <sbrk_aligned+0x12>
 80069e8:	f000 fd58 	bl	800749c <_sbrk_r>
 80069ec:	6030      	str	r0, [r6, #0]
 80069ee:	4621      	mov	r1, r4
 80069f0:	4628      	mov	r0, r5
 80069f2:	f000 fd53 	bl	800749c <_sbrk_r>
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	d103      	bne.n	8006a02 <sbrk_aligned+0x26>
 80069fa:	f04f 34ff 	mov.w	r4, #4294967295
 80069fe:	4620      	mov	r0, r4
 8006a00:	bd70      	pop	{r4, r5, r6, pc}
 8006a02:	1cc4      	adds	r4, r0, #3
 8006a04:	f024 0403 	bic.w	r4, r4, #3
 8006a08:	42a0      	cmp	r0, r4
 8006a0a:	d0f8      	beq.n	80069fe <sbrk_aligned+0x22>
 8006a0c:	1a21      	subs	r1, r4, r0
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 fd44 	bl	800749c <_sbrk_r>
 8006a14:	3001      	adds	r0, #1
 8006a16:	d1f2      	bne.n	80069fe <sbrk_aligned+0x22>
 8006a18:	e7ef      	b.n	80069fa <sbrk_aligned+0x1e>
 8006a1a:	bf00      	nop
 8006a1c:	200005a8 	.word	0x200005a8

08006a20 <_malloc_r>:
 8006a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a24:	1ccd      	adds	r5, r1, #3
 8006a26:	f025 0503 	bic.w	r5, r5, #3
 8006a2a:	3508      	adds	r5, #8
 8006a2c:	2d0c      	cmp	r5, #12
 8006a2e:	bf38      	it	cc
 8006a30:	250c      	movcc	r5, #12
 8006a32:	2d00      	cmp	r5, #0
 8006a34:	4606      	mov	r6, r0
 8006a36:	db01      	blt.n	8006a3c <_malloc_r+0x1c>
 8006a38:	42a9      	cmp	r1, r5
 8006a3a:	d904      	bls.n	8006a46 <_malloc_r+0x26>
 8006a3c:	230c      	movs	r3, #12
 8006a3e:	6033      	str	r3, [r6, #0]
 8006a40:	2000      	movs	r0, #0
 8006a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b1c <_malloc_r+0xfc>
 8006a4a:	f000 f869 	bl	8006b20 <__malloc_lock>
 8006a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a52:	461c      	mov	r4, r3
 8006a54:	bb44      	cbnz	r4, 8006aa8 <_malloc_r+0x88>
 8006a56:	4629      	mov	r1, r5
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7ff ffbf 	bl	80069dc <sbrk_aligned>
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	4604      	mov	r4, r0
 8006a62:	d158      	bne.n	8006b16 <_malloc_r+0xf6>
 8006a64:	f8d8 4000 	ldr.w	r4, [r8]
 8006a68:	4627      	mov	r7, r4
 8006a6a:	2f00      	cmp	r7, #0
 8006a6c:	d143      	bne.n	8006af6 <_malloc_r+0xd6>
 8006a6e:	2c00      	cmp	r4, #0
 8006a70:	d04b      	beq.n	8006b0a <_malloc_r+0xea>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	4639      	mov	r1, r7
 8006a76:	4630      	mov	r0, r6
 8006a78:	eb04 0903 	add.w	r9, r4, r3
 8006a7c:	f000 fd0e 	bl	800749c <_sbrk_r>
 8006a80:	4581      	cmp	r9, r0
 8006a82:	d142      	bne.n	8006b0a <_malloc_r+0xea>
 8006a84:	6821      	ldr	r1, [r4, #0]
 8006a86:	1a6d      	subs	r5, r5, r1
 8006a88:	4629      	mov	r1, r5
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f7ff ffa6 	bl	80069dc <sbrk_aligned>
 8006a90:	3001      	adds	r0, #1
 8006a92:	d03a      	beq.n	8006b0a <_malloc_r+0xea>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	442b      	add	r3, r5
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	bb62      	cbnz	r2, 8006afc <_malloc_r+0xdc>
 8006aa2:	f8c8 7000 	str.w	r7, [r8]
 8006aa6:	e00f      	b.n	8006ac8 <_malloc_r+0xa8>
 8006aa8:	6822      	ldr	r2, [r4, #0]
 8006aaa:	1b52      	subs	r2, r2, r5
 8006aac:	d420      	bmi.n	8006af0 <_malloc_r+0xd0>
 8006aae:	2a0b      	cmp	r2, #11
 8006ab0:	d917      	bls.n	8006ae2 <_malloc_r+0xc2>
 8006ab2:	1961      	adds	r1, r4, r5
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	6025      	str	r5, [r4, #0]
 8006ab8:	bf18      	it	ne
 8006aba:	6059      	strne	r1, [r3, #4]
 8006abc:	6863      	ldr	r3, [r4, #4]
 8006abe:	bf08      	it	eq
 8006ac0:	f8c8 1000 	streq.w	r1, [r8]
 8006ac4:	5162      	str	r2, [r4, r5]
 8006ac6:	604b      	str	r3, [r1, #4]
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f000 f82f 	bl	8006b2c <__malloc_unlock>
 8006ace:	f104 000b 	add.w	r0, r4, #11
 8006ad2:	1d23      	adds	r3, r4, #4
 8006ad4:	f020 0007 	bic.w	r0, r0, #7
 8006ad8:	1ac2      	subs	r2, r0, r3
 8006ada:	bf1c      	itt	ne
 8006adc:	1a1b      	subne	r3, r3, r0
 8006ade:	50a3      	strne	r3, [r4, r2]
 8006ae0:	e7af      	b.n	8006a42 <_malloc_r+0x22>
 8006ae2:	6862      	ldr	r2, [r4, #4]
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	bf0c      	ite	eq
 8006ae8:	f8c8 2000 	streq.w	r2, [r8]
 8006aec:	605a      	strne	r2, [r3, #4]
 8006aee:	e7eb      	b.n	8006ac8 <_malloc_r+0xa8>
 8006af0:	4623      	mov	r3, r4
 8006af2:	6864      	ldr	r4, [r4, #4]
 8006af4:	e7ae      	b.n	8006a54 <_malloc_r+0x34>
 8006af6:	463c      	mov	r4, r7
 8006af8:	687f      	ldr	r7, [r7, #4]
 8006afa:	e7b6      	b.n	8006a6a <_malloc_r+0x4a>
 8006afc:	461a      	mov	r2, r3
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	d1fb      	bne.n	8006afc <_malloc_r+0xdc>
 8006b04:	2300      	movs	r3, #0
 8006b06:	6053      	str	r3, [r2, #4]
 8006b08:	e7de      	b.n	8006ac8 <_malloc_r+0xa8>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	6033      	str	r3, [r6, #0]
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f000 f80c 	bl	8006b2c <__malloc_unlock>
 8006b14:	e794      	b.n	8006a40 <_malloc_r+0x20>
 8006b16:	6005      	str	r5, [r0, #0]
 8006b18:	e7d6      	b.n	8006ac8 <_malloc_r+0xa8>
 8006b1a:	bf00      	nop
 8006b1c:	200005ac 	.word	0x200005ac

08006b20 <__malloc_lock>:
 8006b20:	4801      	ldr	r0, [pc, #4]	@ (8006b28 <__malloc_lock+0x8>)
 8006b22:	f7ff b8ba 	b.w	8005c9a <__retarget_lock_acquire_recursive>
 8006b26:	bf00      	nop
 8006b28:	200005a4 	.word	0x200005a4

08006b2c <__malloc_unlock>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	@ (8006b34 <__malloc_unlock+0x8>)
 8006b2e:	f7ff b8b5 	b.w	8005c9c <__retarget_lock_release_recursive>
 8006b32:	bf00      	nop
 8006b34:	200005a4 	.word	0x200005a4

08006b38 <_Balloc>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	69c6      	ldr	r6, [r0, #28]
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	460d      	mov	r5, r1
 8006b40:	b976      	cbnz	r6, 8006b60 <_Balloc+0x28>
 8006b42:	2010      	movs	r0, #16
 8006b44:	f7ff ff42 	bl	80069cc <malloc>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	61e0      	str	r0, [r4, #28]
 8006b4c:	b920      	cbnz	r0, 8006b58 <_Balloc+0x20>
 8006b4e:	4b18      	ldr	r3, [pc, #96]	@ (8006bb0 <_Balloc+0x78>)
 8006b50:	4818      	ldr	r0, [pc, #96]	@ (8006bb4 <_Balloc+0x7c>)
 8006b52:	216b      	movs	r1, #107	@ 0x6b
 8006b54:	f000 fcc0 	bl	80074d8 <__assert_func>
 8006b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b5c:	6006      	str	r6, [r0, #0]
 8006b5e:	60c6      	str	r6, [r0, #12]
 8006b60:	69e6      	ldr	r6, [r4, #28]
 8006b62:	68f3      	ldr	r3, [r6, #12]
 8006b64:	b183      	cbz	r3, 8006b88 <_Balloc+0x50>
 8006b66:	69e3      	ldr	r3, [r4, #28]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b6e:	b9b8      	cbnz	r0, 8006ba0 <_Balloc+0x68>
 8006b70:	2101      	movs	r1, #1
 8006b72:	fa01 f605 	lsl.w	r6, r1, r5
 8006b76:	1d72      	adds	r2, r6, #5
 8006b78:	0092      	lsls	r2, r2, #2
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 fcca 	bl	8007514 <_calloc_r>
 8006b80:	b160      	cbz	r0, 8006b9c <_Balloc+0x64>
 8006b82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b86:	e00e      	b.n	8006ba6 <_Balloc+0x6e>
 8006b88:	2221      	movs	r2, #33	@ 0x21
 8006b8a:	2104      	movs	r1, #4
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 fcc1 	bl	8007514 <_calloc_r>
 8006b92:	69e3      	ldr	r3, [r4, #28]
 8006b94:	60f0      	str	r0, [r6, #12]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e4      	bne.n	8006b66 <_Balloc+0x2e>
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	6802      	ldr	r2, [r0, #0]
 8006ba2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bac:	e7f7      	b.n	8006b9e <_Balloc+0x66>
 8006bae:	bf00      	nop
 8006bb0:	08007961 	.word	0x08007961
 8006bb4:	080079e1 	.word	0x080079e1

08006bb8 <_Bfree>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	69c6      	ldr	r6, [r0, #28]
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	b976      	cbnz	r6, 8006be0 <_Bfree+0x28>
 8006bc2:	2010      	movs	r0, #16
 8006bc4:	f7ff ff02 	bl	80069cc <malloc>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	61e8      	str	r0, [r5, #28]
 8006bcc:	b920      	cbnz	r0, 8006bd8 <_Bfree+0x20>
 8006bce:	4b09      	ldr	r3, [pc, #36]	@ (8006bf4 <_Bfree+0x3c>)
 8006bd0:	4809      	ldr	r0, [pc, #36]	@ (8006bf8 <_Bfree+0x40>)
 8006bd2:	218f      	movs	r1, #143	@ 0x8f
 8006bd4:	f000 fc80 	bl	80074d8 <__assert_func>
 8006bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bdc:	6006      	str	r6, [r0, #0]
 8006bde:	60c6      	str	r6, [r0, #12]
 8006be0:	b13c      	cbz	r4, 8006bf2 <_Bfree+0x3a>
 8006be2:	69eb      	ldr	r3, [r5, #28]
 8006be4:	6862      	ldr	r2, [r4, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bec:	6021      	str	r1, [r4, #0]
 8006bee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	08007961 	.word	0x08007961
 8006bf8:	080079e1 	.word	0x080079e1

08006bfc <__multadd>:
 8006bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c00:	690d      	ldr	r5, [r1, #16]
 8006c02:	4607      	mov	r7, r0
 8006c04:	460c      	mov	r4, r1
 8006c06:	461e      	mov	r6, r3
 8006c08:	f101 0c14 	add.w	ip, r1, #20
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	f8dc 3000 	ldr.w	r3, [ip]
 8006c12:	b299      	uxth	r1, r3
 8006c14:	fb02 6101 	mla	r1, r2, r1, r6
 8006c18:	0c1e      	lsrs	r6, r3, #16
 8006c1a:	0c0b      	lsrs	r3, r1, #16
 8006c1c:	fb02 3306 	mla	r3, r2, r6, r3
 8006c20:	b289      	uxth	r1, r1
 8006c22:	3001      	adds	r0, #1
 8006c24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c28:	4285      	cmp	r5, r0
 8006c2a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c32:	dcec      	bgt.n	8006c0e <__multadd+0x12>
 8006c34:	b30e      	cbz	r6, 8006c7a <__multadd+0x7e>
 8006c36:	68a3      	ldr	r3, [r4, #8]
 8006c38:	42ab      	cmp	r3, r5
 8006c3a:	dc19      	bgt.n	8006c70 <__multadd+0x74>
 8006c3c:	6861      	ldr	r1, [r4, #4]
 8006c3e:	4638      	mov	r0, r7
 8006c40:	3101      	adds	r1, #1
 8006c42:	f7ff ff79 	bl	8006b38 <_Balloc>
 8006c46:	4680      	mov	r8, r0
 8006c48:	b928      	cbnz	r0, 8006c56 <__multadd+0x5a>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c80 <__multadd+0x84>)
 8006c4e:	480d      	ldr	r0, [pc, #52]	@ (8006c84 <__multadd+0x88>)
 8006c50:	21ba      	movs	r1, #186	@ 0xba
 8006c52:	f000 fc41 	bl	80074d8 <__assert_func>
 8006c56:	6922      	ldr	r2, [r4, #16]
 8006c58:	3202      	adds	r2, #2
 8006c5a:	f104 010c 	add.w	r1, r4, #12
 8006c5e:	0092      	lsls	r2, r2, #2
 8006c60:	300c      	adds	r0, #12
 8006c62:	f000 fc2b 	bl	80074bc <memcpy>
 8006c66:	4621      	mov	r1, r4
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f7ff ffa5 	bl	8006bb8 <_Bfree>
 8006c6e:	4644      	mov	r4, r8
 8006c70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c74:	3501      	adds	r5, #1
 8006c76:	615e      	str	r6, [r3, #20]
 8006c78:	6125      	str	r5, [r4, #16]
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c80:	080079d0 	.word	0x080079d0
 8006c84:	080079e1 	.word	0x080079e1

08006c88 <__hi0bits>:
 8006c88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	bf36      	itet	cc
 8006c90:	0403      	lslcc	r3, r0, #16
 8006c92:	2000      	movcs	r0, #0
 8006c94:	2010      	movcc	r0, #16
 8006c96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c9a:	bf3c      	itt	cc
 8006c9c:	021b      	lslcc	r3, r3, #8
 8006c9e:	3008      	addcc	r0, #8
 8006ca0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ca4:	bf3c      	itt	cc
 8006ca6:	011b      	lslcc	r3, r3, #4
 8006ca8:	3004      	addcc	r0, #4
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cae:	bf3c      	itt	cc
 8006cb0:	009b      	lslcc	r3, r3, #2
 8006cb2:	3002      	addcc	r0, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	db05      	blt.n	8006cc4 <__hi0bits+0x3c>
 8006cb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006cbc:	f100 0001 	add.w	r0, r0, #1
 8006cc0:	bf08      	it	eq
 8006cc2:	2020      	moveq	r0, #32
 8006cc4:	4770      	bx	lr

08006cc6 <__lo0bits>:
 8006cc6:	6803      	ldr	r3, [r0, #0]
 8006cc8:	4602      	mov	r2, r0
 8006cca:	f013 0007 	ands.w	r0, r3, #7
 8006cce:	d00b      	beq.n	8006ce8 <__lo0bits+0x22>
 8006cd0:	07d9      	lsls	r1, r3, #31
 8006cd2:	d421      	bmi.n	8006d18 <__lo0bits+0x52>
 8006cd4:	0798      	lsls	r0, r3, #30
 8006cd6:	bf49      	itett	mi
 8006cd8:	085b      	lsrmi	r3, r3, #1
 8006cda:	089b      	lsrpl	r3, r3, #2
 8006cdc:	2001      	movmi	r0, #1
 8006cde:	6013      	strmi	r3, [r2, #0]
 8006ce0:	bf5c      	itt	pl
 8006ce2:	6013      	strpl	r3, [r2, #0]
 8006ce4:	2002      	movpl	r0, #2
 8006ce6:	4770      	bx	lr
 8006ce8:	b299      	uxth	r1, r3
 8006cea:	b909      	cbnz	r1, 8006cf0 <__lo0bits+0x2a>
 8006cec:	0c1b      	lsrs	r3, r3, #16
 8006cee:	2010      	movs	r0, #16
 8006cf0:	b2d9      	uxtb	r1, r3
 8006cf2:	b909      	cbnz	r1, 8006cf8 <__lo0bits+0x32>
 8006cf4:	3008      	adds	r0, #8
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	0719      	lsls	r1, r3, #28
 8006cfa:	bf04      	itt	eq
 8006cfc:	091b      	lsreq	r3, r3, #4
 8006cfe:	3004      	addeq	r0, #4
 8006d00:	0799      	lsls	r1, r3, #30
 8006d02:	bf04      	itt	eq
 8006d04:	089b      	lsreq	r3, r3, #2
 8006d06:	3002      	addeq	r0, #2
 8006d08:	07d9      	lsls	r1, r3, #31
 8006d0a:	d403      	bmi.n	8006d14 <__lo0bits+0x4e>
 8006d0c:	085b      	lsrs	r3, r3, #1
 8006d0e:	f100 0001 	add.w	r0, r0, #1
 8006d12:	d003      	beq.n	8006d1c <__lo0bits+0x56>
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	4770      	bx	lr
 8006d18:	2000      	movs	r0, #0
 8006d1a:	4770      	bx	lr
 8006d1c:	2020      	movs	r0, #32
 8006d1e:	4770      	bx	lr

08006d20 <__i2b>:
 8006d20:	b510      	push	{r4, lr}
 8006d22:	460c      	mov	r4, r1
 8006d24:	2101      	movs	r1, #1
 8006d26:	f7ff ff07 	bl	8006b38 <_Balloc>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	b928      	cbnz	r0, 8006d3a <__i2b+0x1a>
 8006d2e:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <__i2b+0x24>)
 8006d30:	4805      	ldr	r0, [pc, #20]	@ (8006d48 <__i2b+0x28>)
 8006d32:	f240 1145 	movw	r1, #325	@ 0x145
 8006d36:	f000 fbcf 	bl	80074d8 <__assert_func>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	6144      	str	r4, [r0, #20]
 8006d3e:	6103      	str	r3, [r0, #16]
 8006d40:	bd10      	pop	{r4, pc}
 8006d42:	bf00      	nop
 8006d44:	080079d0 	.word	0x080079d0
 8006d48:	080079e1 	.word	0x080079e1

08006d4c <__multiply>:
 8006d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d50:	4614      	mov	r4, r2
 8006d52:	690a      	ldr	r2, [r1, #16]
 8006d54:	6923      	ldr	r3, [r4, #16]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	bfa8      	it	ge
 8006d5a:	4623      	movge	r3, r4
 8006d5c:	460f      	mov	r7, r1
 8006d5e:	bfa4      	itt	ge
 8006d60:	460c      	movge	r4, r1
 8006d62:	461f      	movge	r7, r3
 8006d64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006d68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006d6c:	68a3      	ldr	r3, [r4, #8]
 8006d6e:	6861      	ldr	r1, [r4, #4]
 8006d70:	eb0a 0609 	add.w	r6, sl, r9
 8006d74:	42b3      	cmp	r3, r6
 8006d76:	b085      	sub	sp, #20
 8006d78:	bfb8      	it	lt
 8006d7a:	3101      	addlt	r1, #1
 8006d7c:	f7ff fedc 	bl	8006b38 <_Balloc>
 8006d80:	b930      	cbnz	r0, 8006d90 <__multiply+0x44>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4b44      	ldr	r3, [pc, #272]	@ (8006e98 <__multiply+0x14c>)
 8006d86:	4845      	ldr	r0, [pc, #276]	@ (8006e9c <__multiply+0x150>)
 8006d88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006d8c:	f000 fba4 	bl	80074d8 <__assert_func>
 8006d90:	f100 0514 	add.w	r5, r0, #20
 8006d94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d98:	462b      	mov	r3, r5
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4543      	cmp	r3, r8
 8006d9e:	d321      	bcc.n	8006de4 <__multiply+0x98>
 8006da0:	f107 0114 	add.w	r1, r7, #20
 8006da4:	f104 0214 	add.w	r2, r4, #20
 8006da8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006dac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006db0:	9302      	str	r3, [sp, #8]
 8006db2:	1b13      	subs	r3, r2, r4
 8006db4:	3b15      	subs	r3, #21
 8006db6:	f023 0303 	bic.w	r3, r3, #3
 8006dba:	3304      	adds	r3, #4
 8006dbc:	f104 0715 	add.w	r7, r4, #21
 8006dc0:	42ba      	cmp	r2, r7
 8006dc2:	bf38      	it	cc
 8006dc4:	2304      	movcc	r3, #4
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	9b02      	ldr	r3, [sp, #8]
 8006dca:	9103      	str	r1, [sp, #12]
 8006dcc:	428b      	cmp	r3, r1
 8006dce:	d80c      	bhi.n	8006dea <__multiply+0x9e>
 8006dd0:	2e00      	cmp	r6, #0
 8006dd2:	dd03      	ble.n	8006ddc <__multiply+0x90>
 8006dd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d05b      	beq.n	8006e94 <__multiply+0x148>
 8006ddc:	6106      	str	r6, [r0, #16]
 8006dde:	b005      	add	sp, #20
 8006de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de4:	f843 2b04 	str.w	r2, [r3], #4
 8006de8:	e7d8      	b.n	8006d9c <__multiply+0x50>
 8006dea:	f8b1 a000 	ldrh.w	sl, [r1]
 8006dee:	f1ba 0f00 	cmp.w	sl, #0
 8006df2:	d024      	beq.n	8006e3e <__multiply+0xf2>
 8006df4:	f104 0e14 	add.w	lr, r4, #20
 8006df8:	46a9      	mov	r9, r5
 8006dfa:	f04f 0c00 	mov.w	ip, #0
 8006dfe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e02:	f8d9 3000 	ldr.w	r3, [r9]
 8006e06:	fa1f fb87 	uxth.w	fp, r7
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006e14:	f8d9 7000 	ldr.w	r7, [r9]
 8006e18:	4463      	add	r3, ip
 8006e1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e1e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006e22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e2c:	4572      	cmp	r2, lr
 8006e2e:	f849 3b04 	str.w	r3, [r9], #4
 8006e32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e36:	d8e2      	bhi.n	8006dfe <__multiply+0xb2>
 8006e38:	9b01      	ldr	r3, [sp, #4]
 8006e3a:	f845 c003 	str.w	ip, [r5, r3]
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e44:	3104      	adds	r1, #4
 8006e46:	f1b9 0f00 	cmp.w	r9, #0
 8006e4a:	d021      	beq.n	8006e90 <__multiply+0x144>
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	f104 0c14 	add.w	ip, r4, #20
 8006e52:	46ae      	mov	lr, r5
 8006e54:	f04f 0a00 	mov.w	sl, #0
 8006e58:	f8bc b000 	ldrh.w	fp, [ip]
 8006e5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006e60:	fb09 770b 	mla	r7, r9, fp, r7
 8006e64:	4457      	add	r7, sl
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e6c:	f84e 3b04 	str.w	r3, [lr], #4
 8006e70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e78:	f8be 3000 	ldrh.w	r3, [lr]
 8006e7c:	fb09 330a 	mla	r3, r9, sl, r3
 8006e80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006e84:	4562      	cmp	r2, ip
 8006e86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e8a:	d8e5      	bhi.n	8006e58 <__multiply+0x10c>
 8006e8c:	9f01      	ldr	r7, [sp, #4]
 8006e8e:	51eb      	str	r3, [r5, r7]
 8006e90:	3504      	adds	r5, #4
 8006e92:	e799      	b.n	8006dc8 <__multiply+0x7c>
 8006e94:	3e01      	subs	r6, #1
 8006e96:	e79b      	b.n	8006dd0 <__multiply+0x84>
 8006e98:	080079d0 	.word	0x080079d0
 8006e9c:	080079e1 	.word	0x080079e1

08006ea0 <__pow5mult>:
 8006ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea4:	4615      	mov	r5, r2
 8006ea6:	f012 0203 	ands.w	r2, r2, #3
 8006eaa:	4607      	mov	r7, r0
 8006eac:	460e      	mov	r6, r1
 8006eae:	d007      	beq.n	8006ec0 <__pow5mult+0x20>
 8006eb0:	4c25      	ldr	r4, [pc, #148]	@ (8006f48 <__pow5mult+0xa8>)
 8006eb2:	3a01      	subs	r2, #1
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006eba:	f7ff fe9f 	bl	8006bfc <__multadd>
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	10ad      	asrs	r5, r5, #2
 8006ec2:	d03d      	beq.n	8006f40 <__pow5mult+0xa0>
 8006ec4:	69fc      	ldr	r4, [r7, #28]
 8006ec6:	b97c      	cbnz	r4, 8006ee8 <__pow5mult+0x48>
 8006ec8:	2010      	movs	r0, #16
 8006eca:	f7ff fd7f 	bl	80069cc <malloc>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	61f8      	str	r0, [r7, #28]
 8006ed2:	b928      	cbnz	r0, 8006ee0 <__pow5mult+0x40>
 8006ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f4c <__pow5mult+0xac>)
 8006ed6:	481e      	ldr	r0, [pc, #120]	@ (8006f50 <__pow5mult+0xb0>)
 8006ed8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006edc:	f000 fafc 	bl	80074d8 <__assert_func>
 8006ee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ee4:	6004      	str	r4, [r0, #0]
 8006ee6:	60c4      	str	r4, [r0, #12]
 8006ee8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006eec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ef0:	b94c      	cbnz	r4, 8006f06 <__pow5mult+0x66>
 8006ef2:	f240 2171 	movw	r1, #625	@ 0x271
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	f7ff ff12 	bl	8006d20 <__i2b>
 8006efc:	2300      	movs	r3, #0
 8006efe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f02:	4604      	mov	r4, r0
 8006f04:	6003      	str	r3, [r0, #0]
 8006f06:	f04f 0900 	mov.w	r9, #0
 8006f0a:	07eb      	lsls	r3, r5, #31
 8006f0c:	d50a      	bpl.n	8006f24 <__pow5mult+0x84>
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4622      	mov	r2, r4
 8006f12:	4638      	mov	r0, r7
 8006f14:	f7ff ff1a 	bl	8006d4c <__multiply>
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f7ff fe4b 	bl	8006bb8 <_Bfree>
 8006f22:	4646      	mov	r6, r8
 8006f24:	106d      	asrs	r5, r5, #1
 8006f26:	d00b      	beq.n	8006f40 <__pow5mult+0xa0>
 8006f28:	6820      	ldr	r0, [r4, #0]
 8006f2a:	b938      	cbnz	r0, 8006f3c <__pow5mult+0x9c>
 8006f2c:	4622      	mov	r2, r4
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4638      	mov	r0, r7
 8006f32:	f7ff ff0b 	bl	8006d4c <__multiply>
 8006f36:	6020      	str	r0, [r4, #0]
 8006f38:	f8c0 9000 	str.w	r9, [r0]
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	e7e4      	b.n	8006f0a <__pow5mult+0x6a>
 8006f40:	4630      	mov	r0, r6
 8006f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f46:	bf00      	nop
 8006f48:	08007a3c 	.word	0x08007a3c
 8006f4c:	08007961 	.word	0x08007961
 8006f50:	080079e1 	.word	0x080079e1

08006f54 <__lshift>:
 8006f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f58:	460c      	mov	r4, r1
 8006f5a:	6849      	ldr	r1, [r1, #4]
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f62:	68a3      	ldr	r3, [r4, #8]
 8006f64:	4607      	mov	r7, r0
 8006f66:	4691      	mov	r9, r2
 8006f68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f6c:	f108 0601 	add.w	r6, r8, #1
 8006f70:	42b3      	cmp	r3, r6
 8006f72:	db0b      	blt.n	8006f8c <__lshift+0x38>
 8006f74:	4638      	mov	r0, r7
 8006f76:	f7ff fddf 	bl	8006b38 <_Balloc>
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	b948      	cbnz	r0, 8006f92 <__lshift+0x3e>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	4b28      	ldr	r3, [pc, #160]	@ (8007024 <__lshift+0xd0>)
 8006f82:	4829      	ldr	r0, [pc, #164]	@ (8007028 <__lshift+0xd4>)
 8006f84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f88:	f000 faa6 	bl	80074d8 <__assert_func>
 8006f8c:	3101      	adds	r1, #1
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	e7ee      	b.n	8006f70 <__lshift+0x1c>
 8006f92:	2300      	movs	r3, #0
 8006f94:	f100 0114 	add.w	r1, r0, #20
 8006f98:	f100 0210 	add.w	r2, r0, #16
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	4553      	cmp	r3, sl
 8006fa0:	db33      	blt.n	800700a <__lshift+0xb6>
 8006fa2:	6920      	ldr	r0, [r4, #16]
 8006fa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fa8:	f104 0314 	add.w	r3, r4, #20
 8006fac:	f019 091f 	ands.w	r9, r9, #31
 8006fb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fb8:	d02b      	beq.n	8007012 <__lshift+0xbe>
 8006fba:	f1c9 0e20 	rsb	lr, r9, #32
 8006fbe:	468a      	mov	sl, r1
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	fa00 f009 	lsl.w	r0, r0, r9
 8006fc8:	4310      	orrs	r0, r2
 8006fca:	f84a 0b04 	str.w	r0, [sl], #4
 8006fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd2:	459c      	cmp	ip, r3
 8006fd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fd8:	d8f3      	bhi.n	8006fc2 <__lshift+0x6e>
 8006fda:	ebac 0304 	sub.w	r3, ip, r4
 8006fde:	3b15      	subs	r3, #21
 8006fe0:	f023 0303 	bic.w	r3, r3, #3
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	f104 0015 	add.w	r0, r4, #21
 8006fea:	4584      	cmp	ip, r0
 8006fec:	bf38      	it	cc
 8006fee:	2304      	movcc	r3, #4
 8006ff0:	50ca      	str	r2, [r1, r3]
 8006ff2:	b10a      	cbz	r2, 8006ff8 <__lshift+0xa4>
 8006ff4:	f108 0602 	add.w	r6, r8, #2
 8006ff8:	3e01      	subs	r6, #1
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	612e      	str	r6, [r5, #16]
 8006ffe:	4621      	mov	r1, r4
 8007000:	f7ff fdda 	bl	8006bb8 <_Bfree>
 8007004:	4628      	mov	r0, r5
 8007006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700a:	f842 0f04 	str.w	r0, [r2, #4]!
 800700e:	3301      	adds	r3, #1
 8007010:	e7c5      	b.n	8006f9e <__lshift+0x4a>
 8007012:	3904      	subs	r1, #4
 8007014:	f853 2b04 	ldr.w	r2, [r3], #4
 8007018:	f841 2f04 	str.w	r2, [r1, #4]!
 800701c:	459c      	cmp	ip, r3
 800701e:	d8f9      	bhi.n	8007014 <__lshift+0xc0>
 8007020:	e7ea      	b.n	8006ff8 <__lshift+0xa4>
 8007022:	bf00      	nop
 8007024:	080079d0 	.word	0x080079d0
 8007028:	080079e1 	.word	0x080079e1

0800702c <__mcmp>:
 800702c:	690a      	ldr	r2, [r1, #16]
 800702e:	4603      	mov	r3, r0
 8007030:	6900      	ldr	r0, [r0, #16]
 8007032:	1a80      	subs	r0, r0, r2
 8007034:	b530      	push	{r4, r5, lr}
 8007036:	d10e      	bne.n	8007056 <__mcmp+0x2a>
 8007038:	3314      	adds	r3, #20
 800703a:	3114      	adds	r1, #20
 800703c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007040:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007044:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007048:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800704c:	4295      	cmp	r5, r2
 800704e:	d003      	beq.n	8007058 <__mcmp+0x2c>
 8007050:	d205      	bcs.n	800705e <__mcmp+0x32>
 8007052:	f04f 30ff 	mov.w	r0, #4294967295
 8007056:	bd30      	pop	{r4, r5, pc}
 8007058:	42a3      	cmp	r3, r4
 800705a:	d3f3      	bcc.n	8007044 <__mcmp+0x18>
 800705c:	e7fb      	b.n	8007056 <__mcmp+0x2a>
 800705e:	2001      	movs	r0, #1
 8007060:	e7f9      	b.n	8007056 <__mcmp+0x2a>
	...

08007064 <__mdiff>:
 8007064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007068:	4689      	mov	r9, r1
 800706a:	4606      	mov	r6, r0
 800706c:	4611      	mov	r1, r2
 800706e:	4648      	mov	r0, r9
 8007070:	4614      	mov	r4, r2
 8007072:	f7ff ffdb 	bl	800702c <__mcmp>
 8007076:	1e05      	subs	r5, r0, #0
 8007078:	d112      	bne.n	80070a0 <__mdiff+0x3c>
 800707a:	4629      	mov	r1, r5
 800707c:	4630      	mov	r0, r6
 800707e:	f7ff fd5b 	bl	8006b38 <_Balloc>
 8007082:	4602      	mov	r2, r0
 8007084:	b928      	cbnz	r0, 8007092 <__mdiff+0x2e>
 8007086:	4b3f      	ldr	r3, [pc, #252]	@ (8007184 <__mdiff+0x120>)
 8007088:	f240 2137 	movw	r1, #567	@ 0x237
 800708c:	483e      	ldr	r0, [pc, #248]	@ (8007188 <__mdiff+0x124>)
 800708e:	f000 fa23 	bl	80074d8 <__assert_func>
 8007092:	2301      	movs	r3, #1
 8007094:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007098:	4610      	mov	r0, r2
 800709a:	b003      	add	sp, #12
 800709c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a0:	bfbc      	itt	lt
 80070a2:	464b      	movlt	r3, r9
 80070a4:	46a1      	movlt	r9, r4
 80070a6:	4630      	mov	r0, r6
 80070a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070ac:	bfba      	itte	lt
 80070ae:	461c      	movlt	r4, r3
 80070b0:	2501      	movlt	r5, #1
 80070b2:	2500      	movge	r5, #0
 80070b4:	f7ff fd40 	bl	8006b38 <_Balloc>
 80070b8:	4602      	mov	r2, r0
 80070ba:	b918      	cbnz	r0, 80070c4 <__mdiff+0x60>
 80070bc:	4b31      	ldr	r3, [pc, #196]	@ (8007184 <__mdiff+0x120>)
 80070be:	f240 2145 	movw	r1, #581	@ 0x245
 80070c2:	e7e3      	b.n	800708c <__mdiff+0x28>
 80070c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070c8:	6926      	ldr	r6, [r4, #16]
 80070ca:	60c5      	str	r5, [r0, #12]
 80070cc:	f109 0310 	add.w	r3, r9, #16
 80070d0:	f109 0514 	add.w	r5, r9, #20
 80070d4:	f104 0e14 	add.w	lr, r4, #20
 80070d8:	f100 0b14 	add.w	fp, r0, #20
 80070dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80070e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	46d9      	mov	r9, fp
 80070e8:	f04f 0c00 	mov.w	ip, #0
 80070ec:	9b01      	ldr	r3, [sp, #4]
 80070ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80070f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	fa1f f38a 	uxth.w	r3, sl
 80070fc:	4619      	mov	r1, r3
 80070fe:	b283      	uxth	r3, r0
 8007100:	1acb      	subs	r3, r1, r3
 8007102:	0c00      	lsrs	r0, r0, #16
 8007104:	4463      	add	r3, ip
 8007106:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800710a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800710e:	b29b      	uxth	r3, r3
 8007110:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007114:	4576      	cmp	r6, lr
 8007116:	f849 3b04 	str.w	r3, [r9], #4
 800711a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800711e:	d8e5      	bhi.n	80070ec <__mdiff+0x88>
 8007120:	1b33      	subs	r3, r6, r4
 8007122:	3b15      	subs	r3, #21
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	3415      	adds	r4, #21
 800712a:	3304      	adds	r3, #4
 800712c:	42a6      	cmp	r6, r4
 800712e:	bf38      	it	cc
 8007130:	2304      	movcc	r3, #4
 8007132:	441d      	add	r5, r3
 8007134:	445b      	add	r3, fp
 8007136:	461e      	mov	r6, r3
 8007138:	462c      	mov	r4, r5
 800713a:	4544      	cmp	r4, r8
 800713c:	d30e      	bcc.n	800715c <__mdiff+0xf8>
 800713e:	f108 0103 	add.w	r1, r8, #3
 8007142:	1b49      	subs	r1, r1, r5
 8007144:	f021 0103 	bic.w	r1, r1, #3
 8007148:	3d03      	subs	r5, #3
 800714a:	45a8      	cmp	r8, r5
 800714c:	bf38      	it	cc
 800714e:	2100      	movcc	r1, #0
 8007150:	440b      	add	r3, r1
 8007152:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007156:	b191      	cbz	r1, 800717e <__mdiff+0x11a>
 8007158:	6117      	str	r7, [r2, #16]
 800715a:	e79d      	b.n	8007098 <__mdiff+0x34>
 800715c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007160:	46e6      	mov	lr, ip
 8007162:	0c08      	lsrs	r0, r1, #16
 8007164:	fa1c fc81 	uxtah	ip, ip, r1
 8007168:	4471      	add	r1, lr
 800716a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800716e:	b289      	uxth	r1, r1
 8007170:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007174:	f846 1b04 	str.w	r1, [r6], #4
 8007178:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800717c:	e7dd      	b.n	800713a <__mdiff+0xd6>
 800717e:	3f01      	subs	r7, #1
 8007180:	e7e7      	b.n	8007152 <__mdiff+0xee>
 8007182:	bf00      	nop
 8007184:	080079d0 	.word	0x080079d0
 8007188:	080079e1 	.word	0x080079e1

0800718c <__d2b>:
 800718c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007190:	460f      	mov	r7, r1
 8007192:	2101      	movs	r1, #1
 8007194:	ec59 8b10 	vmov	r8, r9, d0
 8007198:	4616      	mov	r6, r2
 800719a:	f7ff fccd 	bl	8006b38 <_Balloc>
 800719e:	4604      	mov	r4, r0
 80071a0:	b930      	cbnz	r0, 80071b0 <__d2b+0x24>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4b23      	ldr	r3, [pc, #140]	@ (8007234 <__d2b+0xa8>)
 80071a6:	4824      	ldr	r0, [pc, #144]	@ (8007238 <__d2b+0xac>)
 80071a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80071ac:	f000 f994 	bl	80074d8 <__assert_func>
 80071b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071b8:	b10d      	cbz	r5, 80071be <__d2b+0x32>
 80071ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	f1b8 0300 	subs.w	r3, r8, #0
 80071c4:	d023      	beq.n	800720e <__d2b+0x82>
 80071c6:	4668      	mov	r0, sp
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	f7ff fd7c 	bl	8006cc6 <__lo0bits>
 80071ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071d2:	b1d0      	cbz	r0, 800720a <__d2b+0x7e>
 80071d4:	f1c0 0320 	rsb	r3, r0, #32
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	430b      	orrs	r3, r1
 80071de:	40c2      	lsrs	r2, r0
 80071e0:	6163      	str	r3, [r4, #20]
 80071e2:	9201      	str	r2, [sp, #4]
 80071e4:	9b01      	ldr	r3, [sp, #4]
 80071e6:	61a3      	str	r3, [r4, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bf0c      	ite	eq
 80071ec:	2201      	moveq	r2, #1
 80071ee:	2202      	movne	r2, #2
 80071f0:	6122      	str	r2, [r4, #16]
 80071f2:	b1a5      	cbz	r5, 800721e <__d2b+0x92>
 80071f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80071f8:	4405      	add	r5, r0
 80071fa:	603d      	str	r5, [r7, #0]
 80071fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007200:	6030      	str	r0, [r6, #0]
 8007202:	4620      	mov	r0, r4
 8007204:	b003      	add	sp, #12
 8007206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800720a:	6161      	str	r1, [r4, #20]
 800720c:	e7ea      	b.n	80071e4 <__d2b+0x58>
 800720e:	a801      	add	r0, sp, #4
 8007210:	f7ff fd59 	bl	8006cc6 <__lo0bits>
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	6163      	str	r3, [r4, #20]
 8007218:	3020      	adds	r0, #32
 800721a:	2201      	movs	r2, #1
 800721c:	e7e8      	b.n	80071f0 <__d2b+0x64>
 800721e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007222:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007226:	6038      	str	r0, [r7, #0]
 8007228:	6918      	ldr	r0, [r3, #16]
 800722a:	f7ff fd2d 	bl	8006c88 <__hi0bits>
 800722e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007232:	e7e5      	b.n	8007200 <__d2b+0x74>
 8007234:	080079d0 	.word	0x080079d0
 8007238:	080079e1 	.word	0x080079e1

0800723c <__sflush_r>:
 800723c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007244:	0716      	lsls	r6, r2, #28
 8007246:	4605      	mov	r5, r0
 8007248:	460c      	mov	r4, r1
 800724a:	d454      	bmi.n	80072f6 <__sflush_r+0xba>
 800724c:	684b      	ldr	r3, [r1, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	dc02      	bgt.n	8007258 <__sflush_r+0x1c>
 8007252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	dd48      	ble.n	80072ea <__sflush_r+0xae>
 8007258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800725a:	2e00      	cmp	r6, #0
 800725c:	d045      	beq.n	80072ea <__sflush_r+0xae>
 800725e:	2300      	movs	r3, #0
 8007260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007264:	682f      	ldr	r7, [r5, #0]
 8007266:	6a21      	ldr	r1, [r4, #32]
 8007268:	602b      	str	r3, [r5, #0]
 800726a:	d030      	beq.n	80072ce <__sflush_r+0x92>
 800726c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800726e:	89a3      	ldrh	r3, [r4, #12]
 8007270:	0759      	lsls	r1, r3, #29
 8007272:	d505      	bpl.n	8007280 <__sflush_r+0x44>
 8007274:	6863      	ldr	r3, [r4, #4]
 8007276:	1ad2      	subs	r2, r2, r3
 8007278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800727a:	b10b      	cbz	r3, 8007280 <__sflush_r+0x44>
 800727c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	2300      	movs	r3, #0
 8007282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007284:	6a21      	ldr	r1, [r4, #32]
 8007286:	4628      	mov	r0, r5
 8007288:	47b0      	blx	r6
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	d106      	bne.n	800729e <__sflush_r+0x62>
 8007290:	6829      	ldr	r1, [r5, #0]
 8007292:	291d      	cmp	r1, #29
 8007294:	d82b      	bhi.n	80072ee <__sflush_r+0xb2>
 8007296:	4a2a      	ldr	r2, [pc, #168]	@ (8007340 <__sflush_r+0x104>)
 8007298:	410a      	asrs	r2, r1
 800729a:	07d6      	lsls	r6, r2, #31
 800729c:	d427      	bmi.n	80072ee <__sflush_r+0xb2>
 800729e:	2200      	movs	r2, #0
 80072a0:	6062      	str	r2, [r4, #4]
 80072a2:	04d9      	lsls	r1, r3, #19
 80072a4:	6922      	ldr	r2, [r4, #16]
 80072a6:	6022      	str	r2, [r4, #0]
 80072a8:	d504      	bpl.n	80072b4 <__sflush_r+0x78>
 80072aa:	1c42      	adds	r2, r0, #1
 80072ac:	d101      	bne.n	80072b2 <__sflush_r+0x76>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	b903      	cbnz	r3, 80072b4 <__sflush_r+0x78>
 80072b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80072b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072b6:	602f      	str	r7, [r5, #0]
 80072b8:	b1b9      	cbz	r1, 80072ea <__sflush_r+0xae>
 80072ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072be:	4299      	cmp	r1, r3
 80072c0:	d002      	beq.n	80072c8 <__sflush_r+0x8c>
 80072c2:	4628      	mov	r0, r5
 80072c4:	f7ff fb38 	bl	8006938 <_free_r>
 80072c8:	2300      	movs	r3, #0
 80072ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80072cc:	e00d      	b.n	80072ea <__sflush_r+0xae>
 80072ce:	2301      	movs	r3, #1
 80072d0:	4628      	mov	r0, r5
 80072d2:	47b0      	blx	r6
 80072d4:	4602      	mov	r2, r0
 80072d6:	1c50      	adds	r0, r2, #1
 80072d8:	d1c9      	bne.n	800726e <__sflush_r+0x32>
 80072da:	682b      	ldr	r3, [r5, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0c6      	beq.n	800726e <__sflush_r+0x32>
 80072e0:	2b1d      	cmp	r3, #29
 80072e2:	d001      	beq.n	80072e8 <__sflush_r+0xac>
 80072e4:	2b16      	cmp	r3, #22
 80072e6:	d11e      	bne.n	8007326 <__sflush_r+0xea>
 80072e8:	602f      	str	r7, [r5, #0]
 80072ea:	2000      	movs	r0, #0
 80072ec:	e022      	b.n	8007334 <__sflush_r+0xf8>
 80072ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072f2:	b21b      	sxth	r3, r3
 80072f4:	e01b      	b.n	800732e <__sflush_r+0xf2>
 80072f6:	690f      	ldr	r7, [r1, #16]
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	d0f6      	beq.n	80072ea <__sflush_r+0xae>
 80072fc:	0793      	lsls	r3, r2, #30
 80072fe:	680e      	ldr	r6, [r1, #0]
 8007300:	bf08      	it	eq
 8007302:	694b      	ldreq	r3, [r1, #20]
 8007304:	600f      	str	r7, [r1, #0]
 8007306:	bf18      	it	ne
 8007308:	2300      	movne	r3, #0
 800730a:	eba6 0807 	sub.w	r8, r6, r7
 800730e:	608b      	str	r3, [r1, #8]
 8007310:	f1b8 0f00 	cmp.w	r8, #0
 8007314:	dde9      	ble.n	80072ea <__sflush_r+0xae>
 8007316:	6a21      	ldr	r1, [r4, #32]
 8007318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800731a:	4643      	mov	r3, r8
 800731c:	463a      	mov	r2, r7
 800731e:	4628      	mov	r0, r5
 8007320:	47b0      	blx	r6
 8007322:	2800      	cmp	r0, #0
 8007324:	dc08      	bgt.n	8007338 <__sflush_r+0xfc>
 8007326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800732e:	81a3      	strh	r3, [r4, #12]
 8007330:	f04f 30ff 	mov.w	r0, #4294967295
 8007334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007338:	4407      	add	r7, r0
 800733a:	eba8 0800 	sub.w	r8, r8, r0
 800733e:	e7e7      	b.n	8007310 <__sflush_r+0xd4>
 8007340:	dfbffffe 	.word	0xdfbffffe

08007344 <_fflush_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	690b      	ldr	r3, [r1, #16]
 8007348:	4605      	mov	r5, r0
 800734a:	460c      	mov	r4, r1
 800734c:	b913      	cbnz	r3, 8007354 <_fflush_r+0x10>
 800734e:	2500      	movs	r5, #0
 8007350:	4628      	mov	r0, r5
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	b118      	cbz	r0, 800735e <_fflush_r+0x1a>
 8007356:	6a03      	ldr	r3, [r0, #32]
 8007358:	b90b      	cbnz	r3, 800735e <_fflush_r+0x1a>
 800735a:	f7fe fab5 	bl	80058c8 <__sinit>
 800735e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0f3      	beq.n	800734e <_fflush_r+0xa>
 8007366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007368:	07d0      	lsls	r0, r2, #31
 800736a:	d404      	bmi.n	8007376 <_fflush_r+0x32>
 800736c:	0599      	lsls	r1, r3, #22
 800736e:	d402      	bmi.n	8007376 <_fflush_r+0x32>
 8007370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007372:	f7fe fc92 	bl	8005c9a <__retarget_lock_acquire_recursive>
 8007376:	4628      	mov	r0, r5
 8007378:	4621      	mov	r1, r4
 800737a:	f7ff ff5f 	bl	800723c <__sflush_r>
 800737e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007380:	07da      	lsls	r2, r3, #31
 8007382:	4605      	mov	r5, r0
 8007384:	d4e4      	bmi.n	8007350 <_fflush_r+0xc>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	059b      	lsls	r3, r3, #22
 800738a:	d4e1      	bmi.n	8007350 <_fflush_r+0xc>
 800738c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800738e:	f7fe fc85 	bl	8005c9c <__retarget_lock_release_recursive>
 8007392:	e7dd      	b.n	8007350 <_fflush_r+0xc>

08007394 <__swhatbuf_r>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	460c      	mov	r4, r1
 8007398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739c:	2900      	cmp	r1, #0
 800739e:	b096      	sub	sp, #88	@ 0x58
 80073a0:	4615      	mov	r5, r2
 80073a2:	461e      	mov	r6, r3
 80073a4:	da0d      	bge.n	80073c2 <__swhatbuf_r+0x2e>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80073ac:	f04f 0100 	mov.w	r1, #0
 80073b0:	bf14      	ite	ne
 80073b2:	2340      	movne	r3, #64	@ 0x40
 80073b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80073b8:	2000      	movs	r0, #0
 80073ba:	6031      	str	r1, [r6, #0]
 80073bc:	602b      	str	r3, [r5, #0]
 80073be:	b016      	add	sp, #88	@ 0x58
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
 80073c2:	466a      	mov	r2, sp
 80073c4:	f000 f848 	bl	8007458 <_fstat_r>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	dbec      	blt.n	80073a6 <__swhatbuf_r+0x12>
 80073cc:	9901      	ldr	r1, [sp, #4]
 80073ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80073d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80073d6:	4259      	negs	r1, r3
 80073d8:	4159      	adcs	r1, r3
 80073da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073de:	e7eb      	b.n	80073b8 <__swhatbuf_r+0x24>

080073e0 <__smakebuf_r>:
 80073e0:	898b      	ldrh	r3, [r1, #12]
 80073e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073e4:	079d      	lsls	r5, r3, #30
 80073e6:	4606      	mov	r6, r0
 80073e8:	460c      	mov	r4, r1
 80073ea:	d507      	bpl.n	80073fc <__smakebuf_r+0x1c>
 80073ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	6123      	str	r3, [r4, #16]
 80073f4:	2301      	movs	r3, #1
 80073f6:	6163      	str	r3, [r4, #20]
 80073f8:	b003      	add	sp, #12
 80073fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fc:	ab01      	add	r3, sp, #4
 80073fe:	466a      	mov	r2, sp
 8007400:	f7ff ffc8 	bl	8007394 <__swhatbuf_r>
 8007404:	9f00      	ldr	r7, [sp, #0]
 8007406:	4605      	mov	r5, r0
 8007408:	4639      	mov	r1, r7
 800740a:	4630      	mov	r0, r6
 800740c:	f7ff fb08 	bl	8006a20 <_malloc_r>
 8007410:	b948      	cbnz	r0, 8007426 <__smakebuf_r+0x46>
 8007412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007416:	059a      	lsls	r2, r3, #22
 8007418:	d4ee      	bmi.n	80073f8 <__smakebuf_r+0x18>
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	f043 0302 	orr.w	r3, r3, #2
 8007422:	81a3      	strh	r3, [r4, #12]
 8007424:	e7e2      	b.n	80073ec <__smakebuf_r+0xc>
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	6020      	str	r0, [r4, #0]
 800742a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	9b01      	ldr	r3, [sp, #4]
 8007432:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007436:	b15b      	cbz	r3, 8007450 <__smakebuf_r+0x70>
 8007438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800743c:	4630      	mov	r0, r6
 800743e:	f000 f81d 	bl	800747c <_isatty_r>
 8007442:	b128      	cbz	r0, 8007450 <__smakebuf_r+0x70>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f023 0303 	bic.w	r3, r3, #3
 800744a:	f043 0301 	orr.w	r3, r3, #1
 800744e:	81a3      	strh	r3, [r4, #12]
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	431d      	orrs	r5, r3
 8007454:	81a5      	strh	r5, [r4, #12]
 8007456:	e7cf      	b.n	80073f8 <__smakebuf_r+0x18>

08007458 <_fstat_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d07      	ldr	r5, [pc, #28]	@ (8007478 <_fstat_r+0x20>)
 800745c:	2300      	movs	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	4611      	mov	r1, r2
 8007464:	602b      	str	r3, [r5, #0]
 8007466:	f7fa f8b7 	bl	80015d8 <_fstat>
 800746a:	1c43      	adds	r3, r0, #1
 800746c:	d102      	bne.n	8007474 <_fstat_r+0x1c>
 800746e:	682b      	ldr	r3, [r5, #0]
 8007470:	b103      	cbz	r3, 8007474 <_fstat_r+0x1c>
 8007472:	6023      	str	r3, [r4, #0]
 8007474:	bd38      	pop	{r3, r4, r5, pc}
 8007476:	bf00      	nop
 8007478:	200005a0 	.word	0x200005a0

0800747c <_isatty_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	4d06      	ldr	r5, [pc, #24]	@ (8007498 <_isatty_r+0x1c>)
 8007480:	2300      	movs	r3, #0
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	602b      	str	r3, [r5, #0]
 8007488:	f7fa f8b6 	bl	80015f8 <_isatty>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_isatty_r+0x1a>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_isatty_r+0x1a>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	200005a0 	.word	0x200005a0

0800749c <_sbrk_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4d06      	ldr	r5, [pc, #24]	@ (80074b8 <_sbrk_r+0x1c>)
 80074a0:	2300      	movs	r3, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7fa f8be 	bl	8001628 <_sbrk>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_sbrk_r+0x1a>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_sbrk_r+0x1a>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	200005a0 	.word	0x200005a0

080074bc <memcpy>:
 80074bc:	440a      	add	r2, r1
 80074be:	4291      	cmp	r1, r2
 80074c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80074c4:	d100      	bne.n	80074c8 <memcpy+0xc>
 80074c6:	4770      	bx	lr
 80074c8:	b510      	push	{r4, lr}
 80074ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d2:	4291      	cmp	r1, r2
 80074d4:	d1f9      	bne.n	80074ca <memcpy+0xe>
 80074d6:	bd10      	pop	{r4, pc}

080074d8 <__assert_func>:
 80074d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074da:	4614      	mov	r4, r2
 80074dc:	461a      	mov	r2, r3
 80074de:	4b09      	ldr	r3, [pc, #36]	@ (8007504 <__assert_func+0x2c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4605      	mov	r5, r0
 80074e4:	68d8      	ldr	r0, [r3, #12]
 80074e6:	b954      	cbnz	r4, 80074fe <__assert_func+0x26>
 80074e8:	4b07      	ldr	r3, [pc, #28]	@ (8007508 <__assert_func+0x30>)
 80074ea:	461c      	mov	r4, r3
 80074ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074f0:	9100      	str	r1, [sp, #0]
 80074f2:	462b      	mov	r3, r5
 80074f4:	4905      	ldr	r1, [pc, #20]	@ (800750c <__assert_func+0x34>)
 80074f6:	f000 f841 	bl	800757c <fiprintf>
 80074fa:	f000 f851 	bl	80075a0 <abort>
 80074fe:	4b04      	ldr	r3, [pc, #16]	@ (8007510 <__assert_func+0x38>)
 8007500:	e7f4      	b.n	80074ec <__assert_func+0x14>
 8007502:	bf00      	nop
 8007504:	20000018 	.word	0x20000018
 8007508:	08007b7d 	.word	0x08007b7d
 800750c:	08007b4f 	.word	0x08007b4f
 8007510:	08007b42 	.word	0x08007b42

08007514 <_calloc_r>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	fba1 5402 	umull	r5, r4, r1, r2
 800751a:	b93c      	cbnz	r4, 800752c <_calloc_r+0x18>
 800751c:	4629      	mov	r1, r5
 800751e:	f7ff fa7f 	bl	8006a20 <_malloc_r>
 8007522:	4606      	mov	r6, r0
 8007524:	b928      	cbnz	r0, 8007532 <_calloc_r+0x1e>
 8007526:	2600      	movs	r6, #0
 8007528:	4630      	mov	r0, r6
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	220c      	movs	r2, #12
 800752e:	6002      	str	r2, [r0, #0]
 8007530:	e7f9      	b.n	8007526 <_calloc_r+0x12>
 8007532:	462a      	mov	r2, r5
 8007534:	4621      	mov	r1, r4
 8007536:	f7fe fb33 	bl	8005ba0 <memset>
 800753a:	e7f5      	b.n	8007528 <_calloc_r+0x14>

0800753c <__ascii_mbtowc>:
 800753c:	b082      	sub	sp, #8
 800753e:	b901      	cbnz	r1, 8007542 <__ascii_mbtowc+0x6>
 8007540:	a901      	add	r1, sp, #4
 8007542:	b142      	cbz	r2, 8007556 <__ascii_mbtowc+0x1a>
 8007544:	b14b      	cbz	r3, 800755a <__ascii_mbtowc+0x1e>
 8007546:	7813      	ldrb	r3, [r2, #0]
 8007548:	600b      	str	r3, [r1, #0]
 800754a:	7812      	ldrb	r2, [r2, #0]
 800754c:	1e10      	subs	r0, r2, #0
 800754e:	bf18      	it	ne
 8007550:	2001      	movne	r0, #1
 8007552:	b002      	add	sp, #8
 8007554:	4770      	bx	lr
 8007556:	4610      	mov	r0, r2
 8007558:	e7fb      	b.n	8007552 <__ascii_mbtowc+0x16>
 800755a:	f06f 0001 	mvn.w	r0, #1
 800755e:	e7f8      	b.n	8007552 <__ascii_mbtowc+0x16>

08007560 <__ascii_wctomb>:
 8007560:	4603      	mov	r3, r0
 8007562:	4608      	mov	r0, r1
 8007564:	b141      	cbz	r1, 8007578 <__ascii_wctomb+0x18>
 8007566:	2aff      	cmp	r2, #255	@ 0xff
 8007568:	d904      	bls.n	8007574 <__ascii_wctomb+0x14>
 800756a:	228a      	movs	r2, #138	@ 0x8a
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	f04f 30ff 	mov.w	r0, #4294967295
 8007572:	4770      	bx	lr
 8007574:	700a      	strb	r2, [r1, #0]
 8007576:	2001      	movs	r0, #1
 8007578:	4770      	bx	lr
	...

0800757c <fiprintf>:
 800757c:	b40e      	push	{r1, r2, r3}
 800757e:	b503      	push	{r0, r1, lr}
 8007580:	4601      	mov	r1, r0
 8007582:	ab03      	add	r3, sp, #12
 8007584:	4805      	ldr	r0, [pc, #20]	@ (800759c <fiprintf+0x20>)
 8007586:	f853 2b04 	ldr.w	r2, [r3], #4
 800758a:	6800      	ldr	r0, [r0, #0]
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	f000 f837 	bl	8007600 <_vfiprintf_r>
 8007592:	b002      	add	sp, #8
 8007594:	f85d eb04 	ldr.w	lr, [sp], #4
 8007598:	b003      	add	sp, #12
 800759a:	4770      	bx	lr
 800759c:	20000018 	.word	0x20000018

080075a0 <abort>:
 80075a0:	b508      	push	{r3, lr}
 80075a2:	2006      	movs	r0, #6
 80075a4:	f000 f96c 	bl	8007880 <raise>
 80075a8:	2001      	movs	r0, #1
 80075aa:	f7f9 ffc5 	bl	8001538 <_exit>

080075ae <__sfputc_r>:
 80075ae:	6893      	ldr	r3, [r2, #8]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	b410      	push	{r4}
 80075b6:	6093      	str	r3, [r2, #8]
 80075b8:	da08      	bge.n	80075cc <__sfputc_r+0x1e>
 80075ba:	6994      	ldr	r4, [r2, #24]
 80075bc:	42a3      	cmp	r3, r4
 80075be:	db01      	blt.n	80075c4 <__sfputc_r+0x16>
 80075c0:	290a      	cmp	r1, #10
 80075c2:	d103      	bne.n	80075cc <__sfputc_r+0x1e>
 80075c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075c8:	f7fe ba55 	b.w	8005a76 <__swbuf_r>
 80075cc:	6813      	ldr	r3, [r2, #0]
 80075ce:	1c58      	adds	r0, r3, #1
 80075d0:	6010      	str	r0, [r2, #0]
 80075d2:	7019      	strb	r1, [r3, #0]
 80075d4:	4608      	mov	r0, r1
 80075d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075da:	4770      	bx	lr

080075dc <__sfputs_r>:
 80075dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075de:	4606      	mov	r6, r0
 80075e0:	460f      	mov	r7, r1
 80075e2:	4614      	mov	r4, r2
 80075e4:	18d5      	adds	r5, r2, r3
 80075e6:	42ac      	cmp	r4, r5
 80075e8:	d101      	bne.n	80075ee <__sfputs_r+0x12>
 80075ea:	2000      	movs	r0, #0
 80075ec:	e007      	b.n	80075fe <__sfputs_r+0x22>
 80075ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f2:	463a      	mov	r2, r7
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7ff ffda 	bl	80075ae <__sfputc_r>
 80075fa:	1c43      	adds	r3, r0, #1
 80075fc:	d1f3      	bne.n	80075e6 <__sfputs_r+0xa>
 80075fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007600 <_vfiprintf_r>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	460d      	mov	r5, r1
 8007606:	b09d      	sub	sp, #116	@ 0x74
 8007608:	4614      	mov	r4, r2
 800760a:	4698      	mov	r8, r3
 800760c:	4606      	mov	r6, r0
 800760e:	b118      	cbz	r0, 8007618 <_vfiprintf_r+0x18>
 8007610:	6a03      	ldr	r3, [r0, #32]
 8007612:	b90b      	cbnz	r3, 8007618 <_vfiprintf_r+0x18>
 8007614:	f7fe f958 	bl	80058c8 <__sinit>
 8007618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800761a:	07d9      	lsls	r1, r3, #31
 800761c:	d405      	bmi.n	800762a <_vfiprintf_r+0x2a>
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	059a      	lsls	r2, r3, #22
 8007622:	d402      	bmi.n	800762a <_vfiprintf_r+0x2a>
 8007624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007626:	f7fe fb38 	bl	8005c9a <__retarget_lock_acquire_recursive>
 800762a:	89ab      	ldrh	r3, [r5, #12]
 800762c:	071b      	lsls	r3, r3, #28
 800762e:	d501      	bpl.n	8007634 <_vfiprintf_r+0x34>
 8007630:	692b      	ldr	r3, [r5, #16]
 8007632:	b99b      	cbnz	r3, 800765c <_vfiprintf_r+0x5c>
 8007634:	4629      	mov	r1, r5
 8007636:	4630      	mov	r0, r6
 8007638:	f7fe fa5c 	bl	8005af4 <__swsetup_r>
 800763c:	b170      	cbz	r0, 800765c <_vfiprintf_r+0x5c>
 800763e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007640:	07dc      	lsls	r4, r3, #31
 8007642:	d504      	bpl.n	800764e <_vfiprintf_r+0x4e>
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	b01d      	add	sp, #116	@ 0x74
 800764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764e:	89ab      	ldrh	r3, [r5, #12]
 8007650:	0598      	lsls	r0, r3, #22
 8007652:	d4f7      	bmi.n	8007644 <_vfiprintf_r+0x44>
 8007654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007656:	f7fe fb21 	bl	8005c9c <__retarget_lock_release_recursive>
 800765a:	e7f3      	b.n	8007644 <_vfiprintf_r+0x44>
 800765c:	2300      	movs	r3, #0
 800765e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007660:	2320      	movs	r3, #32
 8007662:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007666:	f8cd 800c 	str.w	r8, [sp, #12]
 800766a:	2330      	movs	r3, #48	@ 0x30
 800766c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800781c <_vfiprintf_r+0x21c>
 8007670:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007674:	f04f 0901 	mov.w	r9, #1
 8007678:	4623      	mov	r3, r4
 800767a:	469a      	mov	sl, r3
 800767c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007680:	b10a      	cbz	r2, 8007686 <_vfiprintf_r+0x86>
 8007682:	2a25      	cmp	r2, #37	@ 0x25
 8007684:	d1f9      	bne.n	800767a <_vfiprintf_r+0x7a>
 8007686:	ebba 0b04 	subs.w	fp, sl, r4
 800768a:	d00b      	beq.n	80076a4 <_vfiprintf_r+0xa4>
 800768c:	465b      	mov	r3, fp
 800768e:	4622      	mov	r2, r4
 8007690:	4629      	mov	r1, r5
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ffa2 	bl	80075dc <__sfputs_r>
 8007698:	3001      	adds	r0, #1
 800769a:	f000 80a7 	beq.w	80077ec <_vfiprintf_r+0x1ec>
 800769e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076a0:	445a      	add	r2, fp
 80076a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80076a4:	f89a 3000 	ldrb.w	r3, [sl]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 809f 	beq.w	80077ec <_vfiprintf_r+0x1ec>
 80076ae:	2300      	movs	r3, #0
 80076b0:	f04f 32ff 	mov.w	r2, #4294967295
 80076b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076b8:	f10a 0a01 	add.w	sl, sl, #1
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	9307      	str	r3, [sp, #28]
 80076c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80076c6:	4654      	mov	r4, sl
 80076c8:	2205      	movs	r2, #5
 80076ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ce:	4853      	ldr	r0, [pc, #332]	@ (800781c <_vfiprintf_r+0x21c>)
 80076d0:	f7f8 fd7e 	bl	80001d0 <memchr>
 80076d4:	9a04      	ldr	r2, [sp, #16]
 80076d6:	b9d8      	cbnz	r0, 8007710 <_vfiprintf_r+0x110>
 80076d8:	06d1      	lsls	r1, r2, #27
 80076da:	bf44      	itt	mi
 80076dc:	2320      	movmi	r3, #32
 80076de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076e2:	0713      	lsls	r3, r2, #28
 80076e4:	bf44      	itt	mi
 80076e6:	232b      	movmi	r3, #43	@ 0x2b
 80076e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076ec:	f89a 3000 	ldrb.w	r3, [sl]
 80076f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80076f2:	d015      	beq.n	8007720 <_vfiprintf_r+0x120>
 80076f4:	9a07      	ldr	r2, [sp, #28]
 80076f6:	4654      	mov	r4, sl
 80076f8:	2000      	movs	r0, #0
 80076fa:	f04f 0c0a 	mov.w	ip, #10
 80076fe:	4621      	mov	r1, r4
 8007700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007704:	3b30      	subs	r3, #48	@ 0x30
 8007706:	2b09      	cmp	r3, #9
 8007708:	d94b      	bls.n	80077a2 <_vfiprintf_r+0x1a2>
 800770a:	b1b0      	cbz	r0, 800773a <_vfiprintf_r+0x13a>
 800770c:	9207      	str	r2, [sp, #28]
 800770e:	e014      	b.n	800773a <_vfiprintf_r+0x13a>
 8007710:	eba0 0308 	sub.w	r3, r0, r8
 8007714:	fa09 f303 	lsl.w	r3, r9, r3
 8007718:	4313      	orrs	r3, r2
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	46a2      	mov	sl, r4
 800771e:	e7d2      	b.n	80076c6 <_vfiprintf_r+0xc6>
 8007720:	9b03      	ldr	r3, [sp, #12]
 8007722:	1d19      	adds	r1, r3, #4
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	9103      	str	r1, [sp, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	bfbb      	ittet	lt
 800772c:	425b      	neglt	r3, r3
 800772e:	f042 0202 	orrlt.w	r2, r2, #2
 8007732:	9307      	strge	r3, [sp, #28]
 8007734:	9307      	strlt	r3, [sp, #28]
 8007736:	bfb8      	it	lt
 8007738:	9204      	strlt	r2, [sp, #16]
 800773a:	7823      	ldrb	r3, [r4, #0]
 800773c:	2b2e      	cmp	r3, #46	@ 0x2e
 800773e:	d10a      	bne.n	8007756 <_vfiprintf_r+0x156>
 8007740:	7863      	ldrb	r3, [r4, #1]
 8007742:	2b2a      	cmp	r3, #42	@ 0x2a
 8007744:	d132      	bne.n	80077ac <_vfiprintf_r+0x1ac>
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	9203      	str	r2, [sp, #12]
 800774e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007752:	3402      	adds	r4, #2
 8007754:	9305      	str	r3, [sp, #20]
 8007756:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800782c <_vfiprintf_r+0x22c>
 800775a:	7821      	ldrb	r1, [r4, #0]
 800775c:	2203      	movs	r2, #3
 800775e:	4650      	mov	r0, sl
 8007760:	f7f8 fd36 	bl	80001d0 <memchr>
 8007764:	b138      	cbz	r0, 8007776 <_vfiprintf_r+0x176>
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	eba0 000a 	sub.w	r0, r0, sl
 800776c:	2240      	movs	r2, #64	@ 0x40
 800776e:	4082      	lsls	r2, r0
 8007770:	4313      	orrs	r3, r2
 8007772:	3401      	adds	r4, #1
 8007774:	9304      	str	r3, [sp, #16]
 8007776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777a:	4829      	ldr	r0, [pc, #164]	@ (8007820 <_vfiprintf_r+0x220>)
 800777c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007780:	2206      	movs	r2, #6
 8007782:	f7f8 fd25 	bl	80001d0 <memchr>
 8007786:	2800      	cmp	r0, #0
 8007788:	d03f      	beq.n	800780a <_vfiprintf_r+0x20a>
 800778a:	4b26      	ldr	r3, [pc, #152]	@ (8007824 <_vfiprintf_r+0x224>)
 800778c:	bb1b      	cbnz	r3, 80077d6 <_vfiprintf_r+0x1d6>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	3307      	adds	r3, #7
 8007792:	f023 0307 	bic.w	r3, r3, #7
 8007796:	3308      	adds	r3, #8
 8007798:	9303      	str	r3, [sp, #12]
 800779a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779c:	443b      	add	r3, r7
 800779e:	9309      	str	r3, [sp, #36]	@ 0x24
 80077a0:	e76a      	b.n	8007678 <_vfiprintf_r+0x78>
 80077a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077a6:	460c      	mov	r4, r1
 80077a8:	2001      	movs	r0, #1
 80077aa:	e7a8      	b.n	80076fe <_vfiprintf_r+0xfe>
 80077ac:	2300      	movs	r3, #0
 80077ae:	3401      	adds	r4, #1
 80077b0:	9305      	str	r3, [sp, #20]
 80077b2:	4619      	mov	r1, r3
 80077b4:	f04f 0c0a 	mov.w	ip, #10
 80077b8:	4620      	mov	r0, r4
 80077ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077be:	3a30      	subs	r2, #48	@ 0x30
 80077c0:	2a09      	cmp	r2, #9
 80077c2:	d903      	bls.n	80077cc <_vfiprintf_r+0x1cc>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0c6      	beq.n	8007756 <_vfiprintf_r+0x156>
 80077c8:	9105      	str	r1, [sp, #20]
 80077ca:	e7c4      	b.n	8007756 <_vfiprintf_r+0x156>
 80077cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80077d0:	4604      	mov	r4, r0
 80077d2:	2301      	movs	r3, #1
 80077d4:	e7f0      	b.n	80077b8 <_vfiprintf_r+0x1b8>
 80077d6:	ab03      	add	r3, sp, #12
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	462a      	mov	r2, r5
 80077dc:	4b12      	ldr	r3, [pc, #72]	@ (8007828 <_vfiprintf_r+0x228>)
 80077de:	a904      	add	r1, sp, #16
 80077e0:	4630      	mov	r0, r6
 80077e2:	f7fd fc2d 	bl	8005040 <_printf_float>
 80077e6:	4607      	mov	r7, r0
 80077e8:	1c78      	adds	r0, r7, #1
 80077ea:	d1d6      	bne.n	800779a <_vfiprintf_r+0x19a>
 80077ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077ee:	07d9      	lsls	r1, r3, #31
 80077f0:	d405      	bmi.n	80077fe <_vfiprintf_r+0x1fe>
 80077f2:	89ab      	ldrh	r3, [r5, #12]
 80077f4:	059a      	lsls	r2, r3, #22
 80077f6:	d402      	bmi.n	80077fe <_vfiprintf_r+0x1fe>
 80077f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077fa:	f7fe fa4f 	bl	8005c9c <__retarget_lock_release_recursive>
 80077fe:	89ab      	ldrh	r3, [r5, #12]
 8007800:	065b      	lsls	r3, r3, #25
 8007802:	f53f af1f 	bmi.w	8007644 <_vfiprintf_r+0x44>
 8007806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007808:	e71e      	b.n	8007648 <_vfiprintf_r+0x48>
 800780a:	ab03      	add	r3, sp, #12
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	462a      	mov	r2, r5
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <_vfiprintf_r+0x228>)
 8007812:	a904      	add	r1, sp, #16
 8007814:	4630      	mov	r0, r6
 8007816:	f7fd feab 	bl	8005570 <_printf_i>
 800781a:	e7e4      	b.n	80077e6 <_vfiprintf_r+0x1e6>
 800781c:	08007c7f 	.word	0x08007c7f
 8007820:	08007c89 	.word	0x08007c89
 8007824:	08005041 	.word	0x08005041
 8007828:	080075dd 	.word	0x080075dd
 800782c:	08007c85 	.word	0x08007c85

08007830 <_raise_r>:
 8007830:	291f      	cmp	r1, #31
 8007832:	b538      	push	{r3, r4, r5, lr}
 8007834:	4605      	mov	r5, r0
 8007836:	460c      	mov	r4, r1
 8007838:	d904      	bls.n	8007844 <_raise_r+0x14>
 800783a:	2316      	movs	r3, #22
 800783c:	6003      	str	r3, [r0, #0]
 800783e:	f04f 30ff 	mov.w	r0, #4294967295
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007846:	b112      	cbz	r2, 800784e <_raise_r+0x1e>
 8007848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800784c:	b94b      	cbnz	r3, 8007862 <_raise_r+0x32>
 800784e:	4628      	mov	r0, r5
 8007850:	f000 f830 	bl	80078b4 <_getpid_r>
 8007854:	4622      	mov	r2, r4
 8007856:	4601      	mov	r1, r0
 8007858:	4628      	mov	r0, r5
 800785a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800785e:	f000 b817 	b.w	8007890 <_kill_r>
 8007862:	2b01      	cmp	r3, #1
 8007864:	d00a      	beq.n	800787c <_raise_r+0x4c>
 8007866:	1c59      	adds	r1, r3, #1
 8007868:	d103      	bne.n	8007872 <_raise_r+0x42>
 800786a:	2316      	movs	r3, #22
 800786c:	6003      	str	r3, [r0, #0]
 800786e:	2001      	movs	r0, #1
 8007870:	e7e7      	b.n	8007842 <_raise_r+0x12>
 8007872:	2100      	movs	r1, #0
 8007874:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007878:	4620      	mov	r0, r4
 800787a:	4798      	blx	r3
 800787c:	2000      	movs	r0, #0
 800787e:	e7e0      	b.n	8007842 <_raise_r+0x12>

08007880 <raise>:
 8007880:	4b02      	ldr	r3, [pc, #8]	@ (800788c <raise+0xc>)
 8007882:	4601      	mov	r1, r0
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	f7ff bfd3 	b.w	8007830 <_raise_r>
 800788a:	bf00      	nop
 800788c:	20000018 	.word	0x20000018

08007890 <_kill_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d07      	ldr	r5, [pc, #28]	@ (80078b0 <_kill_r+0x20>)
 8007894:	2300      	movs	r3, #0
 8007896:	4604      	mov	r4, r0
 8007898:	4608      	mov	r0, r1
 800789a:	4611      	mov	r1, r2
 800789c:	602b      	str	r3, [r5, #0]
 800789e:	f7f9 fe3b 	bl	8001518 <_kill>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	d102      	bne.n	80078ac <_kill_r+0x1c>
 80078a6:	682b      	ldr	r3, [r5, #0]
 80078a8:	b103      	cbz	r3, 80078ac <_kill_r+0x1c>
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	bd38      	pop	{r3, r4, r5, pc}
 80078ae:	bf00      	nop
 80078b0:	200005a0 	.word	0x200005a0

080078b4 <_getpid_r>:
 80078b4:	f7f9 be28 	b.w	8001508 <_getpid>

080078b8 <_init>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	bf00      	nop
 80078bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078be:	bc08      	pop	{r3}
 80078c0:	469e      	mov	lr, r3
 80078c2:	4770      	bx	lr

080078c4 <_fini>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	bf00      	nop
 80078c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ca:	bc08      	pop	{r3}
 80078cc:	469e      	mov	lr, r3
 80078ce:	4770      	bx	lr
